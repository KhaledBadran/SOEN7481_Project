[
  {
    "name": "tests_\u0026_unit_tests_\u0026_test_cells.py",
    "testCases": [
      {
        "name": "TestCells",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_getters",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_volume",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_ids",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_rotations",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_translations",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_instances",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_getters",
                  "[]"
                ],
                [
                  "test_volume",
                  "[]"
                ],
                [
                  "test_ids",
                  "[]"
                ],
                [
                  "test_rotations",
                  "[]"
                ],
                [
                  "test_translations",
                  "[]"
                ],
                [
                  "test_instances",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_getters",
                  "false"
                ],
                [
                  "test_volume",
                  "false"
                ],
                [
                  "test_ids",
                  "false"
                ],
                [
                  "test_rotations",
                  "false"
                ],
                [
                  "test_translations",
                  "false"
                ],
                [
                  "test_instances",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_getters",
                  "false"
                ],
                [
                  "test_volume",
                  "false"
                ],
                [
                  "test_ids",
                  "false"
                ],
                [
                  "test_rotations",
                  "false"
                ],
                [
                  "test_translations",
                  "false"
                ],
                [
                  "test_instances",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_getters",
                  "false"
                ],
                [
                  "test_volume",
                  "false"
                ],
                [
                  "test_ids",
                  "false"
                ],
                [
                  "test_rotations",
                  "true"
                ],
                [
                  "test_translations",
                  "true"
                ],
                [
                  "test_instances",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_getters",
                  "false"
                ],
                [
                  "test_volume",
                  "false"
                ],
                [
                  "test_ids",
                  "false"
                ],
                [
                  "test_rotations",
                  "false"
                ],
                [
                  "test_translations",
                  "false"
                ],
                [
                  "test_instances",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_getters",
                "false"
              ],
              [
                "test_volume",
                "false"
              ],
              [
                "test_ids",
                "false"
              ],
              [
                "test_rotations",
                "false"
              ],
              [
                "test_translations",
                "false"
              ],
              [
                "test_instances",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_getters",
                "false"
              ],
              [
                "test_volume",
                "false"
              ],
              [
                "test_ids",
                "false"
              ],
              [
                "test_rotations",
                "false"
              ],
              [
                "test_translations",
                "false"
              ],
              [
                "test_instances",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_getters",
                []
              ],
              [
                "test_volume",
                []
              ],
              [
                "test_ids",
                []
              ],
              [
                "test_rotations",
                []
              ],
              [
                "test_translations",
                []
              ],
              [
                "test_instances",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_getters",
                "false"
              ],
              [
                "test_volume",
                "false"
              ],
              [
                "test_ids",
                "false"
              ],
              [
                "test_rotations",
                "false"
              ],
              [
                "test_translations",
                "false"
              ],
              [
                "test_instances",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_getters",
                "true"
              ],
              [
                "test_volume",
                "true"
              ],
              [
                "test_ids",
                "true"
              ],
              [
                "test_rotations",
                "false"
              ],
              [
                "test_translations",
                "false"
              ],
              [
                "test_instances",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_getters",
                  "0"
                ],
                [
                  "test_volume",
                  "0"
                ],
                [
                  "test_ids",
                  "0"
                ],
                [
                  "test_rotations",
                  "0"
                ],
                [
                  "test_translations",
                  "0"
                ],
                [
                  "test_instances",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_getters",
                  "0"
                ],
                [
                  "test_volume",
                  "0"
                ],
                [
                  "test_ids",
                  "0"
                ],
                [
                  "test_rotations",
                  "0"
                ],
                [
                  "test_translations",
                  "0"
                ],
                [
                  "test_instances",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_getters",
                "false"
              ],
              [
                "test_volume",
                "false"
              ],
              [
                "test_ids",
                "false"
              ],
              [
                "test_rotations",
                "false"
              ],
              [
                "test_translations",
                "false"
              ],
              [
                "test_instances",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_getters",
                "false"
              ],
              [
                "test_volume",
                "false"
              ],
              [
                "test_ids",
                "false"
              ],
              [
                "test_rotations",
                "false"
              ],
              [
                "test_translations",
                "false"
              ],
              [
                "test_instances",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_getters",
                "3"
              ],
              [
                "test_volume",
                "2"
              ],
              [
                "test_ids",
                "2"
              ],
              [
                "test_rotations",
                "6"
              ],
              [
                "test_translations",
                "3"
              ],
              [
                "test_instances",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_getters",
                []
              ],
              [
                "test_volume",
                []
              ],
              [
                "test_ids",
                [
                  "cell_2",
                  "cell_3"
                ]
              ],
              [
                "test_rotations",
                [
                  "material",
                  "rotation",
                  "universe",
                  "radians",
                  "degrees"
                ]
              ],
              [
                "test_translations",
                [
                  "output",
                  "material",
                  "universe",
                  "translation"
                ]
              ],
              [
                "test_instances",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_getters",
                [
                  "self.cell"
                ]
              ],
              [
                "test_volume",
                [
                  "self.cell"
                ]
              ],
              [
                "test_ids",
                [
                  "self.cell"
                ]
              ],
              [
                "test_rotations",
                [
                  "self.cell"
                ]
              ],
              [
                "test_translations",
                [
                  "self.cell"
                ]
              ],
              [
                "test_instances",
                [
                  "self.cell"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.48854371474513214,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_instances",
                  "test_rotations",
                  0.3153852681660588
                ],
                [
                  "test_getters",
                  "test_rotations",
                  0.330483916522005
                ],
                [
                  "test_volume",
                  "test_rotations",
                  0.3511111720525589
                ],
                [
                  "test_getters",
                  "test_instances",
                  0.6362090102803518
                ],
                [
                  "test_ids",
                  "test_rotations",
                  0.4577973211245529
                ],
                [
                  "test_getters",
                  "test_ids",
                  0.4889058650817127
                ],
                [
                  "test_ids",
                  "test_instances",
                  0.42768868524785647
                ],
                [
                  "test_getters",
                  "test_translations",
                  0.3503292361635921
                ],
                [
                  "test_volume",
                  "test_translations",
                  0.4049155956077707
                ],
                [
                  "test_instances",
                  "test_translations",
                  0.3514687415803205
                ],
                [
                  "test_ids",
                  "test_translations",
                  0.5179513148644966
                ],
                [
                  "test_ids",
                  "test_volume",
                  0.47304419364015327
                ],
                [
                  "test_getters",
                  "test_volume",
                  0.6963730592072542
                ],
                [
                  "test_volume",
                  "test_instances",
                  0.6475182677614472
                ],
                [
                  "test_rotations",
                  "test_translations",
                  0.8789740738768506
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_getters",
                "false"
              ],
              [
                "test_volume",
                "false"
              ],
              [
                "test_ids",
                "false"
              ],
              [
                "test_rotations",
                "false"
              ],
              [
                "test_translations",
                "false"
              ],
              [
                "test_instances",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 6
      }
    ]
  },
  {
    "name": "tests_\u0026_unit_tests_\u0026_test_options.py",
    "testCases": [
      {
        "name": "TestDefaultInit",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_default_num_azim",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_default_max_iters",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_default_polar_spacing",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_default_track_spacing",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_default_num_azim",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_default_tolerance",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_default_num_omp_threads",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_default_num_gpu_threads",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_default_num_thread_blocks",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_default_num_azim",
                  "[]"
                ],
                [
                  "test_default_max_iters",
                  "[]"
                ],
                [
                  "test_default_polar_spacing",
                  "[]"
                ],
                [
                  "test_default_track_spacing",
                  "[]"
                ],
                [
                  "test_default_num_azim",
                  "[]"
                ],
                [
                  "test_default_tolerance",
                  "[]"
                ],
                [
                  "test_default_num_omp_threads",
                  "[]"
                ],
                [
                  "test_default_num_gpu_threads",
                  "[]"
                ],
                [
                  "test_default_num_thread_blocks",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_default_num_azim",
                  "false"
                ],
                [
                  "test_default_max_iters",
                  "false"
                ],
                [
                  "test_default_polar_spacing",
                  "false"
                ],
                [
                  "test_default_track_spacing",
                  "false"
                ],
                [
                  "test_default_num_azim",
                  "false"
                ],
                [
                  "test_default_tolerance",
                  "false"
                ],
                [
                  "test_default_num_omp_threads",
                  "false"
                ],
                [
                  "test_default_num_gpu_threads",
                  "false"
                ],
                [
                  "test_default_num_thread_blocks",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_default_num_azim",
                  "false"
                ],
                [
                  "test_default_max_iters",
                  "false"
                ],
                [
                  "test_default_polar_spacing",
                  "false"
                ],
                [
                  "test_default_track_spacing",
                  "false"
                ],
                [
                  "test_default_num_azim",
                  "false"
                ],
                [
                  "test_default_tolerance",
                  "false"
                ],
                [
                  "test_default_num_omp_threads",
                  "false"
                ],
                [
                  "test_default_num_gpu_threads",
                  "false"
                ],
                [
                  "test_default_num_thread_blocks",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_default_num_azim",
                  "false"
                ],
                [
                  "test_default_max_iters",
                  "false"
                ],
                [
                  "test_default_polar_spacing",
                  "false"
                ],
                [
                  "test_default_track_spacing",
                  "false"
                ],
                [
                  "test_default_num_azim",
                  "false"
                ],
                [
                  "test_default_tolerance",
                  "false"
                ],
                [
                  "test_default_num_omp_threads",
                  "false"
                ],
                [
                  "test_default_num_gpu_threads",
                  "false"
                ],
                [
                  "test_default_num_thread_blocks",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_default_num_azim",
                  "false"
                ],
                [
                  "test_default_max_iters",
                  "false"
                ],
                [
                  "test_default_polar_spacing",
                  "false"
                ],
                [
                  "test_default_track_spacing",
                  "false"
                ],
                [
                  "test_default_num_azim",
                  "false"
                ],
                [
                  "test_default_tolerance",
                  "false"
                ],
                [
                  "test_default_num_omp_threads",
                  "false"
                ],
                [
                  "test_default_num_gpu_threads",
                  "false"
                ],
                [
                  "test_default_num_thread_blocks",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_default_num_azim",
                "false"
              ],
              [
                "test_default_max_iters",
                "false"
              ],
              [
                "test_default_polar_spacing",
                "false"
              ],
              [
                "test_default_track_spacing",
                "false"
              ],
              [
                "test_default_num_azim",
                "false"
              ],
              [
                "test_default_tolerance",
                "false"
              ],
              [
                "test_default_num_omp_threads",
                "false"
              ],
              [
                "test_default_num_gpu_threads",
                "false"
              ],
              [
                "test_default_num_thread_blocks",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": true,
            "detail": [
              [
                "test_default_num_azim",
                "false"
              ],
              [
                "test_default_max_iters",
                "false"
              ],
              [
                "test_default_polar_spacing",
                "false"
              ],
              [
                "test_default_track_spacing",
                "false"
              ],
              [
                "test_default_num_azim",
                "false"
              ],
              [
                "test_default_tolerance",
                "false"
              ],
              [
                "test_default_num_omp_threads",
                "true"
              ],
              [
                "test_default_num_gpu_threads",
                "false"
              ],
              [
                "test_default_num_thread_blocks",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_default_num_azim",
                []
              ],
              [
                "test_default_max_iters",
                []
              ],
              [
                "test_default_polar_spacing",
                []
              ],
              [
                "test_default_track_spacing",
                []
              ],
              [
                "test_default_num_azim",
                []
              ],
              [
                "test_default_tolerance",
                []
              ],
              [
                "test_default_num_omp_threads",
                []
              ],
              [
                "test_default_num_gpu_threads",
                []
              ],
              [
                "test_default_num_thread_blocks",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_default_num_azim",
                "false"
              ],
              [
                "test_default_max_iters",
                "false"
              ],
              [
                "test_default_polar_spacing",
                "false"
              ],
              [
                "test_default_track_spacing",
                "false"
              ],
              [
                "test_default_num_azim",
                "false"
              ],
              [
                "test_default_tolerance",
                "false"
              ],
              [
                "test_default_num_omp_threads",
                "false"
              ],
              [
                "test_default_num_gpu_threads",
                "false"
              ],
              [
                "test_default_num_thread_blocks",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_default_num_azim",
                "true"
              ],
              [
                "test_default_max_iters",
                "true"
              ],
              [
                "test_default_polar_spacing",
                "true"
              ],
              [
                "test_default_track_spacing",
                "true"
              ],
              [
                "test_default_num_azim",
                "true"
              ],
              [
                "test_default_tolerance",
                "true"
              ],
              [
                "test_default_num_omp_threads",
                "false"
              ],
              [
                "test_default_num_gpu_threads",
                "true"
              ],
              [
                "test_default_num_thread_blocks",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_default_num_azim",
                  "0"
                ],
                [
                  "test_default_max_iters",
                  "0"
                ],
                [
                  "test_default_polar_spacing",
                  "0"
                ],
                [
                  "test_default_track_spacing",
                  "0"
                ],
                [
                  "test_default_num_azim",
                  "0"
                ],
                [
                  "test_default_tolerance",
                  "0"
                ],
                [
                  "test_default_num_omp_threads",
                  "0"
                ],
                [
                  "test_default_num_gpu_threads",
                  "0"
                ],
                [
                  "test_default_num_thread_blocks",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_default_num_azim",
                  "0"
                ],
                [
                  "test_default_max_iters",
                  "0"
                ],
                [
                  "test_default_polar_spacing",
                  "0"
                ],
                [
                  "test_default_track_spacing",
                  "0"
                ],
                [
                  "test_default_num_azim",
                  "0"
                ],
                [
                  "test_default_tolerance",
                  "0"
                ],
                [
                  "test_default_num_omp_threads",
                  "0"
                ],
                [
                  "test_default_num_gpu_threads",
                  "0"
                ],
                [
                  "test_default_num_thread_blocks",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_default_num_azim",
                "false"
              ],
              [
                "test_default_max_iters",
                "false"
              ],
              [
                "test_default_polar_spacing",
                "false"
              ],
              [
                "test_default_track_spacing",
                "false"
              ],
              [
                "test_default_num_azim",
                "false"
              ],
              [
                "test_default_tolerance",
                "false"
              ],
              [
                "test_default_num_omp_threads",
                "false"
              ],
              [
                "test_default_num_gpu_threads",
                "false"
              ],
              [
                "test_default_num_thread_blocks",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_default_num_azim",
                "false"
              ],
              [
                "test_default_max_iters",
                "false"
              ],
              [
                "test_default_polar_spacing",
                "false"
              ],
              [
                "test_default_track_spacing",
                "false"
              ],
              [
                "test_default_num_azim",
                "false"
              ],
              [
                "test_default_tolerance",
                "false"
              ],
              [
                "test_default_num_omp_threads",
                "false"
              ],
              [
                "test_default_num_gpu_threads",
                "false"
              ],
              [
                "test_default_num_thread_blocks",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_default_num_azim",
                "1"
              ],
              [
                "test_default_max_iters",
                "1"
              ],
              [
                "test_default_polar_spacing",
                "1"
              ],
              [
                "test_default_track_spacing",
                "1"
              ],
              [
                "test_default_num_azim",
                "1"
              ],
              [
                "test_default_tolerance",
                "1"
              ],
              [
                "test_default_num_omp_threads",
                "1"
              ],
              [
                "test_default_num_gpu_threads",
                "1"
              ],
              [
                "test_default_num_thread_blocks",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_default_num_azim",
                []
              ],
              [
                "test_default_max_iters",
                []
              ],
              [
                "test_default_polar_spacing",
                []
              ],
              [
                "test_default_track_spacing",
                []
              ],
              [
                "test_default_num_azim",
                []
              ],
              [
                "test_default_tolerance",
                []
              ],
              [
                "test_default_num_omp_threads",
                [
                  "default_num_threads"
                ]
              ],
              [
                "test_default_num_gpu_threads",
                []
              ],
              [
                "test_default_num_thread_blocks",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_default_num_azim",
                [
                  "self._default_options"
                ]
              ],
              [
                "test_default_max_iters",
                [
                  "self._default_options"
                ]
              ],
              [
                "test_default_polar_spacing",
                [
                  "self._default_options"
                ]
              ],
              [
                "test_default_track_spacing",
                [
                  "self._default_options"
                ]
              ],
              [
                "test_default_num_azim",
                [
                  "self._default_options"
                ]
              ],
              [
                "test_default_tolerance",
                [
                  "self._default_options"
                ]
              ],
              [
                "test_default_num_omp_threads",
                [
                  "self._default_options"
                ]
              ],
              [
                "test_default_num_gpu_threads",
                [
                  "self._default_options"
                ]
              ],
              [
                "test_default_num_thread_blocks",
                [
                  "self._default_options"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.662498530415863,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_default_polar_spacing",
                  "test_default_tolerance",
                  0.7190924955066749
                ],
                [
                  "test_default_num_omp_threads",
                  "test_default_num_thread_blocks",
                  0.7310560193138023
                ],
                [
                  "test_default_max_iters",
                  "test_default_tolerance",
                  0.6726727939963125
                ],
                [
                  "test_default_polar_spacing",
                  "test_default_num_thread_blocks",
                  0.5657789498610037
                ],
                [
                  "test_default_max_iters",
                  "test_default_num_thread_blocks",
                  0.5821817364274594
                ],
                [
                  "test_default_num_azim",
                  "test_default_tolerance",
                  0.6726727939963125
                ],
                [
                  "test_default_num_azim",
                  "test_default_num_thread_blocks",
                  0.7938841860374447
                ],
                [
                  "test_default_track_spacing",
                  "test_default_num_omp_threads",
                  0.44339817517393193
                ],
                [
                  "test_default_num_thread_blocks",
                  "test_default_num_gpu_threads",
                  0.8295150620062532
                ],
                [
                  "test_default_num_azim",
                  "test_default_track_spacing",
                  0.6669729688499156
                ],
                [
                  "test_default_num_azim",
                  "test_default_max_iters",
                  0.6470588235294118
                ],
                [
                  "test_default_num_azim",
                  "test_default_track_spacing",
                  0.6669729688499156
                ],
                [
                  "test_default_num_azim",
                  "test_default_max_iters",
                  0.6470588235294118
                ],
                [
                  "test_default_num_omp_threads",
                  "test_default_num_gpu_threads",
                  0.7270768712447323
                ],
                [
                  "test_default_num_azim",
                  "test_default_tolerance",
                  0.6726727939963125
                ],
                [
                  "test_default_num_azim",
                  "test_default_num_omp_threads",
                  0.716932357038527
                ],
                [
                  "test_default_track_spacing",
                  "test_default_max_iters",
                  0.6669729688499156
                ],
                [
                  "test_default_num_azim",
                  "test_default_num_gpu_threads",
                  0.8134892168199607
                ],
                [
                  "test_default_num_azim",
                  "test_default_polar_spacing",
                  0.6288281455225324
                ],
                [
                  "test_default_polar_spacing",
                  "test_default_num_omp_threads",
                  0.41803980857497064
                ],
                [
                  "test_default_num_azim",
                  "test_default_num_azim",
                  0.9411764705882353
                ],
                [
                  "test_default_max_iters",
                  "test_default_num_omp_threads",
                  0.4301594142231162
                ],
                [
                  "test_default_num_azim",
                  "test_default_polar_spacing",
                  0.6288281455225324
                ],
                [
                  "test_default_track_spacing",
                  "test_default_num_thread_blocks",
                  0.600099198148979
                ],
                [
                  "test_default_tolerance",
                  "test_default_num_gpu_threads",
                  0.6201736729460423
                ],
                [
                  "test_default_num_azim",
                  "test_default_num_omp_threads",
                  0.716932357038527
                ],
                [
                  "test_default_num_azim",
                  "test_default_num_gpu_threads",
                  0.8134892168199607
                ],
                [
                  "test_default_max_iters",
                  "test_default_num_gpu_threads",
                  0.5965587590013045
                ],
                [
                  "test_default_track_spacing",
                  "test_default_tolerance",
                  0.76271276980969
                ],
                [
                  "test_default_tolerance",
                  "test_default_num_omp_threads",
                  0.4099217579581476
                ],
                [
                  "test_default_polar_spacing",
                  "test_default_num_gpu_threads",
                  0.5797509043642028
                ],
                [
                  "test_default_num_azim",
                  "test_default_num_thread_blocks",
                  0.7938841860374447
                ],
                [
                  "test_default_polar_spacing",
                  "test_default_max_iters",
                  0.6288281455225324
                ],
                [
                  "test_default_track_spacing",
                  "test_default_num_gpu_threads",
                  0.6149186938124421
                ],
                [
                  "test_default_tolerance",
                  "test_default_num_thread_blocks",
                  0.6052275326688025
                ],
                [
                  "test_default_polar_spacing",
                  "test_default_track_spacing",
                  0.8249579113843055
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_default_num_azim",
                "false"
              ],
              [
                "test_default_max_iters",
                "false"
              ],
              [
                "test_default_polar_spacing",
                "false"
              ],
              [
                "test_default_track_spacing",
                "false"
              ],
              [
                "test_default_num_azim",
                "false"
              ],
              [
                "test_default_tolerance",
                "false"
              ],
              [
                "test_default_num_omp_threads",
                "false"
              ],
              [
                "test_default_num_gpu_threads",
                "false"
              ],
              [
                "test_default_num_thread_blocks",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 9
      },
      {
        "name": "TestCustomInit",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_custom_track_spacing",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_custom_max_iters",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_custom_num_omp_threads",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_custom_num_azim",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_custom_tolerance",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_custom_polar_spacing",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_custom_num_thread_blocks",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_custom_num_gpu_threads",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_custom_num_azim",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_custom_track_spacing",
                  "[]"
                ],
                [
                  "test_custom_max_iters",
                  "[]"
                ],
                [
                  "test_custom_num_omp_threads",
                  "[]"
                ],
                [
                  "test_custom_num_azim",
                  "[]"
                ],
                [
                  "test_custom_tolerance",
                  "[]"
                ],
                [
                  "test_custom_polar_spacing",
                  "[]"
                ],
                [
                  "test_custom_num_thread_blocks",
                  "[]"
                ],
                [
                  "test_custom_num_gpu_threads",
                  "[]"
                ],
                [
                  "test_custom_num_azim",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_custom_track_spacing",
                  "false"
                ],
                [
                  "test_custom_max_iters",
                  "false"
                ],
                [
                  "test_custom_num_omp_threads",
                  "false"
                ],
                [
                  "test_custom_num_azim",
                  "false"
                ],
                [
                  "test_custom_tolerance",
                  "false"
                ],
                [
                  "test_custom_polar_spacing",
                  "false"
                ],
                [
                  "test_custom_num_thread_blocks",
                  "false"
                ],
                [
                  "test_custom_num_gpu_threads",
                  "false"
                ],
                [
                  "test_custom_num_azim",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_custom_track_spacing",
                  "false"
                ],
                [
                  "test_custom_max_iters",
                  "false"
                ],
                [
                  "test_custom_num_omp_threads",
                  "false"
                ],
                [
                  "test_custom_num_azim",
                  "false"
                ],
                [
                  "test_custom_tolerance",
                  "false"
                ],
                [
                  "test_custom_polar_spacing",
                  "false"
                ],
                [
                  "test_custom_num_thread_blocks",
                  "false"
                ],
                [
                  "test_custom_num_gpu_threads",
                  "false"
                ],
                [
                  "test_custom_num_azim",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_custom_track_spacing",
                  "false"
                ],
                [
                  "test_custom_max_iters",
                  "false"
                ],
                [
                  "test_custom_num_omp_threads",
                  "false"
                ],
                [
                  "test_custom_num_azim",
                  "false"
                ],
                [
                  "test_custom_tolerance",
                  "false"
                ],
                [
                  "test_custom_polar_spacing",
                  "false"
                ],
                [
                  "test_custom_num_thread_blocks",
                  "false"
                ],
                [
                  "test_custom_num_gpu_threads",
                  "false"
                ],
                [
                  "test_custom_num_azim",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_custom_track_spacing",
                  "false"
                ],
                [
                  "test_custom_max_iters",
                  "false"
                ],
                [
                  "test_custom_num_omp_threads",
                  "false"
                ],
                [
                  "test_custom_num_azim",
                  "false"
                ],
                [
                  "test_custom_tolerance",
                  "false"
                ],
                [
                  "test_custom_polar_spacing",
                  "false"
                ],
                [
                  "test_custom_num_thread_blocks",
                  "false"
                ],
                [
                  "test_custom_num_gpu_threads",
                  "false"
                ],
                [
                  "test_custom_num_azim",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_custom_track_spacing",
                "false"
              ],
              [
                "test_custom_max_iters",
                "false"
              ],
              [
                "test_custom_num_omp_threads",
                "false"
              ],
              [
                "test_custom_num_azim",
                "false"
              ],
              [
                "test_custom_tolerance",
                "false"
              ],
              [
                "test_custom_polar_spacing",
                "false"
              ],
              [
                "test_custom_num_thread_blocks",
                "false"
              ],
              [
                "test_custom_num_gpu_threads",
                "false"
              ],
              [
                "test_custom_num_azim",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_custom_track_spacing",
                "false"
              ],
              [
                "test_custom_max_iters",
                "false"
              ],
              [
                "test_custom_num_omp_threads",
                "false"
              ],
              [
                "test_custom_num_azim",
                "false"
              ],
              [
                "test_custom_tolerance",
                "false"
              ],
              [
                "test_custom_polar_spacing",
                "false"
              ],
              [
                "test_custom_num_thread_blocks",
                "false"
              ],
              [
                "test_custom_num_gpu_threads",
                "false"
              ],
              [
                "test_custom_num_azim",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_custom_track_spacing",
                []
              ],
              [
                "test_custom_max_iters",
                []
              ],
              [
                "test_custom_num_omp_threads",
                []
              ],
              [
                "test_custom_num_azim",
                []
              ],
              [
                "test_custom_tolerance",
                []
              ],
              [
                "test_custom_polar_spacing",
                []
              ],
              [
                "test_custom_num_thread_blocks",
                []
              ],
              [
                "test_custom_num_gpu_threads",
                []
              ],
              [
                "test_custom_num_azim",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_custom_track_spacing",
                "false"
              ],
              [
                "test_custom_max_iters",
                "false"
              ],
              [
                "test_custom_num_omp_threads",
                "false"
              ],
              [
                "test_custom_num_azim",
                "false"
              ],
              [
                "test_custom_tolerance",
                "false"
              ],
              [
                "test_custom_polar_spacing",
                "false"
              ],
              [
                "test_custom_num_thread_blocks",
                "false"
              ],
              [
                "test_custom_num_gpu_threads",
                "false"
              ],
              [
                "test_custom_num_azim",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_custom_track_spacing",
                "true"
              ],
              [
                "test_custom_max_iters",
                "true"
              ],
              [
                "test_custom_num_omp_threads",
                "true"
              ],
              [
                "test_custom_num_azim",
                "true"
              ],
              [
                "test_custom_tolerance",
                "true"
              ],
              [
                "test_custom_polar_spacing",
                "true"
              ],
              [
                "test_custom_num_thread_blocks",
                "true"
              ],
              [
                "test_custom_num_gpu_threads",
                "true"
              ],
              [
                "test_custom_num_azim",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_custom_track_spacing",
                  "0"
                ],
                [
                  "test_custom_max_iters",
                  "0"
                ],
                [
                  "test_custom_num_omp_threads",
                  "0"
                ],
                [
                  "test_custom_num_azim",
                  "0"
                ],
                [
                  "test_custom_tolerance",
                  "0"
                ],
                [
                  "test_custom_polar_spacing",
                  "0"
                ],
                [
                  "test_custom_num_thread_blocks",
                  "0"
                ],
                [
                  "test_custom_num_gpu_threads",
                  "0"
                ],
                [
                  "test_custom_num_azim",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_custom_track_spacing",
                  "0"
                ],
                [
                  "test_custom_max_iters",
                  "0"
                ],
                [
                  "test_custom_num_omp_threads",
                  "0"
                ],
                [
                  "test_custom_num_azim",
                  "0"
                ],
                [
                  "test_custom_tolerance",
                  "0"
                ],
                [
                  "test_custom_polar_spacing",
                  "0"
                ],
                [
                  "test_custom_num_thread_blocks",
                  "0"
                ],
                [
                  "test_custom_num_gpu_threads",
                  "0"
                ],
                [
                  "test_custom_num_azim",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_custom_track_spacing",
                "false"
              ],
              [
                "test_custom_max_iters",
                "false"
              ],
              [
                "test_custom_num_omp_threads",
                "false"
              ],
              [
                "test_custom_num_azim",
                "false"
              ],
              [
                "test_custom_tolerance",
                "false"
              ],
              [
                "test_custom_polar_spacing",
                "false"
              ],
              [
                "test_custom_num_thread_blocks",
                "false"
              ],
              [
                "test_custom_num_gpu_threads",
                "false"
              ],
              [
                "test_custom_num_azim",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_custom_track_spacing",
                "false"
              ],
              [
                "test_custom_max_iters",
                "false"
              ],
              [
                "test_custom_num_omp_threads",
                "false"
              ],
              [
                "test_custom_num_azim",
                "false"
              ],
              [
                "test_custom_tolerance",
                "false"
              ],
              [
                "test_custom_polar_spacing",
                "false"
              ],
              [
                "test_custom_num_thread_blocks",
                "false"
              ],
              [
                "test_custom_num_gpu_threads",
                "false"
              ],
              [
                "test_custom_num_azim",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_custom_track_spacing",
                "1"
              ],
              [
                "test_custom_max_iters",
                "1"
              ],
              [
                "test_custom_num_omp_threads",
                "1"
              ],
              [
                "test_custom_num_azim",
                "1"
              ],
              [
                "test_custom_tolerance",
                "1"
              ],
              [
                "test_custom_polar_spacing",
                "1"
              ],
              [
                "test_custom_num_thread_blocks",
                "1"
              ],
              [
                "test_custom_num_gpu_threads",
                "1"
              ],
              [
                "test_custom_num_azim",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_custom_track_spacing",
                []
              ],
              [
                "test_custom_max_iters",
                []
              ],
              [
                "test_custom_num_omp_threads",
                []
              ],
              [
                "test_custom_num_azim",
                []
              ],
              [
                "test_custom_tolerance",
                []
              ],
              [
                "test_custom_polar_spacing",
                []
              ],
              [
                "test_custom_num_thread_blocks",
                []
              ],
              [
                "test_custom_num_gpu_threads",
                []
              ],
              [
                "test_custom_num_azim",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_custom_track_spacing",
                [
                  "self._custom_options"
                ]
              ],
              [
                "test_custom_max_iters",
                [
                  "self._custom_options"
                ]
              ],
              [
                "test_custom_num_omp_threads",
                [
                  "self._custom_options"
                ]
              ],
              [
                "test_custom_num_azim",
                [
                  "self._custom_options"
                ]
              ],
              [
                "test_custom_tolerance",
                [
                  "self._custom_options"
                ]
              ],
              [
                "test_custom_polar_spacing",
                [
                  "self._custom_options"
                ]
              ],
              [
                "test_custom_num_thread_blocks",
                [
                  "self._custom_options"
                ]
              ],
              [
                "test_custom_num_gpu_threads",
                [
                  "self._custom_options"
                ]
              ],
              [
                "test_custom_num_azim",
                [
                  "self._custom_options"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.685902552673083,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_custom_num_azim",
                  "test_custom_num_gpu_threads",
                  0.8134892168199607
                ],
                [
                  "test_custom_max_iters",
                  "test_custom_num_thread_blocks",
                  0.5821817364274594
                ],
                [
                  "test_custom_num_azim",
                  "test_custom_num_omp_threads",
                  0.7938841860374447
                ],
                [
                  "test_custom_polar_spacing",
                  "test_custom_track_spacing",
                  0.8249579113843055
                ],
                [
                  "test_custom_num_thread_blocks",
                  "test_custom_num_gpu_threads",
                  0.8295150620062532
                ],
                [
                  "test_custom_tolerance",
                  "test_custom_num_omp_threads",
                  0.6052275326688025
                ],
                [
                  "test_custom_num_azim",
                  "test_custom_track_spacing",
                  0.6669729688499156
                ],
                [
                  "test_custom_num_azim",
                  "test_custom_num_thread_blocks",
                  0.7938841860374447
                ],
                [
                  "test_custom_polar_spacing",
                  "test_custom_num_gpu_threads",
                  0.5797509043642028
                ],
                [
                  "test_custom_num_azim",
                  "test_custom_max_iters",
                  0.6470588235294118
                ],
                [
                  "test_custom_num_omp_threads",
                  "test_custom_num_gpu_threads",
                  0.7807200583588266
                ],
                [
                  "test_custom_track_spacing",
                  "test_custom_num_omp_threads",
                  0.600099198148979
                ],
                [
                  "test_custom_track_spacing",
                  "test_custom_max_iters",
                  0.6669729688499156
                ],
                [
                  "test_custom_tolerance",
                  "test_custom_num_gpu_threads",
                  0.6201736729460423
                ],
                [
                  "test_custom_polar_spacing",
                  "test_custom_num_thread_blocks",
                  0.5657789498610037
                ],
                [
                  "test_custom_polar_spacing",
                  "test_custom_max_iters",
                  0.6288281455225324
                ],
                [
                  "test_custom_polar_spacing",
                  "test_custom_num_omp_threads",
                  0.5657789498610037
                ],
                [
                  "test_custom_track_spacing",
                  "test_custom_num_gpu_threads",
                  0.6149186938124421
                ],
                [
                  "test_custom_max_iters",
                  "test_custom_num_omp_threads",
                  0.5821817364274594
                ],
                [
                  "test_custom_num_azim",
                  "test_custom_tolerance",
                  0.6726727939963125
                ],
                [
                  "test_custom_num_azim",
                  "test_custom_track_spacing",
                  0.6669729688499156
                ],
                [
                  "test_custom_num_azim",
                  "test_custom_num_omp_threads",
                  0.7938841860374447
                ],
                [
                  "test_custom_num_azim",
                  "test_custom_max_iters",
                  0.6470588235294118
                ],
                [
                  "test_custom_max_iters",
                  "test_custom_num_gpu_threads",
                  0.5965587590013045
                ],
                [
                  "test_custom_num_azim",
                  "test_custom_num_thread_blocks",
                  0.7938841860374447
                ],
                [
                  "test_custom_num_azim",
                  "test_custom_num_azim",
                  0.9411764705882353
                ],
                [
                  "test_custom_num_azim",
                  "test_custom_polar_spacing",
                  0.6288281455225324
                ],
                [
                  "test_custom_num_azim",
                  "test_custom_polar_spacing",
                  0.6288281455225324
                ],
                [
                  "test_custom_track_spacing",
                  "test_custom_num_thread_blocks",
                  0.600099198148979
                ],
                [
                  "test_custom_polar_spacing",
                  "test_custom_tolerance",
                  0.7190924955066749
                ],
                [
                  "test_custom_tolerance",
                  "test_custom_num_thread_blocks",
                  0.6052275326688025
                ],
                [
                  "test_custom_num_azim",
                  "test_custom_num_gpu_threads",
                  0.8134892168199607
                ],
                [
                  "test_custom_num_azim",
                  "test_custom_tolerance",
                  0.6726727939963125
                ],
                [
                  "test_custom_track_spacing",
                  "test_custom_tolerance",
                  0.76271276980969
                ],
                [
                  "test_custom_num_omp_threads",
                  "test_custom_num_thread_blocks",
                  0.7142857142857143
                ],
                [
                  "test_custom_max_iters",
                  "test_custom_tolerance",
                  0.6726727939963125
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_custom_track_spacing",
                "false"
              ],
              [
                "test_custom_max_iters",
                "false"
              ],
              [
                "test_custom_num_omp_threads",
                "false"
              ],
              [
                "test_custom_num_azim",
                "false"
              ],
              [
                "test_custom_tolerance",
                "false"
              ],
              [
                "test_custom_polar_spacing",
                "false"
              ],
              [
                "test_custom_num_thread_blocks",
                "false"
              ],
              [
                "test_custom_num_gpu_threads",
                "false"
              ],
              [
                "test_custom_num_azim",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 9
      }
    ]
  },
  {
    "name": "tests_\u0026_unit_tests_\u0026_test_regions.py",
    "testCases": [
      {
        "name": "TestCells",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_union",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_intersection",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_parent",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertNotEqual]"
                ],
                [
                  "test_complement",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertRaises, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertRaises, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertRaises, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertRaises, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertRaises, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertRaises, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_union",
                  "[]"
                ],
                [
                  "test_intersection",
                  "[]"
                ],
                [
                  "test_parent",
                  "[]"
                ],
                [
                  "test_complement",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_union",
                  "false"
                ],
                [
                  "test_intersection",
                  "false"
                ],
                [
                  "test_parent",
                  "false"
                ],
                [
                  "test_complement",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_union",
                  "false"
                ],
                [
                  "test_intersection",
                  "false"
                ],
                [
                  "test_parent",
                  "false"
                ],
                [
                  "test_complement",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_union",
                  "false"
                ],
                [
                  "test_intersection",
                  "false"
                ],
                [
                  "test_parent",
                  "false"
                ],
                [
                  "test_complement",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_union",
                  "false"
                ],
                [
                  "test_intersection",
                  "false"
                ],
                [
                  "test_parent",
                  "false"
                ],
                [
                  "test_complement",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_union",
                "false"
              ],
              [
                "test_intersection",
                "false"
              ],
              [
                "test_parent",
                "false"
              ],
              [
                "test_complement",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_union",
                "false"
              ],
              [
                "test_intersection",
                "false"
              ],
              [
                "test_parent",
                "false"
              ],
              [
                "test_complement",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_union",
                []
              ],
              [
                "test_intersection",
                []
              ],
              [
                "test_parent",
                []
              ],
              [
                "test_complement",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_union",
                "false"
              ],
              [
                "test_intersection",
                "false"
              ],
              [
                "test_parent",
                "false"
              ],
              [
                "test_complement",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_union",
                "true"
              ],
              [
                "test_intersection",
                "true"
              ],
              [
                "test_parent",
                "false"
              ],
              [
                "test_complement",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_union",
                  "0"
                ],
                [
                  "test_intersection",
                  "0"
                ],
                [
                  "test_parent",
                  "0"
                ],
                [
                  "test_complement",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_union",
                  "0"
                ],
                [
                  "test_intersection",
                  "0"
                ],
                [
                  "test_parent",
                  "0"
                ],
                [
                  "test_complement",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_union",
                "false"
              ],
              [
                "test_intersection",
                "false"
              ],
              [
                "test_parent",
                "false"
              ],
              [
                "test_complement",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_union",
                "false"
              ],
              [
                "test_intersection",
                "false"
              ],
              [
                "test_parent",
                "false"
              ],
              [
                "test_complement",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_union",
                "12"
              ],
              [
                "test_intersection",
                "12"
              ],
              [
                "test_parent",
                "2"
              ],
              [
                "test_complement",
                "18"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_union",
                [
                  "union",
                  "h1x",
                  "h2y",
                  "h2x",
                  "h1z",
                  "h1y",
                  "h2z",
                  "p1x",
                  "p2y",
                  "p2x",
                  "p1z",
                  "p1y",
                  "p2z"
                ]
              ],
              [
                "test_intersection",
                [
                  "h1x",
                  "h2y",
                  "h2x",
                  "h1z",
                  "h1y",
                  "h2z",
                  "p1x",
                  "p2y",
                  "intersection",
                  "p2x",
                  "p1z",
                  "p1y",
                  "p2z"
                ]
              ],
              [
                "test_parent",
                [
                  "region"
                ]
              ],
              [
                "test_complement",
                [
                  "h1x",
                  "h2y",
                  "h2x",
                  "h1z",
                  "h1y",
                  "h2z",
                  "p1x",
                  "p2y",
                  "intersection",
                  "p2x",
                  "p1z",
                  "p1y",
                  "p2z",
                  "complement"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_union",
                []
              ],
              [
                "test_intersection",
                []
              ],
              [
                "test_parent",
                []
              ],
              [
                "test_complement",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6070122574181658,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_parent",
                  "test_intersection",
                  0.2885010503729839
                ],
                [
                  "test_parent",
                  "test_union",
                  0.3001389394364737
                ],
                [
                  "test_parent",
                  "test_complement",
                  0.31685845881161095
                ],
                [
                  "test_union",
                  "test_complement",
                  0.8957149553322798
                ],
                [
                  "test_intersection",
                  "test_complement",
                  0.9297348560067237
                ],
                [
                  "test_union",
                  "test_intersection",
                  0.9111252845489226
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_union",
                "false"
              ],
              [
                "test_intersection",
                "false"
              ],
              [
                "test_parent",
                "true"
              ],
              [
                "test_complement",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      }
    ]
  },
  {
    "name": "tests_\u0026_unit_tests_\u0026_test_track3D.py",
    "testCases": [
      {
        "name": "TestTrack3D",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_setters_getters",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_setters_getters",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_setters_getters",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_setters_getters",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_setters_getters",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_setters_getters",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_setters_getters",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_setters_getters",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_setters_getters",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_setters_getters",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_setters_getters",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_setters_getters",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_setters_getters",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_setters_getters",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_setters_getters",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_setters_getters",
                "7"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_setters_getters",
                [
                  "track"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_setters_getters",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_setters_getters",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "tests_\u0026_unit_tests_\u0026_test_lattices.py",
    "testCases": [
      {
        "name": "TestLattice",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_getters",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_ids",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_clone",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_universes",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_fissionable",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_cells",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_getters",
                  "[]"
                ],
                [
                  "test_ids",
                  "[]"
                ],
                [
                  "test_clone",
                  "[]"
                ],
                [
                  "test_universes",
                  "[]"
                ],
                [
                  "test_fissionable",
                  "[]"
                ],
                [
                  "test_cells",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_getters",
                  "false"
                ],
                [
                  "test_ids",
                  "false"
                ],
                [
                  "test_clone",
                  "false"
                ],
                [
                  "test_universes",
                  "false"
                ],
                [
                  "test_fissionable",
                  "false"
                ],
                [
                  "test_cells",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_getters",
                  "false"
                ],
                [
                  "test_ids",
                  "false"
                ],
                [
                  "test_clone",
                  "false"
                ],
                [
                  "test_universes",
                  "false"
                ],
                [
                  "test_fissionable",
                  "false"
                ],
                [
                  "test_cells",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_getters",
                  "false"
                ],
                [
                  "test_ids",
                  "false"
                ],
                [
                  "test_clone",
                  "false"
                ],
                [
                  "test_universes",
                  "false"
                ],
                [
                  "test_fissionable",
                  "false"
                ],
                [
                  "test_cells",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_getters",
                  "false"
                ],
                [
                  "test_ids",
                  "false"
                ],
                [
                  "test_clone",
                  "false"
                ],
                [
                  "test_universes",
                  "false"
                ],
                [
                  "test_fissionable",
                  "false"
                ],
                [
                  "test_cells",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_getters",
                "false"
              ],
              [
                "test_ids",
                "false"
              ],
              [
                "test_clone",
                "false"
              ],
              [
                "test_universes",
                "false"
              ],
              [
                "test_fissionable",
                "false"
              ],
              [
                "test_cells",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_getters",
                "false"
              ],
              [
                "test_ids",
                "false"
              ],
              [
                "test_clone",
                "false"
              ],
              [
                "test_universes",
                "false"
              ],
              [
                "test_fissionable",
                "false"
              ],
              [
                "test_cells",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_getters",
                [
                  "self.universe",
                  "self.cell"
                ]
              ],
              [
                "test_ids",
                [
                  "self.lattice",
                  "self.universe",
                  "self.cell"
                ]
              ],
              [
                "test_clone",
                [
                  "self.universe"
                ]
              ],
              [
                "test_universes",
                [
                  "self.cell"
                ]
              ],
              [
                "test_fissionable",
                [
                  "self.universe",
                  "self.cell"
                ]
              ],
              [
                "test_cells",
                [
                  "self.universe"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_getters",
                "false"
              ],
              [
                "test_ids",
                "false"
              ],
              [
                "test_clone",
                "false"
              ],
              [
                "test_universes",
                "false"
              ],
              [
                "test_fissionable",
                "false"
              ],
              [
                "test_cells",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_getters",
                "true"
              ],
              [
                "test_ids",
                "true"
              ],
              [
                "test_clone",
                "false"
              ],
              [
                "test_universes",
                "false"
              ],
              [
                "test_fissionable",
                "false"
              ],
              [
                "test_cells",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_getters",
                  "0"
                ],
                [
                  "test_ids",
                  "0"
                ],
                [
                  "test_clone",
                  "0"
                ],
                [
                  "test_universes",
                  "0"
                ],
                [
                  "test_fissionable",
                  "0"
                ],
                [
                  "test_cells",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_getters",
                  "0"
                ],
                [
                  "test_ids",
                  "0"
                ],
                [
                  "test_clone",
                  "0"
                ],
                [
                  "test_universes",
                  "0"
                ],
                [
                  "test_fissionable",
                  "0"
                ],
                [
                  "test_cells",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_getters",
                "false"
              ],
              [
                "test_ids",
                "false"
              ],
              [
                "test_clone",
                "false"
              ],
              [
                "test_universes",
                "false"
              ],
              [
                "test_fissionable",
                "false"
              ],
              [
                "test_cells",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_getters",
                "false"
              ],
              [
                "test_ids",
                "false"
              ],
              [
                "test_clone",
                "false"
              ],
              [
                "test_universes",
                "false"
              ],
              [
                "test_fissionable",
                "false"
              ],
              [
                "test_cells",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_getters",
                "3"
              ],
              [
                "test_ids",
                "2"
              ],
              [
                "test_clone",
                "1"
              ],
              [
                "test_universes",
                "2"
              ],
              [
                "test_fissionable",
                "2"
              ],
              [
                "test_cells",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_getters",
                []
              ],
              [
                "test_ids",
                [
                  "lattice_2",
                  "lattice_3"
                ]
              ],
              [
                "test_clone",
                [
                  "clone"
                ]
              ],
              [
                "test_universes",
                [
                  "u4"
                ]
              ],
              [
                "test_fissionable",
                []
              ],
              [
                "test_cells",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_getters",
                [
                  "self.lattice"
                ]
              ],
              [
                "test_ids",
                []
              ],
              [
                "test_clone",
                [
                  "self.lattice",
                  "self.cell"
                ]
              ],
              [
                "test_universes",
                [
                  "self.lattice",
                  "self.universe"
                ]
              ],
              [
                "test_fissionable",
                [
                  "self.lattice"
                ]
              ],
              [
                "test_cells",
                [
                  "self.lattice",
                  "self.cell"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.42778356144321356,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_cells",
                  "test_clone",
                  0.3143473067309657
                ],
                [
                  "test_getters",
                  "test_clone",
                  0.40219983326992187
                ],
                [
                  "test_ids",
                  "test_clone",
                  0.3167230329859584
                ],
                [
                  "test_clone",
                  "test_universes",
                  0.7256691702703449
                ],
                [
                  "test_fissionable",
                  "test_universes",
                  0.2831896879219572
                ],
                [
                  "test_getters",
                  "test_universes",
                  0.4422182110482656
                ],
                [
                  "test_ids",
                  "test_cells",
                  0.43806854255471483
                ],
                [
                  "test_getters",
                  "test_cells",
                  0.7332965192650517
                ],
                [
                  "test_ids",
                  "test_universes",
                  0.46924878696120614
                ],
                [
                  "test_clone",
                  "test_fissionable",
                  0.2508726030021272
                ],
                [
                  "test_ids",
                  "test_fissionable",
                  0.4005963724010764
                ],
                [
                  "test_cells",
                  "test_fissionable",
                  0.34698895917974415
                ],
                [
                  "test_getters",
                  "test_ids",
                  0.5095438042387856
                ],
                [
                  "test_getters",
                  "test_fissionable",
                  0.4036036763977875
                ],
                [
                  "test_cells",
                  "test_universes",
                  0.38018691542029587
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_getters",
                "false"
              ],
              [
                "test_ids",
                "false"
              ],
              [
                "test_clone",
                "false"
              ],
              [
                "test_universes",
                "true"
              ],
              [
                "test_fissionable",
                "true"
              ],
              [
                "test_cells",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 6
      }
    ]
  },
  {
    "name": "tests_\u0026_unit_tests_\u0026_test_surfaces.py",
    "testCases": [
      {
        "name": "ZCylinderTests",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_onsurface",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_bounds",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertLess, PyCallExpression: self.assertGreater]"
                ],
                [
                  "test_surfaceType",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_distance",
                  "[PyCallExpression: self.assertGreater, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertGreater, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_onsurface",
                  "[]"
                ],
                [
                  "test_bounds",
                  "[]"
                ],
                [
                  "test_surfaceType",
                  "[]"
                ],
                [
                  "test_distance",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_onsurface",
                  "true"
                ],
                [
                  "test_bounds",
                  "false"
                ],
                [
                  "test_surfaceType",
                  "false"
                ],
                [
                  "test_distance",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_onsurface",
                  "false"
                ],
                [
                  "test_bounds",
                  "false"
                ],
                [
                  "test_surfaceType",
                  "false"
                ],
                [
                  "test_distance",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_onsurface",
                  "false"
                ],
                [
                  "test_bounds",
                  "false"
                ],
                [
                  "test_surfaceType",
                  "false"
                ],
                [
                  "test_distance",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_onsurface",
                  "false"
                ],
                [
                  "test_bounds",
                  "false"
                ],
                [
                  "test_surfaceType",
                  "false"
                ],
                [
                  "test_distance",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_onsurface",
                "false"
              ],
              [
                "test_bounds",
                "false"
              ],
              [
                "test_surfaceType",
                "false"
              ],
              [
                "test_distance",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_onsurface",
                "false"
              ],
              [
                "test_bounds",
                "false"
              ],
              [
                "test_surfaceType",
                "false"
              ],
              [
                "test_distance",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_onsurface",
                []
              ],
              [
                "test_bounds",
                []
              ],
              [
                "test_surfaceType",
                []
              ],
              [
                "test_distance",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_onsurface",
                "false"
              ],
              [
                "test_bounds",
                "false"
              ],
              [
                "test_surfaceType",
                "false"
              ],
              [
                "test_distance",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_onsurface",
                "true"
              ],
              [
                "test_bounds",
                "true"
              ],
              [
                "test_surfaceType",
                "false"
              ],
              [
                "test_distance",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_onsurface",
                  "0"
                ],
                [
                  "test_bounds",
                  "0"
                ],
                [
                  "test_surfaceType",
                  "0"
                ],
                [
                  "test_distance",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_onsurface",
                  "0"
                ],
                [
                  "test_bounds",
                  "0"
                ],
                [
                  "test_surfaceType",
                  "0"
                ],
                [
                  "test_distance",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_onsurface",
                "false"
              ],
              [
                "test_bounds",
                "false"
              ],
              [
                "test_surfaceType",
                "false"
              ],
              [
                "test_distance",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_onsurface",
                "false"
              ],
              [
                "test_bounds",
                "false"
              ],
              [
                "test_surfaceType",
                "false"
              ],
              [
                "test_distance",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_onsurface",
                "2"
              ],
              [
                "test_bounds",
                "6"
              ],
              [
                "test_surfaceType",
                "1"
              ],
              [
                "test_distance",
                "8"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_onsurface",
                [
                  "point"
                ]
              ],
              [
                "test_bounds",
                []
              ],
              [
                "test_surfaceType",
                []
              ],
              [
                "test_distance",
                [
                  "point",
                  "coords"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_onsurface",
                [
                  "self.surface"
                ]
              ],
              [
                "test_bounds",
                [
                  "self.surface"
                ]
              ],
              [
                "test_surfaceType",
                [
                  "self.surface"
                ]
              ],
              [
                "test_distance",
                [
                  "self.surface"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.33435552446602596,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_bounds",
                  "test_distance",
                  0.5870269166494202
                ],
                [
                  "test_surfaceType",
                  "test_onsurface",
                  0.16037507477489607
                ],
                [
                  "test_bounds",
                  "test_onsurface",
                  0.4377176639011091
                ],
                [
                  "test_distance",
                  "test_onsurface",
                  0.44627930815756284
                ],
                [
                  "test_surfaceType",
                  "test_bounds",
                  0.2574846452537248
                ],
                [
                  "test_surfaceType",
                  "test_distance",
                  0.11724953805944291
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_onsurface",
                "false"
              ],
              [
                "test_bounds",
                "false"
              ],
              [
                "test_surfaceType",
                "false"
              ],
              [
                "test_distance",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      },
      {
        "name": "PlaneTests",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_onsurface",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_onsurface",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_onsurface",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_onsurface",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_onsurface",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_onsurface",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_onsurface",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_onsurface",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_onsurface",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_onsurface",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_onsurface",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_onsurface",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_onsurface",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_onsurface",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_onsurface",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_onsurface",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_onsurface",
                [
                  "point"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_onsurface",
                [
                  "self.surface"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_onsurface",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "XPlaneTests",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_bounds",
                  "[PyCallExpression: self.assertLess, PyCallExpression: self.assertGreater, PyCallExpression: self.assertLess, PyCallExpression: self.assertGreater, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertLess, PyCallExpression: self.assertGreater]"
                ],
                [
                  "test_surfaceType",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_distance",
                  "[PyCallExpression: self.assertGreater, PyCallExpression: self.assertGreater, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_bounds",
                  "[]"
                ],
                [
                  "test_surfaceType",
                  "[]"
                ],
                [
                  "test_distance",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_bounds",
                  "false"
                ],
                [
                  "test_surfaceType",
                  "false"
                ],
                [
                  "test_distance",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_bounds",
                  "false"
                ],
                [
                  "test_surfaceType",
                  "false"
                ],
                [
                  "test_distance",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_bounds",
                  "false"
                ],
                [
                  "test_surfaceType",
                  "false"
                ],
                [
                  "test_distance",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_bounds",
                  "false"
                ],
                [
                  "test_surfaceType",
                  "false"
                ],
                [
                  "test_distance",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bounds",
                "false"
              ],
              [
                "test_surfaceType",
                "false"
              ],
              [
                "test_distance",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_bounds",
                "false"
              ],
              [
                "test_surfaceType",
                "false"
              ],
              [
                "test_distance",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_bounds",
                []
              ],
              [
                "test_surfaceType",
                []
              ],
              [
                "test_distance",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bounds",
                "false"
              ],
              [
                "test_surfaceType",
                "false"
              ],
              [
                "test_distance",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_bounds",
                "true"
              ],
              [
                "test_surfaceType",
                "false"
              ],
              [
                "test_distance",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_bounds",
                  "0"
                ],
                [
                  "test_surfaceType",
                  "0"
                ],
                [
                  "test_distance",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_bounds",
                  "0"
                ],
                [
                  "test_surfaceType",
                  "0"
                ],
                [
                  "test_distance",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_bounds",
                "false"
              ],
              [
                "test_surfaceType",
                "false"
              ],
              [
                "test_distance",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bounds",
                "false"
              ],
              [
                "test_surfaceType",
                "false"
              ],
              [
                "test_distance",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bounds",
                "8"
              ],
              [
                "test_surfaceType",
                "1"
              ],
              [
                "test_distance",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_bounds",
                []
              ],
              [
                "test_surfaceType",
                []
              ],
              [
                "test_distance",
                [
                  "point"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_bounds",
                [
                  "self.surface"
                ]
              ],
              [
                "test_surfaceType",
                [
                  "self.surface"
                ]
              ],
              [
                "test_distance",
                [
                  "self.surface"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.2937993897674067,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_surfaceType",
                  "test_bounds",
                  0.18926408936295355
                ],
                [
                  "test_bounds",
                  "test_distance",
                  0.5730616618873065
                ],
                [
                  "test_surfaceType",
                  "test_distance",
                  0.11907241805196006
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_bounds",
                "false"
              ],
              [
                "test_surfaceType",
                "false"
              ],
              [
                "test_distance",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      },
      {
        "name": "YPlaneTests",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_distance",
                  "[PyCallExpression: self.assertGreater, PyCallExpression: self.assertGreater, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_bounds",
                  "[PyCallExpression: self.assertLess, PyCallExpression: self.assertGreater, PyCallExpression: self.assertLess, PyCallExpression: self.assertGreater, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertLess, PyCallExpression: self.assertGreater]"
                ],
                [
                  "test_surfaceType",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_distance",
                  "[]"
                ],
                [
                  "test_bounds",
                  "[]"
                ],
                [
                  "test_surfaceType",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_distance",
                  "false"
                ],
                [
                  "test_bounds",
                  "false"
                ],
                [
                  "test_surfaceType",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_distance",
                  "false"
                ],
                [
                  "test_bounds",
                  "false"
                ],
                [
                  "test_surfaceType",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_distance",
                  "false"
                ],
                [
                  "test_bounds",
                  "false"
                ],
                [
                  "test_surfaceType",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_distance",
                  "false"
                ],
                [
                  "test_bounds",
                  "false"
                ],
                [
                  "test_surfaceType",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_distance",
                "false"
              ],
              [
                "test_bounds",
                "false"
              ],
              [
                "test_surfaceType",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_distance",
                "false"
              ],
              [
                "test_bounds",
                "false"
              ],
              [
                "test_surfaceType",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_distance",
                []
              ],
              [
                "test_bounds",
                []
              ],
              [
                "test_surfaceType",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_distance",
                "false"
              ],
              [
                "test_bounds",
                "false"
              ],
              [
                "test_surfaceType",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_distance",
                "true"
              ],
              [
                "test_bounds",
                "true"
              ],
              [
                "test_surfaceType",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_distance",
                  "0"
                ],
                [
                  "test_bounds",
                  "0"
                ],
                [
                  "test_surfaceType",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_distance",
                  "0"
                ],
                [
                  "test_bounds",
                  "0"
                ],
                [
                  "test_surfaceType",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_distance",
                "false"
              ],
              [
                "test_bounds",
                "false"
              ],
              [
                "test_surfaceType",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_distance",
                "false"
              ],
              [
                "test_bounds",
                "false"
              ],
              [
                "test_surfaceType",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_distance",
                "3"
              ],
              [
                "test_bounds",
                "8"
              ],
              [
                "test_surfaceType",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_distance",
                [
                  "point"
                ]
              ],
              [
                "test_bounds",
                []
              ],
              [
                "test_surfaceType",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_distance",
                [
                  "self.surface"
                ]
              ],
              [
                "test_bounds",
                [
                  "self.surface"
                ]
              ],
              [
                "test_surfaceType",
                [
                  "self.surface"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.31740867171782006,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_surfaceType",
                  "test_distance",
                  0.11907241805196006
                ],
                [
                  "test_surfaceType",
                  "test_bounds",
                  0.18926408936295355
                ],
                [
                  "test_bounds",
                  "test_distance",
                  0.6438895077385466
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_distance",
                "false"
              ],
              [
                "test_bounds",
                "false"
              ],
              [
                "test_surfaceType",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      },
      {
        "name": "ZPlaneTests",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_bounds",
                  "[PyCallExpression: self.assertLess, PyCallExpression: self.assertGreater, PyCallExpression: self.assertLess, PyCallExpression: self.assertGreater, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertLess, PyCallExpression: self.assertGreater]"
                ],
                [
                  "test_distance",
                  "[PyCallExpression: self.assertGreater, PyCallExpression: self.assertGreater, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_surfaceType",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_bounds",
                  "[]"
                ],
                [
                  "test_distance",
                  "[]"
                ],
                [
                  "test_surfaceType",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_bounds",
                  "false"
                ],
                [
                  "test_distance",
                  "false"
                ],
                [
                  "test_surfaceType",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_bounds",
                  "false"
                ],
                [
                  "test_distance",
                  "false"
                ],
                [
                  "test_surfaceType",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_bounds",
                  "false"
                ],
                [
                  "test_distance",
                  "false"
                ],
                [
                  "test_surfaceType",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_bounds",
                  "false"
                ],
                [
                  "test_distance",
                  "false"
                ],
                [
                  "test_surfaceType",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bounds",
                "false"
              ],
              [
                "test_distance",
                "false"
              ],
              [
                "test_surfaceType",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_bounds",
                "false"
              ],
              [
                "test_distance",
                "false"
              ],
              [
                "test_surfaceType",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_bounds",
                []
              ],
              [
                "test_distance",
                []
              ],
              [
                "test_surfaceType",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bounds",
                "false"
              ],
              [
                "test_distance",
                "false"
              ],
              [
                "test_surfaceType",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_bounds",
                "true"
              ],
              [
                "test_distance",
                "true"
              ],
              [
                "test_surfaceType",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_bounds",
                  "0"
                ],
                [
                  "test_distance",
                  "0"
                ],
                [
                  "test_surfaceType",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_bounds",
                  "0"
                ],
                [
                  "test_distance",
                  "0"
                ],
                [
                  "test_surfaceType",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_bounds",
                "false"
              ],
              [
                "test_distance",
                "false"
              ],
              [
                "test_surfaceType",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bounds",
                "false"
              ],
              [
                "test_distance",
                "false"
              ],
              [
                "test_surfaceType",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bounds",
                "8"
              ],
              [
                "test_distance",
                "3"
              ],
              [
                "test_surfaceType",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_bounds",
                []
              ],
              [
                "test_distance",
                [
                  "point"
                ]
              ],
              [
                "test_surfaceType",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_bounds",
                [
                  "self.surface"
                ]
              ],
              [
                "test_distance",
                [
                  "self.surface"
                ]
              ],
              [
                "test_surfaceType",
                [
                  "self.surface"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.29839323728427586,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_surfaceType",
                  "test_bounds",
                  0.18926408936295355
                ],
                [
                  "test_surfaceType",
                  "test_distance",
                  0.10879222762803661
                ],
                [
                  "test_bounds",
                  "test_distance",
                  0.5971233948618376
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_bounds",
                "false"
              ],
              [
                "test_distance",
                "false"
              ],
              [
                "test_surfaceType",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "tests_\u0026_unit_tests_\u0026_test_materials.py",
    "testCases": [
      {
        "name": "TestMaterials",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_fission_matrix",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_instances",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_cross_section_alignment",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_ids",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_get_cross_section_by_group",
                  "[PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_get_cross_section",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_volume",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_fission_matrix",
                  "[]"
                ],
                [
                  "test_instances",
                  "[]"
                ],
                [
                  "test_cross_section_alignment",
                  "[]"
                ],
                [
                  "test_ids",
                  "[]"
                ],
                [
                  "test_get_cross_section_by_group",
                  "[]"
                ],
                [
                  "test_get_cross_section",
                  "[]"
                ],
                [
                  "test_volume",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_fission_matrix",
                  "false"
                ],
                [
                  "test_instances",
                  "false"
                ],
                [
                  "test_cross_section_alignment",
                  "false"
                ],
                [
                  "test_ids",
                  "false"
                ],
                [
                  "test_get_cross_section_by_group",
                  "false"
                ],
                [
                  "test_get_cross_section",
                  "false"
                ],
                [
                  "test_volume",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_fission_matrix",
                  "false"
                ],
                [
                  "test_instances",
                  "false"
                ],
                [
                  "test_cross_section_alignment",
                  "false"
                ],
                [
                  "test_ids",
                  "false"
                ],
                [
                  "test_get_cross_section_by_group",
                  "false"
                ],
                [
                  "test_get_cross_section",
                  "false"
                ],
                [
                  "test_volume",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_fission_matrix",
                  "false"
                ],
                [
                  "test_instances",
                  "false"
                ],
                [
                  "test_cross_section_alignment",
                  "false"
                ],
                [
                  "test_ids",
                  "false"
                ],
                [
                  "test_get_cross_section_by_group",
                  "false"
                ],
                [
                  "test_get_cross_section",
                  "true"
                ],
                [
                  "test_volume",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_fission_matrix",
                  "false"
                ],
                [
                  "test_instances",
                  "false"
                ],
                [
                  "test_cross_section_alignment",
                  "false"
                ],
                [
                  "test_ids",
                  "false"
                ],
                [
                  "test_get_cross_section_by_group",
                  "false"
                ],
                [
                  "test_get_cross_section",
                  "false"
                ],
                [
                  "test_volume",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_fission_matrix",
                "false"
              ],
              [
                "test_instances",
                "false"
              ],
              [
                "test_cross_section_alignment",
                "false"
              ],
              [
                "test_ids",
                "false"
              ],
              [
                "test_get_cross_section_by_group",
                "false"
              ],
              [
                "test_get_cross_section",
                "false"
              ],
              [
                "test_volume",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_fission_matrix",
                "false"
              ],
              [
                "test_instances",
                "false"
              ],
              [
                "test_cross_section_alignment",
                "false"
              ],
              [
                "test_ids",
                "false"
              ],
              [
                "test_get_cross_section_by_group",
                "false"
              ],
              [
                "test_get_cross_section",
                "false"
              ],
              [
                "test_volume",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_fission_matrix",
                []
              ],
              [
                "test_instances",
                []
              ],
              [
                "test_cross_section_alignment",
                []
              ],
              [
                "test_ids",
                []
              ],
              [
                "test_get_cross_section_by_group",
                []
              ],
              [
                "test_get_cross_section",
                [
                  "self.test_material"
                ]
              ],
              [
                "test_volume",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_fission_matrix",
                "false"
              ],
              [
                "test_instances",
                "false"
              ],
              [
                "test_cross_section_alignment",
                "false"
              ],
              [
                "test_ids",
                "false"
              ],
              [
                "test_get_cross_section_by_group",
                "false"
              ],
              [
                "test_get_cross_section",
                "false"
              ],
              [
                "test_volume",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_fission_matrix",
                "true"
              ],
              [
                "test_instances",
                "true"
              ],
              [
                "test_cross_section_alignment",
                "true"
              ],
              [
                "test_ids",
                "true"
              ],
              [
                "test_get_cross_section_by_group",
                "true"
              ],
              [
                "test_get_cross_section",
                "false"
              ],
              [
                "test_volume",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_fission_matrix",
                  "0"
                ],
                [
                  "test_instances",
                  "0"
                ],
                [
                  "test_cross_section_alignment",
                  "0"
                ],
                [
                  "test_ids",
                  "0"
                ],
                [
                  "test_get_cross_section_by_group",
                  "0"
                ],
                [
                  "test_get_cross_section",
                  "0"
                ],
                [
                  "test_volume",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_fission_matrix",
                  "0"
                ],
                [
                  "test_instances",
                  "0"
                ],
                [
                  "test_cross_section_alignment",
                  "0"
                ],
                [
                  "test_ids",
                  "0"
                ],
                [
                  "test_get_cross_section_by_group",
                  "0"
                ],
                [
                  "test_get_cross_section",
                  "0"
                ],
                [
                  "test_volume",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_fission_matrix",
                "false"
              ],
              [
                "test_instances",
                "false"
              ],
              [
                "test_cross_section_alignment",
                "false"
              ],
              [
                "test_ids",
                "false"
              ],
              [
                "test_get_cross_section_by_group",
                "false"
              ],
              [
                "test_get_cross_section",
                "false"
              ],
              [
                "test_volume",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_fission_matrix",
                "false"
              ],
              [
                "test_instances",
                "false"
              ],
              [
                "test_cross_section_alignment",
                "false"
              ],
              [
                "test_ids",
                "false"
              ],
              [
                "test_get_cross_section_by_group",
                "false"
              ],
              [
                "test_get_cross_section",
                "false"
              ],
              [
                "test_volume",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_fission_matrix",
                "3"
              ],
              [
                "test_instances",
                "3"
              ],
              [
                "test_cross_section_alignment",
                "9"
              ],
              [
                "test_ids",
                "2"
              ],
              [
                "test_get_cross_section_by_group",
                "6"
              ],
              [
                "test_get_cross_section",
                "5"
              ],
              [
                "test_volume",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_fission_matrix",
                [
                  "material"
                ]
              ],
              [
                "test_instances",
                []
              ],
              [
                "test_cross_section_alignment",
                [
                  "material"
                ]
              ],
              [
                "test_ids",
                [
                  "material_2",
                  "material_3"
                ]
              ],
              [
                "test_get_cross_section_by_group",
                []
              ],
              [
                "test_get_cross_section",
                [
                  "material"
                ]
              ],
              [
                "test_volume",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_fission_matrix",
                [
                  "self.test_material"
                ]
              ],
              [
                "test_instances",
                [
                  "self.test_material"
                ]
              ],
              [
                "test_cross_section_alignment",
                [
                  "self.test_material"
                ]
              ],
              [
                "test_ids",
                [
                  "self.test_material"
                ]
              ],
              [
                "test_get_cross_section_by_group",
                [
                  "self.test_material"
                ]
              ],
              [
                "test_get_cross_section",
                []
              ],
              [
                "test_volume",
                [
                  "self.test_material"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.45033973467866495,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_ids",
                  "test_get_cross_section_by_group",
                  0.3743294950782477
                ],
                [
                  "test_volume",
                  "test_cross_section_alignment",
                  0.5825584312170693
                ],
                [
                  "test_fission_matrix",
                  "test_get_cross_section_by_group",
                  0.5969713627869524
                ],
                [
                  "test_fission_matrix",
                  "test_cross_section_alignment",
                  0.5959301975014277
                ],
                [
                  "test_instances",
                  "test_volume",
                  0.7103197158243745
                ],
                [
                  "test_ids",
                  "test_volume",
                  0.4633993249156041
                ],
                [
                  "test_instances",
                  "test_cross_section_alignment",
                  0.5667218644883358
                ],
                [
                  "test_ids",
                  "test_fission_matrix",
                  0.21163354234189619
                ],
                [
                  "test_ids",
                  "test_get_cross_section",
                  0.13733141650531708
                ],
                [
                  "test_get_cross_section_by_group",
                  "test_get_cross_section",
                  0.34563781982380315
                ],
                [
                  "test_instances",
                  "test_fission_matrix",
                  0.3474454258022037
                ],
                [
                  "test_get_cross_section",
                  "test_cross_section_alignment",
                  0.42551558608075185
                ],
                [
                  "test_instances",
                  "test_get_cross_section_by_group",
                  0.4887906056356192
                ],
                [
                  "test_volume",
                  "test_get_cross_section",
                  0.2439906198846787
                ],
                [
                  "test_instances",
                  "test_get_cross_section",
                  0.2514235045263477
                ],
                [
                  "test_fission_matrix",
                  "test_volume",
                  0.38826076864678877
                ],
                [
                  "test_volume",
                  "test_get_cross_section_by_group",
                  0.523241459689024
                ],
                [
                  "test_fission_matrix",
                  "test_get_cross_section",
                  0.3691119637031026
                ],
                [
                  "test_ids",
                  "test_cross_section_alignment",
                  0.4659334899897379
                ],
                [
                  "test_get_cross_section_by_group",
                  "test_cross_section_alignment",
                  0.9541397804973589
                ],
                [
                  "test_ids",
                  "test_instances",
                  0.41444805331332246
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_fission_matrix",
                "false"
              ],
              [
                "test_instances",
                "false"
              ],
              [
                "test_cross_section_alignment",
                "true"
              ],
              [
                "test_ids",
                "false"
              ],
              [
                "test_get_cross_section_by_group",
                "false"
              ],
              [
                "test_get_cross_section",
                "false"
              ],
              [
                "test_volume",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 7
      }
    ]
  },
  {
    "name": "tests_\u0026_unit_tests_\u0026_test_universes.py",
    "testCases": [
      {
        "name": "TestUniverse",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_getters",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_clone",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_cells",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_ids",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_fissionable",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_getters",
                  "[]"
                ],
                [
                  "test_clone",
                  "[]"
                ],
                [
                  "test_cells",
                  "[]"
                ],
                [
                  "test_ids",
                  "[]"
                ],
                [
                  "test_fissionable",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_getters",
                  "false"
                ],
                [
                  "test_clone",
                  "false"
                ],
                [
                  "test_cells",
                  "false"
                ],
                [
                  "test_ids",
                  "false"
                ],
                [
                  "test_fissionable",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_getters",
                  "false"
                ],
                [
                  "test_clone",
                  "false"
                ],
                [
                  "test_cells",
                  "false"
                ],
                [
                  "test_ids",
                  "false"
                ],
                [
                  "test_fissionable",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_getters",
                  "false"
                ],
                [
                  "test_clone",
                  "false"
                ],
                [
                  "test_cells",
                  "false"
                ],
                [
                  "test_ids",
                  "false"
                ],
                [
                  "test_fissionable",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_getters",
                  "false"
                ],
                [
                  "test_clone",
                  "false"
                ],
                [
                  "test_cells",
                  "false"
                ],
                [
                  "test_ids",
                  "false"
                ],
                [
                  "test_fissionable",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_getters",
                "false"
              ],
              [
                "test_clone",
                "false"
              ],
              [
                "test_cells",
                "false"
              ],
              [
                "test_ids",
                "false"
              ],
              [
                "test_fissionable",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_getters",
                "false"
              ],
              [
                "test_clone",
                "false"
              ],
              [
                "test_cells",
                "false"
              ],
              [
                "test_ids",
                "false"
              ],
              [
                "test_fissionable",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_getters",
                [
                  "self.cell"
                ]
              ],
              [
                "test_clone",
                []
              ],
              [
                "test_cells",
                []
              ],
              [
                "test_ids",
                [
                  "self.universe",
                  "self.cell"
                ]
              ],
              [
                "test_fissionable",
                [
                  "self.cell"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_getters",
                "false"
              ],
              [
                "test_clone",
                "false"
              ],
              [
                "test_cells",
                "false"
              ],
              [
                "test_ids",
                "false"
              ],
              [
                "test_fissionable",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_getters",
                "true"
              ],
              [
                "test_clone",
                "false"
              ],
              [
                "test_cells",
                "true"
              ],
              [
                "test_ids",
                "true"
              ],
              [
                "test_fissionable",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_getters",
                  "0"
                ],
                [
                  "test_clone",
                  "0"
                ],
                [
                  "test_cells",
                  "0"
                ],
                [
                  "test_ids",
                  "0"
                ],
                [
                  "test_fissionable",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_getters",
                  "0"
                ],
                [
                  "test_clone",
                  "0"
                ],
                [
                  "test_cells",
                  "0"
                ],
                [
                  "test_ids",
                  "0"
                ],
                [
                  "test_fissionable",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_getters",
                "false"
              ],
              [
                "test_clone",
                "false"
              ],
              [
                "test_cells",
                "false"
              ],
              [
                "test_ids",
                "false"
              ],
              [
                "test_fissionable",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_getters",
                "false"
              ],
              [
                "test_clone",
                "false"
              ],
              [
                "test_cells",
                "false"
              ],
              [
                "test_ids",
                "false"
              ],
              [
                "test_fissionable",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_getters",
                "3"
              ],
              [
                "test_clone",
                "1"
              ],
              [
                "test_cells",
                "3"
              ],
              [
                "test_ids",
                "2"
              ],
              [
                "test_fissionable",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_getters",
                []
              ],
              [
                "test_clone",
                [
                  "clone"
                ]
              ],
              [
                "test_cells",
                []
              ],
              [
                "test_ids",
                [
                  "universe_2",
                  "universe_3"
                ]
              ],
              [
                "test_fissionable",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_getters",
                [
                  "self.universe"
                ]
              ],
              [
                "test_clone",
                [
                  "self.universe",
                  "self.cell"
                ]
              ],
              [
                "test_cells",
                [
                  "self.universe",
                  "self.cell"
                ]
              ],
              [
                "test_ids",
                []
              ],
              [
                "test_fissionable",
                [
                  "self.universe"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.3916053690239213,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_getters",
                  "test_ids",
                  0.492832882906958
                ],
                [
                  "test_ids",
                  "test_cells",
                  0.4237017130659009
                ],
                [
                  "test_ids",
                  "test_fissionable",
                  0.38745847452199084
                ],
                [
                  "test_ids",
                  "test_clone",
                  0.13470397652008118
                ],
                [
                  "test_cells",
                  "test_clone",
                  0.3686048903872428
                ],
                [
                  "test_getters",
                  "test_fissionable",
                  0.4036036763977875
                ],
                [
                  "test_getters",
                  "test_clone",
                  0.42874646285627205
                ],
                [
                  "test_clone",
                  "test_fissionable",
                  0.19611613513818404
                ],
                [
                  "test_cells",
                  "test_fissionable",
                  0.34698895917974415
                ],
                [
                  "test_getters",
                  "test_cells",
                  0.7332965192650517
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_getters",
                "false"
              ],
              [
                "test_clone",
                "false"
              ],
              [
                "test_cells",
                "false"
              ],
              [
                "test_ids",
                "false"
              ],
              [
                "test_fissionable",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 5
      }
    ]
  },
  {
    "name": "tests_\u0026_unit_tests_\u0026_test_log_parameters.py",
    "testCases": [
      {
        "name": "TestLogParameters",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_log_characters",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_log_level",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_log_characters",
                  "[]"
                ],
                [
                  "test_log_level",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_log_characters",
                  "false"
                ],
                [
                  "test_log_level",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_log_characters",
                  "false"
                ],
                [
                  "test_log_level",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_log_characters",
                  "false"
                ],
                [
                  "test_log_level",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_log_characters",
                  "false"
                ],
                [
                  "test_log_level",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_log_characters",
                "false"
              ],
              [
                "test_log_level",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_log_characters",
                "false"
              ],
              [
                "test_log_level",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_log_characters",
                []
              ],
              [
                "test_log_level",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_log_characters",
                "false"
              ],
              [
                "test_log_level",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_log_characters",
                "false"
              ],
              [
                "test_log_level",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_log_characters",
                  "0"
                ],
                [
                  "test_log_level",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_log_characters",
                  "0"
                ],
                [
                  "test_log_level",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_log_characters",
                "false"
              ],
              [
                "test_log_level",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_log_characters",
                "false"
              ],
              [
                "test_log_level",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_log_characters",
                "3"
              ],
              [
                "test_log_level",
                "23"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_log_characters",
                []
              ],
              [
                "test_log_level",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_log_characters",
                []
              ],
              [
                "test_log_level",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.436827365121145,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_log_level",
                  "test_log_characters",
                  0.436827365121145
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_log_characters",
                "false"
              ],
              [
                "test_log_level",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "tests_\u0026_unit_tests_\u0026_test_cmfd_parameters.py",
    "testCases": [
      {
        "name": "TestCmfdParameters",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_cmfd_parameters",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_cmfd_group_structure",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_cmfd_parameters",
                  "[]"
                ],
                [
                  "test_cmfd_group_structure",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_cmfd_parameters",
                  "false"
                ],
                [
                  "test_cmfd_group_structure",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_cmfd_parameters",
                  "false"
                ],
                [
                  "test_cmfd_group_structure",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_cmfd_parameters",
                  "false"
                ],
                [
                  "test_cmfd_group_structure",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_cmfd_parameters",
                  "false"
                ],
                [
                  "test_cmfd_group_structure",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_cmfd_parameters",
                "false"
              ],
              [
                "test_cmfd_group_structure",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_cmfd_parameters",
                "false"
              ],
              [
                "test_cmfd_group_structure",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_cmfd_parameters",
                []
              ],
              [
                "test_cmfd_group_structure",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_cmfd_parameters",
                "false"
              ],
              [
                "test_cmfd_group_structure",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_cmfd_parameters",
                "false"
              ],
              [
                "test_cmfd_group_structure",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_cmfd_parameters",
                  "0"
                ],
                [
                  "test_cmfd_group_structure",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_cmfd_parameters",
                  "0"
                ],
                [
                  "test_cmfd_group_structure",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_cmfd_parameters",
                "false"
              ],
              [
                "test_cmfd_group_structure",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_cmfd_parameters",
                "false"
              ],
              [
                "test_cmfd_group_structure",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_cmfd_parameters",
                "6"
              ],
              [
                "test_cmfd_group_structure",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_cmfd_parameters",
                [
                  "cmfd"
                ]
              ],
              [
                "test_cmfd_group_structure",
                [
                  "cmfd"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_cmfd_parameters",
                []
              ],
              [
                "test_cmfd_group_structure",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.4577451870414676,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_cmfd_parameters",
                  "test_cmfd_group_structure",
                  0.4577451870414676
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_cmfd_parameters",
                "true"
              ],
              [
                "test_cmfd_group_structure",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "tests_\u0026_unit_tests_\u0026_test_rectangular_prism.py",
    "testCases": [
      {
        "name": "TestRectangularPrism",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_boundary_type_setter",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_constructor",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_boundary_type_setter",
                  "[]"
                ],
                [
                  "test_constructor",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_boundary_type_setter",
                  "false"
                ],
                [
                  "test_constructor",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_boundary_type_setter",
                  "false"
                ],
                [
                  "test_constructor",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_boundary_type_setter",
                  "false"
                ],
                [
                  "test_constructor",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_boundary_type_setter",
                  "false"
                ],
                [
                  "test_constructor",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_boundary_type_setter",
                "false"
              ],
              [
                "test_constructor",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_boundary_type_setter",
                "false"
              ],
              [
                "test_constructor",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_boundary_type_setter",
                []
              ],
              [
                "test_constructor",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_boundary_type_setter",
                "false"
              ],
              [
                "test_constructor",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_boundary_type_setter",
                "false"
              ],
              [
                "test_constructor",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_boundary_type_setter",
                  "0"
                ],
                [
                  "test_constructor",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_boundary_type_setter",
                  "0"
                ],
                [
                  "test_constructor",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_boundary_type_setter",
                "false"
              ],
              [
                "test_constructor",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_boundary_type_setter",
                "false"
              ],
              [
                "test_constructor",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_boundary_type_setter",
                "1"
              ],
              [
                "test_constructor",
                "6"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_boundary_type_setter",
                [
                  "rectprism",
                  "min_btx"
                ]
              ],
              [
                "test_constructor",
                [
                  "rectprism"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_boundary_type_setter",
                []
              ],
              [
                "test_constructor",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6367081759717911,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_constructor",
                  "test_boundary_type_setter",
                  0.6367081759717911
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_boundary_type_setter",
                "false"
              ],
              [
                "test_constructor",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  }
]