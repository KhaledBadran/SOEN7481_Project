[
  {
    "name": "test_\u0026_test_eig.py",
    "testCases": [
      {
        "name": "TestEIG",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_eig_simple_api",
                  "[PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_eig_fast_api",
                  "[PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_eig_full_api",
                  "[PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_eig_simple_api",
                  "[]"
                ],
                [
                  "test_eig_fast_api",
                  "[]"
                ],
                [
                  "test_eig_full_api",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_eig_simple_api",
                  "false"
                ],
                [
                  "test_eig_fast_api",
                  "false"
                ],
                [
                  "test_eig_full_api",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_eig_simple_api",
                  "false"
                ],
                [
                  "test_eig_fast_api",
                  "false"
                ],
                [
                  "test_eig_full_api",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_eig_simple_api",
                  "false"
                ],
                [
                  "test_eig_fast_api",
                  "false"
                ],
                [
                  "test_eig_full_api",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_eig_simple_api",
                  "false"
                ],
                [
                  "test_eig_fast_api",
                  "false"
                ],
                [
                  "test_eig_full_api",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_eig_simple_api",
                "false"
              ],
              [
                "test_eig_fast_api",
                "false"
              ],
              [
                "test_eig_full_api",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_eig_simple_api",
                "false"
              ],
              [
                "test_eig_fast_api",
                "false"
              ],
              [
                "test_eig_full_api",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_eig_simple_api",
                [
                  "self.hs3",
                  "self.observation2",
                  "self.hs2"
                ]
              ],
              [
                "test_eig_fast_api",
                [
                  "self.hs3",
                  "self.observation2",
                  "self.hs2",
                  "self.hs1"
                ]
              ],
              [
                "test_eig_full_api",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_eig_simple_api",
                "false"
              ],
              [
                "test_eig_fast_api",
                "false"
              ],
              [
                "test_eig_full_api",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_eig_simple_api",
                "true"
              ],
              [
                "test_eig_fast_api",
                "true"
              ],
              [
                "test_eig_full_api",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_eig_simple_api",
                  "0"
                ],
                [
                  "test_eig_fast_api",
                  "0"
                ],
                [
                  "test_eig_full_api",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_eig_simple_api",
                  "0"
                ],
                [
                  "test_eig_fast_api",
                  "0"
                ],
                [
                  "test_eig_full_api",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_eig_simple_api",
                "false"
              ],
              [
                "test_eig_fast_api",
                "false"
              ],
              [
                "test_eig_full_api",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_eig_simple_api",
                "false"
              ],
              [
                "test_eig_fast_api",
                "false"
              ],
              [
                "test_eig_full_api",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_eig_simple_api",
                "3"
              ],
              [
                "test_eig_fast_api",
                "3"
              ],
              [
                "test_eig_full_api",
                "8"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_eig_simple_api",
                []
              ],
              [
                "test_eig_fast_api",
                []
              ],
              [
                "test_eig_full_api",
                [
                  "tmp_observation",
                  "eig",
                  "question",
                  "prior",
                  "executor",
                  "context",
                  "belief"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_eig_simple_api",
                [
                  "self.observation1",
                  "self.hs1"
                ]
              ],
              [
                "test_eig_fast_api",
                [
                  "self.observation1"
                ]
              ],
              [
                "test_eig_full_api",
                [
                  "self.observation1",
                  "self.hs3",
                  "self.observation2",
                  "self.hs2",
                  "self.hs1"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7340584982910393,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_eig_simple_api",
                  "test_eig_fast_api",
                  0.7779287503494744
                ],
                [
                  "test_eig_fast_api",
                  "test_eig_full_api",
                  0.6867940361139924
                ],
                [
                  "test_eig_simple_api",
                  "test_eig_full_api",
                  0.7374527084096513
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_eig_simple_api",
                "false"
              ],
              [
                "test_eig_fast_api",
                "false"
              ],
              [
                "test_eig_full_api",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "test_\u0026_test_bayes.py",
    "testCases": [
      {
        "name": "TestBayes",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_update",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_uniform_prior",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_normalize",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_size_prior",
                  "[PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_update",
                  "[]"
                ],
                [
                  "test_uniform_prior",
                  "[]"
                ],
                [
                  "test_normalize",
                  "[]"
                ],
                [
                  "test_size_prior",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_update",
                  "false"
                ],
                [
                  "test_uniform_prior",
                  "false"
                ],
                [
                  "test_normalize",
                  "false"
                ],
                [
                  "test_size_prior",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_update",
                  "false"
                ],
                [
                  "test_uniform_prior",
                  "false"
                ],
                [
                  "test_normalize",
                  "false"
                ],
                [
                  "test_size_prior",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_update",
                  "false"
                ],
                [
                  "test_uniform_prior",
                  "false"
                ],
                [
                  "test_normalize",
                  "false"
                ],
                [
                  "test_size_prior",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_update",
                  "false"
                ],
                [
                  "test_uniform_prior",
                  "false"
                ],
                [
                  "test_normalize",
                  "false"
                ],
                [
                  "test_size_prior",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_update",
                "false"
              ],
              [
                "test_uniform_prior",
                "false"
              ],
              [
                "test_normalize",
                "false"
              ],
              [
                "test_size_prior",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_update",
                "false"
              ],
              [
                "test_uniform_prior",
                "false"
              ],
              [
                "test_normalize",
                "false"
              ],
              [
                "test_size_prior",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_update",
                []
              ],
              [
                "test_uniform_prior",
                []
              ],
              [
                "test_normalize",
                []
              ],
              [
                "test_size_prior",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_update",
                "false"
              ],
              [
                "test_uniform_prior",
                "false"
              ],
              [
                "test_normalize",
                "false"
              ],
              [
                "test_size_prior",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_update",
                "false"
              ],
              [
                "test_uniform_prior",
                "false"
              ],
              [
                "test_normalize",
                "false"
              ],
              [
                "test_size_prior",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_update",
                  "0"
                ],
                [
                  "test_uniform_prior",
                  "0"
                ],
                [
                  "test_normalize",
                  "0"
                ],
                [
                  "test_size_prior",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_update",
                  "0"
                ],
                [
                  "test_uniform_prior",
                  "0"
                ],
                [
                  "test_normalize",
                  "0"
                ],
                [
                  "test_size_prior",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_update",
                "false"
              ],
              [
                "test_uniform_prior",
                "false"
              ],
              [
                "test_normalize",
                "false"
              ],
              [
                "test_size_prior",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_update",
                "false"
              ],
              [
                "test_uniform_prior",
                "false"
              ],
              [
                "test_normalize",
                "false"
              ],
              [
                "test_size_prior",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_update",
                "1"
              ],
              [
                "test_uniform_prior",
                "1"
              ],
              [
                "test_normalize",
                "5"
              ],
              [
                "test_size_prior",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_update",
                [
                  "dummy_hypotheses",
                  "belief"
                ]
              ],
              [
                "test_uniform_prior",
                [
                  "dummy_hypotheses",
                  "belief"
                ]
              ],
              [
                "test_normalize",
                []
              ],
              [
                "test_size_prior",
                [
                  "hypotheses",
                  "h_sizes",
                  "prior",
                  "belief"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_update",
                []
              ],
              [
                "test_uniform_prior",
                []
              ],
              [
                "test_normalize",
                []
              ],
              [
                "test_size_prior",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6049649456433915,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_size_prior",
                  "test_update",
                  0.7062495762766613
                ],
                [
                  "test_uniform_prior",
                  "test_update",
                  0.902626188467896
                ],
                [
                  "test_uniform_prior",
                  "test_size_prior",
                  0.5744889069963387
                ],
                [
                  "test_normalize",
                  "test_size_prior",
                  0.3814842178876988
                ],
                [
                  "test_normalize",
                  "test_uniform_prior",
                  0.529600789475466
                ],
                [
                  "test_normalize",
                  "test_update",
                  0.5353399947562884
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_update",
                "false"
              ],
              [
                "test_uniform_prior",
                "false"
              ],
              [
                "test_normalize",
                "false"
              ],
              [
                "test_size_prior",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      }
    ]
  },
  {
    "name": "test_\u0026_test_parser.py",
    "testCases": [
      {
        "name": "TestParser",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_parse_error_basic",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertEqual, PyCallExpression: self.assertRaises, PyCallExpression: self.assertEqual, PyCallExpression: self.assertRaises, PyCallExpression: self.assertEqual, PyCallExpression: self.assertRaises, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_parse_error_lambda",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertEqual, PyCallExpression: self.assertRaises, PyCallExpression: self.assertEqual, PyCallExpression: self.assertRaises, PyCallExpression: self.assertEqual, PyCallExpression: self.assertRaises, PyCallExpression: self.assertEqual, PyCallExpression: self.assertRaises, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_parse_basic",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_parse_lambda",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_optimization",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_parse_error_basic",
                  "[]"
                ],
                [
                  "test_parse_error_lambda",
                  "[]"
                ],
                [
                  "test_parse_basic",
                  "[]"
                ],
                [
                  "test_parse_lambda",
                  "[]"
                ],
                [
                  "test_optimization",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_parse_error_basic",
                  "false"
                ],
                [
                  "test_parse_error_lambda",
                  "false"
                ],
                [
                  "test_parse_basic",
                  "false"
                ],
                [
                  "test_parse_lambda",
                  "false"
                ],
                [
                  "test_optimization",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_parse_error_basic",
                  "false"
                ],
                [
                  "test_parse_error_lambda",
                  "false"
                ],
                [
                  "test_parse_basic",
                  "false"
                ],
                [
                  "test_parse_lambda",
                  "false"
                ],
                [
                  "test_optimization",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_parse_error_basic",
                  "true"
                ],
                [
                  "test_parse_error_lambda",
                  "true"
                ],
                [
                  "test_parse_basic",
                  "false"
                ],
                [
                  "test_parse_lambda",
                  "false"
                ],
                [
                  "test_optimization",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_parse_error_basic",
                  "false"
                ],
                [
                  "test_parse_error_lambda",
                  "false"
                ],
                [
                  "test_parse_basic",
                  "false"
                ],
                [
                  "test_parse_lambda",
                  "false"
                ],
                [
                  "test_optimization",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_parse_error_basic",
                "false"
              ],
              [
                "test_parse_error_lambda",
                "false"
              ],
              [
                "test_parse_basic",
                "false"
              ],
              [
                "test_parse_lambda",
                "false"
              ],
              [
                "test_optimization",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_parse_error_basic",
                "false"
              ],
              [
                "test_parse_error_lambda",
                "false"
              ],
              [
                "test_parse_basic",
                "false"
              ],
              [
                "test_parse_lambda",
                "false"
              ],
              [
                "test_optimization",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_parse_error_basic",
                []
              ],
              [
                "test_parse_error_lambda",
                []
              ],
              [
                "test_parse_basic",
                []
              ],
              [
                "test_parse_lambda",
                []
              ],
              [
                "test_optimization",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_parse_error_basic",
                "false"
              ],
              [
                "test_parse_error_lambda",
                "false"
              ],
              [
                "test_parse_basic",
                "false"
              ],
              [
                "test_parse_lambda",
                "false"
              ],
              [
                "test_optimization",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_parse_error_basic",
                "false"
              ],
              [
                "test_parse_error_lambda",
                "false"
              ],
              [
                "test_parse_basic",
                "false"
              ],
              [
                "test_parse_lambda",
                "false"
              ],
              [
                "test_optimization",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_parse_error_basic",
                  "0"
                ],
                [
                  "test_parse_error_lambda",
                  "0"
                ],
                [
                  "test_parse_basic",
                  "0"
                ],
                [
                  "test_parse_lambda",
                  "0"
                ],
                [
                  "test_optimization",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_parse_error_basic",
                  "0"
                ],
                [
                  "test_parse_error_lambda",
                  "0"
                ],
                [
                  "test_parse_basic",
                  "0"
                ],
                [
                  "test_parse_lambda",
                  "0"
                ],
                [
                  "test_optimization",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_parse_error_basic",
                "false"
              ],
              [
                "test_parse_error_lambda",
                "false"
              ],
              [
                "test_parse_basic",
                "false"
              ],
              [
                "test_parse_lambda",
                "false"
              ],
              [
                "test_optimization",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_parse_error_basic",
                "false"
              ],
              [
                "test_parse_error_lambda",
                "false"
              ],
              [
                "test_parse_basic",
                "false"
              ],
              [
                "test_parse_lambda",
                "false"
              ],
              [
                "test_optimization",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_parse_error_basic",
                "8"
              ],
              [
                "test_parse_error_lambda",
                "10"
              ],
              [
                "test_parse_basic",
                "1"
              ],
              [
                "test_parse_lambda",
                "1"
              ],
              [
                "test_optimization",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_parse_error_basic",
                [
                  "exception",
                  "question"
                ]
              ],
              [
                "test_parse_error_lambda",
                [
                  "exception",
                  "question"
                ]
              ],
              [
                "test_parse_basic",
                [
                  "reference",
                  "question"
                ]
              ],
              [
                "test_parse_lambda",
                [
                  "reference",
                  "question"
                ]
              ],
              [
                "test_optimization",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_parse_error_basic",
                []
              ],
              [
                "test_parse_error_lambda",
                []
              ],
              [
                "test_parse_basic",
                []
              ],
              [
                "test_parse_lambda",
                []
              ],
              [
                "test_optimization",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5883238259756081,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_parse_basic",
                  "test_optimization",
                  0.8357735121263025
                ],
                [
                  "test_parse_error_basic",
                  "test_parse_lambda",
                  0.2319642414940974
                ],
                [
                  "test_parse_basic",
                  "test_parse_error_basic",
                  0.551474702246825
                ],
                [
                  "test_parse_basic",
                  "test_parse_error_lambda",
                  0.5036911481483872
                ],
                [
                  "test_parse_lambda",
                  "test_parse_error_lambda",
                  0.2895822695268126
                ],
                [
                  "test_parse_error_basic",
                  "test_optimization",
                  0.6368289363383227
                ],
                [
                  "test_parse_basic",
                  "test_parse_lambda",
                  0.7037826081691911
                ],
                [
                  "test_parse_lambda",
                  "test_optimization",
                  0.6086813434088176
                ],
                [
                  "test_parse_error_basic",
                  "test_parse_error_lambda",
                  0.8479029083497487
                ],
                [
                  "test_parse_error_lambda",
                  "test_optimization",
                  0.673556589947575
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_parse_error_basic",
                "false"
              ],
              [
                "test_parse_error_lambda",
                "false"
              ],
              [
                "test_parse_basic",
                "false"
              ],
              [
                "test_parse_lambda",
                "false"
              ],
              [
                "test_optimization",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 5
      }
    ]
  },
  {
    "name": "test_\u0026_test_context.py",
    "testCases": [
      {
        "name": "TestContext",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_observe",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_observe",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_observe",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_observe",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_observe",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_observe",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_observe",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_observe",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_observe",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_observe",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_observe",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_observe",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_observe",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_observe",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_observe",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_observe",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_observe",
                [
                  "observation",
                  "context",
                  "hs",
                  "belief"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_observe",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_observe",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "test_\u0026_test_executor.py",
    "testCases": [
      {
        "name": "TestExecutor",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_lambda_y",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_primitives",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_lambda_x",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_board_funcs",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse, PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_runtime_error",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_basic",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_set_operations",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_lambda_y",
                  "[]"
                ],
                [
                  "test_primitives",
                  "[]"
                ],
                [
                  "test_lambda_x",
                  "[]"
                ],
                [
                  "test_board_funcs",
                  "[]"
                ],
                [
                  "test_runtime_error",
                  "[]"
                ],
                [
                  "test_basic",
                  "[]"
                ],
                [
                  "test_set_operations",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_lambda_y",
                  "false"
                ],
                [
                  "test_primitives",
                  "false"
                ],
                [
                  "test_lambda_x",
                  "false"
                ],
                [
                  "test_board_funcs",
                  "false"
                ],
                [
                  "test_runtime_error",
                  "false"
                ],
                [
                  "test_basic",
                  "false"
                ],
                [
                  "test_set_operations",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_lambda_y",
                  "false"
                ],
                [
                  "test_primitives",
                  "false"
                ],
                [
                  "test_lambda_x",
                  "false"
                ],
                [
                  "test_board_funcs",
                  "false"
                ],
                [
                  "test_runtime_error",
                  "false"
                ],
                [
                  "test_basic",
                  "false"
                ],
                [
                  "test_set_operations",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_lambda_y",
                  "false"
                ],
                [
                  "test_primitives",
                  "false"
                ],
                [
                  "test_lambda_x",
                  "false"
                ],
                [
                  "test_board_funcs",
                  "true"
                ],
                [
                  "test_runtime_error",
                  "true"
                ],
                [
                  "test_basic",
                  "false"
                ],
                [
                  "test_set_operations",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_lambda_y",
                  "false"
                ],
                [
                  "test_primitives",
                  "false"
                ],
                [
                  "test_lambda_x",
                  "false"
                ],
                [
                  "test_board_funcs",
                  "false"
                ],
                [
                  "test_runtime_error",
                  "false"
                ],
                [
                  "test_basic",
                  "false"
                ],
                [
                  "test_set_operations",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_lambda_y",
                "false"
              ],
              [
                "test_primitives",
                "false"
              ],
              [
                "test_lambda_x",
                "false"
              ],
              [
                "test_board_funcs",
                "false"
              ],
              [
                "test_runtime_error",
                "false"
              ],
              [
                "test_basic",
                "false"
              ],
              [
                "test_set_operations",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_lambda_y",
                "false"
              ],
              [
                "test_primitives",
                "false"
              ],
              [
                "test_lambda_x",
                "false"
              ],
              [
                "test_board_funcs",
                "false"
              ],
              [
                "test_runtime_error",
                "false"
              ],
              [
                "test_basic",
                "false"
              ],
              [
                "test_set_operations",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_lambda_y",
                [
                  "self.hypothesis1",
                  "self.empty_hypothesis",
                  "self.hypothesis3",
                  "self.hypothesis2"
                ]
              ],
              [
                "test_primitives",
                [
                  "self.hypothesis1",
                  "self.hypothesis5",
                  "self.hypothesis4",
                  "self.hypothesis3",
                  "self.hypothesis2"
                ]
              ],
              [
                "test_lambda_x",
                [
                  "self.hypothesis1",
                  "self.empty_hypothesis",
                  "self.hypothesis3",
                  "self.hypothesis2"
                ]
              ],
              [
                "test_board_funcs",
                [
                  "self.hypothesis5",
                  "self.hypothesis4"
                ]
              ],
              [
                "test_runtime_error",
                [
                  "self.hypothesis5",
                  "self.empty_hypothesis",
                  "self.hypothesis3",
                  "self.hypothesis2"
                ]
              ],
              [
                "test_basic",
                [
                  "self.hypothesis1",
                  "self.hypothesis5",
                  "self.hypothesis4",
                  "self.hypothesis3",
                  "self.hypothesis2"
                ]
              ],
              [
                "test_set_operations",
                [
                  "self.hypothesis1",
                  "self.hypothesis5",
                  "self.hypothesis4",
                  "self.hypothesis3",
                  "self.hypothesis2"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_lambda_y",
                "false"
              ],
              [
                "test_primitives",
                "false"
              ],
              [
                "test_lambda_x",
                "false"
              ],
              [
                "test_board_funcs",
                "false"
              ],
              [
                "test_runtime_error",
                "false"
              ],
              [
                "test_basic",
                "false"
              ],
              [
                "test_set_operations",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_lambda_y",
                "false"
              ],
              [
                "test_primitives",
                "true"
              ],
              [
                "test_lambda_x",
                "true"
              ],
              [
                "test_board_funcs",
                "false"
              ],
              [
                "test_runtime_error",
                "false"
              ],
              [
                "test_basic",
                "true"
              ],
              [
                "test_set_operations",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_lambda_y",
                  "0"
                ],
                [
                  "test_primitives",
                  "0"
                ],
                [
                  "test_lambda_x",
                  "0"
                ],
                [
                  "test_board_funcs",
                  "0"
                ],
                [
                  "test_runtime_error",
                  "0"
                ],
                [
                  "test_basic",
                  "0"
                ],
                [
                  "test_set_operations",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_lambda_y",
                  "0"
                ],
                [
                  "test_primitives",
                  "0"
                ],
                [
                  "test_lambda_x",
                  "0"
                ],
                [
                  "test_board_funcs",
                  "0"
                ],
                [
                  "test_runtime_error",
                  "0"
                ],
                [
                  "test_basic",
                  "0"
                ],
                [
                  "test_set_operations",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_lambda_y",
                "false"
              ],
              [
                "test_primitives",
                "false"
              ],
              [
                "test_lambda_x",
                "false"
              ],
              [
                "test_board_funcs",
                "false"
              ],
              [
                "test_runtime_error",
                "false"
              ],
              [
                "test_basic",
                "false"
              ],
              [
                "test_set_operations",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_lambda_y",
                "false"
              ],
              [
                "test_primitives",
                "false"
              ],
              [
                "test_lambda_x",
                "false"
              ],
              [
                "test_board_funcs",
                "false"
              ],
              [
                "test_runtime_error",
                "false"
              ],
              [
                "test_basic",
                "false"
              ],
              [
                "test_set_operations",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_lambda_y",
                "2"
              ],
              [
                "test_primitives",
                "4"
              ],
              [
                "test_lambda_x",
                "4"
              ],
              [
                "test_board_funcs",
                "11"
              ],
              [
                "test_runtime_error",
                "3"
              ],
              [
                "test_basic",
                "4"
              ],
              [
                "test_set_operations",
                "4"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_lambda_y",
                [
                  "question",
                  "executor"
                ]
              ],
              [
                "test_primitives",
                [
                  "executor2",
                  "executor1",
                  "question3",
                  "executor4",
                  "question2",
                  "executor3",
                  "question4",
                  "question1"
                ]
              ],
              [
                "test_lambda_x",
                [
                  "question",
                  "executor"
                ]
              ],
              [
                "test_board_funcs",
                [
                  "question",
                  "executor"
                ]
              ],
              [
                "test_runtime_error",
                [
                  "question",
                  "executor"
                ]
              ],
              [
                "test_basic",
                [
                  "executor2",
                  "executor1",
                  "question3",
                  "executor4",
                  "question2",
                  "executor3",
                  "question4",
                  "question1"
                ]
              ],
              [
                "test_set_operations",
                [
                  "question",
                  "executor"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_lambda_y",
                [
                  "self.hypothesis5",
                  "self.hypothesis4"
                ]
              ],
              [
                "test_primitives",
                [
                  "self.empty_hypothesis"
                ]
              ],
              [
                "test_lambda_x",
                [
                  "self.hypothesis5",
                  "self.hypothesis4"
                ]
              ],
              [
                "test_board_funcs",
                [
                  "self.hypothesis1",
                  "self.empty_hypothesis",
                  "self.hypothesis3",
                  "self.hypothesis2"
                ]
              ],
              [
                "test_runtime_error",
                [
                  "self.hypothesis1",
                  "self.hypothesis4"
                ]
              ],
              [
                "test_basic",
                [
                  "self.empty_hypothesis"
                ]
              ],
              [
                "test_set_operations",
                [
                  "self.empty_hypothesis"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7552505888961599,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_set_operations",
                  "test_runtime_error",
                  0.7056145022065943
                ],
                [
                  "test_lambda_x",
                  "test_runtime_error",
                  0.6669976007484366
                ],
                [
                  "test_lambda_x",
                  "test_lambda_y",
                  0.7855233608345773
                ],
                [
                  "test_primitives",
                  "test_set_operations",
                  0.8047190335747417
                ],
                [
                  "test_primitives",
                  "test_lambda_x",
                  0.7555783991289147
                ],
                [
                  "test_primitives",
                  "test_lambda_y",
                  0.7096259307179505
                ],
                [
                  "test_basic",
                  "test_runtime_error",
                  0.7455337310251752
                ],
                [
                  "test_basic",
                  "test_lambda_y",
                  0.7413622825909499
                ],
                [
                  "test_set_operations",
                  "test_lambda_x",
                  0.7483572623560886
                ],
                [
                  "test_set_operations",
                  "test_lambda_y",
                  0.6742697702591489
                ],
                [
                  "test_basic",
                  "test_lambda_x",
                  0.8015997090776876
                ],
                [
                  "test_primitives",
                  "test_runtime_error",
                  0.7372496595271949
                ],
                [
                  "test_primitives",
                  "test_basic",
                  0.9220931887989602
                ],
                [
                  "test_primitives",
                  "test_board_funcs",
                  0.7831145955121213
                ],
                [
                  "test_board_funcs",
                  "test_lambda_x",
                  0.7620780714683942
                ],
                [
                  "test_board_funcs",
                  "test_set_operations",
                  0.7173336939665622
                ],
                [
                  "test_basic",
                  "test_set_operations",
                  0.8613897526761997
                ],
                [
                  "test_lambda_y",
                  "test_runtime_error",
                  0.6347185472331682
                ],
                [
                  "test_board_funcs",
                  "test_runtime_error",
                  0.7241318414508604
                ],
                [
                  "test_basic",
                  "test_board_funcs",
                  0.8056299943402105
                ],
                [
                  "test_board_funcs",
                  "test_lambda_y",
                  0.7733414393254199
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_lambda_y",
                "false"
              ],
              [
                "test_primitives",
                "false"
              ],
              [
                "test_lambda_x",
                "false"
              ],
              [
                "test_board_funcs",
                "false"
              ],
              [
                "test_runtime_error",
                "false"
              ],
              [
                "test_basic",
                "false"
              ],
              [
                "test_set_operations",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 7
      }
    ]
  },
  {
    "name": "test_\u0026_test_hypothesis.py",
    "testCases": [
      {
        "name": "TestHypothesis",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_hypothesis",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_hypothesis_space",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_hypothesis_space_with_observation",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_observation",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_invalid_hypothesis",
                  "[PyCallExpression: self.assertRaises]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_hypothesis",
                  "[]"
                ],
                [
                  "test_hypothesis_space",
                  "[]"
                ],
                [
                  "test_hypothesis_space_with_observation",
                  "[]"
                ],
                [
                  "test_observation",
                  "[]"
                ],
                [
                  "test_invalid_hypothesis",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_hypothesis",
                  "false"
                ],
                [
                  "test_hypothesis_space",
                  "false"
                ],
                [
                  "test_hypothesis_space_with_observation",
                  "false"
                ],
                [
                  "test_observation",
                  "false"
                ],
                [
                  "test_invalid_hypothesis",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_hypothesis",
                  "false"
                ],
                [
                  "test_hypothesis_space",
                  "false"
                ],
                [
                  "test_hypothesis_space_with_observation",
                  "false"
                ],
                [
                  "test_observation",
                  "false"
                ],
                [
                  "test_invalid_hypothesis",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_hypothesis",
                  "false"
                ],
                [
                  "test_hypothesis_space",
                  "false"
                ],
                [
                  "test_hypothesis_space_with_observation",
                  "false"
                ],
                [
                  "test_observation",
                  "false"
                ],
                [
                  "test_invalid_hypothesis",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_hypothesis",
                  "false"
                ],
                [
                  "test_hypothesis_space",
                  "false"
                ],
                [
                  "test_hypothesis_space_with_observation",
                  "false"
                ],
                [
                  "test_observation",
                  "false"
                ],
                [
                  "test_invalid_hypothesis",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_hypothesis",
                "false"
              ],
              [
                "test_hypothesis_space",
                "false"
              ],
              [
                "test_hypothesis_space_with_observation",
                "false"
              ],
              [
                "test_observation",
                "false"
              ],
              [
                "test_invalid_hypothesis",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_hypothesis",
                "false"
              ],
              [
                "test_hypothesis_space",
                "false"
              ],
              [
                "test_hypothesis_space_with_observation",
                "false"
              ],
              [
                "test_observation",
                "false"
              ],
              [
                "test_invalid_hypothesis",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_hypothesis",
                []
              ],
              [
                "test_hypothesis_space",
                []
              ],
              [
                "test_hypothesis_space_with_observation",
                []
              ],
              [
                "test_observation",
                []
              ],
              [
                "test_invalid_hypothesis",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_hypothesis",
                "false"
              ],
              [
                "test_hypothesis_space",
                "false"
              ],
              [
                "test_hypothesis_space_with_observation",
                "false"
              ],
              [
                "test_observation",
                "false"
              ],
              [
                "test_invalid_hypothesis",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_hypothesis",
                "false"
              ],
              [
                "test_hypothesis_space",
                "true"
              ],
              [
                "test_hypothesis_space_with_observation",
                "true"
              ],
              [
                "test_observation",
                "true"
              ],
              [
                "test_invalid_hypothesis",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_hypothesis",
                  "0"
                ],
                [
                  "test_hypothesis_space",
                  "0"
                ],
                [
                  "test_hypothesis_space_with_observation",
                  "0"
                ],
                [
                  "test_observation",
                  "0"
                ],
                [
                  "test_invalid_hypothesis",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_hypothesis",
                  "0"
                ],
                [
                  "test_hypothesis_space",
                  "0"
                ],
                [
                  "test_hypothesis_space_with_observation",
                  "0"
                ],
                [
                  "test_observation",
                  "0"
                ],
                [
                  "test_invalid_hypothesis",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_hypothesis",
                "false"
              ],
              [
                "test_hypothesis_space",
                "false"
              ],
              [
                "test_hypothesis_space_with_observation",
                "false"
              ],
              [
                "test_observation",
                "false"
              ],
              [
                "test_invalid_hypothesis",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_hypothesis",
                "false"
              ],
              [
                "test_hypothesis_space",
                "false"
              ],
              [
                "test_hypothesis_space_with_observation",
                "false"
              ],
              [
                "test_observation",
                "false"
              ],
              [
                "test_invalid_hypothesis",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_hypothesis",
                "1"
              ],
              [
                "test_hypothesis_space",
                "1"
              ],
              [
                "test_hypothesis_space_with_observation",
                "1"
              ],
              [
                "test_observation",
                "4"
              ],
              [
                "test_invalid_hypothesis",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_hypothesis",
                [
                  "ships",
                  "hypothesis",
                  "board"
                ]
              ],
              [
                "test_hypothesis_space",
                [
                  "hs"
                ]
              ],
              [
                "test_hypothesis_space_with_observation",
                [
                  "observation",
                  "hs"
                ]
              ],
              [
                "test_observation",
                [
                  "partly_revealed_board3",
                  "partly_revealed_board2",
                  "partly_revealed_board4",
                  "hs",
                  "partly_revealed_board1"
                ]
              ],
              [
                "test_invalid_hypothesis",
                [
                  "ships",
                  "hypothesis"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_hypothesis",
                []
              ],
              [
                "test_hypothesis_space",
                []
              ],
              [
                "test_hypothesis_space_with_observation",
                []
              ],
              [
                "test_observation",
                []
              ],
              [
                "test_invalid_hypothesis",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7707593838727093,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_invalid_hypothesis",
                  "test_observation",
                  0.6580856052329235
                ],
                [
                  "test_hypothesis_space",
                  "test_observation",
                  0.700974375420785
                ],
                [
                  "test_hypothesis_space_with_observation",
                  "test_observation",
                  0.8399726629227795
                ],
                [
                  "test_invalid_hypothesis",
                  "test_hypothesis_space",
                  0.6465757501398396
                ],
                [
                  "test_hypothesis",
                  "test_hypothesis_space",
                  0.7263946709619469
                ],
                [
                  "test_hypothesis_space",
                  "test_hypothesis_space_with_observation",
                  0.768272094643765
                ],
                [
                  "test_hypothesis",
                  "test_invalid_hypothesis",
                  0.8962104756527194
                ],
                [
                  "test_invalid_hypothesis",
                  "test_hypothesis_space_with_observation",
                  0.7395392710937281
                ],
                [
                  "test_hypothesis",
                  "test_hypothesis_space_with_observation",
                  0.9307350380378135
                ],
                [
                  "test_hypothesis",
                  "test_observation",
                  0.8008338946207922
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_hypothesis",
                "false"
              ],
              [
                "test_hypothesis_space",
                "false"
              ],
              [
                "test_hypothesis_space_with_observation",
                "false"
              ],
              [
                "test_observation",
                "false"
              ],
              [
                "test_invalid_hypothesis",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 5
      }
    ]
  }
]