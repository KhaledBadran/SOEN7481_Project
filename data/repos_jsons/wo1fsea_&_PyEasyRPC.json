[
  {
    "name": "tests_\u0026_test_rpc.py",
    "testCases": [
      {
        "name": "RPCTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_call_method",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_return_out_of_order",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_run_service_in_thread",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertRaises, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_client_async_call_method",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_service_process_request_in_thread",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertRaises, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_call_method",
                  "[]"
                ],
                [
                  "test_return_out_of_order",
                  "[]"
                ],
                [
                  "test_run_service_in_thread",
                  "[]"
                ],
                [
                  "test_client_async_call_method",
                  "[]"
                ],
                [
                  "test_service_process_request_in_thread",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_call_method",
                  "true"
                ],
                [
                  "test_return_out_of_order",
                  "true"
                ],
                [
                  "test_run_service_in_thread",
                  "false"
                ],
                [
                  "test_client_async_call_method",
                  "false"
                ],
                [
                  "test_service_process_request_in_thread",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_call_method",
                  "false"
                ],
                [
                  "test_return_out_of_order",
                  "false"
                ],
                [
                  "test_run_service_in_thread",
                  "false"
                ],
                [
                  "test_client_async_call_method",
                  "false"
                ],
                [
                  "test_service_process_request_in_thread",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_call_method",
                  "false"
                ],
                [
                  "test_return_out_of_order",
                  "false"
                ],
                [
                  "test_run_service_in_thread",
                  "true"
                ],
                [
                  "test_client_async_call_method",
                  "false"
                ],
                [
                  "test_service_process_request_in_thread",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_call_method",
                  "false"
                ],
                [
                  "test_return_out_of_order",
                  "false"
                ],
                [
                  "test_run_service_in_thread",
                  "false"
                ],
                [
                  "test_client_async_call_method",
                  "false"
                ],
                [
                  "test_service_process_request_in_thread",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_call_method",
                "false"
              ],
              [
                "test_return_out_of_order",
                "false"
              ],
              [
                "test_run_service_in_thread",
                "false"
              ],
              [
                "test_client_async_call_method",
                "false"
              ],
              [
                "test_service_process_request_in_thread",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_call_method",
                "false"
              ],
              [
                "test_return_out_of_order",
                "false"
              ],
              [
                "test_run_service_in_thread",
                "false"
              ],
              [
                "test_client_async_call_method",
                "false"
              ],
              [
                "test_service_process_request_in_thread",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_call_method",
                []
              ],
              [
                "test_return_out_of_order",
                []
              ],
              [
                "test_run_service_in_thread",
                []
              ],
              [
                "test_client_async_call_method",
                []
              ],
              [
                "test_service_process_request_in_thread",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_call_method",
                "false"
              ],
              [
                "test_return_out_of_order",
                "false"
              ],
              [
                "test_run_service_in_thread",
                "false"
              ],
              [
                "test_client_async_call_method",
                "false"
              ],
              [
                "test_service_process_request_in_thread",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_call_method",
                "true"
              ],
              [
                "test_return_out_of_order",
                "true"
              ],
              [
                "test_run_service_in_thread",
                "true"
              ],
              [
                "test_client_async_call_method",
                "true"
              ],
              [
                "test_service_process_request_in_thread",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_call_method",
                  "0"
                ],
                [
                  "test_return_out_of_order",
                  "0"
                ],
                [
                  "test_run_service_in_thread",
                  "0"
                ],
                [
                  "test_client_async_call_method",
                  "0"
                ],
                [
                  "test_service_process_request_in_thread",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_call_method",
                  "0"
                ],
                [
                  "test_return_out_of_order",
                  "0"
                ],
                [
                  "test_run_service_in_thread",
                  "0"
                ],
                [
                  "test_client_async_call_method",
                  "0"
                ],
                [
                  "test_service_process_request_in_thread",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_call_method",
                "false"
              ],
              [
                "test_return_out_of_order",
                "false"
              ],
              [
                "test_run_service_in_thread",
                "false"
              ],
              [
                "test_client_async_call_method",
                "false"
              ],
              [
                "test_service_process_request_in_thread",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_call_method",
                "false"
              ],
              [
                "test_return_out_of_order",
                "false"
              ],
              [
                "test_run_service_in_thread",
                "false"
              ],
              [
                "test_client_async_call_method",
                "false"
              ],
              [
                "test_service_process_request_in_thread",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_call_method",
                "3"
              ],
              [
                "test_return_out_of_order",
                "2"
              ],
              [
                "test_run_service_in_thread",
                "5"
              ],
              [
                "test_client_async_call_method",
                "2"
              ],
              [
                "test_service_process_request_in_thread",
                "7"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_call_method",
                [
                  "instance0",
                  "rpc_uuid0",
                  "rpc_uuid1",
                  "instance1",
                  "expire_time0",
                  "expire_time1",
                  "client1",
                  "client0"
                ]
              ],
              [
                "test_return_out_of_order",
                [
                  "instance0",
                  "rpc_uuid0",
                  "rpc_uuid1",
                  "expire_time0",
                  "expire_time1",
                  "client0"
                ]
              ],
              [
                "test_run_service_in_thread",
                [
                  "instance0",
                  "client0"
                ]
              ],
              [
                "test_client_async_call_method",
                [
                  "instance0",
                  "task",
                  "loop",
                  "client"
                ]
              ],
              [
                "test_service_process_request_in_thread",
                [
                  "instance0",
                  "client0"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_call_method",
                []
              ],
              [
                "test_return_out_of_order",
                []
              ],
              [
                "test_run_service_in_thread",
                []
              ],
              [
                "test_client_async_call_method",
                []
              ],
              [
                "test_service_process_request_in_thread",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7032146668852834,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_call_method",
                  "test_run_service_in_thread",
                  0.7199837515575433
                ],
                [
                  "test_call_method",
                  "test_client_async_call_method",
                  0.5975060867463706
                ],
                [
                  "test_call_method",
                  "test_service_process_request_in_thread",
                  0.6936791944354261
                ],
                [
                  "test_run_service_in_thread",
                  "test_client_async_call_method",
                  0.6344263178480057
                ],
                [
                  "test_service_process_request_in_thread",
                  "test_client_async_call_method",
                  0.6010364340794565
                ],
                [
                  "test_return_out_of_order",
                  "test_service_process_request_in_thread",
                  0.6576267002770807
                ],
                [
                  "test_run_service_in_thread",
                  "test_return_out_of_order",
                  0.6675945132316984
                ],
                [
                  "test_return_out_of_order",
                  "test_client_async_call_method",
                  0.5295776180404309
                ],
                [
                  "test_run_service_in_thread",
                  "test_service_process_request_in_thread",
                  0.9827583179360264
                ],
                [
                  "test_call_method",
                  "test_return_out_of_order",
                  0.9479577347007958
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_call_method",
                "false"
              ],
              [
                "test_return_out_of_order",
                "false"
              ],
              [
                "test_run_service_in_thread",
                "false"
              ],
              [
                "test_client_async_call_method",
                "false"
              ],
              [
                "test_service_process_request_in_thread",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 5
      }
    ]
  },
  {
    "name": "tests_\u0026_test_redis_manager.py",
    "testCases": [
      {
        "name": "RPCManagerTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_heartbeat",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse, PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse, PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_register_service",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertSequenceEqual, PyCallExpression: self.assertRaises, PyCallExpression: self.assertTrue, PyCallExpression: self.assertSequenceEqual, PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertSequenceEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertRaises, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_heartbeat",
                  "[]"
                ],
                [
                  "test_register_service",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_heartbeat",
                  "false"
                ],
                [
                  "test_register_service",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_heartbeat",
                  "false"
                ],
                [
                  "test_register_service",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_heartbeat",
                  "true"
                ],
                [
                  "test_register_service",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_heartbeat",
                  "false"
                ],
                [
                  "test_register_service",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_heartbeat",
                "false"
              ],
              [
                "test_register_service",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_heartbeat",
                "false"
              ],
              [
                "test_register_service",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_heartbeat",
                [
                  "self.service_heartbeat_interval",
                  "self.service_data0_1",
                  "self.service_data1",
                  "self.service_name1"
                ]
              ],
              [
                "test_register_service",
                [
                  "self.service_heartbeat_interval",
                  "self.service_data1",
                  "self.service_name1"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_heartbeat",
                "false"
              ],
              [
                "test_register_service",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_heartbeat",
                "false"
              ],
              [
                "test_register_service",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_heartbeat",
                  "0"
                ],
                [
                  "test_register_service",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_heartbeat",
                  "0"
                ],
                [
                  "test_register_service",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_heartbeat",
                "false"
              ],
              [
                "test_register_service",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": true,
            "detail": [
              [
                "test_heartbeat",
                "true"
              ],
              [
                "test_register_service",
                "true"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_heartbeat",
                "10"
              ],
              [
                "test_register_service",
                "16"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_heartbeat",
                [
                  "service_uuid"
                ]
              ],
              [
                "test_register_service",
                [
                  "service_uuid",
                  "service_uuid1"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_heartbeat",
                [
                  "self.rpc_manager",
                  "self.service_data0",
                  "self.service_name0",
                  "self.service_ttl"
                ]
              ],
              [
                "test_register_service",
                [
                  "self.rpc_manager",
                  "self.service_data0_1",
                  "self.service_data0",
                  "self.service_name0",
                  "self.service_ttl"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7071464650212277,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_register_service",
                  "test_heartbeat",
                  0.7071464650212277
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_heartbeat",
                "false"
              ],
              [
                "test_register_service",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "tests_\u0026_test_redis_collections_\u0026_test_set.py",
    "testCases": [
      {
        "name": "RedisSetTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_set_msg_packer",
                  "[]"
                ],
                [
                  "test_set_pickle_packer",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_set_msg_packer",
                  "[]"
                ],
                [
                  "test_set_pickle_packer",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_set_msg_packer",
                  "false"
                ],
                [
                  "test_set_pickle_packer",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_set_msg_packer",
                  "false"
                ],
                [
                  "test_set_pickle_packer",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_set_msg_packer",
                  "false"
                ],
                [
                  "test_set_pickle_packer",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_set_msg_packer",
                  "false"
                ],
                [
                  "test_set_pickle_packer",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_set_msg_packer",
                "false"
              ],
              [
                "test_set_pickle_packer",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_set_msg_packer",
                "false"
              ],
              [
                "test_set_pickle_packer",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_set_msg_packer",
                []
              ],
              [
                "test_set_pickle_packer",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_set_msg_packer",
                "false"
              ],
              [
                "test_set_pickle_packer",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_set_msg_packer",
                "false"
              ],
              [
                "test_set_pickle_packer",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_set_msg_packer",
                  "0"
                ],
                [
                  "test_set_pickle_packer",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_set_msg_packer",
                  "0"
                ],
                [
                  "test_set_pickle_packer",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_set_msg_packer",
                "false"
              ],
              [
                "test_set_pickle_packer",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_set_msg_packer",
                "false"
              ],
              [
                "test_set_pickle_packer",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_set_msg_packer",
                "0"
              ],
              [
                "test_set_pickle_packer",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_set_msg_packer",
                []
              ],
              [
                "test_set_pickle_packer",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_set_msg_packer",
                []
              ],
              [
                "test_set_pickle_packer",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6666666666666666,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_set_msg_packer",
                  "test_set_pickle_packer",
                  0.6666666666666666
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_set_msg_packer",
                "false"
              ],
              [
                "test_set_pickle_packer",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "tests_\u0026_test_redis_collections_\u0026_test_dict.py",
    "testCases": [
      {
        "name": "RedisDictTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_dict_pickle_packer",
                  "[]"
                ],
                [
                  "test_dict_msg_packer",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_dict_pickle_packer",
                  "[]"
                ],
                [
                  "test_dict_msg_packer",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_dict_pickle_packer",
                  "false"
                ],
                [
                  "test_dict_msg_packer",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_dict_pickle_packer",
                  "false"
                ],
                [
                  "test_dict_msg_packer",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_dict_pickle_packer",
                  "false"
                ],
                [
                  "test_dict_msg_packer",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_dict_pickle_packer",
                  "false"
                ],
                [
                  "test_dict_msg_packer",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_dict_pickle_packer",
                "false"
              ],
              [
                "test_dict_msg_packer",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_dict_pickle_packer",
                "false"
              ],
              [
                "test_dict_msg_packer",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_dict_pickle_packer",
                []
              ],
              [
                "test_dict_msg_packer",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_dict_pickle_packer",
                "false"
              ],
              [
                "test_dict_msg_packer",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_dict_pickle_packer",
                "false"
              ],
              [
                "test_dict_msg_packer",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_dict_pickle_packer",
                  "0"
                ],
                [
                  "test_dict_msg_packer",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_dict_pickle_packer",
                  "0"
                ],
                [
                  "test_dict_msg_packer",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_dict_pickle_packer",
                "false"
              ],
              [
                "test_dict_msg_packer",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_dict_pickle_packer",
                "false"
              ],
              [
                "test_dict_msg_packer",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_dict_pickle_packer",
                "0"
              ],
              [
                "test_dict_msg_packer",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_dict_pickle_packer",
                []
              ],
              [
                "test_dict_msg_packer",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_dict_pickle_packer",
                []
              ],
              [
                "test_dict_msg_packer",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7499999999999999,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_dict_msg_packer",
                  "test_dict_pickle_packer",
                  0.7499999999999999
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_dict_pickle_packer",
                "false"
              ],
              [
                "test_dict_msg_packer",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "tests_\u0026_test_redis_collections_\u0026_test_list.py",
    "testCases": [
      {
        "name": "RedisListTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_list_pickle_packer",
                  "[]"
                ],
                [
                  "test_list_msg_packer",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_list_pickle_packer",
                  "[]"
                ],
                [
                  "test_list_msg_packer",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_list_pickle_packer",
                  "false"
                ],
                [
                  "test_list_msg_packer",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_list_pickle_packer",
                  "false"
                ],
                [
                  "test_list_msg_packer",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_list_pickle_packer",
                  "false"
                ],
                [
                  "test_list_msg_packer",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_list_pickle_packer",
                  "false"
                ],
                [
                  "test_list_msg_packer",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_list_pickle_packer",
                "false"
              ],
              [
                "test_list_msg_packer",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_list_pickle_packer",
                "false"
              ],
              [
                "test_list_msg_packer",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_list_pickle_packer",
                []
              ],
              [
                "test_list_msg_packer",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_list_pickle_packer",
                "false"
              ],
              [
                "test_list_msg_packer",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_list_pickle_packer",
                "false"
              ],
              [
                "test_list_msg_packer",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_list_pickle_packer",
                  "0"
                ],
                [
                  "test_list_msg_packer",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_list_pickle_packer",
                  "0"
                ],
                [
                  "test_list_msg_packer",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_list_pickle_packer",
                "false"
              ],
              [
                "test_list_msg_packer",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_list_pickle_packer",
                "false"
              ],
              [
                "test_list_msg_packer",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_list_pickle_packer",
                "0"
              ],
              [
                "test_list_msg_packer",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_list_pickle_packer",
                []
              ],
              [
                "test_list_msg_packer",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_list_pickle_packer",
                []
              ],
              [
                "test_list_msg_packer",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6666666666666666,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_list_msg_packer",
                  "test_list_pickle_packer",
                  0.6666666666666666
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_list_pickle_packer",
                "false"
              ],
              [
                "test_list_msg_packer",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "tests_\u0026_test_redis_collections_\u0026_test_queue.py",
    "testCases": [
      {
        "name": "RedisQueueTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_queue_msg_packer",
                  "[]"
                ],
                [
                  "test_queue_pickle_packer",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_queue_msg_packer",
                  "[]"
                ],
                [
                  "test_queue_pickle_packer",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_queue_msg_packer",
                  "false"
                ],
                [
                  "test_queue_pickle_packer",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_queue_msg_packer",
                  "false"
                ],
                [
                  "test_queue_pickle_packer",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_queue_msg_packer",
                  "false"
                ],
                [
                  "test_queue_pickle_packer",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_queue_msg_packer",
                  "false"
                ],
                [
                  "test_queue_pickle_packer",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_queue_msg_packer",
                "false"
              ],
              [
                "test_queue_pickle_packer",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_queue_msg_packer",
                "false"
              ],
              [
                "test_queue_pickle_packer",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_queue_msg_packer",
                []
              ],
              [
                "test_queue_pickle_packer",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_queue_msg_packer",
                "false"
              ],
              [
                "test_queue_pickle_packer",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_queue_msg_packer",
                "false"
              ],
              [
                "test_queue_pickle_packer",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_queue_msg_packer",
                  "0"
                ],
                [
                  "test_queue_pickle_packer",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_queue_msg_packer",
                  "0"
                ],
                [
                  "test_queue_pickle_packer",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_queue_msg_packer",
                "false"
              ],
              [
                "test_queue_pickle_packer",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_queue_msg_packer",
                "false"
              ],
              [
                "test_queue_pickle_packer",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_queue_msg_packer",
                "0"
              ],
              [
                "test_queue_pickle_packer",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_queue_msg_packer",
                []
              ],
              [
                "test_queue_pickle_packer",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_queue_msg_packer",
                []
              ],
              [
                "test_queue_pickle_packer",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6666666666666666,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_queue_msg_packer",
                  "test_queue_pickle_packer",
                  0.6666666666666666
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_queue_msg_packer",
                "false"
              ],
              [
                "test_queue_pickle_packer",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "tests_\u0026_test_redis_collections_\u0026_test_mailbox.py",
    "testCases": [
      {
        "name": "RedisMailboxTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_mailbox_pickle_packer",
                  "[]"
                ],
                [
                  "test_mailbox_msg_packer",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_mailbox_pickle_packer",
                  "[]"
                ],
                [
                  "test_mailbox_msg_packer",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_mailbox_pickle_packer",
                  "false"
                ],
                [
                  "test_mailbox_msg_packer",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_mailbox_pickle_packer",
                  "false"
                ],
                [
                  "test_mailbox_msg_packer",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_mailbox_pickle_packer",
                  "false"
                ],
                [
                  "test_mailbox_msg_packer",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_mailbox_pickle_packer",
                  "false"
                ],
                [
                  "test_mailbox_msg_packer",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_mailbox_pickle_packer",
                "false"
              ],
              [
                "test_mailbox_msg_packer",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_mailbox_pickle_packer",
                "false"
              ],
              [
                "test_mailbox_msg_packer",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_mailbox_pickle_packer",
                []
              ],
              [
                "test_mailbox_msg_packer",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_mailbox_pickle_packer",
                "false"
              ],
              [
                "test_mailbox_msg_packer",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_mailbox_pickle_packer",
                "false"
              ],
              [
                "test_mailbox_msg_packer",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_mailbox_pickle_packer",
                  "0"
                ],
                [
                  "test_mailbox_msg_packer",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_mailbox_pickle_packer",
                  "0"
                ],
                [
                  "test_mailbox_msg_packer",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_mailbox_pickle_packer",
                "false"
              ],
              [
                "test_mailbox_msg_packer",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_mailbox_pickle_packer",
                "false"
              ],
              [
                "test_mailbox_msg_packer",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_mailbox_pickle_packer",
                "0"
              ],
              [
                "test_mailbox_msg_packer",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_mailbox_pickle_packer",
                []
              ],
              [
                "test_mailbox_msg_packer",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_mailbox_pickle_packer",
                []
              ],
              [
                "test_mailbox_msg_packer",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7096774193548387,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_mailbox_msg_packer",
                  "test_mailbox_pickle_packer",
                  0.7096774193548387
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_mailbox_pickle_packer",
                "false"
              ],
              [
                "test_mailbox_msg_packer",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "tests_\u0026_test_redis_collections_\u0026_test_redis_object.py",
    "testCases": [
      {
        "name": "RedisObjectTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_set_pickle_packer",
                  "[]"
                ],
                [
                  "test_set_msg_packer",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_set_pickle_packer",
                  "[]"
                ],
                [
                  "test_set_msg_packer",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_set_pickle_packer",
                  "false"
                ],
                [
                  "test_set_msg_packer",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_set_pickle_packer",
                  "false"
                ],
                [
                  "test_set_msg_packer",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_set_pickle_packer",
                  "false"
                ],
                [
                  "test_set_msg_packer",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_set_pickle_packer",
                  "false"
                ],
                [
                  "test_set_msg_packer",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_set_pickle_packer",
                "false"
              ],
              [
                "test_set_msg_packer",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_set_pickle_packer",
                "false"
              ],
              [
                "test_set_msg_packer",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_set_pickle_packer",
                []
              ],
              [
                "test_set_msg_packer",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_set_pickle_packer",
                "false"
              ],
              [
                "test_set_msg_packer",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_set_pickle_packer",
                "false"
              ],
              [
                "test_set_msg_packer",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_set_pickle_packer",
                  "0"
                ],
                [
                  "test_set_msg_packer",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_set_pickle_packer",
                  "0"
                ],
                [
                  "test_set_msg_packer",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_set_pickle_packer",
                "false"
              ],
              [
                "test_set_msg_packer",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_set_pickle_packer",
                "false"
              ],
              [
                "test_set_msg_packer",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_set_pickle_packer",
                "0"
              ],
              [
                "test_set_msg_packer",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_set_pickle_packer",
                []
              ],
              [
                "test_set_msg_packer",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_set_pickle_packer",
                []
              ],
              [
                "test_set_msg_packer",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6896551724137931,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_set_msg_packer",
                  "test_set_pickle_packer",
                  0.6896551724137931
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_set_pickle_packer",
                "false"
              ],
              [
                "test_set_msg_packer",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  }
]