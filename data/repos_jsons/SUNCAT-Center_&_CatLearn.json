[
  {
    "name": "test_\u0026_test_ga.py",
    "testCases": [
      {
        "name": "TestGeneticAlgorithm",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_convergence",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_read_write",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_parallel",
                  "[]"
                ],
                [
                  "test_pareto",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_generic_predictor",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_convergence",
                  "[]"
                ],
                [
                  "test_read_write",
                  "[]"
                ],
                [
                  "test_parallel",
                  "[]"
                ],
                [
                  "test_pareto",
                  "[]"
                ],
                [
                  "test_generic_predictor",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_convergence",
                  "false"
                ],
                [
                  "test_read_write",
                  "false"
                ],
                [
                  "test_parallel",
                  "false"
                ],
                [
                  "test_pareto",
                  "false"
                ],
                [
                  "test_generic_predictor",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_convergence",
                  "false"
                ],
                [
                  "test_read_write",
                  "false"
                ],
                [
                  "test_parallel",
                  "false"
                ],
                [
                  "test_pareto",
                  "false"
                ],
                [
                  "test_generic_predictor",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_convergence",
                  "false"
                ],
                [
                  "test_read_write",
                  "false"
                ],
                [
                  "test_parallel",
                  "false"
                ],
                [
                  "test_pareto",
                  "true"
                ],
                [
                  "test_generic_predictor",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_convergence",
                  "false"
                ],
                [
                  "test_read_write",
                  "false"
                ],
                [
                  "test_parallel",
                  "false"
                ],
                [
                  "test_pareto",
                  "false"
                ],
                [
                  "test_generic_predictor",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_convergence",
                "false"
              ],
              [
                "test_read_write",
                "false"
              ],
              [
                "test_parallel",
                "false"
              ],
              [
                "test_pareto",
                "false"
              ],
              [
                "test_generic_predictor",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_convergence",
                "false"
              ],
              [
                "test_read_write",
                "false"
              ],
              [
                "test_parallel",
                "false"
              ],
              [
                "test_pareto",
                "false"
              ],
              [
                "test_generic_predictor",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_convergence",
                []
              ],
              [
                "test_read_write",
                []
              ],
              [
                "test_parallel",
                []
              ],
              [
                "test_pareto",
                []
              ],
              [
                "test_generic_predictor",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_convergence",
                "false"
              ],
              [
                "test_read_write",
                "false"
              ],
              [
                "test_parallel",
                "false"
              ],
              [
                "test_pareto",
                "false"
              ],
              [
                "test_generic_predictor",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_convergence",
                "false"
              ],
              [
                "test_read_write",
                "false"
              ],
              [
                "test_parallel",
                "false"
              ],
              [
                "test_pareto",
                "false"
              ],
              [
                "test_generic_predictor",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_convergence",
                  "0"
                ],
                [
                  "test_read_write",
                  "0"
                ],
                [
                  "test_parallel",
                  "0"
                ],
                [
                  "test_pareto",
                  "0"
                ],
                [
                  "test_generic_predictor",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_convergence",
                  "0"
                ],
                [
                  "test_read_write",
                  "0"
                ],
                [
                  "test_parallel",
                  "0"
                ],
                [
                  "test_pareto",
                  "0"
                ],
                [
                  "test_generic_predictor",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_convergence",
                "false"
              ],
              [
                "test_read_write",
                "false"
              ],
              [
                "test_parallel",
                "false"
              ],
              [
                "test_pareto",
                "false"
              ],
              [
                "test_generic_predictor",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_convergence",
                "false"
              ],
              [
                "test_read_write",
                "false"
              ],
              [
                "test_parallel",
                "false"
              ],
              [
                "test_pareto",
                "false"
              ],
              [
                "test_generic_predictor",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_convergence",
                "3"
              ],
              [
                "test_read_write",
                "6"
              ],
              [
                "test_parallel",
                "0"
              ],
              [
                "test_pareto",
                "6"
              ],
              [
                "test_generic_predictor",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_convergence",
                [
                  "train_features",
                  "train_targets",
                  "conv",
                  "ga",
                  "_"
                ]
              ],
              [
                "test_read_write",
                [
                  "train_features",
                  "train_targets",
                  "old_pop",
                  "ga1",
                  "ga2",
                  "_"
                ]
              ],
              [
                "test_parallel",
                [
                  "train_features",
                  "train_targets",
                  "ga",
                  "_"
                ]
              ],
              [
                "test_pareto",
                [
                  "train_features",
                  "train_targets",
                  "ga",
                  "_"
                ]
              ],
              [
                "test_generic_predictor",
                [
                  "train_features",
                  "train_targets",
                  "ga",
                  "_"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_convergence",
                []
              ],
              [
                "test_read_write",
                []
              ],
              [
                "test_parallel",
                []
              ],
              [
                "test_pareto",
                []
              ],
              [
                "test_generic_predictor",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8410536273484306,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_generic_predictor",
                  "test_convergence",
                  0.9356927024046587
                ],
                [
                  "test_generic_predictor",
                  "test_read_write",
                  0.8498064062069096
                ],
                [
                  "test_generic_predictor",
                  "test_pareto",
                  0.9423729759366278
                ],
                [
                  "test_pareto",
                  "test_convergence",
                  0.8814189489476848
                ],
                [
                  "test_parallel",
                  "test_pareto",
                  0.7322486221390392
                ],
                [
                  "test_pareto",
                  "test_read_write",
                  0.8482989372878458
                ],
                [
                  "test_parallel",
                  "test_read_write",
                  0.6945372265949069
                ],
                [
                  "test_convergence",
                  "test_read_write",
                  0.8417191702795901
                ],
                [
                  "test_parallel",
                  "test_convergence",
                  0.840473288592332
                ],
                [
                  "test_generic_predictor",
                  "test_parallel",
                  0.8439679950947109
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_convergence",
                "true"
              ],
              [
                "test_read_write",
                "true"
              ],
              [
                "test_parallel",
                "false"
              ],
              [
                "test_pareto",
                "true"
              ],
              [
                "test_generic_predictor",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 5
      }
    ]
  },
  {
    "name": "test_\u0026_test_io.py",
    "testCases": [
      {
        "name": "TestIO",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_load",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_raw",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_load",
                  "[]"
                ],
                [
                  "test_raw",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_load",
                  "false"
                ],
                [
                  "test_raw",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_load",
                  "false"
                ],
                [
                  "test_raw",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_load",
                  "false"
                ],
                [
                  "test_raw",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_load",
                  "false"
                ],
                [
                  "test_raw",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_load",
                "false"
              ],
              [
                "test_raw",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_load",
                "false"
              ],
              [
                "test_raw",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_load",
                []
              ],
              [
                "test_raw",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_load",
                "false"
              ],
              [
                "test_raw",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_load",
                "false"
              ],
              [
                "test_raw",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_load",
                  "0"
                ],
                [
                  "test_raw",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_load",
                  "0"
                ],
                [
                  "test_raw",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_load",
                "false"
              ],
              [
                "test_raw",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_load",
                "false"
              ],
              [
                "test_raw",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_load",
                "2"
              ],
              [
                "test_raw",
                "4"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_load",
                [
                  "test_features",
                  "train_features",
                  "train_targets",
                  "new_gp",
                  "pred",
                  "gp",
                  "test_targets"
                ]
              ],
              [
                "test_raw",
                [
                  "test_features",
                  "tt",
                  "train_features",
                  "tf",
                  "r",
                  "train_targets",
                  "regularization",
                  "kernel_list",
                  "test_targets",
                  "klist"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_load",
                []
              ],
              [
                "test_raw",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5755270463570574,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_load",
                  "test_raw",
                  0.5755270463570574
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_load",
                "false"
              ],
              [
                "test_raw",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "test_\u0026_test_api.py",
    "testCases": [
      {
        "name": "TestAPI",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_ase_api",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_catmap_api",
                  "[]"
                ],
                [
                  "test_networkx_api",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_ase_api",
                  "[]"
                ],
                [
                  "test_catmap_api",
                  "[]"
                ],
                [
                  "test_networkx_api",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_ase_api",
                  "false"
                ],
                [
                  "test_catmap_api",
                  "true"
                ],
                [
                  "test_networkx_api",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_ase_api",
                  "false"
                ],
                [
                  "test_catmap_api",
                  "false"
                ],
                [
                  "test_networkx_api",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_ase_api",
                  "false"
                ],
                [
                  "test_catmap_api",
                  "false"
                ],
                [
                  "test_networkx_api",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_ase_api",
                  "false"
                ],
                [
                  "test_catmap_api",
                  "false"
                ],
                [
                  "test_networkx_api",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_ase_api",
                "false"
              ],
              [
                "test_catmap_api",
                "false"
              ],
              [
                "test_networkx_api",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_ase_api",
                "false"
              ],
              [
                "test_catmap_api",
                "false"
              ],
              [
                "test_networkx_api",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_ase_api",
                []
              ],
              [
                "test_catmap_api",
                []
              ],
              [
                "test_networkx_api",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_ase_api",
                "false"
              ],
              [
                "test_catmap_api",
                "false"
              ],
              [
                "test_networkx_api",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_ase_api",
                "false"
              ],
              [
                "test_catmap_api",
                "false"
              ],
              [
                "test_networkx_api",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_ase_api",
                  "0"
                ],
                [
                  "test_catmap_api",
                  "0"
                ],
                [
                  "test_networkx_api",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_ase_api",
                  "0"
                ],
                [
                  "test_catmap_api",
                  "0"
                ],
                [
                  "test_networkx_api",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_ase_api",
                "false"
              ],
              [
                "test_catmap_api",
                "true"
              ],
              [
                "test_networkx_api",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_ase_api",
                "false"
              ],
              [
                "test_catmap_api",
                "false"
              ],
              [
                "test_networkx_api",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_ase_api",
                "6"
              ],
              [
                "test_catmap_api",
                "0"
              ],
              [
                "test_networkx_api",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_ase_api",
                [
                  "cf",
                  "all_cand",
                  "f",
                  "g",
                  "gadb",
                  "fp"
                ]
              ],
              [
                "test_catmap_api",
                [
                  "fname",
                  "energy_landscape",
                  "prediction",
                  "uncertainty",
                  "database_ids"
                ]
              ],
              [
                "test_networkx_api",
                [
                  "all_cand",
                  "g",
                  "gadb",
                  "matrix"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_ase_api",
                []
              ],
              [
                "test_catmap_api",
                []
              ],
              [
                "test_networkx_api",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.4110071078244517,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_networkx_api",
                  "test_catmap_api",
                  0.28469931168686496
                ],
                [
                  "test_networkx_api",
                  "test_ase_api",
                  0.6939400193175986
                ],
                [
                  "test_ase_api",
                  "test_catmap_api",
                  0.2543819924688914
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_ase_api",
                "true"
              ],
              [
                "test_catmap_api",
                "false"
              ],
              [
                "test_networkx_api",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "test_\u0026_test_mlmin.py",
    "testCases": [
      {
        "name": "TestMLMin",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_minimize",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_acquisition",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_kernel",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_minimize",
                  "[]"
                ],
                [
                  "test_acquisition",
                  "[]"
                ],
                [
                  "test_kernel",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_minimize",
                  "false"
                ],
                [
                  "test_acquisition",
                  "false"
                ],
                [
                  "test_kernel",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_minimize",
                  "false"
                ],
                [
                  "test_acquisition",
                  "false"
                ],
                [
                  "test_kernel",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_minimize",
                  "false"
                ],
                [
                  "test_acquisition",
                  "true"
                ],
                [
                  "test_kernel",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_minimize",
                  "false"
                ],
                [
                  "test_acquisition",
                  "false"
                ],
                [
                  "test_kernel",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_minimize",
                "false"
              ],
              [
                "test_acquisition",
                "false"
              ],
              [
                "test_kernel",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_minimize",
                "false"
              ],
              [
                "test_acquisition",
                "false"
              ],
              [
                "test_kernel",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_minimize",
                []
              ],
              [
                "test_acquisition",
                []
              ],
              [
                "test_kernel",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_minimize",
                "false"
              ],
              [
                "test_acquisition",
                "false"
              ],
              [
                "test_kernel",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_minimize",
                "true"
              ],
              [
                "test_acquisition",
                "true"
              ],
              [
                "test_kernel",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_minimize",
                  "0"
                ],
                [
                  "test_acquisition",
                  "0"
                ],
                [
                  "test_kernel",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_minimize",
                  "0"
                ],
                [
                  "test_acquisition",
                  "0"
                ],
                [
                  "test_kernel",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_minimize",
                "true"
              ],
              [
                "test_acquisition",
                "true"
              ],
              [
                "test_kernel",
                "true"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_minimize",
                "false"
              ],
              [
                "test_acquisition",
                "false"
              ],
              [
                "test_kernel",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_minimize",
                "3"
              ],
              [
                "test_acquisition",
                "6"
              ],
              [
                "test_kernel",
                "6"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_minimize",
                [
                  "initial_opt",
                  "fmax_test",
                  "e_opt",
                  "initial_structure",
                  "n_eval_catlearn",
                  "e_test",
                  "atoms_catlearn",
                  "fmax_opt"
                ]
              ],
              [
                "test_acquisition",
                [
                  "initial_opt",
                  "fmax_test",
                  "e_opt",
                  "initial_structure",
                  "n_eval_catlearn",
                  "e_test",
                  "atoms_catlearn",
                  "fmax_opt"
                ]
              ],
              [
                "test_kernel",
                [
                  "initial_opt",
                  "fmax_test",
                  "e_opt",
                  "initial_structure",
                  "n_eval_catlearn",
                  "e_test",
                  "atoms_catlearn",
                  "fmax_opt"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_minimize",
                []
              ],
              [
                "test_acquisition",
                []
              ],
              [
                "test_kernel",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9750995810522443,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_minimize",
                  "test_acquisition",
                  0.9816802325906054
                ],
                [
                  "test_minimize",
                  "test_kernel",
                  0.9651649285336488
                ],
                [
                  "test_acquisition",
                  "test_kernel",
                  0.9784535820324787
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_minimize",
                "false"
              ],
              [
                "test_acquisition",
                "false"
              ],
              [
                "test_kernel",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "test_\u0026_test_mlneb.py",
    "testCases": [
      {
        "name": "TestMLNEB",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_restart",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_acquisition",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_path",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_restart",
                  "[]"
                ],
                [
                  "test_acquisition",
                  "[]"
                ],
                [
                  "test_path",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_restart",
                  "false"
                ],
                [
                  "test_acquisition",
                  "false"
                ],
                [
                  "test_path",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_restart",
                  "false"
                ],
                [
                  "test_acquisition",
                  "false"
                ],
                [
                  "test_path",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_restart",
                  "false"
                ],
                [
                  "test_acquisition",
                  "true"
                ],
                [
                  "test_path",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_restart",
                  "false"
                ],
                [
                  "test_acquisition",
                  "false"
                ],
                [
                  "test_path",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_restart",
                "false"
              ],
              [
                "test_acquisition",
                "false"
              ],
              [
                "test_path",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_restart",
                "false"
              ],
              [
                "test_acquisition",
                "false"
              ],
              [
                "test_path",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_restart",
                []
              ],
              [
                "test_acquisition",
                []
              ],
              [
                "test_path",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_restart",
                "false"
              ],
              [
                "test_acquisition",
                "false"
              ],
              [
                "test_path",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_restart",
                "true"
              ],
              [
                "test_acquisition",
                "true"
              ],
              [
                "test_path",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_restart",
                  "0"
                ],
                [
                  "test_acquisition",
                  "0"
                ],
                [
                  "test_path",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_restart",
                  "0"
                ],
                [
                  "test_acquisition",
                  "0"
                ],
                [
                  "test_path",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_restart",
                "true"
              ],
              [
                "test_acquisition",
                "true"
              ],
              [
                "test_path",
                "true"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_restart",
                "false"
              ],
              [
                "test_acquisition",
                "false"
              ],
              [
                "test_path",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_restart",
                "4"
              ],
              [
                "test_acquisition",
                "10"
              ],
              [
                "test_path",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_restart",
                [
                  "unc_test",
                  "neb_catlearn",
                  "max_unc"
                ]
              ],
              [
                "test_acquisition",
                [
                  "unc_test",
                  "neb_catlearn",
                  "max_unc"
                ]
              ],
              [
                "test_path",
                [
                  "unc_test",
                  "image",
                  "n_images",
                  "images",
                  "neb_catlearn",
                  "n_eval_catlearn",
                  "neb",
                  "max_unc",
                  "atoms_catlearn"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_restart",
                []
              ],
              [
                "test_acquisition",
                []
              ],
              [
                "test_path",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8483319685983873,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_restart",
                  "test_acquisition",
                  0.9019265623515311
                ],
                [
                  "test_path",
                  "test_restart",
                  0.8075847825219354
                ],
                [
                  "test_path",
                  "test_acquisition",
                  0.8354845609216955
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_restart",
                "false"
              ],
              [
                "test_acquisition",
                "false"
              ],
              [
                "test_path",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "test_\u0026_test_scale.py",
    "testCases": [
      {
        "name": "TestScaling",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_cluster",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_scale",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse, PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_cluster",
                  "[]"
                ],
                [
                  "test_scale",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_cluster",
                  "false"
                ],
                [
                  "test_scale",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_cluster",
                  "false"
                ],
                [
                  "test_scale",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_cluster",
                  "false"
                ],
                [
                  "test_scale",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_cluster",
                  "false"
                ],
                [
                  "test_scale",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_cluster",
                "false"
              ],
              [
                "test_scale",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_cluster",
                "false"
              ],
              [
                "test_scale",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_cluster",
                []
              ],
              [
                "test_scale",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_cluster",
                "false"
              ],
              [
                "test_scale",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_cluster",
                "false"
              ],
              [
                "test_scale",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_cluster",
                  "0"
                ],
                [
                  "test_scale",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_cluster",
                  "0"
                ],
                [
                  "test_scale",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_cluster",
                "false"
              ],
              [
                "test_scale",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_cluster",
                "false"
              ],
              [
                "test_scale",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_cluster",
                "4"
              ],
              [
                "test_scale",
                "7"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_cluster",
                [
                  "test_features",
                  "train_features",
                  "train_targets",
                  "cf",
                  "test_targets"
                ]
              ],
              [
                "test_scale",
                [
                  "test_features",
                  "train_features",
                  "train_targets",
                  "ulfpg",
                  "mmfpg",
                  "ulfp",
                  "nfp",
                  "mmfp",
                  "sfp",
                  "nfpg",
                  "_",
                  "sfpg",
                  "ts"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_cluster",
                []
              ],
              [
                "test_scale",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5791579453550025,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_scale",
                  "test_cluster",
                  0.5791579453550025
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_cluster",
                "true"
              ],
              [
                "test_scale",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "TestHyperparameterScaling",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_gp",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_gp",
                  "[PyAssertStatement, PyAssertStatement]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_gp",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_gp",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_gp",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_gp",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_gp",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_gp",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_gp",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_gp",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_gp",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_gp",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_gp",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_gp",
                "true"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_gp",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_gp",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_gp",
                [
                  "test_features",
                  "train_features",
                  "opt",
                  "train_targets",
                  "kdict",
                  "scaled",
                  "pred",
                  "orig",
                  "gp",
                  "test_targets"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_gp",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_gp",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "test_\u0026_test_predict.py",
    "testCases": [
      {
        "name": "TestPrediction",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_gp_gaussian_kernel",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertNotEqual]"
                ],
                [
                  "test_rr_bootstrap",
                  "[]"
                ],
                [
                  "test_gp_addative_kernel",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_gp_laplacian_kernel",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_gp_quadratic_kernel",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_gp_update",
                  "[PyCallExpression: self.assertNotEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_general_gp",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_rr_loocv",
                  "[]"
                ],
                [
                  "test_gp_multiplication_kernel",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_gp_linear_kernel",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_gp_sensitivity",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_gp_gaussian_kernel",
                  "[]"
                ],
                [
                  "test_rr_bootstrap",
                  "[]"
                ],
                [
                  "test_gp_addative_kernel",
                  "[]"
                ],
                [
                  "test_gp_laplacian_kernel",
                  "[]"
                ],
                [
                  "test_gp_quadratic_kernel",
                  "[]"
                ],
                [
                  "test_gp_update",
                  "[]"
                ],
                [
                  "test_general_gp",
                  "[]"
                ],
                [
                  "test_rr_loocv",
                  "[]"
                ],
                [
                  "test_gp_multiplication_kernel",
                  "[]"
                ],
                [
                  "test_gp_linear_kernel",
                  "[]"
                ],
                [
                  "test_gp_sensitivity",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_gp_gaussian_kernel",
                  "false"
                ],
                [
                  "test_rr_bootstrap",
                  "true"
                ],
                [
                  "test_gp_addative_kernel",
                  "false"
                ],
                [
                  "test_gp_laplacian_kernel",
                  "false"
                ],
                [
                  "test_gp_quadratic_kernel",
                  "false"
                ],
                [
                  "test_gp_update",
                  "false"
                ],
                [
                  "test_general_gp",
                  "false"
                ],
                [
                  "test_rr_loocv",
                  "true"
                ],
                [
                  "test_gp_multiplication_kernel",
                  "false"
                ],
                [
                  "test_gp_linear_kernel",
                  "false"
                ],
                [
                  "test_gp_sensitivity",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_gp_gaussian_kernel",
                  "false"
                ],
                [
                  "test_rr_bootstrap",
                  "false"
                ],
                [
                  "test_gp_addative_kernel",
                  "false"
                ],
                [
                  "test_gp_laplacian_kernel",
                  "false"
                ],
                [
                  "test_gp_quadratic_kernel",
                  "false"
                ],
                [
                  "test_gp_update",
                  "false"
                ],
                [
                  "test_general_gp",
                  "false"
                ],
                [
                  "test_rr_loocv",
                  "false"
                ],
                [
                  "test_gp_multiplication_kernel",
                  "false"
                ],
                [
                  "test_gp_linear_kernel",
                  "false"
                ],
                [
                  "test_gp_sensitivity",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_gp_gaussian_kernel",
                  "true"
                ],
                [
                  "test_rr_bootstrap",
                  "false"
                ],
                [
                  "test_gp_addative_kernel",
                  "false"
                ],
                [
                  "test_gp_laplacian_kernel",
                  "false"
                ],
                [
                  "test_gp_quadratic_kernel",
                  "false"
                ],
                [
                  "test_gp_update",
                  "false"
                ],
                [
                  "test_general_gp",
                  "true"
                ],
                [
                  "test_rr_loocv",
                  "false"
                ],
                [
                  "test_gp_multiplication_kernel",
                  "false"
                ],
                [
                  "test_gp_linear_kernel",
                  "false"
                ],
                [
                  "test_gp_sensitivity",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_gp_gaussian_kernel",
                  "false"
                ],
                [
                  "test_rr_bootstrap",
                  "false"
                ],
                [
                  "test_gp_addative_kernel",
                  "false"
                ],
                [
                  "test_gp_laplacian_kernel",
                  "false"
                ],
                [
                  "test_gp_quadratic_kernel",
                  "false"
                ],
                [
                  "test_gp_update",
                  "false"
                ],
                [
                  "test_general_gp",
                  "false"
                ],
                [
                  "test_rr_loocv",
                  "false"
                ],
                [
                  "test_gp_multiplication_kernel",
                  "false"
                ],
                [
                  "test_gp_linear_kernel",
                  "false"
                ],
                [
                  "test_gp_sensitivity",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_gp_gaussian_kernel",
                "false"
              ],
              [
                "test_rr_bootstrap",
                "false"
              ],
              [
                "test_gp_addative_kernel",
                "false"
              ],
              [
                "test_gp_laplacian_kernel",
                "false"
              ],
              [
                "test_gp_quadratic_kernel",
                "false"
              ],
              [
                "test_gp_update",
                "false"
              ],
              [
                "test_general_gp",
                "false"
              ],
              [
                "test_rr_loocv",
                "false"
              ],
              [
                "test_gp_multiplication_kernel",
                "false"
              ],
              [
                "test_gp_linear_kernel",
                "false"
              ],
              [
                "test_gp_sensitivity",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_gp_gaussian_kernel",
                "false"
              ],
              [
                "test_rr_bootstrap",
                "false"
              ],
              [
                "test_gp_addative_kernel",
                "false"
              ],
              [
                "test_gp_laplacian_kernel",
                "false"
              ],
              [
                "test_gp_quadratic_kernel",
                "false"
              ],
              [
                "test_gp_update",
                "false"
              ],
              [
                "test_general_gp",
                "false"
              ],
              [
                "test_rr_loocv",
                "false"
              ],
              [
                "test_gp_multiplication_kernel",
                "false"
              ],
              [
                "test_gp_linear_kernel",
                "false"
              ],
              [
                "test_gp_sensitivity",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_gp_gaussian_kernel",
                []
              ],
              [
                "test_rr_bootstrap",
                []
              ],
              [
                "test_gp_addative_kernel",
                []
              ],
              [
                "test_gp_laplacian_kernel",
                []
              ],
              [
                "test_gp_quadratic_kernel",
                []
              ],
              [
                "test_gp_update",
                []
              ],
              [
                "test_general_gp",
                []
              ],
              [
                "test_rr_loocv",
                []
              ],
              [
                "test_gp_multiplication_kernel",
                []
              ],
              [
                "test_gp_linear_kernel",
                []
              ],
              [
                "test_gp_sensitivity",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_gp_gaussian_kernel",
                "false"
              ],
              [
                "test_rr_bootstrap",
                "false"
              ],
              [
                "test_gp_addative_kernel",
                "false"
              ],
              [
                "test_gp_laplacian_kernel",
                "false"
              ],
              [
                "test_gp_quadratic_kernel",
                "false"
              ],
              [
                "test_gp_update",
                "false"
              ],
              [
                "test_general_gp",
                "false"
              ],
              [
                "test_rr_loocv",
                "false"
              ],
              [
                "test_gp_multiplication_kernel",
                "false"
              ],
              [
                "test_gp_linear_kernel",
                "false"
              ],
              [
                "test_gp_sensitivity",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_gp_gaussian_kernel",
                "true"
              ],
              [
                "test_rr_bootstrap",
                "false"
              ],
              [
                "test_gp_addative_kernel",
                "false"
              ],
              [
                "test_gp_laplacian_kernel",
                "false"
              ],
              [
                "test_gp_quadratic_kernel",
                "false"
              ],
              [
                "test_gp_update",
                "false"
              ],
              [
                "test_general_gp",
                "false"
              ],
              [
                "test_rr_loocv",
                "false"
              ],
              [
                "test_gp_multiplication_kernel",
                "false"
              ],
              [
                "test_gp_linear_kernel",
                "false"
              ],
              [
                "test_gp_sensitivity",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_gp_gaussian_kernel",
                  "0"
                ],
                [
                  "test_rr_bootstrap",
                  "0"
                ],
                [
                  "test_gp_addative_kernel",
                  "0"
                ],
                [
                  "test_gp_laplacian_kernel",
                  "0"
                ],
                [
                  "test_gp_quadratic_kernel",
                  "0"
                ],
                [
                  "test_gp_update",
                  "0"
                ],
                [
                  "test_general_gp",
                  "0"
                ],
                [
                  "test_rr_loocv",
                  "0"
                ],
                [
                  "test_gp_multiplication_kernel",
                  "0"
                ],
                [
                  "test_gp_linear_kernel",
                  "0"
                ],
                [
                  "test_gp_sensitivity",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_gp_gaussian_kernel",
                  "0"
                ],
                [
                  "test_rr_bootstrap",
                  "0"
                ],
                [
                  "test_gp_addative_kernel",
                  "0"
                ],
                [
                  "test_gp_laplacian_kernel",
                  "0"
                ],
                [
                  "test_gp_quadratic_kernel",
                  "0"
                ],
                [
                  "test_gp_update",
                  "0"
                ],
                [
                  "test_general_gp",
                  "0"
                ],
                [
                  "test_rr_loocv",
                  "0"
                ],
                [
                  "test_gp_multiplication_kernel",
                  "0"
                ],
                [
                  "test_gp_linear_kernel",
                  "0"
                ],
                [
                  "test_gp_sensitivity",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_gp_gaussian_kernel",
                "true"
              ],
              [
                "test_rr_bootstrap",
                "true"
              ],
              [
                "test_gp_addative_kernel",
                "true"
              ],
              [
                "test_gp_laplacian_kernel",
                "true"
              ],
              [
                "test_gp_quadratic_kernel",
                "true"
              ],
              [
                "test_gp_update",
                "true"
              ],
              [
                "test_general_gp",
                "true"
              ],
              [
                "test_rr_loocv",
                "true"
              ],
              [
                "test_gp_multiplication_kernel",
                "true"
              ],
              [
                "test_gp_linear_kernel",
                "true"
              ],
              [
                "test_gp_sensitivity",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_gp_gaussian_kernel",
                "false"
              ],
              [
                "test_rr_bootstrap",
                "false"
              ],
              [
                "test_gp_addative_kernel",
                "false"
              ],
              [
                "test_gp_laplacian_kernel",
                "false"
              ],
              [
                "test_gp_quadratic_kernel",
                "false"
              ],
              [
                "test_gp_update",
                "false"
              ],
              [
                "test_general_gp",
                "false"
              ],
              [
                "test_rr_loocv",
                "false"
              ],
              [
                "test_gp_multiplication_kernel",
                "false"
              ],
              [
                "test_gp_linear_kernel",
                "false"
              ],
              [
                "test_gp_sensitivity",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_gp_gaussian_kernel",
                "4"
              ],
              [
                "test_rr_bootstrap",
                "0"
              ],
              [
                "test_gp_addative_kernel",
                "1"
              ],
              [
                "test_gp_laplacian_kernel",
                "1"
              ],
              [
                "test_gp_quadratic_kernel",
                "1"
              ],
              [
                "test_gp_update",
                "3"
              ],
              [
                "test_general_gp",
                "3"
              ],
              [
                "test_rr_loocv",
                "0"
              ],
              [
                "test_gp_multiplication_kernel",
                "1"
              ],
              [
                "test_gp_linear_kernel",
                "1"
              ],
              [
                "test_gp_sensitivity",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_gp_gaussian_kernel",
                [
                  "test_features",
                  "train_features",
                  "train_targets",
                  "kdict",
                  "pred",
                  "gp",
                  "mult_dim",
                  "test_targets"
                ]
              ],
              [
                "test_rr_bootstrap",
                [
                  "test_features",
                  "rr",
                  "p",
                  "train_features",
                  "train_targets",
                  "coef",
                  "reg",
                  "test_targets",
                  "sumd"
                ]
              ],
              [
                "test_gp_addative_kernel",
                [
                  "test_features",
                  "train_features",
                  "train_targets",
                  "kdict",
                  "pred",
                  "gp",
                  "test_targets"
                ]
              ],
              [
                "test_gp_laplacian_kernel",
                [
                  "test_features",
                  "train_features",
                  "train_targets",
                  "kdict",
                  "pred",
                  "gp",
                  "test_targets"
                ]
              ],
              [
                "test_gp_quadratic_kernel",
                [
                  "test_features",
                  "train_features",
                  "train_targets",
                  "kdict",
                  "pred",
                  "gp",
                  "test_targets"
                ]
              ],
              [
                "test_gp_update",
                [
                  "test_features",
                  "sigma",
                  "train_features",
                  "train_targets",
                  "kdict",
                  "d",
                  "pred",
                  "f",
                  "gp",
                  "new_features",
                  "test_targets"
                ]
              ],
              [
                "test_general_gp",
                [
                  "test_features",
                  "train_features",
                  "ggp",
                  "train_targets",
                  "pred",
                  "test_targets"
                ]
              ],
              [
                "test_rr_loocv",
                [
                  "test_features",
                  "rr",
                  "p",
                  "train_features",
                  "train_targets",
                  "coef",
                  "reg",
                  "test_targets",
                  "sumd"
                ]
              ],
              [
                "test_gp_multiplication_kernel",
                [
                  "test_features",
                  "train_features",
                  "train_targets",
                  "kdict",
                  "pred",
                  "gp",
                  "test_targets"
                ]
              ],
              [
                "test_gp_linear_kernel",
                [
                  "test_features",
                  "train_features",
                  "train_targets",
                  "kdict",
                  "pred",
                  "gp",
                  "test_targets"
                ]
              ],
              [
                "test_gp_sensitivity",
                [
                  "test_features",
                  "train_features",
                  "train_targets",
                  "kdict",
                  "test_targets",
                  "sen"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_gp_gaussian_kernel",
                []
              ],
              [
                "test_rr_bootstrap",
                []
              ],
              [
                "test_gp_addative_kernel",
                []
              ],
              [
                "test_gp_laplacian_kernel",
                []
              ],
              [
                "test_gp_quadratic_kernel",
                []
              ],
              [
                "test_gp_update",
                []
              ],
              [
                "test_general_gp",
                []
              ],
              [
                "test_rr_loocv",
                []
              ],
              [
                "test_gp_multiplication_kernel",
                []
              ],
              [
                "test_gp_linear_kernel",
                []
              ],
              [
                "test_gp_sensitivity",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7235731827298069,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_gp_laplacian_kernel",
                  "test_gp_sensitivity",
                  0.7247139263616466
                ],
                [
                  "test_gp_multiplication_kernel",
                  "test_gp_update",
                  0.8407067718248187
                ],
                [
                  "test_gp_laplacian_kernel",
                  "test_gp_update",
                  0.8035723073665278
                ],
                [
                  "test_gp_multiplication_kernel",
                  "test_gp_sensitivity",
                  0.7338125417726069
                ],
                [
                  "test_rr_bootstrap",
                  "test_gp_addative_kernel",
                  0.6634964339749089
                ],
                [
                  "test_gp_laplacian_kernel",
                  "test_gp_multiplication_kernel",
                  0.886829122547274
                ],
                [
                  "test_gp_gaussian_kernel",
                  "test_gp_laplacian_kernel",
                  0.8824378262491875
                ],
                [
                  "test_rr_loocv",
                  "test_gp_addative_kernel",
                  0.6634964339749089
                ],
                [
                  "test_gp_multiplication_kernel",
                  "test_general_gp",
                  0.5238835186571608
                ],
                [
                  "test_rr_loocv",
                  "test_gp_linear_kernel",
                  0.6558384138343331
                ],
                [
                  "test_gp_sensitivity",
                  "test_general_gp",
                  0.4647311170512838
                ],
                [
                  "test_gp_linear_kernel",
                  "test_gp_quadratic_kernel",
                  0.9090372804184715
                ],
                [
                  "test_gp_quadratic_kernel",
                  "test_gp_addative_kernel",
                  0.8705501618122976
                ],
                [
                  "test_gp_quadratic_kernel",
                  "test_general_gp",
                  0.5109375438138529
                ],
                [
                  "test_rr_loocv",
                  "test_rr_bootstrap",
                  0.98989898989899
                ],
                [
                  "test_gp_quadratic_kernel",
                  "test_gp_sensitivity",
                  0.7108739377491613
                ],
                [
                  "test_rr_bootstrap",
                  "test_gp_laplacian_kernel",
                  0.6523038294212632
                ],
                [
                  "test_rr_loocv",
                  "test_gp_laplacian_kernel",
                  0.6523038294212632
                ],
                [
                  "test_gp_quadratic_kernel",
                  "test_gp_laplacian_kernel",
                  0.9400481591988986
                ],
                [
                  "test_gp_addative_kernel",
                  "test_gp_multiplication_kernel",
                  0.9565329008667851
                ],
                [
                  "test_rr_loocv",
                  "test_gp_sensitivity",
                  0.6395228638030408
                ],
                [
                  "test_rr_bootstrap",
                  "test_gp_multiplication_kernel",
                  0.6602988421878089
                ],
                [
                  "test_rr_bootstrap",
                  "test_gp_update",
                  0.6796584542966134
                ],
                [
                  "test_rr_loocv",
                  "test_gp_quadratic_kernel",
                  0.6667974112583662
                ],
                [
                  "test_rr_loocv",
                  "test_gp_update",
                  0.6796584542966134
                ],
                [
                  "test_rr_bootstrap",
                  "test_gp_sensitivity",
                  0.6395228638030408
                ],
                [
                  "test_gp_gaussian_kernel",
                  "test_gp_update",
                  0.7769848226530973
                ],
                [
                  "test_gp_gaussian_kernel",
                  "test_gp_multiplication_kernel",
                  0.8498766446252178
                ],
                [
                  "test_rr_loocv",
                  "test_general_gp",
                  0.4632509392418202
                ],
                [
                  "test_rr_bootstrap",
                  "test_gp_quadratic_kernel",
                  0.6667974112583662
                ],
                [
                  "test_rr_bootstrap",
                  "test_general_gp",
                  0.4632509392418202
                ],
                [
                  "test_gp_gaussian_kernel",
                  "test_gp_sensitivity",
                  0.676364061602345
                ],
                [
                  "test_gp_linear_kernel",
                  "test_gp_gaussian_kernel",
                  0.8778310450923035
                ],
                [
                  "test_gp_quadratic_kernel",
                  "test_gp_update",
                  0.7973185758322854
                ],
                [
                  "test_gp_update",
                  "test_general_gp",
                  0.5479643032143802
                ],
                [
                  "test_gp_linear_kernel",
                  "test_gp_update",
                  0.8258717948184812
                ],
                [
                  "test_gp_addative_kernel",
                  "test_general_gp",
                  0.526420499687
                ],
                [
                  "test_gp_update",
                  "test_gp_sensitivity",
                  0.7019029674963491
                ],
                [
                  "test_gp_addative_kernel",
                  "test_gp_sensitivity",
                  0.7329507681140421
                ],
                [
                  "test_rr_loocv",
                  "test_gp_multiplication_kernel",
                  0.6602988421878089
                ],
                [
                  "test_gp_quadratic_kernel",
                  "test_gp_multiplication_kernel",
                  0.8792373129179539
                ],
                [
                  "test_gp_linear_kernel",
                  "test_gp_laplacian_kernel",
                  0.9217536582753902
                ],
                [
                  "test_rr_bootstrap",
                  "test_gp_linear_kernel",
                  0.6558384138343331
                ],
                [
                  "test_gp_addative_kernel",
                  "test_gp_update",
                  0.8276926168163724
                ],
                [
                  "test_rr_bootstrap",
                  "test_gp_gaussian_kernel",
                  0.6004681286629269
                ],
                [
                  "test_gp_linear_kernel",
                  "test_gp_multiplication_kernel",
                  0.9083338172104156
                ],
                [
                  "test_gp_linear_kernel",
                  "test_gp_sensitivity",
                  0.7259960788755172
                ],
                [
                  "test_gp_gaussian_kernel",
                  "test_general_gp",
                  0.5126424329781554
                ],
                [
                  "test_gp_gaussian_kernel",
                  "test_gp_addative_kernel",
                  0.8462463322425282
                ],
                [
                  "test_gp_linear_kernel",
                  "test_gp_addative_kernel",
                  0.9053420069208354
                ],
                [
                  "test_gp_linear_kernel",
                  "test_general_gp",
                  0.5568900989230111
                ],
                [
                  "test_gp_laplacian_kernel",
                  "test_gp_addative_kernel",
                  0.880639911219786
                ],
                [
                  "test_gp_laplacian_kernel",
                  "test_general_gp",
                  0.5350078534138871
                ],
                [
                  "test_rr_loocv",
                  "test_gp_gaussian_kernel",
                  0.6004681286629269
                ],
                [
                  "test_gp_quadratic_kernel",
                  "test_gp_gaussian_kernel",
                  0.8714207082588963
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_gp_gaussian_kernel",
                "false"
              ],
              [
                "test_rr_bootstrap",
                "false"
              ],
              [
                "test_gp_addative_kernel",
                "false"
              ],
              [
                "test_gp_laplacian_kernel",
                "false"
              ],
              [
                "test_gp_quadratic_kernel",
                "false"
              ],
              [
                "test_gp_update",
                "false"
              ],
              [
                "test_general_gp",
                "false"
              ],
              [
                "test_rr_loocv",
                "false"
              ],
              [
                "test_gp_multiplication_kernel",
                "false"
              ],
              [
                "test_gp_linear_kernel",
                "false"
              ],
              [
                "test_gp_sensitivity",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 11
      }
    ]
  },
  {
    "name": "test_\u0026_test_voronoi.py",
    "testCases": [
      {
        "name": "TestVoronoiFeatures",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_voronoi_fp_gen",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_voronoi_fp_gen",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_voronoi_fp_gen",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_voronoi_fp_gen",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_voronoi_fp_gen",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_voronoi_fp_gen",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_voronoi_fp_gen",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_voronoi_fp_gen",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_voronoi_fp_gen",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_voronoi_fp_gen",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_voronoi_fp_gen",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_voronoi_fp_gen",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_voronoi_fp_gen",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_voronoi_fp_gen",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_voronoi_fp_gen",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_voronoi_fp_gen",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_voronoi_fp_gen",
                [
                  "voro",
                  "features",
                  "alist"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_voronoi_fp_gen",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_voronoi_fp_gen",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "test_\u0026_test_functions.py",
    "testCases": [
      {
        "name": "ConfigTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_lml_optimizer",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_lml_optimizer",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_lml_optimizer",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_lml_optimizer",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_lml_optimizer",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_lml_optimizer",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_lml_optimizer",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_lml_optimizer",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_lml_optimizer",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_lml_optimizer",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_lml_optimizer",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_lml_optimizer",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_lml_optimizer",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_lml_optimizer",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_lml_optimizer",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_lml_optimizer",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_lml_optimizer",
                [
                  "test_features",
                  "train_features",
                  "train_targets",
                  "test_targets"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_lml_optimizer",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_lml_optimizer",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "test_\u0026_test_gradients.py",
    "testCases": [
      {
        "name": "TestGaussianKernel",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_kernel_prediction",
                  "[]"
                ],
                [
                  "test_cinv_is_good",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_kernel_train",
                  "[]"
                ],
                [
                  "test_hyperparameter_opt",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_kernel_prediction",
                  "[]"
                ],
                [
                  "test_cinv_is_good",
                  "[]"
                ],
                [
                  "test_kernel_train",
                  "[]"
                ],
                [
                  "test_hyperparameter_opt",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_kernel_prediction",
                  "false"
                ],
                [
                  "test_cinv_is_good",
                  "false"
                ],
                [
                  "test_kernel_train",
                  "false"
                ],
                [
                  "test_hyperparameter_opt",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_kernel_prediction",
                  "false"
                ],
                [
                  "test_cinv_is_good",
                  "false"
                ],
                [
                  "test_kernel_train",
                  "false"
                ],
                [
                  "test_hyperparameter_opt",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_kernel_prediction",
                  "false"
                ],
                [
                  "test_cinv_is_good",
                  "false"
                ],
                [
                  "test_kernel_train",
                  "false"
                ],
                [
                  "test_hyperparameter_opt",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_kernel_prediction",
                  "false"
                ],
                [
                  "test_cinv_is_good",
                  "false"
                ],
                [
                  "test_kernel_train",
                  "false"
                ],
                [
                  "test_hyperparameter_opt",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_kernel_prediction",
                "false"
              ],
              [
                "test_cinv_is_good",
                "false"
              ],
              [
                "test_kernel_train",
                "false"
              ],
              [
                "test_hyperparameter_opt",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_kernel_prediction",
                "false"
              ],
              [
                "test_cinv_is_good",
                "false"
              ],
              [
                "test_kernel_train",
                "false"
              ],
              [
                "test_hyperparameter_opt",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_kernel_prediction",
                []
              ],
              [
                "test_cinv_is_good",
                []
              ],
              [
                "test_kernel_train",
                []
              ],
              [
                "test_hyperparameter_opt",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_kernel_prediction",
                "false"
              ],
              [
                "test_cinv_is_good",
                "false"
              ],
              [
                "test_kernel_train",
                "false"
              ],
              [
                "test_hyperparameter_opt",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_kernel_prediction",
                "false"
              ],
              [
                "test_cinv_is_good",
                "false"
              ],
              [
                "test_kernel_train",
                "false"
              ],
              [
                "test_hyperparameter_opt",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_kernel_prediction",
                  "0"
                ],
                [
                  "test_cinv_is_good",
                  "0"
                ],
                [
                  "test_kernel_train",
                  "0"
                ],
                [
                  "test_hyperparameter_opt",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_kernel_prediction",
                  "0"
                ],
                [
                  "test_cinv_is_good",
                  "0"
                ],
                [
                  "test_kernel_train",
                  "0"
                ],
                [
                  "test_hyperparameter_opt",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_kernel_prediction",
                "true"
              ],
              [
                "test_cinv_is_good",
                "true"
              ],
              [
                "test_kernel_train",
                "true"
              ],
              [
                "test_hyperparameter_opt",
                "true"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_kernel_prediction",
                "false"
              ],
              [
                "test_cinv_is_good",
                "false"
              ],
              [
                "test_kernel_train",
                "false"
              ],
              [
                "test_hyperparameter_opt",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_kernel_prediction",
                "3"
              ],
              [
                "test_cinv_is_good",
                "3"
              ],
              [
                "test_kernel_train",
                "5"
              ],
              [
                "test_hyperparameter_opt",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_kernel_prediction",
                [
                  "d",
                  "ktilde",
                  "k_math",
                  "i_pos",
                  "k",
                  "j_pos",
                  "kgd_math"
                ]
              ],
              [
                "test_cinv_is_good",
                [
                  "kdict",
                  "gp",
                  "cov",
                  "cov_grad",
                  "gp_grad"
                ]
              ],
              [
                "test_kernel_train",
                [
                  "bigKtilde",
                  "bigKdd_math",
                  "d",
                  "bigK_math",
                  "bigK",
                  "bigKdd",
                  "bigKgd",
                  "i_pos",
                  "bigKdg",
                  "j_pos",
                  "bigKgd_math"
                ]
              ],
              [
                "test_hyperparameter_opt",
                [
                  "bigKtilde_hyp",
                  "kdict",
                  "gp_hyp",
                  "bigKgd_hyp",
                  "bigKdg_hyp"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_kernel_prediction",
                []
              ],
              [
                "test_cinv_is_good",
                []
              ],
              [
                "test_kernel_train",
                []
              ],
              [
                "test_hyperparameter_opt",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5228521042630798,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_cinv_is_good",
                  "test_kernel_prediction",
                  0.4092095515078029
                ],
                [
                  "test_kernel_train",
                  "test_hyperparameter_opt",
                  0.69065617204816
                ],
                [
                  "test_cinv_is_good",
                  "test_kernel_train",
                  0.45181137154556267
                ],
                [
                  "test_cinv_is_good",
                  "test_hyperparameter_opt",
                  0.5527998816429691
                ],
                [
                  "test_kernel_prediction",
                  "test_hyperparameter_opt",
                  0.3606971800331284
                ],
                [
                  "test_kernel_train",
                  "test_kernel_prediction",
                  0.6719384688008556
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_kernel_prediction",
                "false"
              ],
              [
                "test_cinv_is_good",
                "false"
              ],
              [
                "test_kernel_train",
                "false"
              ],
              [
                "test_hyperparameter_opt",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      }
    ]
  },
  {
    "name": "test_\u0026_test_ads_fp_gen.py",
    "testCases": [
      {
        "name": "TestAdsorbateFeatures",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_db_ads",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_constrained_ads",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_tags",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_slab_utils",
                  "[]"
                ],
                [
                  "test_recontruction",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_connectivity",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_db_ads",
                  "[]"
                ],
                [
                  "test_constrained_ads",
                  "[]"
                ],
                [
                  "test_tags",
                  "[]"
                ],
                [
                  "test_slab_utils",
                  "[]"
                ],
                [
                  "test_recontruction",
                  "[]"
                ],
                [
                  "test_connectivity",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_db_ads",
                  "true"
                ],
                [
                  "test_constrained_ads",
                  "true"
                ],
                [
                  "test_tags",
                  "true"
                ],
                [
                  "test_slab_utils",
                  "true"
                ],
                [
                  "test_recontruction",
                  "true"
                ],
                [
                  "test_connectivity",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_db_ads",
                  "true"
                ],
                [
                  "test_constrained_ads",
                  "true"
                ],
                [
                  "test_tags",
                  "false"
                ],
                [
                  "test_slab_utils",
                  "false"
                ],
                [
                  "test_recontruction",
                  "false"
                ],
                [
                  "test_connectivity",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_db_ads",
                  "false"
                ],
                [
                  "test_constrained_ads",
                  "false"
                ],
                [
                  "test_tags",
                  "false"
                ],
                [
                  "test_slab_utils",
                  "false"
                ],
                [
                  "test_recontruction",
                  "false"
                ],
                [
                  "test_connectivity",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_db_ads",
                  "false"
                ],
                [
                  "test_constrained_ads",
                  "false"
                ],
                [
                  "test_tags",
                  "false"
                ],
                [
                  "test_slab_utils",
                  "false"
                ],
                [
                  "test_recontruction",
                  "false"
                ],
                [
                  "test_connectivity",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_db_ads",
                "false"
              ],
              [
                "test_constrained_ads",
                "false"
              ],
              [
                "test_tags",
                "false"
              ],
              [
                "test_slab_utils",
                "false"
              ],
              [
                "test_recontruction",
                "false"
              ],
              [
                "test_connectivity",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_db_ads",
                "false"
              ],
              [
                "test_constrained_ads",
                "false"
              ],
              [
                "test_tags",
                "false"
              ],
              [
                "test_slab_utils",
                "false"
              ],
              [
                "test_recontruction",
                "false"
              ],
              [
                "test_connectivity",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_db_ads",
                []
              ],
              [
                "test_constrained_ads",
                []
              ],
              [
                "test_tags",
                []
              ],
              [
                "test_slab_utils",
                []
              ],
              [
                "test_recontruction",
                []
              ],
              [
                "test_connectivity",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_db_ads",
                "false"
              ],
              [
                "test_constrained_ads",
                "false"
              ],
              [
                "test_tags",
                "false"
              ],
              [
                "test_slab_utils",
                "false"
              ],
              [
                "test_recontruction",
                "false"
              ],
              [
                "test_connectivity",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_db_ads",
                "false"
              ],
              [
                "test_constrained_ads",
                "false"
              ],
              [
                "test_tags",
                "false"
              ],
              [
                "test_slab_utils",
                "false"
              ],
              [
                "test_recontruction",
                "false"
              ],
              [
                "test_connectivity",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_db_ads",
                  "0"
                ],
                [
                  "test_constrained_ads",
                  "0"
                ],
                [
                  "test_tags",
                  "0"
                ],
                [
                  "test_slab_utils",
                  "0"
                ],
                [
                  "test_recontruction",
                  "0"
                ],
                [
                  "test_connectivity",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_db_ads",
                  "0"
                ],
                [
                  "test_constrained_ads",
                  "0"
                ],
                [
                  "test_tags",
                  "0"
                ],
                [
                  "test_slab_utils",
                  "0"
                ],
                [
                  "test_recontruction",
                  "0"
                ],
                [
                  "test_connectivity",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_db_ads",
                "true"
              ],
              [
                "test_constrained_ads",
                "true"
              ],
              [
                "test_tags",
                "true"
              ],
              [
                "test_slab_utils",
                "false"
              ],
              [
                "test_recontruction",
                "false"
              ],
              [
                "test_connectivity",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_db_ads",
                "false"
              ],
              [
                "test_constrained_ads",
                "false"
              ],
              [
                "test_tags",
                "false"
              ],
              [
                "test_slab_utils",
                "false"
              ],
              [
                "test_recontruction",
                "false"
              ],
              [
                "test_connectivity",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_db_ads",
                "1"
              ],
              [
                "test_constrained_ads",
                "1"
              ],
              [
                "test_tags",
                "1"
              ],
              [
                "test_slab_utils",
                "0"
              ],
              [
                "test_recontruction",
                "1"
              ],
              [
                "test_connectivity",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_db_ads",
                [
                  "gen",
                  "images",
                  "train_fpv",
                  "matrix",
                  "labels"
                ]
              ],
              [
                "test_constrained_ads",
                [
                  "gen",
                  "images",
                  "c_atoms",
                  "train_fpv",
                  "matrix",
                  "labels"
                ]
              ],
              [
                "test_tags",
                [
                  "gen",
                  "images",
                  "train_fpv",
                  "matrix",
                  "labels"
                ]
              ],
              [
                "test_slab_utils",
                [
                  "images",
                  "li",
                  "lz",
                  "slab"
                ]
              ],
              [
                "test_recontruction",
                [
                  "images",
                  "species",
                  "image_pairs",
                  "r_index",
                  "slabs",
                  "slab"
                ]
              ],
              [
                "test_connectivity",
                [
                  "gen",
                  "images"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_db_ads",
                []
              ],
              [
                "test_constrained_ads",
                []
              ],
              [
                "test_tags",
                []
              ],
              [
                "test_slab_utils",
                []
              ],
              [
                "test_recontruction",
                []
              ],
              [
                "test_connectivity",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5753266519769012,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_constrained_ads",
                  "test_recontruction",
                  0.508965669403722
                ],
                [
                  "test_recontruction",
                  "test_connectivity",
                  0.6338656910463873
                ],
                [
                  "test_constrained_ads",
                  "test_connectivity",
                  0.4875084344749437
                ],
                [
                  "test_tags",
                  "test_recontruction",
                  0.4797531067937558
                ],
                [
                  "test_tags",
                  "test_connectivity",
                  0.5037600168625652
                ],
                [
                  "test_tags",
                  "test_constrained_ads",
                  0.8456376143646729
                ],
                [
                  "test_db_ads",
                  "test_recontruction",
                  0.4347009630634381
                ],
                [
                  "test_tags",
                  "test_db_ads",
                  0.871307808744278
                ],
                [
                  "test_slab_utils",
                  "test_connectivity",
                  0.5744269579035527
                ],
                [
                  "test_db_ads",
                  "test_slab_utils",
                  0.38391020316426977
                ],
                [
                  "test_db_ads",
                  "test_connectivity",
                  0.42862092987892314
                ],
                [
                  "test_constrained_ads",
                  "test_slab_utils",
                  0.4871249017002305
                ],
                [
                  "test_constrained_ads",
                  "test_db_ads",
                  0.8473322552783952
                ],
                [
                  "test_tags",
                  "test_slab_utils",
                  0.4355724051843766
                ],
                [
                  "test_recontruction",
                  "test_slab_utils",
                  0.7074128217900072
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_db_ads",
                "true"
              ],
              [
                "test_constrained_ads",
                "true"
              ],
              [
                "test_tags",
                "true"
              ],
              [
                "test_slab_utils",
                "false"
              ],
              [
                "test_recontruction",
                "true"
              ],
              [
                "test_connectivity",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 6
      }
    ]
  },
  {
    "name": "test_\u0026_test_data_clean.py",
    "testCases": [
      {
        "name": "TestDataClean",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_variance",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_skew",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_inf",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_outlier",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_general",
                  "[PyCallExpression: self.assertNotEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_variance",
                  "[]"
                ],
                [
                  "test_skew",
                  "[]"
                ],
                [
                  "test_inf",
                  "[]"
                ],
                [
                  "test_outlier",
                  "[]"
                ],
                [
                  "test_general",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_variance",
                  "false"
                ],
                [
                  "test_skew",
                  "false"
                ],
                [
                  "test_inf",
                  "false"
                ],
                [
                  "test_outlier",
                  "false"
                ],
                [
                  "test_general",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_variance",
                  "false"
                ],
                [
                  "test_skew",
                  "false"
                ],
                [
                  "test_inf",
                  "false"
                ],
                [
                  "test_outlier",
                  "false"
                ],
                [
                  "test_general",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_variance",
                  "false"
                ],
                [
                  "test_skew",
                  "false"
                ],
                [
                  "test_inf",
                  "false"
                ],
                [
                  "test_outlier",
                  "false"
                ],
                [
                  "test_general",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_variance",
                  "false"
                ],
                [
                  "test_skew",
                  "false"
                ],
                [
                  "test_inf",
                  "false"
                ],
                [
                  "test_outlier",
                  "false"
                ],
                [
                  "test_general",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_variance",
                "false"
              ],
              [
                "test_skew",
                "false"
              ],
              [
                "test_inf",
                "false"
              ],
              [
                "test_outlier",
                "false"
              ],
              [
                "test_general",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_variance",
                "false"
              ],
              [
                "test_skew",
                "false"
              ],
              [
                "test_inf",
                "false"
              ],
              [
                "test_outlier",
                "false"
              ],
              [
                "test_general",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_variance",
                []
              ],
              [
                "test_skew",
                []
              ],
              [
                "test_inf",
                []
              ],
              [
                "test_outlier",
                []
              ],
              [
                "test_general",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_variance",
                "false"
              ],
              [
                "test_skew",
                "false"
              ],
              [
                "test_inf",
                "false"
              ],
              [
                "test_outlier",
                "false"
              ],
              [
                "test_general",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_variance",
                "false"
              ],
              [
                "test_skew",
                "false"
              ],
              [
                "test_inf",
                "false"
              ],
              [
                "test_outlier",
                "false"
              ],
              [
                "test_general",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_variance",
                  "0"
                ],
                [
                  "test_skew",
                  "0"
                ],
                [
                  "test_inf",
                  "0"
                ],
                [
                  "test_outlier",
                  "0"
                ],
                [
                  "test_general",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_variance",
                  "0"
                ],
                [
                  "test_skew",
                  "0"
                ],
                [
                  "test_inf",
                  "0"
                ],
                [
                  "test_outlier",
                  "0"
                ],
                [
                  "test_general",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_variance",
                "false"
              ],
              [
                "test_skew",
                "false"
              ],
              [
                "test_inf",
                "false"
              ],
              [
                "test_outlier",
                "false"
              ],
              [
                "test_general",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_variance",
                "false"
              ],
              [
                "test_skew",
                "false"
              ],
              [
                "test_inf",
                "false"
              ],
              [
                "test_outlier",
                "false"
              ],
              [
                "test_general",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_variance",
                "2"
              ],
              [
                "test_skew",
                "2"
              ],
              [
                "test_inf",
                "2"
              ],
              [
                "test_outlier",
                "3"
              ],
              [
                "test_general",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_variance",
                [
                  "features",
                  "test",
                  "informative",
                  "labels"
                ]
              ],
              [
                "test_skew",
                [
                  "features",
                  "test",
                  "symmetric",
                  "labels"
                ]
              ],
              [
                "test_inf",
                [
                  "features",
                  "test",
                  "finite",
                  "labels"
                ]
              ],
              [
                "test_outlier",
                [
                  "t",
                  "d",
                  "f"
                ]
              ],
              [
                "test_general",
                [
                  "test_features",
                  "train_features",
                  "clean_train",
                  "train_targets",
                  "clean_test",
                  "clean",
                  "transform_test",
                  "clean_targets",
                  "_"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_variance",
                []
              ],
              [
                "test_skew",
                []
              ],
              [
                "test_inf",
                []
              ],
              [
                "test_outlier",
                []
              ],
              [
                "test_general",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6178786122897687,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_variance",
                  "test_inf",
                  0.9126759397308778
                ],
                [
                  "test_outlier",
                  "test_inf",
                  0.5804918003909392
                ],
                [
                  "test_skew",
                  "test_general",
                  0.4290581651605165
                ],
                [
                  "test_outlier",
                  "test_general",
                  0.37729688731351946
                ],
                [
                  "test_inf",
                  "test_skew",
                  0.926276730500579
                ],
                [
                  "test_variance",
                  "test_skew",
                  0.9537034335863794
                ],
                [
                  "test_outlier",
                  "test_variance",
                  0.5665604222625362
                ],
                [
                  "test_variance",
                  "test_general",
                  0.44162528770083137
                ],
                [
                  "test_inf",
                  "test_general",
                  0.4285973077072615
                ],
                [
                  "test_outlier",
                  "test_skew",
                  0.5625001485442466
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_variance",
                "true"
              ],
              [
                "test_skew",
                "true"
              ],
              [
                "test_inf",
                "true"
              ],
              [
                "test_outlier",
                "true"
              ],
              [
                "test_general",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 5
      }
    ]
  },
  {
    "name": "test_\u0026_test_validation.py",
    "testCases": [
      {
        "name": "TestValidation",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_hierarchy",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_kfold",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_hierarchy",
                  "[]"
                ],
                [
                  "test_kfold",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_hierarchy",
                  "false"
                ],
                [
                  "test_kfold",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_hierarchy",
                  "false"
                ],
                [
                  "test_kfold",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_hierarchy",
                  "false"
                ],
                [
                  "test_kfold",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_hierarchy",
                  "false"
                ],
                [
                  "test_kfold",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_hierarchy",
                "false"
              ],
              [
                "test_kfold",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_hierarchy",
                "false"
              ],
              [
                "test_kfold",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_hierarchy",
                []
              ],
              [
                "test_kfold",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_hierarchy",
                "false"
              ],
              [
                "test_kfold",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_hierarchy",
                "true"
              ],
              [
                "test_kfold",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_hierarchy",
                  "0"
                ],
                [
                  "test_kfold",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_hierarchy",
                  "0"
                ],
                [
                  "test_kfold",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_hierarchy",
                "false"
              ],
              [
                "test_kfold",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_hierarchy",
                "false"
              ],
              [
                "test_kfold",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_hierarchy",
                "3"
              ],
              [
                "test_kfold",
                "8"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_hierarchy",
                [
                  "test_features",
                  "train_features",
                  "train_targets",
                  "split",
                  "pred",
                  "test_targets",
                  "hv",
                  "ind"
                ]
              ],
              [
                "test_kfold",
                [
                  "features",
                  "t",
                  "f",
                  "f1",
                  "targets",
                  "t1",
                  "_"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_hierarchy",
                []
              ],
              [
                "test_kfold",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5844235632638289,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_hierarchy",
                  "test_kfold",
                  0.5844235632638289
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_hierarchy",
                "true"
              ],
              [
                "test_kfold",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "test_\u0026_test_acquisition.py",
    "testCases": [
      {
        "name": "TestAcquisition",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_acquisition",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_surrogate_model",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_acquisition",
                  "[]"
                ],
                [
                  "test_surrogate_model",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_acquisition",
                  "false"
                ],
                [
                  "test_surrogate_model",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_acquisition",
                  "false"
                ],
                [
                  "test_surrogate_model",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_acquisition",
                  "true"
                ],
                [
                  "test_surrogate_model",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_acquisition",
                  "false"
                ],
                [
                  "test_surrogate_model",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_acquisition",
                "false"
              ],
              [
                "test_surrogate_model",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_acquisition",
                "false"
              ],
              [
                "test_surrogate_model",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_acquisition",
                []
              ],
              [
                "test_surrogate_model",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_acquisition",
                "false"
              ],
              [
                "test_surrogate_model",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_acquisition",
                "false"
              ],
              [
                "test_surrogate_model",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_acquisition",
                  "0"
                ],
                [
                  "test_surrogate_model",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_acquisition",
                  "0"
                ],
                [
                  "test_surrogate_model",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_acquisition",
                "true"
              ],
              [
                "test_surrogate_model",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_acquisition",
                "false"
              ],
              [
                "test_surrogate_model",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_acquisition",
                "10"
              ],
              [
                "test_surrogate_model",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_acquisition",
                [
                  "test_features",
                  "train_features",
                  "train_targets",
                  "kdict",
                  "pred",
                  "gp",
                  "train_atoms",
                  "test_targets",
                  "acq",
                  "test_atoms"
                ]
              ],
              [
                "test_surrogate_model",
                [
                  "test_features",
                  "train_features",
                  "train_targets",
                  "batch_size",
                  "to_acquire",
                  "sg1",
                  "train_atoms",
                  "test_targets",
                  "sg0",
                  "test_atoms",
                  "_",
                  "sg2"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_acquisition",
                []
              ],
              [
                "test_surrogate_model",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.4325897988770701,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_acquisition",
                  "test_surrogate_model",
                  0.4325897988770701
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_acquisition",
                "true"
              ],
              [
                "test_surrogate_model",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "test_\u0026_test_bulk_fp_gen.py",
    "testCases": [
      {
        "name": "TestBulkFeatures",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_bulk_fp_gen",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_bulk_fp_gen",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_bulk_fp_gen",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_bulk_fp_gen",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_bulk_fp_gen",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_bulk_fp_gen",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bulk_fp_gen",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_bulk_fp_gen",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_bulk_fp_gen",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bulk_fp_gen",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bulk_fp_gen",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_bulk_fp_gen",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_bulk_fp_gen",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_bulk_fp_gen",
                "true"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bulk_fp_gen",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bulk_fp_gen",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_bulk_fp_gen",
                [
                  "gen",
                  "images",
                  "train_fpv",
                  "matrix",
                  "labels"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_bulk_fp_gen",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_bulk_fp_gen",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "test_\u0026_test_feature_base.py",
    "testCases": [
      {
        "name": "TestBaseGenerator",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_feature_base",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_feature_base",
                  "[PyAssertStatement, PyAssertStatement]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_feature_base",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_feature_base",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_feature_base",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_feature_base",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_feature_base",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_feature_base",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_feature_base",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_feature_base",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_feature_base",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_feature_base",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_feature_base",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_feature_base",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_feature_base",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_feature_base",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_feature_base",
                [
                  "all_cand",
                  "pos",
                  "f",
                  "gadb",
                  "nl"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_feature_base",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_feature_base",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "test_\u0026_test_neighborlist.py",
    "testCases": [
      {
        "name": "TestNeighborList",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_ase_nl",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_pdf",
                  "[]"
                ],
                [
                  "test_catlearn_nl",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_ase_nl",
                  "[]"
                ],
                [
                  "test_pdf",
                  "[]"
                ],
                [
                  "test_catlearn_nl",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_ase_nl",
                  "false"
                ],
                [
                  "test_pdf",
                  "true"
                ],
                [
                  "test_catlearn_nl",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_ase_nl",
                  "false"
                ],
                [
                  "test_pdf",
                  "false"
                ],
                [
                  "test_catlearn_nl",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_ase_nl",
                  "false"
                ],
                [
                  "test_pdf",
                  "false"
                ],
                [
                  "test_catlearn_nl",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_ase_nl",
                  "false"
                ],
                [
                  "test_pdf",
                  "false"
                ],
                [
                  "test_catlearn_nl",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_ase_nl",
                "false"
              ],
              [
                "test_pdf",
                "false"
              ],
              [
                "test_catlearn_nl",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_ase_nl",
                "false"
              ],
              [
                "test_pdf",
                "false"
              ],
              [
                "test_catlearn_nl",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_ase_nl",
                []
              ],
              [
                "test_pdf",
                []
              ],
              [
                "test_catlearn_nl",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_ase_nl",
                "false"
              ],
              [
                "test_pdf",
                "false"
              ],
              [
                "test_catlearn_nl",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_ase_nl",
                "false"
              ],
              [
                "test_pdf",
                "false"
              ],
              [
                "test_catlearn_nl",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_ase_nl",
                  "0"
                ],
                [
                  "test_pdf",
                  "0"
                ],
                [
                  "test_catlearn_nl",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_ase_nl",
                  "0"
                ],
                [
                  "test_pdf",
                  "0"
                ],
                [
                  "test_catlearn_nl",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_ase_nl",
                "false"
              ],
              [
                "test_pdf",
                "false"
              ],
              [
                "test_catlearn_nl",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_ase_nl",
                "false"
              ],
              [
                "test_pdf",
                "false"
              ],
              [
                "test_catlearn_nl",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_ase_nl",
                "1"
              ],
              [
                "test_pdf",
                "0"
              ],
              [
                "test_catlearn_nl",
                "4"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_ase_nl",
                [
                  "all_cand",
                  "gadb",
                  "nl"
                ]
              ],
              [
                "test_pdf",
                [
                  "pdf",
                  "dev",
                  "all_cand",
                  "gadb",
                  "x1",
                  "cutoff_dictionary",
                  "x2"
                ]
              ],
              [
                "test_catlearn_nl",
                [
                  "nl1",
                  "all_cand",
                  "nl5",
                  "nl4",
                  "gadb",
                  "nlfull"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_ase_nl",
                []
              ],
              [
                "test_pdf",
                []
              ],
              [
                "test_catlearn_nl",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5903134376494499,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_ase_nl",
                  "test_pdf",
                  0.5780497582289139
                ],
                [
                  "test_catlearn_nl",
                  "test_pdf",
                  0.49132979469932164
                ],
                [
                  "test_ase_nl",
                  "test_catlearn_nl",
                  0.7015607600201141
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_ase_nl",
                "false"
              ],
              [
                "test_pdf",
                "false"
              ],
              [
                "test_catlearn_nl",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "test_\u0026_test_chalcogenides.py",
    "testCases": [
      {
        "name": "TestChalcogenides",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_periodic_table",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_adsorption",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_periodic_table",
                  "[]"
                ],
                [
                  "test_adsorption",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_periodic_table",
                  "false"
                ],
                [
                  "test_adsorption",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_periodic_table",
                  "false"
                ],
                [
                  "test_adsorption",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_periodic_table",
                  "false"
                ],
                [
                  "test_adsorption",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_periodic_table",
                  "false"
                ],
                [
                  "test_adsorption",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_periodic_table",
                "false"
              ],
              [
                "test_adsorption",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_periodic_table",
                "false"
              ],
              [
                "test_adsorption",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_periodic_table",
                []
              ],
              [
                "test_adsorption",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_periodic_table",
                "false"
              ],
              [
                "test_adsorption",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_periodic_table",
                "false"
              ],
              [
                "test_adsorption",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_periodic_table",
                  "0"
                ],
                [
                  "test_adsorption",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_periodic_table",
                  "0"
                ],
                [
                  "test_adsorption",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_periodic_table",
                "false"
              ],
              [
                "test_adsorption",
                "true"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_periodic_table",
                "false"
              ],
              [
                "test_adsorption",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_periodic_table",
                "1"
              ],
              [
                "test_adsorption",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_periodic_table",
                [
                  "r",
                  "w"
                ]
              ],
              [
                "test_adsorption",
                [
                  "gen",
                  "images",
                  "site",
                  "charges",
                  "slabs_dict",
                  "species",
                  "train_fpv",
                  "matrix",
                  "slabs",
                  "ligand",
                  "chemi",
                  "labels"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_periodic_table",
                []
              ],
              [
                "test_adsorption",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.196502261274855,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_adsorption",
                  "test_periodic_table",
                  0.196502261274855
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_periodic_table",
                "true"
              ],
              [
                "test_adsorption",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "test_\u0026_test_learning_curve.py",
    "testCases": [
      {
        "name": "TestCurve",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_simple_learn",
                  "[]"
                ],
                [
                  "test_learning_curve",
                  "[]"
                ],
                [
                  "test_frequency",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_simple_learn",
                  "[]"
                ],
                [
                  "test_learning_curve",
                  "[]"
                ],
                [
                  "test_frequency",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_simple_learn",
                  "false"
                ],
                [
                  "test_learning_curve",
                  "true"
                ],
                [
                  "test_frequency",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_simple_learn",
                  "false"
                ],
                [
                  "test_learning_curve",
                  "false"
                ],
                [
                  "test_frequency",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_simple_learn",
                  "false"
                ],
                [
                  "test_learning_curve",
                  "false"
                ],
                [
                  "test_frequency",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_simple_learn",
                  "false"
                ],
                [
                  "test_learning_curve",
                  "false"
                ],
                [
                  "test_frequency",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_simple_learn",
                "false"
              ],
              [
                "test_learning_curve",
                "false"
              ],
              [
                "test_frequency",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_simple_learn",
                "false"
              ],
              [
                "test_learning_curve",
                "false"
              ],
              [
                "test_frequency",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_simple_learn",
                []
              ],
              [
                "test_learning_curve",
                []
              ],
              [
                "test_frequency",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_simple_learn",
                "false"
              ],
              [
                "test_learning_curve",
                "false"
              ],
              [
                "test_frequency",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_simple_learn",
                "false"
              ],
              [
                "test_learning_curve",
                "false"
              ],
              [
                "test_frequency",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_simple_learn",
                  "0"
                ],
                [
                  "test_learning_curve",
                  "0"
                ],
                [
                  "test_frequency",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_simple_learn",
                  "0"
                ],
                [
                  "test_learning_curve",
                  "0"
                ],
                [
                  "test_frequency",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_simple_learn",
                "true"
              ],
              [
                "test_learning_curve",
                "true"
              ],
              [
                "test_frequency",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_simple_learn",
                "false"
              ],
              [
                "test_learning_curve",
                "false"
              ],
              [
                "test_frequency",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_simple_learn",
                "0"
              ],
              [
                "test_learning_curve",
                "0"
              ],
              [
                "test_frequency",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_simple_learn",
                [
                  "test_features",
                  "output",
                  "train_features",
                  "train_targets",
                  "step",
                  "min_data",
                  "test_targets",
                  "ge"
                ]
              ],
              [
                "test_learning_curve",
                [
                  "result",
                  "lim",
                  "set_size",
                  "select_limit",
                  "p_error",
                  "featselect_featconst",
                  "PC",
                  "featselect_featvar",
                  "i",
                  "hv"
                ]
              ],
              [
                "test_frequency",
                [
                  "dif",
                  "bins",
                  "hist1",
                  "data2",
                  "data1",
                  "data_all",
                  "hv",
                  "hit1",
                  "r1_hist2",
                  "hit2",
                  "r1_hist1",
                  "select_limit",
                  "r2_hist1",
                  "r2_hist2",
                  "selected_features1",
                  "selected_features2",
                  "hist2"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_simple_learn",
                []
              ],
              [
                "test_learning_curve",
                []
              ],
              [
                "test_frequency",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5747235022996066,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_frequency",
                  "test_simple_learn",
                  0.4916721683102315
                ],
                [
                  "test_learning_curve",
                  "test_simple_learn",
                  0.44971441981096905
                ],
                [
                  "test_learning_curve",
                  "test_frequency",
                  0.782783918777619
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_simple_learn",
                "false"
              ],
              [
                "test_learning_curve",
                "false"
              ],
              [
                "test_frequency",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "test_\u0026_test_autocorrelation.py",
    "testCases": [
      {
        "name": "TestAutoCorrelation",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_generator",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_generator",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_generator",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_generator",
                  "true"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_generator",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_generator",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_generator",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_generator",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_generator",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_generator",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_generator",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_generator",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_generator",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_generator",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_generator",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_generator",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_generator",
                [
                  "radii",
                  "gen",
                  "features",
                  "images",
                  "atoms"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_generator",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_generator",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "test_\u0026_test_1_feature_generation.py",
    "testCases": [
      {
        "name": "TestFeatureGeneration",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_storage",
                  "[]"
                ],
                [
                  "test_generators",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_storage",
                  "[]"
                ],
                [
                  "test_generators",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_storage",
                  "true"
                ],
                [
                  "test_generators",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_storage",
                  "true"
                ],
                [
                  "test_generators",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_storage",
                  "false"
                ],
                [
                  "test_generators",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_storage",
                  "false"
                ],
                [
                  "test_generators",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_storage",
                "false"
              ],
              [
                "test_generators",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_storage",
                "false"
              ],
              [
                "test_generators",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_storage",
                []
              ],
              [
                "test_generators",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_storage",
                "false"
              ],
              [
                "test_generators",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_storage",
                "false"
              ],
              [
                "test_generators",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_storage",
                  "0"
                ],
                [
                  "test_generators",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_storage",
                  "0"
                ],
                [
                  "test_generators",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_storage",
                "true"
              ],
              [
                "test_generators",
                "true"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_storage",
                "false"
              ],
              [
                "test_generators",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_storage",
                "0"
              ],
              [
                "test_generators",
                "28"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_storage",
                [
                  "dd",
                  "descriptors",
                  "cand_data",
                  "names",
                  "train_fingerprint",
                  "train_target",
                  "all_id",
                  "db_name",
                  "d",
                  "new_data",
                  "targets"
                ]
              ],
              [
                "test_generators",
                [
                  "data",
                  "d",
                  "all_cand",
                  "an_prop",
                  "f",
                  "testset",
                  "no_prop",
                  "gadb",
                  "trainset",
                  "n",
                  "train_fp"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_storage",
                []
              ],
              [
                "test_generators",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.41929989293830117,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_generators",
                  "test_storage",
                  0.41929989293830117
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_storage",
                "false"
              ],
              [
                "test_generators",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "test_\u0026_test_feature_optimization.py",
    "testCases": [
      {
        "name": "TestFeatureOptimization",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_extract",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_greedy",
                  "[]"
                ],
                [
                  "test_expand",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_importance",
                  "[]"
                ],
                [
                  "test_sammon",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_screening",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_extract",
                  "[]"
                ],
                [
                  "test_greedy",
                  "[]"
                ],
                [
                  "test_expand",
                  "[]"
                ],
                [
                  "test_importance",
                  "[]"
                ],
                [
                  "test_sammon",
                  "[]"
                ],
                [
                  "test_screening",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_extract",
                  "false"
                ],
                [
                  "test_greedy",
                  "false"
                ],
                [
                  "test_expand",
                  "false"
                ],
                [
                  "test_importance",
                  "false"
                ],
                [
                  "test_sammon",
                  "false"
                ],
                [
                  "test_screening",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_extract",
                  "false"
                ],
                [
                  "test_greedy",
                  "false"
                ],
                [
                  "test_expand",
                  "true"
                ],
                [
                  "test_importance",
                  "false"
                ],
                [
                  "test_sammon",
                  "false"
                ],
                [
                  "test_screening",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_extract",
                  "true"
                ],
                [
                  "test_greedy",
                  "false"
                ],
                [
                  "test_expand",
                  "true"
                ],
                [
                  "test_importance",
                  "false"
                ],
                [
                  "test_sammon",
                  "false"
                ],
                [
                  "test_screening",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_extract",
                  "false"
                ],
                [
                  "test_greedy",
                  "false"
                ],
                [
                  "test_expand",
                  "false"
                ],
                [
                  "test_importance",
                  "false"
                ],
                [
                  "test_sammon",
                  "false"
                ],
                [
                  "test_screening",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_extract",
                "false"
              ],
              [
                "test_greedy",
                "false"
              ],
              [
                "test_expand",
                "false"
              ],
              [
                "test_importance",
                "false"
              ],
              [
                "test_sammon",
                "false"
              ],
              [
                "test_screening",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_extract",
                "false"
              ],
              [
                "test_greedy",
                "false"
              ],
              [
                "test_expand",
                "false"
              ],
              [
                "test_importance",
                "false"
              ],
              [
                "test_sammon",
                "false"
              ],
              [
                "test_screening",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_extract",
                []
              ],
              [
                "test_greedy",
                []
              ],
              [
                "test_expand",
                []
              ],
              [
                "test_importance",
                []
              ],
              [
                "test_sammon",
                []
              ],
              [
                "test_screening",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_extract",
                "false"
              ],
              [
                "test_greedy",
                "false"
              ],
              [
                "test_expand",
                "false"
              ],
              [
                "test_importance",
                "false"
              ],
              [
                "test_sammon",
                "false"
              ],
              [
                "test_screening",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_extract",
                "false"
              ],
              [
                "test_greedy",
                "false"
              ],
              [
                "test_expand",
                "false"
              ],
              [
                "test_importance",
                "false"
              ],
              [
                "test_sammon",
                "true"
              ],
              [
                "test_screening",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_extract",
                  "0"
                ],
                [
                  "test_greedy",
                  "0"
                ],
                [
                  "test_expand",
                  "0"
                ],
                [
                  "test_importance",
                  "0"
                ],
                [
                  "test_sammon",
                  "0"
                ],
                [
                  "test_screening",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_extract",
                  "0"
                ],
                [
                  "test_greedy",
                  "0"
                ],
                [
                  "test_expand",
                  "0"
                ],
                [
                  "test_importance",
                  "0"
                ],
                [
                  "test_sammon",
                  "0"
                ],
                [
                  "test_screening",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_extract",
                "false"
              ],
              [
                "test_greedy",
                "false"
              ],
              [
                "test_expand",
                "false"
              ],
              [
                "test_importance",
                "false"
              ],
              [
                "test_sammon",
                "false"
              ],
              [
                "test_screening",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_extract",
                "false"
              ],
              [
                "test_greedy",
                "false"
              ],
              [
                "test_expand",
                "false"
              ],
              [
                "test_importance",
                "false"
              ],
              [
                "test_sammon",
                "false"
              ],
              [
                "test_screening",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_extract",
                "4"
              ],
              [
                "test_greedy",
                "0"
              ],
              [
                "test_expand",
                "9"
              ],
              [
                "test_importance",
                "0"
              ],
              [
                "test_sammon",
                "1"
              ],
              [
                "test_screening",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_extract",
                [
                  "td",
                  "ext",
                  "d",
                  "nc"
                ]
              ],
              [
                "test_greedy",
                [
                  "train_features",
                  "train_targets",
                  "ge",
                  "_"
                ]
              ],
              [
                "test_expand",
                [
                  "dd",
                  "target_data",
                  "test_features",
                  "train_features",
                  "train_targets",
                  "d",
                  "f",
                  "targets",
                  "td",
                  "extend",
                  "p",
                  "features",
                  "tf",
                  "names",
                  "ext_n",
                  "feature_data"
                ]
              ],
              [
                "test_importance",
                [
                  "train_features",
                  "train_targets",
                  "importance",
                  "_"
                ]
              ],
              [
                "test_sammon",
                [
                  "train_features",
                  "double",
                  "_"
                ]
              ],
              [
                "test_screening",
                [
                  "corr",
                  "d",
                  "f",
                  "screen",
                  "feat"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_extract",
                []
              ],
              [
                "test_greedy",
                []
              ],
              [
                "test_expand",
                []
              ],
              [
                "test_importance",
                []
              ],
              [
                "test_sammon",
                []
              ],
              [
                "test_screening",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.518905073555198,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_expand",
                  "test_screening",
                  0.4923368737548079
                ],
                [
                  "test_expand",
                  "test_sammon",
                  0.5542875807109066
                ],
                [
                  "test_expand",
                  "test_importance",
                  0.4146286781837452
                ],
                [
                  "test_expand",
                  "test_extract",
                  0.514630962741282
                ],
                [
                  "test_importance",
                  "test_sammon",
                  0.6382798135246648
                ],
                [
                  "test_extract",
                  "test_sammon",
                  0.4052855786165015
                ],
                [
                  "test_extract",
                  "test_importance",
                  0.3843479190860862
                ],
                [
                  "test_greedy",
                  "test_sammon",
                  0.7379946876771946
                ],
                [
                  "test_extract",
                  "test_greedy",
                  0.4467688682236116
                ],
                [
                  "test_screening",
                  "test_importance",
                  0.41263639401925656
                ],
                [
                  "test_greedy",
                  "test_importance",
                  0.7723507312706377
                ],
                [
                  "test_expand",
                  "test_greedy",
                  0.5413803430591096
                ],
                [
                  "test_screening",
                  "test_greedy",
                  0.49956115172316307
                ],
                [
                  "test_extract",
                  "test_screening",
                  0.5220796738718756
                ],
                [
                  "test_screening",
                  "test_sammon",
                  0.44700684686512665
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_extract",
                "true"
              ],
              [
                "test_greedy",
                "false"
              ],
              [
                "test_expand",
                "true"
              ],
              [
                "test_importance",
                "false"
              ],
              [
                "test_sammon",
                "false"
              ],
              [
                "test_screening",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 6
      }
    ]
  }
]