[
  {
    "name": "test_\u0026_test_psbt.py",
    "testCases": [
      {
        "name": "TestPSBT",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_invalid_psbt",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_valid_psbt",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_invalid_psbt",
                  "[]"
                ],
                [
                  "test_valid_psbt",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_invalid_psbt",
                  "true"
                ],
                [
                  "test_valid_psbt",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_invalid_psbt",
                  "false"
                ],
                [
                  "test_valid_psbt",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_invalid_psbt",
                  "false"
                ],
                [
                  "test_valid_psbt",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_invalid_psbt",
                  "false"
                ],
                [
                  "test_valid_psbt",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_invalid_psbt",
                "false"
              ],
              [
                "test_valid_psbt",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_invalid_psbt",
                "false"
              ],
              [
                "test_valid_psbt",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_invalid_psbt",
                []
              ],
              [
                "test_valid_psbt",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_invalid_psbt",
                "false"
              ],
              [
                "test_valid_psbt",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_invalid_psbt",
                "false"
              ],
              [
                "test_valid_psbt",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_invalid_psbt",
                  "0"
                ],
                [
                  "test_valid_psbt",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_invalid_psbt",
                  "0"
                ],
                [
                  "test_valid_psbt",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_invalid_psbt",
                "false"
              ],
              [
                "test_valid_psbt",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_invalid_psbt",
                "false"
              ],
              [
                "test_valid_psbt",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_invalid_psbt",
                "1"
              ],
              [
                "test_valid_psbt",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_invalid_psbt",
                [
                  "psbt"
                ]
              ],
              [
                "test_valid_psbt",
                [
                  "psbt",
                  "serd"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_invalid_psbt",
                [
                  "self.data"
                ]
              ],
              [
                "test_valid_psbt",
                [
                  "self.data"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5559369874958259,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_invalid_psbt",
                  "test_valid_psbt",
                  0.5559369874958259
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_invalid_psbt",
                "false"
              ],
              [
                "test_valid_psbt",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "test_\u0026_test_device.py",
    "testCases": [
      {
        "name": "TestDeviceConnect",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_path_type",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_enumerate",
                  "[PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertNotIn, PyCallExpression: self.assertNotIn, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_type_only_autodetect",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_no_type",
                  "[PyCallExpression: self.assertIn, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIn, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_fingerprint_autodetect",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_path_type",
                  "[]"
                ],
                [
                  "test_enumerate",
                  "[]"
                ],
                [
                  "test_type_only_autodetect",
                  "[]"
                ],
                [
                  "test_no_type",
                  "[]"
                ],
                [
                  "test_fingerprint_autodetect",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_path_type",
                  "false"
                ],
                [
                  "test_enumerate",
                  "true"
                ],
                [
                  "test_type_only_autodetect",
                  "false"
                ],
                [
                  "test_no_type",
                  "false"
                ],
                [
                  "test_fingerprint_autodetect",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_path_type",
                  "false"
                ],
                [
                  "test_enumerate",
                  "false"
                ],
                [
                  "test_type_only_autodetect",
                  "false"
                ],
                [
                  "test_no_type",
                  "false"
                ],
                [
                  "test_fingerprint_autodetect",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_path_type",
                  "false"
                ],
                [
                  "test_enumerate",
                  "false"
                ],
                [
                  "test_type_only_autodetect",
                  "false"
                ],
                [
                  "test_no_type",
                  "false"
                ],
                [
                  "test_fingerprint_autodetect",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_path_type",
                  "false"
                ],
                [
                  "test_enumerate",
                  "false"
                ],
                [
                  "test_type_only_autodetect",
                  "false"
                ],
                [
                  "test_no_type",
                  "false"
                ],
                [
                  "test_fingerprint_autodetect",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_path_type",
                "false"
              ],
              [
                "test_enumerate",
                "false"
              ],
              [
                "test_type_only_autodetect",
                "false"
              ],
              [
                "test_no_type",
                "false"
              ],
              [
                "test_fingerprint_autodetect",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_path_type",
                "false"
              ],
              [
                "test_enumerate",
                "false"
              ],
              [
                "test_type_only_autodetect",
                "false"
              ],
              [
                "test_no_type",
                "false"
              ],
              [
                "test_fingerprint_autodetect",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_path_type",
                []
              ],
              [
                "test_enumerate",
                []
              ],
              [
                "test_type_only_autodetect",
                []
              ],
              [
                "test_no_type",
                []
              ],
              [
                "test_fingerprint_autodetect",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_path_type",
                "false"
              ],
              [
                "test_enumerate",
                "false"
              ],
              [
                "test_type_only_autodetect",
                "false"
              ],
              [
                "test_no_type",
                "false"
              ],
              [
                "test_fingerprint_autodetect",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_path_type",
                "false"
              ],
              [
                "test_enumerate",
                "false"
              ],
              [
                "test_type_only_autodetect",
                "false"
              ],
              [
                "test_no_type",
                "false"
              ],
              [
                "test_fingerprint_autodetect",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_path_type",
                  "0"
                ],
                [
                  "test_enumerate",
                  "0"
                ],
                [
                  "test_type_only_autodetect",
                  "0"
                ],
                [
                  "test_no_type",
                  "0"
                ],
                [
                  "test_fingerprint_autodetect",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_path_type",
                  "0"
                ],
                [
                  "test_enumerate",
                  "0"
                ],
                [
                  "test_type_only_autodetect",
                  "0"
                ],
                [
                  "test_no_type",
                  "0"
                ],
                [
                  "test_fingerprint_autodetect",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_path_type",
                "false"
              ],
              [
                "test_enumerate",
                "false"
              ],
              [
                "test_type_only_autodetect",
                "false"
              ],
              [
                "test_no_type",
                "false"
              ],
              [
                "test_fingerprint_autodetect",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_path_type",
                "false"
              ],
              [
                "test_enumerate",
                "false"
              ],
              [
                "test_type_only_autodetect",
                "false"
              ],
              [
                "test_no_type",
                "false"
              ],
              [
                "test_fingerprint_autodetect",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_path_type",
                "1"
              ],
              [
                "test_enumerate",
                "8"
              ],
              [
                "test_type_only_autodetect",
                "3"
              ],
              [
                "test_no_type",
                "4"
              ],
              [
                "test_fingerprint_autodetect",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_path_type",
                [
                  "gmxp_res"
                ]
              ],
              [
                "test_enumerate",
                [
                  "found",
                  "enum_res"
                ]
              ],
              [
                "test_type_only_autodetect",
                [
                  "gmxp_res"
                ]
              ],
              [
                "test_no_type",
                [
                  "gmxp_res"
                ]
              ],
              [
                "test_fingerprint_autodetect",
                [
                  "gmxp_res"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_path_type",
                []
              ],
              [
                "test_enumerate",
                []
              ],
              [
                "test_type_only_autodetect",
                []
              ],
              [
                "test_no_type",
                []
              ],
              [
                "test_fingerprint_autodetect",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5051383441698664,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_enumerate",
                  "test_type_only_autodetect",
                  0.3478505426185217
                ],
                [
                  "test_no_type",
                  "test_type_only_autodetect",
                  0.6012282510295617
                ],
                [
                  "test_enumerate",
                  "test_no_type",
                  0.39835728258708153
                ],
                [
                  "test_no_type",
                  "test_fingerprint_autodetect",
                  0.5732486449542448
                ],
                [
                  "test_path_type",
                  "test_type_only_autodetect",
                  0.6674238124719145
                ],
                [
                  "test_fingerprint_autodetect",
                  "test_type_only_autodetect",
                  0.738933506665334
                ],
                [
                  "test_enumerate",
                  "test_fingerprint_autodetect",
                  0.3693513971077604
                ],
                [
                  "test_enumerate",
                  "test_path_type",
                  0.28643577734887543
                ],
                [
                  "test_no_type",
                  "test_path_type",
                  0.4094633178244606
                ],
                [
                  "test_path_type",
                  "test_fingerprint_autodetect",
                  0.6590909090909091
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_path_type",
                "false"
              ],
              [
                "test_enumerate",
                "false"
              ],
              [
                "test_type_only_autodetect",
                "false"
              ],
              [
                "test_no_type",
                "false"
              ],
              [
                "test_fingerprint_autodetect",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 5
      },
      {
        "name": "TestGetKeypool",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_getkeypool",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_getkeypool",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_getkeypool",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_getkeypool",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_getkeypool",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_getkeypool",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_getkeypool",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_getkeypool",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_getkeypool",
                [
                  "self.rpc"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_getkeypool",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_getkeypool",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_getkeypool",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_getkeypool",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_getkeypool",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_getkeypool",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_getkeypool",
                "24"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_getkeypool",
                [
                  "all_keypool_desc",
                  "import_result",
                  "shwpkh_keypool_desc",
                  "keypool_desc",
                  "pkh_keypool_desc",
                  "addr_info",
                  "wpkh_keypool_desc",
                  "non_keypool_desc"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_getkeypool",
                [
                  "self.wrpc",
                  "self.wpk_rpc"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_getkeypool",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "TestGetDescriptors",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_getdescriptors",
                  "[PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_getdescriptors",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_getdescriptors",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_getdescriptors",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_getdescriptors",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_getdescriptors",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_getdescriptors",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_getdescriptors",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_getdescriptors",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_getdescriptors",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_getdescriptors",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_getdescriptors",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_getdescriptors",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_getdescriptors",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_getdescriptors",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_getdescriptors",
                "8"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_getdescriptors",
                [
                  "descriptors",
                  "info_result"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_getdescriptors",
                [
                  "self.rpc"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_getdescriptors",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "TestSignTx",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_signtx",
                  "[]"
                ],
                [
                  "test_big_tx",
                  "[PyCallExpression: self.fail, PyCallExpression: self.assertEqual, PyCallExpression: self.assertNotIn, PyCallExpression: self.assertNotIn]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_signtx",
                  "[]"
                ],
                [
                  "test_big_tx",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_signtx",
                  "true"
                ],
                [
                  "test_big_tx",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_signtx",
                  "false"
                ],
                [
                  "test_big_tx",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_signtx",
                  "false"
                ],
                [
                  "test_big_tx",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_signtx",
                  "false"
                ],
                [
                  "test_big_tx",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_signtx",
                "false"
              ],
              [
                "test_big_tx",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": true,
            "detail": [
              [
                "test_signtx",
                "false"
              ],
              [
                "test_big_tx",
                "true"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_signtx",
                [
                  "self.wrpc",
                  "self.wpk_rpc",
                  "self.rpc"
                ]
              ],
              [
                "test_big_tx",
                [
                  "self.wrpc",
                  "self.rpc"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_signtx",
                "false"
              ],
              [
                "test_big_tx",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_signtx",
                "false"
              ],
              [
                "test_big_tx",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_signtx",
                  "0"
                ],
                [
                  "test_big_tx",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_signtx",
                  "0"
                ],
                [
                  "test_big_tx",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_signtx",
                "false"
              ],
              [
                "test_big_tx",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_signtx",
                "false"
              ],
              [
                "test_big_tx",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_signtx",
                "0"
              ],
              [
                "test_big_tx",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_signtx",
                [
                  "supports_multisig",
                  "supports_mixed",
                  "supports_external"
                ]
              ],
              [
                "test_big_tx",
                [
                  "outputs",
                  "result",
                  "psbt",
                  "tx",
                  "inputs",
                  "num_inputs",
                  "txid"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_signtx",
                []
              ],
              [
                "test_big_tx",
                [
                  "self.wpk_rpc"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.20435408455252888,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_signtx",
                  "test_big_tx",
                  0.20435408455252888
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_signtx",
                "false"
              ],
              [
                "test_big_tx",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "TestDisplayAddress",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_display_address_descriptor",
                  "[PyCallExpression: self.assertNotIn, PyCallExpression: self.assertNotIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertNotIn, PyCallExpression: self.assertNotIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertNotIn, PyCallExpression: self.assertNotIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertNotIn, PyCallExpression: self.assertNotIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_display_address_path",
                  "[PyCallExpression: self.assertNotIn, PyCallExpression: self.assertNotIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertNotIn, PyCallExpression: self.assertNotIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertNotIn, PyCallExpression: self.assertNotIn, PyCallExpression: self.assertIn]"
                ],
                [
                  "test_display_address_multisig_descriptor",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertNotIn, PyCallExpression: self.assertNotIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertEqual, PyCallExpression: self.assertNotIn, PyCallExpression: self.assertNotIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertEqual, PyCallExpression: self.assertNotIn, PyCallExpression: self.assertNotIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_display_address_bad_path",
                  "[PyCallExpression: self.assertEquals]"
                ],
                [
                  "test_display_address_bad_args",
                  "[PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_display_address_multisig_path",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertNotIn, PyCallExpression: self.assertNotIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertEqual, PyCallExpression: self.assertNotIn, PyCallExpression: self.assertNotIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertEqual, PyCallExpression: self.assertNotIn, PyCallExpression: self.assertNotIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_display_address_descriptor",
                  "[]"
                ],
                [
                  "test_display_address_path",
                  "[]"
                ],
                [
                  "test_display_address_multisig_descriptor",
                  "[]"
                ],
                [
                  "test_display_address_bad_path",
                  "[]"
                ],
                [
                  "test_display_address_bad_args",
                  "[]"
                ],
                [
                  "test_display_address_multisig_path",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_display_address_descriptor",
                  "false"
                ],
                [
                  "test_display_address_path",
                  "false"
                ],
                [
                  "test_display_address_multisig_descriptor",
                  "true"
                ],
                [
                  "test_display_address_bad_path",
                  "false"
                ],
                [
                  "test_display_address_bad_args",
                  "false"
                ],
                [
                  "test_display_address_multisig_path",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_display_address_descriptor",
                  "false"
                ],
                [
                  "test_display_address_path",
                  "false"
                ],
                [
                  "test_display_address_multisig_descriptor",
                  "false"
                ],
                [
                  "test_display_address_bad_path",
                  "false"
                ],
                [
                  "test_display_address_bad_args",
                  "false"
                ],
                [
                  "test_display_address_multisig_path",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_display_address_descriptor",
                  "true"
                ],
                [
                  "test_display_address_path",
                  "true"
                ],
                [
                  "test_display_address_multisig_descriptor",
                  "true"
                ],
                [
                  "test_display_address_bad_path",
                  "false"
                ],
                [
                  "test_display_address_bad_args",
                  "false"
                ],
                [
                  "test_display_address_multisig_path",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_display_address_descriptor",
                  "false"
                ],
                [
                  "test_display_address_path",
                  "false"
                ],
                [
                  "test_display_address_multisig_descriptor",
                  "false"
                ],
                [
                  "test_display_address_bad_path",
                  "false"
                ],
                [
                  "test_display_address_bad_args",
                  "false"
                ],
                [
                  "test_display_address_multisig_path",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_display_address_descriptor",
                "false"
              ],
              [
                "test_display_address_path",
                "false"
              ],
              [
                "test_display_address_multisig_descriptor",
                "false"
              ],
              [
                "test_display_address_bad_path",
                "false"
              ],
              [
                "test_display_address_bad_args",
                "false"
              ],
              [
                "test_display_address_multisig_path",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_display_address_descriptor",
                "false"
              ],
              [
                "test_display_address_path",
                "false"
              ],
              [
                "test_display_address_multisig_descriptor",
                "false"
              ],
              [
                "test_display_address_bad_path",
                "false"
              ],
              [
                "test_display_address_bad_args",
                "false"
              ],
              [
                "test_display_address_multisig_path",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_display_address_descriptor",
                [
                  "self.wrpc",
                  "self.wpk_rpc",
                  "self.rpc"
                ]
              ],
              [
                "test_display_address_path",
                [
                  "self.wrpc",
                  "self.wpk_rpc",
                  "self.rpc"
                ]
              ],
              [
                "test_display_address_multisig_descriptor",
                [
                  "self.wpk_rpc",
                  "self.rpc"
                ]
              ],
              [
                "test_display_address_bad_path",
                [
                  "self.wrpc",
                  "self.wpk_rpc",
                  "self.rpc"
                ]
              ],
              [
                "test_display_address_bad_args",
                [
                  "self.wrpc",
                  "self.wpk_rpc",
                  "self.rpc"
                ]
              ],
              [
                "test_display_address_multisig_path",
                [
                  "self.wpk_rpc",
                  "self.rpc"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_display_address_descriptor",
                "false"
              ],
              [
                "test_display_address_path",
                "false"
              ],
              [
                "test_display_address_multisig_descriptor",
                "false"
              ],
              [
                "test_display_address_bad_path",
                "false"
              ],
              [
                "test_display_address_bad_args",
                "false"
              ],
              [
                "test_display_address_multisig_path",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_display_address_descriptor",
                "false"
              ],
              [
                "test_display_address_path",
                "false"
              ],
              [
                "test_display_address_multisig_descriptor",
                "false"
              ],
              [
                "test_display_address_bad_path",
                "false"
              ],
              [
                "test_display_address_bad_args",
                "false"
              ],
              [
                "test_display_address_multisig_path",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_display_address_descriptor",
                  "0"
                ],
                [
                  "test_display_address_path",
                  "0"
                ],
                [
                  "test_display_address_multisig_descriptor",
                  "0"
                ],
                [
                  "test_display_address_bad_path",
                  "0"
                ],
                [
                  "test_display_address_bad_args",
                  "0"
                ],
                [
                  "test_display_address_multisig_path",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_display_address_descriptor",
                  "0"
                ],
                [
                  "test_display_address_path",
                  "0"
                ],
                [
                  "test_display_address_multisig_descriptor",
                  "0"
                ],
                [
                  "test_display_address_bad_path",
                  "0"
                ],
                [
                  "test_display_address_bad_args",
                  "0"
                ],
                [
                  "test_display_address_multisig_path",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_display_address_descriptor",
                "false"
              ],
              [
                "test_display_address_path",
                "false"
              ],
              [
                "test_display_address_multisig_descriptor",
                "false"
              ],
              [
                "test_display_address_bad_path",
                "false"
              ],
              [
                "test_display_address_bad_args",
                "false"
              ],
              [
                "test_display_address_multisig_path",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_display_address_descriptor",
                "false"
              ],
              [
                "test_display_address_path",
                "false"
              ],
              [
                "test_display_address_multisig_descriptor",
                "false"
              ],
              [
                "test_display_address_bad_path",
                "false"
              ],
              [
                "test_display_address_bad_args",
                "false"
              ],
              [
                "test_display_address_multisig_path",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_display_address_descriptor",
                "21"
              ],
              [
                "test_display_address_path",
                "9"
              ],
              [
                "test_display_address_multisig_descriptor",
                "17"
              ],
              [
                "test_display_address_bad_path",
                "1"
              ],
              [
                "test_display_address_bad_args",
                "3"
              ],
              [
                "test_display_address_multisig_path",
                "17"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_display_address_descriptor",
                [
                  "result",
                  "legacy_account_xpub",
                  "account_xpub",
                  "p2sh_segwit_account_xpub"
                ]
              ],
              [
                "test_display_address_path",
                [
                  "result"
                ]
              ],
              [
                "test_display_address_multisig_descriptor",
                [
                  "pkh_info",
                  "multi_result",
                  "sh_wpkh_info",
                  "wpkh_info",
                  "pubkeys",
                  "sh_multi_import",
                  "sh_wsh_multi_import",
                  "result",
                  "import_result",
                  "wsh_multi_import",
                  "supports_multisig",
                  "wpkh_addr",
                  "sh_wpkh_addr",
                  "sh_multi_desc",
                  "wsh_multi_desc",
                  "keypool_desc",
                  "sh_multi_addr",
                  "sh_wsh_multi_addr",
                  "sh_wsh_multi_desc",
                  "wsh_multi_addr",
                  "pkh_addr"
                ]
              ],
              [
                "test_display_address_bad_path",
                [
                  "result"
                ]
              ],
              [
                "test_display_address_bad_args",
                [
                  "result"
                ]
              ],
              [
                "test_display_address_multisig_path",
                [
                  "pkh_info",
                  "sh_wpkh_info",
                  "pubkeys",
                  "sh_multi_import",
                  "result",
                  "wsh_multi_addr_redeem_script",
                  "path",
                  "wsh_multi_import",
                  "sh_wpkh_addr",
                  "sh_multi_desc",
                  "wsh_multi_desc",
                  "keypool_desc",
                  "sh_wsh_multi_addr",
                  "multi_result",
                  "wpkh_info",
                  "sh_wsh_multi_addr_redeem_script",
                  "sh_wsh_multi_import",
                  "sh_multi_addr_redeem_script",
                  "import_result",
                  "supports_multisig",
                  "wpkh_addr",
                  "sh_multi_addr",
                  "sh_wsh_multi_desc",
                  "wsh_multi_addr",
                  "pkh_addr"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_display_address_descriptor",
                []
              ],
              [
                "test_display_address_path",
                []
              ],
              [
                "test_display_address_multisig_descriptor",
                [
                  "self.wrpc"
                ]
              ],
              [
                "test_display_address_bad_path",
                []
              ],
              [
                "test_display_address_bad_args",
                []
              ],
              [
                "test_display_address_multisig_path",
                [
                  "self.wrpc"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5276567989957598,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_display_address_path",
                  "test_display_address_descriptor",
                  0.7277911654084069
                ],
                [
                  "test_display_address_descriptor",
                  "test_display_address_multisig_path",
                  0.517513681625364
                ],
                [
                  "test_display_address_bad_args",
                  "test_display_address_bad_path",
                  0.6023470332692291
                ],
                [
                  "test_display_address_bad_path",
                  "test_display_address_descriptor",
                  0.4449459702405462
                ],
                [
                  "test_display_address_path",
                  "test_display_address_bad_path",
                  0.4289747900052501
                ],
                [
                  "test_display_address_bad_path",
                  "test_display_address_multisig_descriptor",
                  0.33310525981978023
                ],
                [
                  "test_display_address_multisig_path",
                  "test_display_address_multisig_descriptor",
                  0.9716671632869882
                ],
                [
                  "test_display_address_bad_args",
                  "test_display_address_multisig_path",
                  0.3600909504227648
                ],
                [
                  "test_display_address_path",
                  "test_display_address_multisig_descriptor",
                  0.39995521171285126
                ],
                [
                  "test_display_address_path",
                  "test_display_address_multisig_path",
                  0.40304347953884534
                ],
                [
                  "test_display_address_bad_args",
                  "test_display_address_descriptor",
                  0.6647033700546293
                ],
                [
                  "test_display_address_bad_args",
                  "test_display_address_multisig_descriptor",
                  0.35153089804843735
                ],
                [
                  "test_display_address_bad_args",
                  "test_display_address_path",
                  0.8469505463505682
                ],
                [
                  "test_display_address_descriptor",
                  "test_display_address_multisig_descriptor",
                  0.5119470861461901
                ],
                [
                  "test_display_address_bad_path",
                  "test_display_address_multisig_path",
                  0.3502853790065448
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_display_address_descriptor",
                "false"
              ],
              [
                "test_display_address_path",
                "false"
              ],
              [
                "test_display_address_multisig_descriptor",
                "false"
              ],
              [
                "test_display_address_bad_path",
                "false"
              ],
              [
                "test_display_address_bad_args",
                "false"
              ],
              [
                "test_display_address_multisig_path",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 6
      },
      {
        "name": "TestSignMessage",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_bad_path",
                  "[PyCallExpression: self.assertEquals]"
                ],
                [
                  "test_sign_msg",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_bad_path",
                  "[]"
                ],
                [
                  "test_sign_msg",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_bad_path",
                  "false"
                ],
                [
                  "test_sign_msg",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_bad_path",
                  "false"
                ],
                [
                  "test_sign_msg",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_bad_path",
                  "false"
                ],
                [
                  "test_sign_msg",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_bad_path",
                  "false"
                ],
                [
                  "test_sign_msg",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bad_path",
                "false"
              ],
              [
                "test_sign_msg",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_bad_path",
                "false"
              ],
              [
                "test_sign_msg",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_bad_path",
                []
              ],
              [
                "test_sign_msg",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bad_path",
                "false"
              ],
              [
                "test_sign_msg",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bad_path",
                "false"
              ],
              [
                "test_sign_msg",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_bad_path",
                  "0"
                ],
                [
                  "test_sign_msg",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_bad_path",
                  "0"
                ],
                [
                  "test_sign_msg",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_bad_path",
                "false"
              ],
              [
                "test_sign_msg",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bad_path",
                "false"
              ],
              [
                "test_sign_msg",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_bad_path",
                "1"
              ],
              [
                "test_sign_msg",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_bad_path",
                [
                  "result"
                ]
              ],
              [
                "test_sign_msg",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_bad_path",
                []
              ],
              [
                "test_sign_msg",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5163977794943222,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_sign_msg",
                  "test_bad_path",
                  0.5163977794943222
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_bad_path",
                "false"
              ],
              [
                "test_sign_msg",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "test_\u0026_test_trezor.py",
    "testCases": [
      {
        "name": "TestTrezorGetxpub",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_expert_getxpub",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_getxpub",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_expert_getxpub",
                  "[]"
                ],
                [
                  "test_getxpub",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_expert_getxpub",
                  "false"
                ],
                [
                  "test_getxpub",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_expert_getxpub",
                  "false"
                ],
                [
                  "test_getxpub",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_expert_getxpub",
                  "false"
                ],
                [
                  "test_getxpub",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_expert_getxpub",
                  "false"
                ],
                [
                  "test_getxpub",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_expert_getxpub",
                "false"
              ],
              [
                "test_getxpub",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_expert_getxpub",
                "false"
              ],
              [
                "test_getxpub",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_expert_getxpub",
                []
              ],
              [
                "test_getxpub",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_expert_getxpub",
                "false"
              ],
              [
                "test_getxpub",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_expert_getxpub",
                "true"
              ],
              [
                "test_getxpub",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_expert_getxpub",
                  "0"
                ],
                [
                  "test_getxpub",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_expert_getxpub",
                  "0"
                ],
                [
                  "test_getxpub",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_expert_getxpub",
                "false"
              ],
              [
                "test_getxpub",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_expert_getxpub",
                "false"
              ],
              [
                "test_getxpub",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_expert_getxpub",
                "8"
              ],
              [
                "test_getxpub",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_expert_getxpub",
                [
                  "result"
                ]
              ],
              [
                "test_getxpub",
                [
                  "vectors",
                  "gmxp_res",
                  "gxp_res"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_expert_getxpub",
                []
              ],
              [
                "test_getxpub",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.39241875533659804,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_getxpub",
                  "test_expert_getxpub",
                  0.39241875533659804
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_expert_getxpub",
                "false"
              ],
              [
                "test_getxpub",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "TestTrezorManCommands",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_passphrase",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual, PyCallExpression: self.assertFalse, PyCallExpression: self.assertNotEqual, PyCallExpression: self.assertFalse, PyCallExpression: self.assertNotEqual, PyCallExpression: self.assertFalse, PyCallExpression: self.assertEquals, PyCallExpression: self.assertFalse, PyCallExpression: self.assertEquals]"
                ],
                [
                  "test_backup",
                  "[PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_pins",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertFalse, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_setup_wipe",
                  "[PyCallExpression: self.assertEquals, PyCallExpression: self.assertEquals, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEquals, PyCallExpression: self.assertEquals]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_passphrase",
                  "[]"
                ],
                [
                  "test_backup",
                  "[]"
                ],
                [
                  "test_pins",
                  "[]"
                ],
                [
                  "test_setup_wipe",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_passphrase",
                  "true"
                ],
                [
                  "test_backup",
                  "false"
                ],
                [
                  "test_pins",
                  "true"
                ],
                [
                  "test_setup_wipe",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_passphrase",
                  "false"
                ],
                [
                  "test_backup",
                  "false"
                ],
                [
                  "test_pins",
                  "false"
                ],
                [
                  "test_setup_wipe",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_passphrase",
                  "true"
                ],
                [
                  "test_backup",
                  "false"
                ],
                [
                  "test_pins",
                  "true"
                ],
                [
                  "test_setup_wipe",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_passphrase",
                  "false"
                ],
                [
                  "test_backup",
                  "false"
                ],
                [
                  "test_pins",
                  "false"
                ],
                [
                  "test_setup_wipe",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_passphrase",
                "false"
              ],
              [
                "test_backup",
                "false"
              ],
              [
                "test_pins",
                "false"
              ],
              [
                "test_setup_wipe",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_passphrase",
                "false"
              ],
              [
                "test_backup",
                "false"
              ],
              [
                "test_pins",
                "false"
              ],
              [
                "test_setup_wipe",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_passphrase",
                []
              ],
              [
                "test_backup",
                [
                  "self.client"
                ]
              ],
              [
                "test_pins",
                []
              ],
              [
                "test_setup_wipe",
                [
                  "self.client"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_passphrase",
                "false"
              ],
              [
                "test_backup",
                "false"
              ],
              [
                "test_pins",
                "false"
              ],
              [
                "test_setup_wipe",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_passphrase",
                "false"
              ],
              [
                "test_backup",
                "false"
              ],
              [
                "test_pins",
                "false"
              ],
              [
                "test_setup_wipe",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_passphrase",
                  "0"
                ],
                [
                  "test_backup",
                  "0"
                ],
                [
                  "test_pins",
                  "0"
                ],
                [
                  "test_setup_wipe",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_passphrase",
                  "0"
                ],
                [
                  "test_backup",
                  "0"
                ],
                [
                  "test_pins",
                  "0"
                ],
                [
                  "test_setup_wipe",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_passphrase",
                "false"
              ],
              [
                "test_backup",
                "false"
              ],
              [
                "test_pins",
                "false"
              ],
              [
                "test_setup_wipe",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_passphrase",
                "false"
              ],
              [
                "test_backup",
                "false"
              ],
              [
                "test_pins",
                "false"
              ],
              [
                "test_setup_wipe",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_passphrase",
                "12"
              ],
              [
                "test_backup",
                "4"
              ],
              [
                "test_pins",
                "19"
              ],
              [
                "test_setup_wipe",
                "6"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_passphrase",
                [
                  "result",
                  "fpr"
                ]
              ],
              [
                "test_backup",
                [
                  "result"
                ]
              ],
              [
                "test_pins",
                [
                  "result",
                  "pin"
                ]
              ],
              [
                "test_setup_wipe",
                [
                  "result",
                  "t_client"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_passphrase",
                [
                  "self.dev_args",
                  "self.client"
                ]
              ],
              [
                "test_backup",
                [
                  "self.dev_args"
                ]
              ],
              [
                "test_pins",
                [
                  "self.dev_args",
                  "self.client"
                ]
              ],
              [
                "test_setup_wipe",
                [
                  "self.dev_args"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5528748136302115,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_setup_wipe",
                  "test_pins",
                  0.698713690310659
                ],
                [
                  "test_setup_wipe",
                  "test_backup",
                  0.46875756652488737
                ],
                [
                  "test_pins",
                  "test_passphrase",
                  0.6950818291804187
                ],
                [
                  "test_setup_wipe",
                  "test_passphrase",
                  0.47322298683244124
                ],
                [
                  "test_backup",
                  "test_pins",
                  0.6148581224829033
                ],
                [
                  "test_backup",
                  "test_passphrase",
                  0.36661468644995937
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_passphrase",
                "false"
              ],
              [
                "test_backup",
                "false"
              ],
              [
                "test_pins",
                "false"
              ],
              [
                "test_setup_wipe",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      }
    ]
  },
  {
    "name": "test_\u0026_test_keepkey.py",
    "testCases": [
      {
        "name": "TestKeepkeyGetxpub",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_getxpub",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_expert_getxpub",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_getxpub",
                  "[]"
                ],
                [
                  "test_expert_getxpub",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_getxpub",
                  "true"
                ],
                [
                  "test_expert_getxpub",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_getxpub",
                  "false"
                ],
                [
                  "test_expert_getxpub",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_getxpub",
                  "false"
                ],
                [
                  "test_expert_getxpub",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_getxpub",
                  "false"
                ],
                [
                  "test_expert_getxpub",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_getxpub",
                "false"
              ],
              [
                "test_expert_getxpub",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_getxpub",
                "false"
              ],
              [
                "test_expert_getxpub",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_getxpub",
                []
              ],
              [
                "test_expert_getxpub",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_getxpub",
                "false"
              ],
              [
                "test_expert_getxpub",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_getxpub",
                "false"
              ],
              [
                "test_expert_getxpub",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_getxpub",
                  "0"
                ],
                [
                  "test_expert_getxpub",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_getxpub",
                  "0"
                ],
                [
                  "test_expert_getxpub",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_getxpub",
                "false"
              ],
              [
                "test_expert_getxpub",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_getxpub",
                "false"
              ],
              [
                "test_expert_getxpub",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_getxpub",
                "2"
              ],
              [
                "test_expert_getxpub",
                "8"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_getxpub",
                [
                  "vectors",
                  "gmxp_res",
                  "gxp_res"
                ]
              ],
              [
                "test_expert_getxpub",
                [
                  "result"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_getxpub",
                []
              ],
              [
                "test_expert_getxpub",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.39241875533659804,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_getxpub",
                  "test_expert_getxpub",
                  0.39241875533659804
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_getxpub",
                "false"
              ],
              [
                "test_expert_getxpub",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "TestKeepkeyManCommands",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_setup_wipe",
                  "[PyCallExpression: self.assertEquals, PyCallExpression: self.assertEquals, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEquals, PyCallExpression: self.assertEquals]"
                ],
                [
                  "test_passphrase",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse, PyCallExpression: self.assertNotEqual, PyCallExpression: self.assertFalse, PyCallExpression: self.assertNotEqual, PyCallExpression: self.assertFalse, PyCallExpression: self.assertEquals, PyCallExpression: self.assertFalse, PyCallExpression: self.assertEquals]"
                ],
                [
                  "test_backup",
                  "[PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_pins",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertFalse, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_setup_wipe",
                  "[]"
                ],
                [
                  "test_passphrase",
                  "[]"
                ],
                [
                  "test_backup",
                  "[]"
                ],
                [
                  "test_pins",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_setup_wipe",
                  "false"
                ],
                [
                  "test_passphrase",
                  "true"
                ],
                [
                  "test_backup",
                  "false"
                ],
                [
                  "test_pins",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_setup_wipe",
                  "false"
                ],
                [
                  "test_passphrase",
                  "false"
                ],
                [
                  "test_backup",
                  "false"
                ],
                [
                  "test_pins",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_setup_wipe",
                  "true"
                ],
                [
                  "test_passphrase",
                  "true"
                ],
                [
                  "test_backup",
                  "false"
                ],
                [
                  "test_pins",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_setup_wipe",
                  "false"
                ],
                [
                  "test_passphrase",
                  "false"
                ],
                [
                  "test_backup",
                  "false"
                ],
                [
                  "test_pins",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_setup_wipe",
                "false"
              ],
              [
                "test_passphrase",
                "false"
              ],
              [
                "test_backup",
                "false"
              ],
              [
                "test_pins",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_setup_wipe",
                "false"
              ],
              [
                "test_passphrase",
                "false"
              ],
              [
                "test_backup",
                "false"
              ],
              [
                "test_pins",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_setup_wipe",
                [
                  "self.client"
                ]
              ],
              [
                "test_passphrase",
                []
              ],
              [
                "test_backup",
                [
                  "self.client"
                ]
              ],
              [
                "test_pins",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_setup_wipe",
                "false"
              ],
              [
                "test_passphrase",
                "false"
              ],
              [
                "test_backup",
                "false"
              ],
              [
                "test_pins",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_setup_wipe",
                "false"
              ],
              [
                "test_passphrase",
                "false"
              ],
              [
                "test_backup",
                "false"
              ],
              [
                "test_pins",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_setup_wipe",
                  "0"
                ],
                [
                  "test_passphrase",
                  "0"
                ],
                [
                  "test_backup",
                  "0"
                ],
                [
                  "test_pins",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_setup_wipe",
                  "0"
                ],
                [
                  "test_passphrase",
                  "0"
                ],
                [
                  "test_backup",
                  "0"
                ],
                [
                  "test_pins",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_setup_wipe",
                "false"
              ],
              [
                "test_passphrase",
                "false"
              ],
              [
                "test_backup",
                "false"
              ],
              [
                "test_pins",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_setup_wipe",
                "false"
              ],
              [
                "test_passphrase",
                "false"
              ],
              [
                "test_backup",
                "false"
              ],
              [
                "test_pins",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_setup_wipe",
                "6"
              ],
              [
                "test_passphrase",
                "10"
              ],
              [
                "test_backup",
                "4"
              ],
              [
                "test_pins",
                "19"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_setup_wipe",
                [
                  "result",
                  "t_client"
                ]
              ],
              [
                "test_passphrase",
                [
                  "result",
                  "fpr"
                ]
              ],
              [
                "test_backup",
                [
                  "result"
                ]
              ],
              [
                "test_pins",
                [
                  "result",
                  "pin"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_setup_wipe",
                [
                  "self.dev_args"
                ]
              ],
              [
                "test_passphrase",
                [
                  "self.dev_args",
                  "self.client"
                ]
              ],
              [
                "test_backup",
                [
                  "self.dev_args"
                ]
              ],
              [
                "test_pins",
                [
                  "self.dev_args",
                  "self.client"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5456431357517447,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_backup",
                  "test_pins",
                  0.6148581224829033
                ],
                [
                  "test_backup",
                  "test_passphrase",
                  0.3559082039971942
                ],
                [
                  "test_pins",
                  "test_passphrase",
                  0.6809010945192144
                ],
                [
                  "test_setup_wipe",
                  "test_pins",
                  0.698713690310659
                ],
                [
                  "test_setup_wipe",
                  "test_backup",
                  0.46875756652488737
                ],
                [
                  "test_setup_wipe",
                  "test_passphrase",
                  0.4547201366756101
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_setup_wipe",
                "false"
              ],
              [
                "test_passphrase",
                "false"
              ],
              [
                "test_backup",
                "false"
              ],
              [
                "test_pins",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      }
    ]
  },
  {
    "name": "test_\u0026_test_udevrules.py",
    "testCases": [
      {
        "name": "TestUdevRulesInstaller",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_rules_file_are_copied",
                  "[PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_rules_file_are_copied",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_rules_file_are_copied",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_rules_file_are_copied",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_rules_file_are_copied",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_rules_file_are_copied",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_rules_file_are_copied",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_rules_file_are_copied",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_rules_file_are_copied",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_rules_file_are_copied",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_rules_file_are_copied",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_rules_file_are_copied",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_rules_file_are_copied",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_rules_file_are_copied",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_rules_file_are_copied",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_rules_file_are_copied",
                "5"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_rules_file_are_copied",
                [
                  "result",
                  "tgt",
                  "src"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_rules_file_are_copied",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_rules_file_are_copied",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  }
]