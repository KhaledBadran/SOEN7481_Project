[
  {
    "name": "longitude_\u0026_core_\u0026_tests_\u0026_test_cache_redis.py",
    "testCases": [
      {
        "name": "TestRedisCache",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_if_redis_returns_ping",
                  "[PyCallExpression: self.assertIsNone, PyCallExpression: self.assertFalse, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_is_not_ready_if_redis_fails_ping_because_of_timeout",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_if_redis_returns_ping",
                  "[]"
                ],
                [
                  "test_is_not_ready_if_redis_fails_ping_because_of_timeout",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_if_redis_returns_ping",
                  "false"
                ],
                [
                  "test_is_not_ready_if_redis_fails_ping_because_of_timeout",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_if_redis_returns_ping",
                  "false"
                ],
                [
                  "test_is_not_ready_if_redis_fails_ping_because_of_timeout",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_if_redis_returns_ping",
                  "false"
                ],
                [
                  "test_is_not_ready_if_redis_fails_ping_because_of_timeout",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_if_redis_returns_ping",
                  "false"
                ],
                [
                  "test_is_not_ready_if_redis_fails_ping_because_of_timeout",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_if_redis_returns_ping",
                "false"
              ],
              [
                "test_is_not_ready_if_redis_fails_ping_because_of_timeout",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_if_redis_returns_ping",
                "false"
              ],
              [
                "test_is_not_ready_if_redis_fails_ping_because_of_timeout",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_if_redis_returns_ping",
                []
              ],
              [
                "test_is_not_ready_if_redis_fails_ping_because_of_timeout",
                [
                  "self.cache"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_if_redis_returns_ping",
                "false"
              ],
              [
                "test_is_not_ready_if_redis_fails_ping_because_of_timeout",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_if_redis_returns_ping",
                "true"
              ],
              [
                "test_is_not_ready_if_redis_fails_ping_because_of_timeout",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_if_redis_returns_ping",
                  "0"
                ],
                [
                  "test_is_not_ready_if_redis_fails_ping_because_of_timeout",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_if_redis_returns_ping",
                  "0"
                ],
                [
                  "test_is_not_ready_if_redis_fails_ping_because_of_timeout",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_if_redis_returns_ping",
                "false"
              ],
              [
                "test_is_not_ready_if_redis_fails_ping_because_of_timeout",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_if_redis_returns_ping",
                "false"
              ],
              [
                "test_is_not_ready_if_redis_fails_ping_because_of_timeout",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_if_redis_returns_ping",
                "6"
              ],
              [
                "test_is_not_ready_if_redis_fails_ping_because_of_timeout",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_if_redis_returns_ping",
                []
              ],
              [
                "test_is_not_ready_if_redis_fails_ping_because_of_timeout",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_if_redis_returns_ping",
                [
                  "self.cache",
                  "self.redis_mock"
                ]
              ],
              [
                "test_is_not_ready_if_redis_fails_ping_because_of_timeout",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.42835973607712413,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_if_redis_returns_ping",
                  "test_is_not_ready_if_redis_fails_ping_because_of_timeout",
                  0.42835973607712413
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_if_redis_returns_ping",
                "false"
              ],
              [
                "test_is_not_ready_if_redis_fails_ping_because_of_timeout",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "longitude_\u0026_core_\u0026_tests_\u0026_test_data_source_carto.py",
    "testCases": [
      {
        "name": "TestCartoDataSource",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_succesful_query",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_wrong_query",
                  "[PyCallExpression: self.assertRaises]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_succesful_query",
                  "[]"
                ],
                [
                  "test_wrong_query",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_succesful_query",
                  "false"
                ],
                [
                  "test_wrong_query",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_succesful_query",
                  "false"
                ],
                [
                  "test_wrong_query",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_succesful_query",
                  "false"
                ],
                [
                  "test_wrong_query",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_succesful_query",
                  "false"
                ],
                [
                  "test_wrong_query",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_succesful_query",
                "false"
              ],
              [
                "test_wrong_query",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_succesful_query",
                "false"
              ],
              [
                "test_wrong_query",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_succesful_query",
                []
              ],
              [
                "test_wrong_query",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_succesful_query",
                "false"
              ],
              [
                "test_wrong_query",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_succesful_query",
                "true"
              ],
              [
                "test_wrong_query",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_succesful_query",
                  "0"
                ],
                [
                  "test_wrong_query",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_succesful_query",
                  "0"
                ],
                [
                  "test_wrong_query",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_succesful_query",
                "false"
              ],
              [
                "test_wrong_query",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_succesful_query",
                "false"
              ],
              [
                "test_wrong_query",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_succesful_query",
                "3"
              ],
              [
                "test_wrong_query",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_succesful_query",
                [
                  "result",
                  "ds"
                ]
              ],
              [
                "test_wrong_query",
                [
                  "ds"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_succesful_query",
                []
              ],
              [
                "test_wrong_query",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6694489048602847,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_succesful_query",
                  "test_wrong_query",
                  0.6694489048602847
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_succesful_query",
                "false"
              ],
              [
                "test_wrong_query",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "longitude_\u0026_core_\u0026_tests_\u0026_test_data_source_postgres.py",
    "testCases": [
      {
        "name": "TestSQLAlchemyDataSource",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_query_with_commit",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertCountEqual, PyCallExpression: self.assertCountEqual]"
                ],
                [
                  "test_query_without_commit",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertCountEqual, PyCallExpression: self.assertCountEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_query_with_commit",
                  "[]"
                ],
                [
                  "test_query_without_commit",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_query_with_commit",
                  "false"
                ],
                [
                  "test_query_without_commit",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_query_with_commit",
                  "false"
                ],
                [
                  "test_query_without_commit",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_query_with_commit",
                  "false"
                ],
                [
                  "test_query_without_commit",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_query_with_commit",
                  "false"
                ],
                [
                  "test_query_without_commit",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_query_with_commit",
                "false"
              ],
              [
                "test_query_without_commit",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_query_with_commit",
                "false"
              ],
              [
                "test_query_without_commit",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_query_with_commit",
                [
                  "self.connection_mock.return_value.cursor.return_value.close.return_value"
                ]
              ],
              [
                "test_query_without_commit",
                [
                  "self.connection_mock.return_value.cursor.return_value.close.return_value"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_query_with_commit",
                "false"
              ],
              [
                "test_query_without_commit",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_query_with_commit",
                "false"
              ],
              [
                "test_query_without_commit",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_query_with_commit",
                  "0"
                ],
                [
                  "test_query_without_commit",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_query_with_commit",
                  "0"
                ],
                [
                  "test_query_without_commit",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_query_with_commit",
                "false"
              ],
              [
                "test_query_without_commit",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_query_with_commit",
                "false"
              ],
              [
                "test_query_without_commit",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_query_with_commit",
                "4"
              ],
              [
                "test_query_without_commit",
                "4"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_query_with_commit",
                [
                  "carto_ds",
                  "data"
                ]
              ],
              [
                "test_query_without_commit",
                [
                  "carto_ds",
                  "data",
                  "fake_rows",
                  "fake_fields"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_query_with_commit",
                []
              ],
              [
                "test_query_without_commit",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8618815361536217,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_query_without_commit",
                  "test_query_with_commit",
                  0.8618815361536217
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_query_with_commit",
                "true"
              ],
              [
                "test_query_without_commit",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "longitude_\u0026_core_\u0026_tests_\u0026_test_data_source_sqlalchemy.py",
    "testCases": [
      {
        "name": "TestSQLAlchemyDataSource",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_create_all",
                  "[]"
                ],
                [
                  "test_execute_query_with_return_data",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_base_class",
                  "[PyCallExpression: self.assertIsNotNone, PyCallExpression: self.assertIsNotNone]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_create_all",
                  "[]"
                ],
                [
                  "test_execute_query_with_return_data",
                  "[]"
                ],
                [
                  "test_base_class",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_create_all",
                  "false"
                ],
                [
                  "test_execute_query_with_return_data",
                  "false"
                ],
                [
                  "test_base_class",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_create_all",
                  "false"
                ],
                [
                  "test_execute_query_with_return_data",
                  "false"
                ],
                [
                  "test_base_class",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_create_all",
                  "false"
                ],
                [
                  "test_execute_query_with_return_data",
                  "false"
                ],
                [
                  "test_base_class",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_create_all",
                  "false"
                ],
                [
                  "test_execute_query_with_return_data",
                  "false"
                ],
                [
                  "test_base_class",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_create_all",
                "false"
              ],
              [
                "test_execute_query_with_return_data",
                "false"
              ],
              [
                "test_base_class",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_create_all",
                "false"
              ],
              [
                "test_execute_query_with_return_data",
                "false"
              ],
              [
                "test_base_class",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_create_all",
                [
                  "self.create_engine_mock.return_value.connect.return_value.closed",
                  "self.connection",
                  "self.create_engine_mock",
                  "self.create_engine_mock.return_value.connect.return_value.close.return_value"
                ]
              ],
              [
                "test_execute_query_with_return_data",
                [
                  "self.create_engine_mock.return_value.connect.return_value.closed",
                  "self.create_engine_mock",
                  "self.create_engine_mock.return_value.connect.return_value.close.return_value"
                ]
              ],
              [
                "test_base_class",
                [
                  "self.create_engine_mock.return_value.connect.return_value.closed",
                  "self.connection",
                  "self.create_engine_mock.return_value.connect.return_value.close.return_value"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_create_all",
                "false"
              ],
              [
                "test_execute_query_with_return_data",
                "false"
              ],
              [
                "test_base_class",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_create_all",
                "false"
              ],
              [
                "test_execute_query_with_return_data",
                "false"
              ],
              [
                "test_base_class",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_create_all",
                  "0"
                ],
                [
                  "test_execute_query_with_return_data",
                  "0"
                ],
                [
                  "test_base_class",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_create_all",
                  "0"
                ],
                [
                  "test_execute_query_with_return_data",
                  "0"
                ],
                [
                  "test_base_class",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_create_all",
                "false"
              ],
              [
                "test_execute_query_with_return_data",
                "false"
              ],
              [
                "test_base_class",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_create_all",
                "false"
              ],
              [
                "test_execute_query_with_return_data",
                "false"
              ],
              [
                "test_base_class",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_create_all",
                "1"
              ],
              [
                "test_execute_query_with_return_data",
                "3"
              ],
              [
                "test_base_class",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_create_all",
                [
                  "carto_ds"
                ]
              ],
              [
                "test_execute_query_with_return_data",
                [
                  "carto_ds",
                  "data"
                ]
              ],
              [
                "test_base_class",
                [
                  "carto_ds"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_create_all",
                []
              ],
              [
                "test_execute_query_with_return_data",
                [
                  "self.connection"
                ]
              ],
              [
                "test_base_class",
                [
                  "self.create_engine_mock.return_value.connect.return_value.closed"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.49317670439873135,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_base_class",
                  "test_create_all",
                  0.5955007196035044
                ],
                [
                  "test_base_class",
                  "test_execute_query_with_return_data",
                  0.41030417322165613
                ],
                [
                  "test_create_all",
                  "test_execute_query_with_return_data",
                  0.47372522037103354
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_create_all",
                "false"
              ],
              [
                "test_execute_query_with_return_data",
                "true"
              ],
              [
                "test_base_class",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  }
]