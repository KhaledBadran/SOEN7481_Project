[
  {
    "name": "Test_\u0026_test_01.py",
    "testCases": [
      {
        "name": "Metric",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_io",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_cpu",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_io",
                  "[]"
                ],
                [
                  "test_cpu",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_io",
                  "false"
                ],
                [
                  "test_cpu",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_io",
                  "false"
                ],
                [
                  "test_cpu",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_io",
                  "false"
                ],
                [
                  "test_cpu",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_io",
                  "false"
                ],
                [
                  "test_cpu",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_io",
                "false"
              ],
              [
                "test_cpu",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_io",
                "false"
              ],
              [
                "test_cpu",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_io",
                []
              ],
              [
                "test_cpu",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_io",
                "false"
              ],
              [
                "test_cpu",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_io",
                "false"
              ],
              [
                "test_cpu",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_io",
                  "0"
                ],
                [
                  "test_cpu",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_io",
                  "0"
                ],
                [
                  "test_cpu",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_io",
                "false"
              ],
              [
                "test_cpu",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_io",
                "false"
              ],
              [
                "test_cpu",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_io",
                "4"
              ],
              [
                "test_cpu",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_io",
                [
                  "s",
                  "m"
                ]
              ],
              [
                "test_cpu",
                [
                  "s",
                  "m"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_io",
                []
              ],
              [
                "test_cpu",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9201642882064879,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_cpu",
                  "test_io",
                  0.9201642882064879
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_io",
                "true"
              ],
              [
                "test_cpu",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "Test_\u0026_test_02.py",
    "testCases": [
      {
        "name": "AWS",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_handshake",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_handshake",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_handshake",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_handshake",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_handshake",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_handshake",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_handshake",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": true,
            "detail": [
              [
                "test_handshake",
                "true"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_handshake",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_handshake",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_handshake",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_handshake",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_handshake",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_handshake",
                "true"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_handshake",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_handshake",
                "6"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_handshake",
                [
                  "msg",
                  "ab",
                  "do",
                  "m",
                  "kdir",
                  "_https_out",
                  "task",
                  "_sqs_out",
                  "_sqs_in",
                  "_pgp",
                  "_https_in",
                  "originals",
                  "db"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_handshake",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_handshake",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "Test_\u0026_test_03.py",
    "testCases": [
      {
        "name": "Logger",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_issue_45",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_issue_45",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_issue_45",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_issue_45",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": true
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_issue_45",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_issue_45",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_issue_45",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_issue_45",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_issue_45",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_issue_45",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_issue_45",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_issue_45",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_issue_45",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_issue_45",
                "true"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_issue_45",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_issue_45",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_issue_45",
                [
                  "text"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_issue_45",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_issue_45",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "Test_\u0026_test_04.py",
    "testCases": [
      {
        "name": "Scan",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": true
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "8"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test",
                [
                  "factories"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "Test_\u0026_test_05.py",
    "testCases": [
      {
        "name": "DAG",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_ancestry",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_tree",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_parents",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_ancestry",
                  "[]"
                ],
                [
                  "test_tree",
                  "[]"
                ],
                [
                  "test_parents",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_ancestry",
                  "true"
                ],
                [
                  "test_tree",
                  "true"
                ],
                [
                  "test_parents",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_ancestry",
                  "false"
                ],
                [
                  "test_tree",
                  "true"
                ],
                [
                  "test_parents",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": true
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_ancestry",
                  "false"
                ],
                [
                  "test_tree",
                  "false"
                ],
                [
                  "test_parents",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_ancestry",
                  "false"
                ],
                [
                  "test_tree",
                  "false"
                ],
                [
                  "test_parents",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_ancestry",
                "false"
              ],
              [
                "test_tree",
                "false"
              ],
              [
                "test_parents",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_ancestry",
                "false"
              ],
              [
                "test_tree",
                "false"
              ],
              [
                "test_parents",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_ancestry",
                []
              ],
              [
                "test_tree",
                []
              ],
              [
                "test_parents",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_ancestry",
                "false"
              ],
              [
                "test_tree",
                "false"
              ],
              [
                "test_parents",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_ancestry",
                "true"
              ],
              [
                "test_tree",
                "true"
              ],
              [
                "test_parents",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_ancestry",
                  "0"
                ],
                [
                  "test_tree",
                  "0"
                ],
                [
                  "test_parents",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_ancestry",
                  "0"
                ],
                [
                  "test_tree",
                  "0"
                ],
                [
                  "test_parents",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_ancestry",
                "true"
              ],
              [
                "test_tree",
                "true"
              ],
              [
                "test_parents",
                "true"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_ancestry",
                "false"
              ],
              [
                "test_tree",
                "false"
              ],
              [
                "test_parents",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_ancestry",
                "3"
              ],
              [
                "test_tree",
                "18"
              ],
              [
                "test_parents",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_ancestry",
                [
                  "nodes",
                  "ancestors"
                ]
              ],
              [
                "test_tree",
                [
                  "grands",
                  "children",
                  "root"
                ]
              ],
              [
                "test_parents",
                [
                  "nodes",
                  "parents"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_ancestry",
                []
              ],
              [
                "test_tree",
                []
              ],
              [
                "test_parents",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5295390814110316,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_tree",
                  "test_parents",
                  0.5923723742369046
                ],
                [
                  "test_parents",
                  "test_ancestry",
                  0.5673070881083322
                ],
                [
                  "test_tree",
                  "test_ancestry",
                  0.42893778188785786
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_ancestry",
                "true"
              ],
              [
                "test_tree",
                "true"
              ],
              [
                "test_parents",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "Test_\u0026_test_06.py",
    "testCases": [
      {
        "name": "Schedule",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_complete",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_organize",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_purge",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_defer",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertSetEqual, PyCallExpression: self.assertSetEqual, PyCallExpression: self.assertSetEqual]"
                ],
                [
                  "test_next",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_tasks",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test__delay",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_update",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_view_events",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_complete",
                  "[]"
                ],
                [
                  "test_organize",
                  "[]"
                ],
                [
                  "test_purge",
                  "[]"
                ],
                [
                  "test_defer",
                  "[]"
                ],
                [
                  "test_next",
                  "[]"
                ],
                [
                  "test_tasks",
                  "[]"
                ],
                [
                  "test__delay",
                  "[]"
                ],
                [
                  "test_update",
                  "[]"
                ],
                [
                  "test_view_events",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_complete",
                  "true"
                ],
                [
                  "test_organize",
                  "true"
                ],
                [
                  "test_purge",
                  "true"
                ],
                [
                  "test_defer",
                  "true"
                ],
                [
                  "test_next",
                  "true"
                ],
                [
                  "test_tasks",
                  "false"
                ],
                [
                  "test__delay",
                  "false"
                ],
                [
                  "test_update",
                  "true"
                ],
                [
                  "test_view_events",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_complete",
                  "true"
                ],
                [
                  "test_organize",
                  "false"
                ],
                [
                  "test_purge",
                  "false"
                ],
                [
                  "test_defer",
                  "false"
                ],
                [
                  "test_next",
                  "true"
                ],
                [
                  "test_tasks",
                  "false"
                ],
                [
                  "test__delay",
                  "false"
                ],
                [
                  "test_update",
                  "true"
                ],
                [
                  "test_view_events",
                  "true"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": true
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_complete",
                  "true"
                ],
                [
                  "test_organize",
                  "false"
                ],
                [
                  "test_purge",
                  "false"
                ],
                [
                  "test_defer",
                  "false"
                ],
                [
                  "test_next",
                  "true"
                ],
                [
                  "test_tasks",
                  "false"
                ],
                [
                  "test__delay",
                  "false"
                ],
                [
                  "test_update",
                  "false"
                ],
                [
                  "test_view_events",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_complete",
                  "false"
                ],
                [
                  "test_organize",
                  "false"
                ],
                [
                  "test_purge",
                  "false"
                ],
                [
                  "test_defer",
                  "false"
                ],
                [
                  "test_next",
                  "false"
                ],
                [
                  "test_tasks",
                  "false"
                ],
                [
                  "test__delay",
                  "false"
                ],
                [
                  "test_update",
                  "false"
                ],
                [
                  "test_view_events",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_complete",
                "false"
              ],
              [
                "test_organize",
                "false"
              ],
              [
                "test_purge",
                "false"
              ],
              [
                "test_defer",
                "false"
              ],
              [
                "test_next",
                "false"
              ],
              [
                "test_tasks",
                "false"
              ],
              [
                "test__delay",
                "false"
              ],
              [
                "test_update",
                "false"
              ],
              [
                "test_view_events",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_complete",
                "false"
              ],
              [
                "test_organize",
                "false"
              ],
              [
                "test_purge",
                "false"
              ],
              [
                "test_defer",
                "false"
              ],
              [
                "test_next",
                "false"
              ],
              [
                "test_tasks",
                "false"
              ],
              [
                "test__delay",
                "false"
              ],
              [
                "test_update",
                "false"
              ],
              [
                "test_view_events",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_complete",
                []
              ],
              [
                "test_organize",
                []
              ],
              [
                "test_purge",
                []
              ],
              [
                "test_defer",
                []
              ],
              [
                "test_next",
                []
              ],
              [
                "test_tasks",
                []
              ],
              [
                "test__delay",
                []
              ],
              [
                "test_update",
                []
              ],
              [
                "test_view_events",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_complete",
                "false"
              ],
              [
                "test_organize",
                "false"
              ],
              [
                "test_purge",
                "false"
              ],
              [
                "test_defer",
                "false"
              ],
              [
                "test_next",
                "false"
              ],
              [
                "test_tasks",
                "false"
              ],
              [
                "test__delay",
                "false"
              ],
              [
                "test_update",
                "false"
              ],
              [
                "test_view_events",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_complete",
                "true"
              ],
              [
                "test_organize",
                "true"
              ],
              [
                "test_purge",
                "false"
              ],
              [
                "test_defer",
                "true"
              ],
              [
                "test_next",
                "true"
              ],
              [
                "test_tasks",
                "true"
              ],
              [
                "test__delay",
                "true"
              ],
              [
                "test_update",
                "true"
              ],
              [
                "test_view_events",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_complete",
                  "0"
                ],
                [
                  "test_organize",
                  "0"
                ],
                [
                  "test_purge",
                  "0"
                ],
                [
                  "test_defer",
                  "0"
                ],
                [
                  "test_next",
                  "0"
                ],
                [
                  "test_tasks",
                  "0"
                ],
                [
                  "test__delay",
                  "0"
                ],
                [
                  "test_update",
                  "0"
                ],
                [
                  "test_view_events",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_complete",
                  "0"
                ],
                [
                  "test_organize",
                  "0"
                ],
                [
                  "test_purge",
                  "0"
                ],
                [
                  "test_defer",
                  "0"
                ],
                [
                  "test_next",
                  "0"
                ],
                [
                  "test_tasks",
                  "0"
                ],
                [
                  "test__delay",
                  "0"
                ],
                [
                  "test_update",
                  "0"
                ],
                [
                  "test_view_events",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_complete",
                "false"
              ],
              [
                "test_organize",
                "false"
              ],
              [
                "test_purge",
                "false"
              ],
              [
                "test_defer",
                "false"
              ],
              [
                "test_next",
                "false"
              ],
              [
                "test_tasks",
                "false"
              ],
              [
                "test__delay",
                "false"
              ],
              [
                "test_update",
                "false"
              ],
              [
                "test_view_events",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_complete",
                "false"
              ],
              [
                "test_organize",
                "false"
              ],
              [
                "test_purge",
                "false"
              ],
              [
                "test_defer",
                "false"
              ],
              [
                "test_next",
                "false"
              ],
              [
                "test_tasks",
                "false"
              ],
              [
                "test__delay",
                "false"
              ],
              [
                "test_update",
                "false"
              ],
              [
                "test_view_events",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_complete",
                "4"
              ],
              [
                "test_organize",
                "6"
              ],
              [
                "test_purge",
                "6"
              ],
              [
                "test_defer",
                "10"
              ],
              [
                "test_next",
                "24"
              ],
              [
                "test_tasks",
                "1"
              ],
              [
                "test__delay",
                "3"
              ],
              [
                "test_update",
                "2"
              ],
              [
                "test_view_events",
                "8"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_complete",
                [
                  "nodes",
                  "dei"
                ]
              ],
              [
                "test_organize",
                [
                  "nodes"
                ]
              ],
              [
                "test_purge",
                [
                  "a",
                  "b",
                  "c",
                  "d",
                  "e",
                  "f"
                ]
              ],
              [
                "test_defer",
                [
                  "jobs"
                ]
              ],
              [
                "test_next",
                [
                  "nodes",
                  "na",
                  "dispatch",
                  "noio",
                  "dei"
                ]
              ],
              [
                "test_tasks",
                [
                  "tasks"
                ]
              ],
              [
                "test__delay",
                [
                  "a",
                  "b"
                ]
              ],
              [
                "test_update",
                [
                  "root"
                ]
              ],
              [
                "test_view_events",
                [
                  "events"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_complete",
                []
              ],
              [
                "test_organize",
                []
              ],
              [
                "test_purge",
                []
              ],
              [
                "test_defer",
                []
              ],
              [
                "test_next",
                []
              ],
              [
                "test_tasks",
                []
              ],
              [
                "test__delay",
                []
              ],
              [
                "test_update",
                []
              ],
              [
                "test_view_events",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.48950502727703793,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_complete",
                  "test_update",
                  0.4534572596455378
                ],
                [
                  "test_complete",
                  "test_organize",
                  0.7609525208254535
                ],
                [
                  "test_complete",
                  "test_view_events",
                  0.6005480353609428
                ],
                [
                  "test_next",
                  "test_tasks",
                  0.6066738236291609
                ],
                [
                  "test_complete",
                  "test_defer",
                  0.5478468490373244
                ],
                [
                  "test_purge",
                  "test_tasks",
                  0.2494878310469433
                ],
                [
                  "test_tasks",
                  "test_view_events",
                  0.5800194940957134
                ],
                [
                  "test_defer",
                  "test_next",
                  0.741316054053744
                ],
                [
                  "test_organize",
                  "test_view_events",
                  0.7549104108469733
                ],
                [
                  "test__delay",
                  "test_tasks",
                  0.40929374234328036
                ],
                [
                  "test__delay",
                  "test_organize",
                  0.4391397171160631
                ],
                [
                  "test_defer",
                  "test_view_events",
                  0.718875882777476
                ],
                [
                  "test_next",
                  "test_update",
                  0.4341550407621443
                ],
                [
                  "test_next",
                  "test_organize",
                  0.8531061790804619
                ],
                [
                  "test_complete",
                  "test_next",
                  0.7060908290190074
                ],
                [
                  "test_defer",
                  "test_purge",
                  0.34582743922516307
                ],
                [
                  "test_defer",
                  "test_tasks",
                  0.5101894075464571
                ],
                [
                  "test_organize",
                  "test_update",
                  0.48459205753973333
                ],
                [
                  "test__delay",
                  "test_next",
                  0.43946539145269586
                ],
                [
                  "test_organize",
                  "test_tasks",
                  0.5957804693561481
                ],
                [
                  "test__delay",
                  "test_complete",
                  0.3864394646794963
                ],
                [
                  "test__delay",
                  "test_purge",
                  0.21221611126329354
                ],
                [
                  "test_purge",
                  "test_view_events",
                  0.31489086690433243
                ],
                [
                  "test_defer",
                  "test_organize",
                  0.715126828875871
                ],
                [
                  "test_update",
                  "test_view_events",
                  0.42952421424436843
                ],
                [
                  "test__delay",
                  "test_update",
                  0.2928034870526277
                ],
                [
                  "test_complete",
                  "test_tasks",
                  0.498802393489843
                ],
                [
                  "test_defer",
                  "test_update",
                  0.4258134419229967
                ],
                [
                  "test_next",
                  "test_view_events",
                  0.7760374814543306
                ],
                [
                  "test_organize",
                  "test_purge",
                  0.2871990321931397
                ],
                [
                  "test__delay",
                  "test_view_events",
                  0.44756268896471296
                ],
                [
                  "test_complete",
                  "test_purge",
                  0.24296429610404757
                ],
                [
                  "test_purge",
                  "test_update",
                  0.3093660099675306
                ],
                [
                  "test__delay",
                  "test_defer",
                  0.39318977775940944
                ],
                [
                  "test_next",
                  "test_purge",
                  0.3195329990881898
                ],
                [
                  "test_tasks",
                  "test_update",
                  0.3389834532487511
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_complete",
                "false"
              ],
              [
                "test_organize",
                "false"
              ],
              [
                "test_purge",
                "false"
              ],
              [
                "test_defer",
                "false"
              ],
              [
                "test_next",
                "false"
              ],
              [
                "test_tasks",
                "false"
              ],
              [
                "test__delay",
                "false"
              ],
              [
                "test_update",
                "false"
              ],
              [
                "test_view_events",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 9
      }
    ]
  },
  {
    "name": "Test_\u0026_test_07.py",
    "testCases": [
      {
        "name": "Shelf",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_issue_16",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_issue_16",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_issue_16",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_issue_16",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_issue_16",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_issue_16",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_issue_16",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_issue_16",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_issue_16",
                [
                  "self._send",
                  "self._do",
                  "self.root",
                  "self._release",
                  "self._acquire"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_issue_16",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_issue_16",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_issue_16",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_issue_16",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_issue_16",
                "true"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_issue_16",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_issue_16",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_issue_16",
                [
                  "full_list"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_issue_16",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_issue_16",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "Test_\u0026_test_08.py",
    "testCases": [
      {
        "name": "Compliant",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_rule_10",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_ae",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_bae",
                  "[PyCallExpression: self.assertFalse]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_rule_10",
                  "[]"
                ],
                [
                  "test_ae",
                  "[]"
                ],
                [
                  "test_bae",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_rule_10",
                  "false"
                ],
                [
                  "test_ae",
                  "false"
                ],
                [
                  "test_bae",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_rule_10",
                  "false"
                ],
                [
                  "test_ae",
                  "false"
                ],
                [
                  "test_bae",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_rule_10",
                  "false"
                ],
                [
                  "test_ae",
                  "false"
                ],
                [
                  "test_bae",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_rule_10",
                  "false"
                ],
                [
                  "test_ae",
                  "false"
                ],
                [
                  "test_bae",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_rule_10",
                "false"
              ],
              [
                "test_ae",
                "false"
              ],
              [
                "test_bae",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_rule_10",
                "false"
              ],
              [
                "test_ae",
                "false"
              ],
              [
                "test_bae",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_rule_10",
                []
              ],
              [
                "test_ae",
                []
              ],
              [
                "test_bae",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_rule_10",
                "false"
              ],
              [
                "test_ae",
                "false"
              ],
              [
                "test_bae",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_rule_10",
                "false"
              ],
              [
                "test_ae",
                "false"
              ],
              [
                "test_bae",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_rule_10",
                  "0"
                ],
                [
                  "test_ae",
                  "0"
                ],
                [
                  "test_bae",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_rule_10",
                  "0"
                ],
                [
                  "test_ae",
                  "0"
                ],
                [
                  "test_bae",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_rule_10",
                "false"
              ],
              [
                "test_ae",
                "false"
              ],
              [
                "test_bae",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_rule_10",
                "false"
              ],
              [
                "test_ae",
                "false"
              ],
              [
                "test_bae",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_rule_10",
                "2"
              ],
              [
                "test_ae",
                "1"
              ],
              [
                "test_bae",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_rule_10",
                []
              ],
              [
                "test_ae",
                []
              ],
              [
                "test_bae",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_rule_10",
                []
              ],
              [
                "test_ae",
                []
              ],
              [
                "test_bae",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6817072494249107,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_ae",
                  "test_bae",
                  0.9215686274509802
                ],
                [
                  "test_bae",
                  "test_rule_10",
                  0.5617765604118757
                ],
                [
                  "test_ae",
                  "test_rule_10",
                  0.5617765604118757
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_rule_10",
                "false"
              ],
              [
                "test_ae",
                "false"
              ],
              [
                "test_bae",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "Test_\u0026_test_09.py",
    "testCases": [
      {
        "name": "Dawgie",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_schedule",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertIsInstance]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_schedule",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_schedule",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_schedule",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_schedule",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_schedule",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_schedule",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_schedule",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_schedule",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_schedule",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_schedule",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_schedule",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_schedule",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_schedule",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_schedule",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_schedule",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_schedule",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_schedule",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_schedule",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "Test_\u0026_test_10.py",
    "testCases": [
      {
        "name": "Farm",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_hand__process",
                  "[PyCallExpression: self.assertLogs, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_rerunid",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_something_to_do",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_hand__res",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_hand__process",
                  "[]"
                ],
                [
                  "test_rerunid",
                  "[]"
                ],
                [
                  "test_something_to_do",
                  "[]"
                ],
                [
                  "test_hand__res",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_hand__process",
                  "false"
                ],
                [
                  "test_rerunid",
                  "false"
                ],
                [
                  "test_something_to_do",
                  "false"
                ],
                [
                  "test_hand__res",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_hand__process",
                  "false"
                ],
                [
                  "test_rerunid",
                  "false"
                ],
                [
                  "test_something_to_do",
                  "false"
                ],
                [
                  "test_hand__res",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_hand__process",
                  "false"
                ],
                [
                  "test_rerunid",
                  "false"
                ],
                [
                  "test_something_to_do",
                  "true"
                ],
                [
                  "test_hand__res",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_hand__process",
                  "false"
                ],
                [
                  "test_rerunid",
                  "false"
                ],
                [
                  "test_something_to_do",
                  "false"
                ],
                [
                  "test_hand__res",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_hand__process",
                "false"
              ],
              [
                "test_rerunid",
                "false"
              ],
              [
                "test_something_to_do",
                "false"
              ],
              [
                "test_hand__res",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_hand__process",
                "false"
              ],
              [
                "test_rerunid",
                "false"
              ],
              [
                "test_something_to_do",
                "false"
              ],
              [
                "test_hand__res",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_hand__process",
                []
              ],
              [
                "test_rerunid",
                []
              ],
              [
                "test_something_to_do",
                []
              ],
              [
                "test_hand__res",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_hand__process",
                "false"
              ],
              [
                "test_rerunid",
                "false"
              ],
              [
                "test_something_to_do",
                "false"
              ],
              [
                "test_hand__res",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_hand__process",
                "false"
              ],
              [
                "test_rerunid",
                "true"
              ],
              [
                "test_something_to_do",
                "false"
              ],
              [
                "test_hand__res",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_hand__process",
                  "0"
                ],
                [
                  "test_rerunid",
                  "0"
                ],
                [
                  "test_something_to_do",
                  "0"
                ],
                [
                  "test_hand__res",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_hand__process",
                  "0"
                ],
                [
                  "test_rerunid",
                  "0"
                ],
                [
                  "test_something_to_do",
                  "0"
                ],
                [
                  "test_hand__res",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_hand__process",
                "false"
              ],
              [
                "test_rerunid",
                "false"
              ],
              [
                "test_something_to_do",
                "false"
              ],
              [
                "test_hand__res",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_hand__process",
                "false"
              ],
              [
                "test_rerunid",
                "false"
              ],
              [
                "test_something_to_do",
                "false"
              ],
              [
                "test_hand__res",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_hand__process",
                "2"
              ],
              [
                "test_rerunid",
                "3"
              ],
              [
                "test_something_to_do",
                "4"
              ],
              [
                "test_hand__res",
                "6"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_hand__process",
                [
                  "msg",
                  "hand"
                ]
              ],
              [
                "test_rerunid",
                [
                  "r",
                  "n"
                ]
              ],
              [
                "test_something_to_do",
                []
              ],
              [
                "test_hand__res",
                [
                  "a",
                  "b",
                  "c",
                  "d",
                  "e",
                  "f"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_hand__process",
                []
              ],
              [
                "test_rerunid",
                []
              ],
              [
                "test_something_to_do",
                []
              ],
              [
                "test_hand__res",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.2985967676587473,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_rerunid",
                  "test_something_to_do",
                  0.2589285714285714
                ],
                [
                  "test_hand__process",
                  "test_hand__res",
                  0.30586247863129046
                ],
                [
                  "test_hand__process",
                  "test_something_to_do",
                  0.33286360319466496
                ],
                [
                  "test_hand__res",
                  "test_rerunid",
                  0.3162901568166986
                ],
                [
                  "test_hand__res",
                  "test_something_to_do",
                  0.19058509449211325
                ],
                [
                  "test_hand__process",
                  "test_rerunid",
                  0.38705070138914527
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_hand__process",
                "false"
              ],
              [
                "test_rerunid",
                "false"
              ],
              [
                "test_something_to_do",
                "false"
              ],
              [
                "test_hand__res",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      }
    ]
  },
  {
    "name": "Test_\u0026_test_11.py",
    "testCases": [
      {
        "name": "Context",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_dumps",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_dumps",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_dumps",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_dumps",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_dumps",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_dumps",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_dumps",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_dumps",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_dumps",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_dumps",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_dumps",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_dumps",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_dumps",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_dumps",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_dumps",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_dumps",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_dumps",
                [
                  "b"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_dumps",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_dumps",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "Test_\u0026_test_12.py",
    "testCases": [
      {
        "name": "PromotionEngine",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_call",
                  "[PyCallExpression: self.assertLogs, PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual, PyCallExpression: self.assertFalse, PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_call",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_call",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_call",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_call",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_call",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_call",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_call",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_call",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_call",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_call",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_call",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_call",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_call",
                "true"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_call",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_call",
                "6"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_call",
                [
                  "more"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_call",
                [
                  "self.promote"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_call",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  }
]