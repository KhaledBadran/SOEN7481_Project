[
  {
    "name": "test_\u0026_test_hits.py",
    "testCases": [
      {
        "name": "testHITS",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "testFork",
                  "[PyCallExpression: self.assertAlmostEquals, PyCallExpression: self.assertAlmostEquals, PyCallExpression: self.assertAlmostEquals, PyCallExpression: self.assertAlmostEquals, PyCallExpression: self.assertAlmostEquals, PyCallExpression: self.assertAlmostEquals]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "testFork",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "testFork",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "testFork",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "testFork",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "testFork",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "testFork",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "testFork",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "testFork",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "testFork",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "testFork",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "testFork",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "testFork",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "testFork",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "testFork",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "testFork",
                "6"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "testFork",
                [
                  "forkgr",
                  "hubdict",
                  "authdict"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "testFork",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "testFork",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "test_\u0026_test_pagerank.py",
    "testCases": [
      {
        "name": "test_pagerank",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "testNetwork_python",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "testNetwork_cython",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "testNetwork_fortran",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertAlmostEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "testNetwork_python",
                  "[]"
                ],
                [
                  "testNetwork_cython",
                  "[]"
                ],
                [
                  "testNetwork_fortran",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "testNetwork_python",
                  "true"
                ],
                [
                  "testNetwork_cython",
                  "true"
                ],
                [
                  "testNetwork_fortran",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "testNetwork_python",
                  "false"
                ],
                [
                  "testNetwork_cython",
                  "false"
                ],
                [
                  "testNetwork_fortran",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "testNetwork_python",
                  "false"
                ],
                [
                  "testNetwork_cython",
                  "false"
                ],
                [
                  "testNetwork_fortran",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "testNetwork_python",
                  "false"
                ],
                [
                  "testNetwork_cython",
                  "false"
                ],
                [
                  "testNetwork_fortran",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "testNetwork_python",
                "false"
              ],
              [
                "testNetwork_cython",
                "false"
              ],
              [
                "testNetwork_fortran",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "testNetwork_python",
                "false"
              ],
              [
                "testNetwork_cython",
                "false"
              ],
              [
                "testNetwork_fortran",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "testNetwork_python",
                []
              ],
              [
                "testNetwork_cython",
                []
              ],
              [
                "testNetwork_fortran",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "testNetwork_python",
                "false"
              ],
              [
                "testNetwork_cython",
                "false"
              ],
              [
                "testNetwork_fortran",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "testNetwork_python",
                "false"
              ],
              [
                "testNetwork_cython",
                "false"
              ],
              [
                "testNetwork_fortran",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "testNetwork_python",
                  "0"
                ],
                [
                  "testNetwork_cython",
                  "0"
                ],
                [
                  "testNetwork_fortran",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "testNetwork_python",
                  "0"
                ],
                [
                  "testNetwork_cython",
                  "0"
                ],
                [
                  "testNetwork_fortran",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "testNetwork_python",
                "false"
              ],
              [
                "testNetwork_cython",
                "false"
              ],
              [
                "testNetwork_fortran",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "testNetwork_python",
                "false"
              ],
              [
                "testNetwork_cython",
                "false"
              ],
              [
                "testNetwork_fortran",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "testNetwork_python",
                "3"
              ],
              [
                "testNetwork_cython",
                "3"
              ],
              [
                "testNetwork_fortran",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "testNetwork_python",
                [
                  "pagerank"
                ]
              ],
              [
                "testNetwork_cython",
                [
                  "pagerank"
                ]
              ],
              [
                "testNetwork_fortran",
                [
                  "pagerank"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "testNetwork_python",
                [
                  "self.googlematrix",
                  "self.nodedict"
                ]
              ],
              [
                "testNetwork_cython",
                [
                  "self.googlematrix",
                  "self.nodedict"
                ]
              ],
              [
                "testNetwork_fortran",
                [
                  "self.googlematrix",
                  "self.nodedict"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9599999999999999,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "testNetwork_fortran",
                  "testNetwork_cython",
                  0.9599999999999999
                ],
                [
                  "testNetwork_fortran",
                  "testNetwork_python",
                  0.9599999999999999
                ],
                [
                  "testNetwork_python",
                  "testNetwork_cython",
                  0.9599999999999999
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "testNetwork_python",
                "false"
              ],
              [
                "testNetwork_cython",
                "false"
              ],
              [
                "testNetwork_fortran",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "test_\u0026_test_simplecircuits.py",
    "testCases": [
      {
        "name": "test_SocialNetwork",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_parallelcircuits",
                  "[PyCallExpression: self.assertAlmostEquals, PyCallExpression: self.assertAlmostEquals, PyCallExpression: self.assertAlmostEquals]"
                ],
                [
                  "test_simplecircuits",
                  "[PyCallExpression: self.assertAlmostEquals, PyCallExpression: self.assertAlmostEquals]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_parallelcircuits",
                  "[]"
                ],
                [
                  "test_simplecircuits",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_parallelcircuits",
                  "false"
                ],
                [
                  "test_simplecircuits",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_parallelcircuits",
                  "false"
                ],
                [
                  "test_simplecircuits",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_parallelcircuits",
                  "false"
                ],
                [
                  "test_simplecircuits",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_parallelcircuits",
                  "false"
                ],
                [
                  "test_simplecircuits",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_parallelcircuits",
                "false"
              ],
              [
                "test_simplecircuits",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_parallelcircuits",
                "false"
              ],
              [
                "test_simplecircuits",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_parallelcircuits",
                []
              ],
              [
                "test_simplecircuits",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_parallelcircuits",
                "false"
              ],
              [
                "test_simplecircuits",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_parallelcircuits",
                "true"
              ],
              [
                "test_simplecircuits",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_parallelcircuits",
                  "0"
                ],
                [
                  "test_simplecircuits",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_parallelcircuits",
                  "0"
                ],
                [
                  "test_simplecircuits",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_parallelcircuits",
                "false"
              ],
              [
                "test_simplecircuits",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_parallelcircuits",
                "false"
              ],
              [
                "test_simplecircuits",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_parallelcircuits",
                "3"
              ],
              [
                "test_simplecircuits",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_parallelcircuits",
                [
                  "circuit"
                ]
              ],
              [
                "test_simplecircuits",
                [
                  "circuit"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_parallelcircuits",
                []
              ],
              [
                "test_simplecircuits",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8716308047219646,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_simplecircuits",
                  "test_parallelcircuits",
                  0.8716308047219646
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_parallelcircuits",
                "false"
              ],
              [
                "test_simplecircuits",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "test_\u0026_test_socialnetworks.py",
    "testCases": [
      {
        "name": "test_SocialNetwork",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_resistdist",
                  "[PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_socialnetwork",
                  "[PyCallExpression: self.assertAlmostEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_resistdist",
                  "[]"
                ],
                [
                  "test_socialnetwork",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_resistdist",
                  "false"
                ],
                [
                  "test_socialnetwork",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_resistdist",
                  "false"
                ],
                [
                  "test_socialnetwork",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_resistdist",
                  "false"
                ],
                [
                  "test_socialnetwork",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_resistdist",
                  "false"
                ],
                [
                  "test_socialnetwork",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_resistdist",
                "false"
              ],
              [
                "test_socialnetwork",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_resistdist",
                "false"
              ],
              [
                "test_socialnetwork",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_resistdist",
                []
              ],
              [
                "test_socialnetwork",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_resistdist",
                "false"
              ],
              [
                "test_socialnetwork",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_resistdist",
                "true"
              ],
              [
                "test_socialnetwork",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_resistdist",
                  "0"
                ],
                [
                  "test_socialnetwork",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_resistdist",
                  "0"
                ],
                [
                  "test_socialnetwork",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_resistdist",
                "false"
              ],
              [
                "test_socialnetwork",
                "true"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_resistdist",
                "false"
              ],
              [
                "test_socialnetwork",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_resistdist",
                "3"
              ],
              [
                "test_socialnetwork",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_resistdist",
                [
                  "obj"
                ]
              ],
              [
                "test_socialnetwork",
                [
                  "nodes",
                  "edges",
                  "testresults",
                  "wn1",
                  "name2",
                  "name1",
                  "THIS_DIR",
                  "resistance"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_resistdist",
                []
              ],
              [
                "test_socialnetwork",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.4079774463501848,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_socialnetwork",
                  "test_resistdist",
                  0.4079774463501848
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_resistdist",
                "false"
              ],
              [
                "test_socialnetwork",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  }
]