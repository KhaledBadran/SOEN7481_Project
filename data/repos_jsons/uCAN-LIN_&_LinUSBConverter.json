[
  {
    "name": "python_lib_\u0026_tests_\u0026_LUC_test.py",
    "testCases": [
      {
        "name": "LUCTesting",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_comunication",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertGreater, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_firmware_version",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_comunication",
                  "[]"
                ],
                [
                  "test_firmware_version",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_comunication",
                  "false"
                ],
                [
                  "test_firmware_version",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_comunication",
                  "false"
                ],
                [
                  "test_firmware_version",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_comunication",
                  "true"
                ],
                [
                  "test_firmware_version",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_comunication",
                  "false"
                ],
                [
                  "test_firmware_version",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_comunication",
                "false"
              ],
              [
                "test_firmware_version",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_comunication",
                "false"
              ],
              [
                "test_firmware_version",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_comunication",
                []
              ],
              [
                "test_firmware_version",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_comunication",
                "false"
              ],
              [
                "test_firmware_version",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_comunication",
                "true"
              ],
              [
                "test_firmware_version",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_comunication",
                  "0"
                ],
                [
                  "test_firmware_version",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_comunication",
                  "0"
                ],
                [
                  "test_firmware_version",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_comunication",
                "true"
              ],
              [
                "test_firmware_version",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": true,
            "detail": [
              [
                "test_comunication",
                "true"
              ],
              [
                "test_firmware_version",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_comunication",
                "7"
              ],
              [
                "test_firmware_version",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_comunication",
                [
                  "ll"
                ]
              ],
              [
                "test_firmware_version",
                [
                  "ll"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_comunication",
                [
                  "self.slave",
                  "self.master"
                ]
              ],
              [
                "test_firmware_version",
                [
                  "self.slave",
                  "self.master"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.4385825508306452,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_firmware_version",
                  "test_comunication",
                  0.4385825508306452
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_comunication",
                "false"
              ],
              [
                "test_firmware_version",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "python_lib_\u0026_tests_\u0026_LDF_parser_test.py",
    "testCases": [
      {
        "name": "LDFParserTests",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_ldf_with_spaces",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_ldf",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_encode_decode_message",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_ldf_with_spaces",
                  "[]"
                ],
                [
                  "test_ldf",
                  "[]"
                ],
                [
                  "test_encode_decode_message",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_ldf_with_spaces",
                  "false"
                ],
                [
                  "test_ldf",
                  "false"
                ],
                [
                  "test_encode_decode_message",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_ldf_with_spaces",
                  "false"
                ],
                [
                  "test_ldf",
                  "false"
                ],
                [
                  "test_encode_decode_message",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_ldf_with_spaces",
                  "false"
                ],
                [
                  "test_ldf",
                  "false"
                ],
                [
                  "test_encode_decode_message",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_ldf_with_spaces",
                  "false"
                ],
                [
                  "test_ldf",
                  "false"
                ],
                [
                  "test_encode_decode_message",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_ldf_with_spaces",
                "false"
              ],
              [
                "test_ldf",
                "false"
              ],
              [
                "test_encode_decode_message",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_ldf_with_spaces",
                "false"
              ],
              [
                "test_ldf",
                "false"
              ],
              [
                "test_encode_decode_message",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_ldf_with_spaces",
                []
              ],
              [
                "test_ldf",
                []
              ],
              [
                "test_encode_decode_message",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_ldf_with_spaces",
                "false"
              ],
              [
                "test_ldf",
                "false"
              ],
              [
                "test_encode_decode_message",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_ldf_with_spaces",
                "true"
              ],
              [
                "test_ldf",
                "true"
              ],
              [
                "test_encode_decode_message",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_ldf_with_spaces",
                  "0"
                ],
                [
                  "test_ldf",
                  "0"
                ],
                [
                  "test_encode_decode_message",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_ldf_with_spaces",
                  "0"
                ],
                [
                  "test_ldf",
                  "0"
                ],
                [
                  "test_encode_decode_message",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_ldf_with_spaces",
                "false"
              ],
              [
                "test_ldf",
                "false"
              ],
              [
                "test_encode_decode_message",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_ldf_with_spaces",
                "false"
              ],
              [
                "test_ldf",
                "false"
              ],
              [
                "test_encode_decode_message",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_ldf_with_spaces",
                "1"
              ],
              [
                "test_ldf",
                "1"
              ],
              [
                "test_encode_decode_message",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_ldf_with_spaces",
                [
                  "message",
                  "ldf"
                ]
              ],
              [
                "test_ldf",
                [
                  "ldf"
                ]
              ],
              [
                "test_encode_decode_message",
                [
                  "aaa",
                  "bbb",
                  "diff_str",
                  "message",
                  "ldf"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_ldf_with_spaces",
                []
              ],
              [
                "test_ldf",
                []
              ],
              [
                "test_encode_decode_message",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5271813131515392,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_ldf",
                  "test_encode_decode_message",
                  0.3874777640186558
                ],
                [
                  "test_ldf",
                  "test_ldf_with_spaces",
                  0.686406472983644
                ],
                [
                  "test_ldf_with_spaces",
                  "test_encode_decode_message",
                  0.5076597024523178
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_ldf_with_spaces",
                "false"
              ],
              [
                "test_ldf",
                "false"
              ],
              [
                "test_encode_decode_message",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  }
]