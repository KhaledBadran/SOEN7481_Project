[
  {
    "name": "phidgeter_\u0026_test_relay.py",
    "testCases": [
      {
        "name": "Test",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_three_on_off_toggle",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_two_on_off_toggle",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_open_phidget",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_phidget_by_serial",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_log_captures",
                  "[]"
                ],
                [
                  "test_zero_on_off_toggle",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_one_on_off_toggle",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_three_on_off_toggle",
                  "[]"
                ],
                [
                  "test_two_on_off_toggle",
                  "[]"
                ],
                [
                  "test_open_phidget",
                  "[]"
                ],
                [
                  "test_phidget_by_serial",
                  "[]"
                ],
                [
                  "test_log_captures",
                  "[]"
                ],
                [
                  "test_zero_on_off_toggle",
                  "[]"
                ],
                [
                  "test_one_on_off_toggle",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_three_on_off_toggle",
                  "false"
                ],
                [
                  "test_two_on_off_toggle",
                  "false"
                ],
                [
                  "test_open_phidget",
                  "false"
                ],
                [
                  "test_phidget_by_serial",
                  "false"
                ],
                [
                  "test_log_captures",
                  "false"
                ],
                [
                  "test_zero_on_off_toggle",
                  "false"
                ],
                [
                  "test_one_on_off_toggle",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_three_on_off_toggle",
                  "false"
                ],
                [
                  "test_two_on_off_toggle",
                  "false"
                ],
                [
                  "test_open_phidget",
                  "false"
                ],
                [
                  "test_phidget_by_serial",
                  "false"
                ],
                [
                  "test_log_captures",
                  "false"
                ],
                [
                  "test_zero_on_off_toggle",
                  "false"
                ],
                [
                  "test_one_on_off_toggle",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_three_on_off_toggle",
                  "true"
                ],
                [
                  "test_two_on_off_toggle",
                  "true"
                ],
                [
                  "test_open_phidget",
                  "false"
                ],
                [
                  "test_phidget_by_serial",
                  "false"
                ],
                [
                  "test_log_captures",
                  "false"
                ],
                [
                  "test_zero_on_off_toggle",
                  "true"
                ],
                [
                  "test_one_on_off_toggle",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_three_on_off_toggle",
                  "false"
                ],
                [
                  "test_two_on_off_toggle",
                  "false"
                ],
                [
                  "test_open_phidget",
                  "false"
                ],
                [
                  "test_phidget_by_serial",
                  "false"
                ],
                [
                  "test_log_captures",
                  "false"
                ],
                [
                  "test_zero_on_off_toggle",
                  "false"
                ],
                [
                  "test_one_on_off_toggle",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_three_on_off_toggle",
                "false"
              ],
              [
                "test_two_on_off_toggle",
                "false"
              ],
              [
                "test_open_phidget",
                "false"
              ],
              [
                "test_phidget_by_serial",
                "false"
              ],
              [
                "test_log_captures",
                "false"
              ],
              [
                "test_zero_on_off_toggle",
                "false"
              ],
              [
                "test_one_on_off_toggle",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_three_on_off_toggle",
                "false"
              ],
              [
                "test_two_on_off_toggle",
                "false"
              ],
              [
                "test_open_phidget",
                "false"
              ],
              [
                "test_phidget_by_serial",
                "false"
              ],
              [
                "test_log_captures",
                "false"
              ],
              [
                "test_zero_on_off_toggle",
                "false"
              ],
              [
                "test_one_on_off_toggle",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_three_on_off_toggle",
                [
                  "self.log_group",
                  "self.lvl",
                  "self.log_capture"
                ]
              ],
              [
                "test_two_on_off_toggle",
                [
                  "self.log_group",
                  "self.lvl",
                  "self.log_capture"
                ]
              ],
              [
                "test_open_phidget",
                [
                  "self.lvl"
                ]
              ],
              [
                "test_phidget_by_serial",
                [
                  "self.log_group",
                  "self.lvl",
                  "self.log_capture"
                ]
              ],
              [
                "test_log_captures",
                [
                  "self.log_group",
                  "self.lvl"
                ]
              ],
              [
                "test_zero_on_off_toggle",
                [
                  "self.log_group",
                  "self.lvl",
                  "self.log_capture"
                ]
              ],
              [
                "test_one_on_off_toggle",
                [
                  "self.log_group",
                  "self.lvl",
                  "self.log_capture"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_three_on_off_toggle",
                "false"
              ],
              [
                "test_two_on_off_toggle",
                "false"
              ],
              [
                "test_open_phidget",
                "false"
              ],
              [
                "test_phidget_by_serial",
                "false"
              ],
              [
                "test_log_captures",
                "false"
              ],
              [
                "test_zero_on_off_toggle",
                "false"
              ],
              [
                "test_one_on_off_toggle",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_three_on_off_toggle",
                "false"
              ],
              [
                "test_two_on_off_toggle",
                "false"
              ],
              [
                "test_open_phidget",
                "false"
              ],
              [
                "test_phidget_by_serial",
                "false"
              ],
              [
                "test_log_captures",
                "false"
              ],
              [
                "test_zero_on_off_toggle",
                "false"
              ],
              [
                "test_one_on_off_toggle",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_three_on_off_toggle",
                  "0"
                ],
                [
                  "test_two_on_off_toggle",
                  "0"
                ],
                [
                  "test_open_phidget",
                  "0"
                ],
                [
                  "test_phidget_by_serial",
                  "0"
                ],
                [
                  "test_log_captures",
                  "0"
                ],
                [
                  "test_zero_on_off_toggle",
                  "0"
                ],
                [
                  "test_one_on_off_toggle",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_three_on_off_toggle",
                  "0"
                ],
                [
                  "test_two_on_off_toggle",
                  "0"
                ],
                [
                  "test_open_phidget",
                  "0"
                ],
                [
                  "test_phidget_by_serial",
                  "0"
                ],
                [
                  "test_log_captures",
                  "0"
                ],
                [
                  "test_zero_on_off_toggle",
                  "0"
                ],
                [
                  "test_one_on_off_toggle",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_three_on_off_toggle",
                "false"
              ],
              [
                "test_two_on_off_toggle",
                "false"
              ],
              [
                "test_open_phidget",
                "false"
              ],
              [
                "test_phidget_by_serial",
                "false"
              ],
              [
                "test_log_captures",
                "false"
              ],
              [
                "test_zero_on_off_toggle",
                "false"
              ],
              [
                "test_one_on_off_toggle",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_three_on_off_toggle",
                "false"
              ],
              [
                "test_two_on_off_toggle",
                "false"
              ],
              [
                "test_open_phidget",
                "false"
              ],
              [
                "test_phidget_by_serial",
                "false"
              ],
              [
                "test_log_captures",
                "false"
              ],
              [
                "test_zero_on_off_toggle",
                "false"
              ],
              [
                "test_one_on_off_toggle",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_three_on_off_toggle",
                "3"
              ],
              [
                "test_two_on_off_toggle",
                "3"
              ],
              [
                "test_open_phidget",
                "1"
              ],
              [
                "test_phidget_by_serial",
                "1"
              ],
              [
                "test_log_captures",
                "0"
              ],
              [
                "test_zero_on_off_toggle",
                "3"
              ],
              [
                "test_one_on_off_toggle",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_three_on_off_toggle",
                [
                  "result",
                  "phd_relay"
                ]
              ],
              [
                "test_two_on_off_toggle",
                [
                  "result",
                  "phd_relay"
                ]
              ],
              [
                "test_open_phidget",
                [
                  "gr",
                  "phd"
                ]
              ],
              [
                "test_phidget_by_serial",
                [
                  "serial",
                  "phd"
                ]
              ],
              [
                "test_log_captures",
                []
              ],
              [
                "test_zero_on_off_toggle",
                [
                  "result",
                  "phd_relay"
                ]
              ],
              [
                "test_one_on_off_toggle",
                [
                  "result",
                  "phd_relay"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_three_on_off_toggle",
                []
              ],
              [
                "test_two_on_off_toggle",
                []
              ],
              [
                "test_open_phidget",
                [
                  "self.log_group",
                  "self.log_capture"
                ]
              ],
              [
                "test_phidget_by_serial",
                []
              ],
              [
                "test_log_captures",
                [
                  "self.log_capture"
                ]
              ],
              [
                "test_zero_on_off_toggle",
                []
              ],
              [
                "test_one_on_off_toggle",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.39782688222971696,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_open_phidget",
                  "test_phidget_by_serial",
                  0.2730227519826533
                ],
                [
                  "test_zero_on_off_toggle",
                  "test_two_on_off_toggle",
                  0.9065420560747662
                ],
                [
                  "test_one_on_off_toggle",
                  "test_two_on_off_toggle",
                  0.9074463076885392
                ],
                [
                  "test_one_on_off_toggle",
                  "test_open_phidget",
                  0.2976750365561035
                ],
                [
                  "test_log_captures",
                  "test_three_on_off_toggle",
                  0.03417929635123316
                ],
                [
                  "test_two_on_off_toggle",
                  "test_three_on_off_toggle",
                  0.9065420560747662
                ],
                [
                  "test_log_captures",
                  "test_zero_on_off_toggle",
                  0.03417929635123316
                ],
                [
                  "test_log_captures",
                  "test_two_on_off_toggle",
                  0.03417929635123316
                ],
                [
                  "test_zero_on_off_toggle",
                  "test_three_on_off_toggle",
                  0.9065420560747662
                ],
                [
                  "test_zero_on_off_toggle",
                  "test_one_on_off_toggle",
                  0.9074463076885392
                ],
                [
                  "test_two_on_off_toggle",
                  "test_phidget_by_serial",
                  0.2476739710220579
                ],
                [
                  "test_one_on_off_toggle",
                  "test_three_on_off_toggle",
                  0.9074463076885392
                ],
                [
                  "test_log_captures",
                  "test_one_on_off_toggle",
                  0.033864273073929814
                ],
                [
                  "test_zero_on_off_toggle",
                  "test_phidget_by_serial",
                  0.2476739710220579
                ],
                [
                  "test_three_on_off_toggle",
                  "test_open_phidget",
                  0.30044416629299686
                ],
                [
                  "test_log_captures",
                  "test_open_phidget",
                  0.12486134216475503
                ],
                [
                  "test_log_captures",
                  "test_phidget_by_serial",
                  0.19069251784911848
                ],
                [
                  "test_three_on_off_toggle",
                  "test_phidget_by_serial",
                  0.2476739710220579
                ],
                [
                  "test_one_on_off_toggle",
                  "test_phidget_by_serial",
                  0.24539121290871574
                ],
                [
                  "test_zero_on_off_toggle",
                  "test_open_phidget",
                  0.30044416629299686
                ],
                [
                  "test_two_on_off_toggle",
                  "test_open_phidget",
                  0.30044416629299686
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_three_on_off_toggle",
                "false"
              ],
              [
                "test_two_on_off_toggle",
                "false"
              ],
              [
                "test_open_phidget",
                "false"
              ],
              [
                "test_phidget_by_serial",
                "false"
              ],
              [
                "test_log_captures",
                "false"
              ],
              [
                "test_zero_on_off_toggle",
                "false"
              ],
              [
                "test_one_on_off_toggle",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 7
      }
    ]
  },
  {
    "name": "phidgeter_\u0026_test_analog.py",
    "testCases": [
      {
        "name": "Test",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_phidget_by_serial",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_log_captures",
                  "[]"
                ],
                [
                  "test_zero_enable",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_two_trigger",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_two_disable",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_open_phidget",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_phidget_by_serial",
                  "[]"
                ],
                [
                  "test_log_captures",
                  "[]"
                ],
                [
                  "test_zero_enable",
                  "[]"
                ],
                [
                  "test_two_trigger",
                  "[]"
                ],
                [
                  "test_two_disable",
                  "[]"
                ],
                [
                  "test_open_phidget",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_phidget_by_serial",
                  "false"
                ],
                [
                  "test_log_captures",
                  "false"
                ],
                [
                  "test_zero_enable",
                  "false"
                ],
                [
                  "test_two_trigger",
                  "false"
                ],
                [
                  "test_two_disable",
                  "false"
                ],
                [
                  "test_open_phidget",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_phidget_by_serial",
                  "false"
                ],
                [
                  "test_log_captures",
                  "false"
                ],
                [
                  "test_zero_enable",
                  "false"
                ],
                [
                  "test_two_trigger",
                  "false"
                ],
                [
                  "test_two_disable",
                  "false"
                ],
                [
                  "test_open_phidget",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_phidget_by_serial",
                  "false"
                ],
                [
                  "test_log_captures",
                  "false"
                ],
                [
                  "test_zero_enable",
                  "true"
                ],
                [
                  "test_two_trigger",
                  "false"
                ],
                [
                  "test_two_disable",
                  "false"
                ],
                [
                  "test_open_phidget",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_phidget_by_serial",
                  "false"
                ],
                [
                  "test_log_captures",
                  "false"
                ],
                [
                  "test_zero_enable",
                  "false"
                ],
                [
                  "test_two_trigger",
                  "false"
                ],
                [
                  "test_two_disable",
                  "false"
                ],
                [
                  "test_open_phidget",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_phidget_by_serial",
                "false"
              ],
              [
                "test_log_captures",
                "false"
              ],
              [
                "test_zero_enable",
                "false"
              ],
              [
                "test_two_trigger",
                "false"
              ],
              [
                "test_two_disable",
                "false"
              ],
              [
                "test_open_phidget",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_phidget_by_serial",
                "false"
              ],
              [
                "test_log_captures",
                "false"
              ],
              [
                "test_zero_enable",
                "false"
              ],
              [
                "test_two_trigger",
                "false"
              ],
              [
                "test_two_disable",
                "false"
              ],
              [
                "test_open_phidget",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_phidget_by_serial",
                [
                  "self.log_group",
                  "self.lvl",
                  "self.log_capture"
                ]
              ],
              [
                "test_log_captures",
                [
                  "self.log_group",
                  "self.lvl"
                ]
              ],
              [
                "test_zero_enable",
                [
                  "self.log_group",
                  "self.lvl",
                  "self.log_capture"
                ]
              ],
              [
                "test_two_trigger",
                [
                  "self.log_group",
                  "self.lvl",
                  "self.log_capture"
                ]
              ],
              [
                "test_two_disable",
                [
                  "self.log_group",
                  "self.lvl",
                  "self.log_capture"
                ]
              ],
              [
                "test_open_phidget",
                [
                  "self.lvl"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_phidget_by_serial",
                "false"
              ],
              [
                "test_log_captures",
                "false"
              ],
              [
                "test_zero_enable",
                "false"
              ],
              [
                "test_two_trigger",
                "false"
              ],
              [
                "test_two_disable",
                "false"
              ],
              [
                "test_open_phidget",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_phidget_by_serial",
                "false"
              ],
              [
                "test_log_captures",
                "false"
              ],
              [
                "test_zero_enable",
                "false"
              ],
              [
                "test_two_trigger",
                "false"
              ],
              [
                "test_two_disable",
                "false"
              ],
              [
                "test_open_phidget",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_phidget_by_serial",
                  "0"
                ],
                [
                  "test_log_captures",
                  "0"
                ],
                [
                  "test_zero_enable",
                  "0"
                ],
                [
                  "test_two_trigger",
                  "0"
                ],
                [
                  "test_two_disable",
                  "0"
                ],
                [
                  "test_open_phidget",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_phidget_by_serial",
                  "0"
                ],
                [
                  "test_log_captures",
                  "0"
                ],
                [
                  "test_zero_enable",
                  "0"
                ],
                [
                  "test_two_trigger",
                  "0"
                ],
                [
                  "test_two_disable",
                  "0"
                ],
                [
                  "test_open_phidget",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_phidget_by_serial",
                "false"
              ],
              [
                "test_log_captures",
                "false"
              ],
              [
                "test_zero_enable",
                "false"
              ],
              [
                "test_two_trigger",
                "false"
              ],
              [
                "test_two_disable",
                "false"
              ],
              [
                "test_open_phidget",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_phidget_by_serial",
                "false"
              ],
              [
                "test_log_captures",
                "false"
              ],
              [
                "test_zero_enable",
                "false"
              ],
              [
                "test_two_trigger",
                "false"
              ],
              [
                "test_two_disable",
                "false"
              ],
              [
                "test_open_phidget",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_phidget_by_serial",
                "1"
              ],
              [
                "test_log_captures",
                "0"
              ],
              [
                "test_zero_enable",
                "3"
              ],
              [
                "test_two_trigger",
                "1"
              ],
              [
                "test_two_disable",
                "1"
              ],
              [
                "test_open_phidget",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_phidget_by_serial",
                [
                  "serial",
                  "phd"
                ]
              ],
              [
                "test_log_captures",
                []
              ],
              [
                "test_zero_enable",
                [
                  "result",
                  "phd_analog"
                ]
              ],
              [
                "test_two_trigger",
                [
                  "phd"
                ]
              ],
              [
                "test_two_disable",
                [
                  "result",
                  "phd_analog"
                ]
              ],
              [
                "test_open_phidget",
                [
                  "gr",
                  "phd"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_phidget_by_serial",
                []
              ],
              [
                "test_log_captures",
                [
                  "self.log_capture"
                ]
              ],
              [
                "test_zero_enable",
                []
              ],
              [
                "test_two_trigger",
                []
              ],
              [
                "test_two_disable",
                []
              ],
              [
                "test_open_phidget",
                [
                  "self.log_group",
                  "self.log_capture"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.29914416685560535,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_log_captures",
                  "test_two_disable",
                  0.06804138174397716
                ],
                [
                  "test_open_phidget",
                  "test_two_trigger",
                  0.19009390630774897
                ],
                [
                  "test_log_captures",
                  "test_phidget_by_serial",
                  0.1889822365046136
                ],
                [
                  "test_two_disable",
                  "test_open_phidget",
                  0.2896669048499031
                ],
                [
                  "test_log_captures",
                  "test_two_trigger",
                  0.10206207261596574
                ],
                [
                  "test_zero_enable",
                  "test_two_disable",
                  0.8148148148148148
                ],
                [
                  "test_open_phidget",
                  "test_phidget_by_serial",
                  0.276560050334848
                ],
                [
                  "test_log_captures",
                  "test_zero_enable",
                  0.03402069087198858
                ],
                [
                  "test_log_captures",
                  "test_open_phidget",
                  0.1247231447320761
                ],
                [
                  "test_two_disable",
                  "test_phidget_by_serial",
                  0.3343239249178658
                ],
                [
                  "test_zero_enable",
                  "test_phidget_by_serial",
                  0.2700308624336608
                ],
                [
                  "test_zero_enable",
                  "test_two_trigger",
                  0.4722222222222222
                ],
                [
                  "test_two_disable",
                  "test_two_trigger",
                  0.6666666666666666
                ],
                [
                  "test_zero_enable",
                  "test_open_phidget",
                  0.3077710864030221
                ],
                [
                  "test_phidget_by_serial",
                  "test_two_trigger",
                  0.34718253741470684
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_phidget_by_serial",
                "false"
              ],
              [
                "test_log_captures",
                "false"
              ],
              [
                "test_zero_enable",
                "false"
              ],
              [
                "test_two_trigger",
                "false"
              ],
              [
                "test_two_disable",
                "false"
              ],
              [
                "test_open_phidget",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 6
      }
    ]
  },
  {
    "name": "phidgeter_\u0026_test_irtemp.py",
    "testCases": [
      {
        "name": "Test",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_sensor_is_available",
                  "[]"
                ],
                [
                  "test_log_captures",
                  "[]"
                ],
                [
                  "test_sensor_is_room_temperature",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_sensor_is_available",
                  "[PyAssertStatement, PyAssertStatement, PyAssertStatement]"
                ],
                [
                  "test_log_captures",
                  "[]"
                ],
                [
                  "test_sensor_is_room_temperature",
                  "[PyAssertStatement, PyAssertStatement, PyAssertStatement]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_sensor_is_available",
                  "false"
                ],
                [
                  "test_log_captures",
                  "false"
                ],
                [
                  "test_sensor_is_room_temperature",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_sensor_is_available",
                  "false"
                ],
                [
                  "test_log_captures",
                  "false"
                ],
                [
                  "test_sensor_is_room_temperature",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_sensor_is_available",
                  "false"
                ],
                [
                  "test_log_captures",
                  "false"
                ],
                [
                  "test_sensor_is_room_temperature",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_sensor_is_available",
                  "false"
                ],
                [
                  "test_log_captures",
                  "false"
                ],
                [
                  "test_sensor_is_room_temperature",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_sensor_is_available",
                "false"
              ],
              [
                "test_log_captures",
                "false"
              ],
              [
                "test_sensor_is_room_temperature",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_sensor_is_available",
                "false"
              ],
              [
                "test_log_captures",
                "false"
              ],
              [
                "test_sensor_is_room_temperature",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_sensor_is_available",
                [
                  "self.log_group",
                  "self.lvl",
                  "self.log_capture"
                ]
              ],
              [
                "test_log_captures",
                [
                  "self.log_group",
                  "self.lvl"
                ]
              ],
              [
                "test_sensor_is_room_temperature",
                [
                  "self.log_group",
                  "self.lvl",
                  "self.log_capture"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_sensor_is_available",
                "false"
              ],
              [
                "test_log_captures",
                "false"
              ],
              [
                "test_sensor_is_room_temperature",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_sensor_is_available",
                "false"
              ],
              [
                "test_log_captures",
                "false"
              ],
              [
                "test_sensor_is_room_temperature",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_sensor_is_available",
                  "0"
                ],
                [
                  "test_log_captures",
                  "0"
                ],
                [
                  "test_sensor_is_room_temperature",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_sensor_is_available",
                  "0"
                ],
                [
                  "test_log_captures",
                  "0"
                ],
                [
                  "test_sensor_is_room_temperature",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_sensor_is_available",
                "false"
              ],
              [
                "test_log_captures",
                "false"
              ],
              [
                "test_sensor_is_room_temperature",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_sensor_is_available",
                "false"
              ],
              [
                "test_log_captures",
                "false"
              ],
              [
                "test_sensor_is_room_temperature",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_sensor_is_available",
                "3"
              ],
              [
                "test_log_captures",
                "0"
              ],
              [
                "test_sensor_is_room_temperature",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_sensor_is_available",
                [
                  "ir_temp"
                ]
              ],
              [
                "test_log_captures",
                []
              ],
              [
                "test_sensor_is_room_temperature",
                [
                  "ir_temp"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_sensor_is_available",
                []
              ],
              [
                "test_log_captures",
                [
                  "self.log_capture"
                ]
              ],
              [
                "test_sensor_is_room_temperature",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.34696102317588223,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_log_captures",
                  "test_sensor_is_room_temperature",
                  0.03466876226407682
                ],
                [
                  "test_sensor_is_available",
                  "test_sensor_is_room_temperature",
                  0.9678660578212014
                ],
                [
                  "test_log_captures",
                  "test_sensor_is_available",
                  0.03834824944236852
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_sensor_is_available",
                "false"
              ],
              [
                "test_log_captures",
                "false"
              ],
              [
                "test_sensor_is_room_temperature",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  }
]