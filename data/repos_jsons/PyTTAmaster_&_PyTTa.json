[
  {
    "name": "tests_\u0026_test_h5io.py",
    "testCases": [
      {
        "name": "TestH5IO",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_h5save_signalobj",
                  "[PyCallExpression: self.assertSequenceEqual, PyCallExpression: self.assertSequenceEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_h5save_recmeasure",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_h5save_impulsiveresponse",
                  "[PyCallExpression: self.assertSequenceEqual]"
                ],
                [
                  "test_h5save_playrecmeasure",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_h5save_frfmeasure",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_h5save_analysis",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_h5save_signalobj",
                  "[]"
                ],
                [
                  "test_h5save_recmeasure",
                  "[]"
                ],
                [
                  "test_h5save_impulsiveresponse",
                  "[]"
                ],
                [
                  "test_h5save_playrecmeasure",
                  "[]"
                ],
                [
                  "test_h5save_frfmeasure",
                  "[]"
                ],
                [
                  "test_h5save_analysis",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_h5save_signalobj",
                  "true"
                ],
                [
                  "test_h5save_recmeasure",
                  "true"
                ],
                [
                  "test_h5save_impulsiveresponse",
                  "false"
                ],
                [
                  "test_h5save_playrecmeasure",
                  "true"
                ],
                [
                  "test_h5save_frfmeasure",
                  "true"
                ],
                [
                  "test_h5save_analysis",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_h5save_signalobj",
                  "true"
                ],
                [
                  "test_h5save_recmeasure",
                  "true"
                ],
                [
                  "test_h5save_impulsiveresponse",
                  "true"
                ],
                [
                  "test_h5save_playrecmeasure",
                  "true"
                ],
                [
                  "test_h5save_frfmeasure",
                  "true"
                ],
                [
                  "test_h5save_analysis",
                  "true"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_h5save_signalobj",
                  "false"
                ],
                [
                  "test_h5save_recmeasure",
                  "false"
                ],
                [
                  "test_h5save_impulsiveresponse",
                  "false"
                ],
                [
                  "test_h5save_playrecmeasure",
                  "false"
                ],
                [
                  "test_h5save_frfmeasure",
                  "false"
                ],
                [
                  "test_h5save_analysis",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_h5save_signalobj",
                  "false"
                ],
                [
                  "test_h5save_recmeasure",
                  "false"
                ],
                [
                  "test_h5save_impulsiveresponse",
                  "false"
                ],
                [
                  "test_h5save_playrecmeasure",
                  "false"
                ],
                [
                  "test_h5save_frfmeasure",
                  "false"
                ],
                [
                  "test_h5save_analysis",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_h5save_signalobj",
                "false"
              ],
              [
                "test_h5save_recmeasure",
                "false"
              ],
              [
                "test_h5save_impulsiveresponse",
                "false"
              ],
              [
                "test_h5save_playrecmeasure",
                "false"
              ],
              [
                "test_h5save_frfmeasure",
                "false"
              ],
              [
                "test_h5save_analysis",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_h5save_signalobj",
                "false"
              ],
              [
                "test_h5save_recmeasure",
                "false"
              ],
              [
                "test_h5save_impulsiveresponse",
                "false"
              ],
              [
                "test_h5save_playrecmeasure",
                "false"
              ],
              [
                "test_h5save_frfmeasure",
                "false"
              ],
              [
                "test_h5save_analysis",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_h5save_signalobj",
                []
              ],
              [
                "test_h5save_recmeasure",
                []
              ],
              [
                "test_h5save_impulsiveresponse",
                []
              ],
              [
                "test_h5save_playrecmeasure",
                []
              ],
              [
                "test_h5save_frfmeasure",
                []
              ],
              [
                "test_h5save_analysis",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_h5save_signalobj",
                "false"
              ],
              [
                "test_h5save_recmeasure",
                "false"
              ],
              [
                "test_h5save_impulsiveresponse",
                "false"
              ],
              [
                "test_h5save_playrecmeasure",
                "false"
              ],
              [
                "test_h5save_frfmeasure",
                "false"
              ],
              [
                "test_h5save_analysis",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_h5save_signalobj",
                "false"
              ],
              [
                "test_h5save_recmeasure",
                "false"
              ],
              [
                "test_h5save_impulsiveresponse",
                "false"
              ],
              [
                "test_h5save_playrecmeasure",
                "false"
              ],
              [
                "test_h5save_frfmeasure",
                "false"
              ],
              [
                "test_h5save_analysis",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_h5save_signalobj",
                  "0"
                ],
                [
                  "test_h5save_recmeasure",
                  "0"
                ],
                [
                  "test_h5save_impulsiveresponse",
                  "0"
                ],
                [
                  "test_h5save_playrecmeasure",
                  "0"
                ],
                [
                  "test_h5save_frfmeasure",
                  "0"
                ],
                [
                  "test_h5save_analysis",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_h5save_signalobj",
                  "0"
                ],
                [
                  "test_h5save_recmeasure",
                  "0"
                ],
                [
                  "test_h5save_impulsiveresponse",
                  "0"
                ],
                [
                  "test_h5save_playrecmeasure",
                  "0"
                ],
                [
                  "test_h5save_frfmeasure",
                  "0"
                ],
                [
                  "test_h5save_analysis",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_h5save_signalobj",
                "false"
              ],
              [
                "test_h5save_recmeasure",
                "false"
              ],
              [
                "test_h5save_impulsiveresponse",
                "false"
              ],
              [
                "test_h5save_playrecmeasure",
                "false"
              ],
              [
                "test_h5save_frfmeasure",
                "false"
              ],
              [
                "test_h5save_analysis",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_h5save_signalobj",
                "false"
              ],
              [
                "test_h5save_recmeasure",
                "false"
              ],
              [
                "test_h5save_impulsiveresponse",
                "false"
              ],
              [
                "test_h5save_playrecmeasure",
                "false"
              ],
              [
                "test_h5save_frfmeasure",
                "false"
              ],
              [
                "test_h5save_analysis",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_h5save_signalobj",
                "5"
              ],
              [
                "test_h5save_recmeasure",
                "9"
              ],
              [
                "test_h5save_impulsiveresponse",
                "1"
              ],
              [
                "test_h5save_playrecmeasure",
                "9"
              ],
              [
                "test_h5save_frfmeasure",
                "9"
              ],
              [
                "test_h5save_analysis",
                "9"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_h5save_signalobj",
                [
                  "loaded",
                  "loadedlst",
                  "savedlst",
                  "sin1",
                  "sin2"
                ]
              ],
              [
                "test_h5save_recmeasure",
                [
                  "a",
                  "lengthDomain2",
                  "samplingRate2",
                  "device2",
                  "comment2",
                  "lengthDomain",
                  "loadedlst",
                  "freqMax",
                  "freqMin2",
                  "mType",
                  "inChannels",
                  "freqMax2",
                  "timeLength2",
                  "inChannels2",
                  "med2",
                  "med1",
                  "fftDegree",
                  "samplingRate",
                  "comment",
                  "savedlst",
                  "device",
                  "freqMin"
                ]
              ],
              [
                "test_h5save_impulsiveresponse",
                [
                  "a",
                  "noise",
                  "loadedlst",
                  "IR",
                  "yt",
                  "xt"
                ]
              ],
              [
                "test_h5save_playrecmeasure",
                [
                  "a",
                  "samplingRate2",
                  "fftDegree2",
                  "device2",
                  "comment2",
                  "outChannels",
                  "loadedlst",
                  "freqMax",
                  "freqMin2",
                  "mType",
                  "inChannels",
                  "outChannels2",
                  "freqMax2",
                  "inChannels2",
                  "excitation",
                  "med2",
                  "med1",
                  "fftDegree",
                  "samplingRate",
                  "comment",
                  "savedlst",
                  "device",
                  "freqMin",
                  "excitation2"
                ]
              ],
              [
                "test_h5save_frfmeasure",
                [
                  "a",
                  "samplingRate2",
                  "fftDegree2",
                  "device2",
                  "comment2",
                  "outChannels",
                  "loadedlst",
                  "freqMax",
                  "freqMin2",
                  "mType",
                  "inChannels",
                  "outChannels2",
                  "freqMax2",
                  "inChannels2",
                  "excitation",
                  "med2",
                  "med1",
                  "fftDegree",
                  "samplingRate",
                  "comment",
                  "savedlst",
                  "device",
                  "freqMin",
                  "excitation2"
                ]
              ],
              [
                "test_h5save_analysis",
                [
                  "errorLabel2",
                  "a",
                  "anType2",
                  "data",
                  "comment2",
                  "an2",
                  "minBand",
                  "data2",
                  "maxBand2",
                  "dataLabel",
                  "loadedlst",
                  "nthOct2",
                  "error",
                  "an",
                  "dataLabel2",
                  "nthOct",
                  "minBand2",
                  "comment",
                  "anType",
                  "savedlst",
                  "errorLabel",
                  "maxBand",
                  "error2"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_h5save_signalobj",
                [
                  "self.filename"
                ]
              ],
              [
                "test_h5save_recmeasure",
                [
                  "self.filename"
                ]
              ],
              [
                "test_h5save_impulsiveresponse",
                [
                  "self.filename"
                ]
              ],
              [
                "test_h5save_playrecmeasure",
                [
                  "self.filename"
                ]
              ],
              [
                "test_h5save_frfmeasure",
                [
                  "self.filename"
                ]
              ],
              [
                "test_h5save_analysis",
                [
                  "self.filename"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7472115179718715,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_h5save_recmeasure",
                  "test_h5save_playrecmeasure",
                  0.9660959863932596
                ],
                [
                  "test_h5save_signalobj",
                  "test_h5save_recmeasure",
                  0.6583440486557024
                ],
                [
                  "test_h5save_impulsiveresponse",
                  "test_h5save_frfmeasure",
                  0.7238805653611833
                ],
                [
                  "test_h5save_playrecmeasure",
                  "test_h5save_frfmeasure",
                  0.9987177306236347
                ],
                [
                  "test_h5save_signalobj",
                  "test_h5save_impulsiveresponse",
                  0.554575474425738
                ],
                [
                  "test_h5save_recmeasure",
                  "test_h5save_frfmeasure",
                  0.9658657809950069
                ],
                [
                  "test_h5save_frfmeasure",
                  "test_h5save_analysis",
                  0.7889670855533717
                ],
                [
                  "test_h5save_playrecmeasure",
                  "test_h5save_analysis",
                  0.7888225728521772
                ],
                [
                  "test_h5save_recmeasure",
                  "test_h5save_analysis",
                  0.7864308376487357
                ],
                [
                  "test_h5save_impulsiveresponse",
                  "test_h5save_playrecmeasure",
                  0.7237479743599132
                ],
                [
                  "test_h5save_signalobj",
                  "test_h5save_analysis",
                  0.5518447832883183
                ],
                [
                  "test_h5save_impulsiveresponse",
                  "test_h5save_analysis",
                  0.7081164992941129
                ],
                [
                  "test_h5save_signalobj",
                  "test_h5save_playrecmeasure",
                  0.6363857162184925
                ],
                [
                  "test_h5save_impulsiveresponse",
                  "test_h5save_recmeasure",
                  0.7198754114993018
                ],
                [
                  "test_h5save_signalobj",
                  "test_h5save_frfmeasure",
                  0.6365023024091232
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_h5save_signalobj",
                "false"
              ],
              [
                "test_h5save_recmeasure",
                "false"
              ],
              [
                "test_h5save_impulsiveresponse",
                "false"
              ],
              [
                "test_h5save_playrecmeasure",
                "false"
              ],
              [
                "test_h5save_frfmeasure",
                "false"
              ],
              [
                "test_h5save_analysis",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 6
      }
    ]
  },
  {
    "name": "tests_\u0026_test_pyttasave.py",
    "testCases": [
      {
        "name": "TestPyttaSave",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_pytta_signalobj",
                  "[PyCallExpression: self.assertSequenceEqual, PyCallExpression: self.assertSequenceEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_pyttasave_impulsiveresponse",
                  "[PyCallExpression: self.assertSequenceEqual]"
                ],
                [
                  "test_pyttasave_recmeasure",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_pytta_frfmeasure",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_pytta_playrecmeasure",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_pytta_signalobj",
                  "[]"
                ],
                [
                  "test_pyttasave_impulsiveresponse",
                  "[]"
                ],
                [
                  "test_pyttasave_recmeasure",
                  "[]"
                ],
                [
                  "test_pytta_frfmeasure",
                  "[]"
                ],
                [
                  "test_pytta_playrecmeasure",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_pytta_signalobj",
                  "true"
                ],
                [
                  "test_pyttasave_impulsiveresponse",
                  "false"
                ],
                [
                  "test_pyttasave_recmeasure",
                  "true"
                ],
                [
                  "test_pytta_frfmeasure",
                  "true"
                ],
                [
                  "test_pytta_playrecmeasure",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_pytta_signalobj",
                  "true"
                ],
                [
                  "test_pyttasave_impulsiveresponse",
                  "true"
                ],
                [
                  "test_pyttasave_recmeasure",
                  "true"
                ],
                [
                  "test_pytta_frfmeasure",
                  "true"
                ],
                [
                  "test_pytta_playrecmeasure",
                  "true"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_pytta_signalobj",
                  "false"
                ],
                [
                  "test_pyttasave_impulsiveresponse",
                  "false"
                ],
                [
                  "test_pyttasave_recmeasure",
                  "false"
                ],
                [
                  "test_pytta_frfmeasure",
                  "false"
                ],
                [
                  "test_pytta_playrecmeasure",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_pytta_signalobj",
                  "false"
                ],
                [
                  "test_pyttasave_impulsiveresponse",
                  "false"
                ],
                [
                  "test_pyttasave_recmeasure",
                  "false"
                ],
                [
                  "test_pytta_frfmeasure",
                  "false"
                ],
                [
                  "test_pytta_playrecmeasure",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_pytta_signalobj",
                "false"
              ],
              [
                "test_pyttasave_impulsiveresponse",
                "false"
              ],
              [
                "test_pyttasave_recmeasure",
                "false"
              ],
              [
                "test_pytta_frfmeasure",
                "false"
              ],
              [
                "test_pytta_playrecmeasure",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_pytta_signalobj",
                "false"
              ],
              [
                "test_pyttasave_impulsiveresponse",
                "false"
              ],
              [
                "test_pyttasave_recmeasure",
                "false"
              ],
              [
                "test_pytta_frfmeasure",
                "false"
              ],
              [
                "test_pytta_playrecmeasure",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_pytta_signalobj",
                []
              ],
              [
                "test_pyttasave_impulsiveresponse",
                []
              ],
              [
                "test_pyttasave_recmeasure",
                []
              ],
              [
                "test_pytta_frfmeasure",
                []
              ],
              [
                "test_pytta_playrecmeasure",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_pytta_signalobj",
                "false"
              ],
              [
                "test_pyttasave_impulsiveresponse",
                "false"
              ],
              [
                "test_pyttasave_recmeasure",
                "false"
              ],
              [
                "test_pytta_frfmeasure",
                "false"
              ],
              [
                "test_pytta_playrecmeasure",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_pytta_signalobj",
                "false"
              ],
              [
                "test_pyttasave_impulsiveresponse",
                "false"
              ],
              [
                "test_pyttasave_recmeasure",
                "false"
              ],
              [
                "test_pytta_frfmeasure",
                "false"
              ],
              [
                "test_pytta_playrecmeasure",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_pytta_signalobj",
                  "0"
                ],
                [
                  "test_pyttasave_impulsiveresponse",
                  "0"
                ],
                [
                  "test_pyttasave_recmeasure",
                  "0"
                ],
                [
                  "test_pytta_frfmeasure",
                  "0"
                ],
                [
                  "test_pytta_playrecmeasure",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_pytta_signalobj",
                  "0"
                ],
                [
                  "test_pyttasave_impulsiveresponse",
                  "0"
                ],
                [
                  "test_pyttasave_recmeasure",
                  "0"
                ],
                [
                  "test_pytta_frfmeasure",
                  "0"
                ],
                [
                  "test_pytta_playrecmeasure",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_pytta_signalobj",
                "false"
              ],
              [
                "test_pyttasave_impulsiveresponse",
                "false"
              ],
              [
                "test_pyttasave_recmeasure",
                "false"
              ],
              [
                "test_pytta_frfmeasure",
                "false"
              ],
              [
                "test_pytta_playrecmeasure",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_pytta_signalobj",
                "false"
              ],
              [
                "test_pyttasave_impulsiveresponse",
                "false"
              ],
              [
                "test_pyttasave_recmeasure",
                "false"
              ],
              [
                "test_pytta_frfmeasure",
                "false"
              ],
              [
                "test_pytta_playrecmeasure",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_pytta_signalobj",
                "4"
              ],
              [
                "test_pyttasave_impulsiveresponse",
                "1"
              ],
              [
                "test_pyttasave_recmeasure",
                "9"
              ],
              [
                "test_pytta_frfmeasure",
                "9"
              ],
              [
                "test_pytta_playrecmeasure",
                "9"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_pytta_signalobj",
                [
                  "loaded",
                  "loadedlst",
                  "savedlst",
                  "sin1",
                  "sin2"
                ]
              ],
              [
                "test_pyttasave_impulsiveresponse",
                [
                  "a",
                  "noise",
                  "loadedlst",
                  "IR",
                  "yt",
                  "xt"
                ]
              ],
              [
                "test_pyttasave_recmeasure",
                [
                  "a",
                  "lengthDomain2",
                  "samplingRate2",
                  "device2",
                  "comment2",
                  "lengthDomain",
                  "loadedlst",
                  "freqMax",
                  "freqMin2",
                  "mType",
                  "inChannels",
                  "freqMax2",
                  "timeLength2",
                  "inChannels2",
                  "med2",
                  "med1",
                  "fftDegree",
                  "samplingRate",
                  "comment",
                  "savedlst",
                  "device",
                  "freqMin"
                ]
              ],
              [
                "test_pytta_frfmeasure",
                [
                  "a",
                  "samplingRate2",
                  "fftDegree2",
                  "device2",
                  "comment2",
                  "outChannels",
                  "loadedlst",
                  "freqMax",
                  "freqMin2",
                  "mType",
                  "inChannels",
                  "outChannels2",
                  "freqMax2",
                  "inChannels2",
                  "excitation",
                  "med2",
                  "med1",
                  "fftDegree",
                  "samplingRate",
                  "comment",
                  "savedlst",
                  "device",
                  "freqMin",
                  "excitation2"
                ]
              ],
              [
                "test_pytta_playrecmeasure",
                [
                  "a",
                  "samplingRate2",
                  "fftDegree2",
                  "device2",
                  "comment2",
                  "outChannels",
                  "loadedlst",
                  "freqMax",
                  "freqMin2",
                  "mType",
                  "inChannels",
                  "outChannels2",
                  "freqMax2",
                  "inChannels2",
                  "excitation",
                  "med2",
                  "med1",
                  "fftDegree",
                  "samplingRate",
                  "comment",
                  "savedlst",
                  "device",
                  "freqMin",
                  "excitation2"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_pytta_signalobj",
                [
                  "self.filename"
                ]
              ],
              [
                "test_pyttasave_impulsiveresponse",
                [
                  "self.filename"
                ]
              ],
              [
                "test_pyttasave_recmeasure",
                [
                  "self.filename"
                ]
              ],
              [
                "test_pytta_frfmeasure",
                [
                  "self.filename"
                ]
              ],
              [
                "test_pytta_playrecmeasure",
                [
                  "self.filename"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7463313243102936,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_pytta_signalobj",
                  "test_pytta_playrecmeasure",
                  0.62302278301631
                ],
                [
                  "test_pyttasave_impulsiveresponse",
                  "test_pytta_playrecmeasure",
                  0.703915666919027
                ],
                [
                  "test_pyttasave_recmeasure",
                  "test_pytta_playrecmeasure",
                  0.9648944362668957
                ],
                [
                  "test_pytta_signalobj",
                  "test_pyttasave_impulsiveresponse",
                  0.5443557418468774
                ],
                [
                  "test_pytta_playrecmeasure",
                  "test_pytta_frfmeasure",
                  0.9986859571500137
                ],
                [
                  "test_pytta_signalobj",
                  "test_pyttasave_recmeasure",
                  0.639457965146007
                ],
                [
                  "test_pyttasave_impulsiveresponse",
                  "test_pyttasave_recmeasure",
                  0.6971360429275152
                ],
                [
                  "test_pyttasave_impulsiveresponse",
                  "test_pytta_frfmeasure",
                  0.7040478204294225
                ],
                [
                  "test_pytta_signalobj",
                  "test_pytta_frfmeasure",
                  0.6231397496526576
                ],
                [
                  "test_pyttasave_recmeasure",
                  "test_pytta_frfmeasure",
                  0.9646570797482091
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_pytta_signalobj",
                "false"
              ],
              [
                "test_pyttasave_impulsiveresponse",
                "false"
              ],
              [
                "test_pyttasave_recmeasure",
                "false"
              ],
              [
                "test_pytta_frfmeasure",
                "false"
              ],
              [
                "test_pytta_playrecmeasure",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 5
      }
    ]
  },
  {
    "name": "tests_\u0026_test_analysis_ops.py",
    "testCases": [
      {
        "name": "TestAnalysisOperations",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_add",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_div",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_mul",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_sub",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_add",
                  "[]"
                ],
                [
                  "test_div",
                  "[]"
                ],
                [
                  "test_mul",
                  "[]"
                ],
                [
                  "test_sub",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_add",
                  "false"
                ],
                [
                  "test_div",
                  "false"
                ],
                [
                  "test_mul",
                  "false"
                ],
                [
                  "test_sub",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_add",
                  "false"
                ],
                [
                  "test_div",
                  "false"
                ],
                [
                  "test_mul",
                  "false"
                ],
                [
                  "test_sub",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_add",
                  "true"
                ],
                [
                  "test_div",
                  "false"
                ],
                [
                  "test_mul",
                  "true"
                ],
                [
                  "test_sub",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_add",
                  "false"
                ],
                [
                  "test_div",
                  "false"
                ],
                [
                  "test_mul",
                  "false"
                ],
                [
                  "test_sub",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_add",
                "false"
              ],
              [
                "test_div",
                "false"
              ],
              [
                "test_mul",
                "false"
              ],
              [
                "test_sub",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_add",
                "false"
              ],
              [
                "test_div",
                "false"
              ],
              [
                "test_mul",
                "false"
              ],
              [
                "test_sub",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_add",
                [
                  "self.nthOct",
                  "self.minFreq",
                  "self.maxFreq"
                ]
              ],
              [
                "test_div",
                [
                  "self.nthOct",
                  "self.minFreq",
                  "self.maxFreq"
                ]
              ],
              [
                "test_mul",
                [
                  "self.nthOct",
                  "self.minFreq",
                  "self.maxFreq"
                ]
              ],
              [
                "test_sub",
                [
                  "self.nthOct",
                  "self.minFreq",
                  "self.maxFreq"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_add",
                "false"
              ],
              [
                "test_div",
                "false"
              ],
              [
                "test_mul",
                "false"
              ],
              [
                "test_sub",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_add",
                "false"
              ],
              [
                "test_div",
                "false"
              ],
              [
                "test_mul",
                "false"
              ],
              [
                "test_sub",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_add",
                  "0"
                ],
                [
                  "test_div",
                  "0"
                ],
                [
                  "test_mul",
                  "0"
                ],
                [
                  "test_sub",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_add",
                  "0"
                ],
                [
                  "test_div",
                  "0"
                ],
                [
                  "test_mul",
                  "0"
                ],
                [
                  "test_sub",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_add",
                "false"
              ],
              [
                "test_div",
                "false"
              ],
              [
                "test_mul",
                "false"
              ],
              [
                "test_sub",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_add",
                "false"
              ],
              [
                "test_div",
                "false"
              ],
              [
                "test_mul",
                "false"
              ],
              [
                "test_sub",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_add",
                "2"
              ],
              [
                "test_div",
                "2"
              ],
              [
                "test_mul",
                "2"
              ],
              [
                "test_sub",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_add",
                [
                  "test"
                ]
              ],
              [
                "test_div",
                [
                  "test"
                ]
              ],
              [
                "test_mul",
                [
                  "test"
                ]
              ],
              [
                "test_sub",
                [
                  "test"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_add",
                [
                  "self.a",
                  "self.b"
                ]
              ],
              [
                "test_div",
                [
                  "self.a",
                  "self.b"
                ]
              ],
              [
                "test_mul",
                [
                  "self.a",
                  "self.b"
                ]
              ],
              [
                "test_sub",
                [
                  "self.a",
                  "self.b"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8467763117353747,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_mul",
                  "test_div",
                  0.8628708445067482
                ],
                [
                  "test_add",
                  "test_sub",
                  0.8780487804878049
                ],
                [
                  "test_add",
                  "test_mul",
                  0.8478004216810043
                ],
                [
                  "test_sub",
                  "test_mul",
                  0.8924214965063204
                ],
                [
                  "test_sub",
                  "test_div",
                  0.8202647831950619
                ],
                [
                  "test_add",
                  "test_div",
                  0.7792515440353088
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_add",
                "false"
              ],
              [
                "test_div",
                "false"
              ],
              [
                "test_mul",
                "false"
              ],
              [
                "test_sub",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      }
    ]
  }
]