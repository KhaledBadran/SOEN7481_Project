[
  {
    "name": "tests_\u0026_Action_test.py",
    "testCases": [
      {
        "name": "ActionTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_remove_action_success",
                  "[]"
                ],
                [
                  "test_add_action_success",
                  "[]"
                ],
                [
                  "test_remove_action_error",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_remove_action_success",
                  "[PyAssertStatement]"
                ],
                [
                  "test_add_action_success",
                  "[PyAssertStatement, PyAssertStatement]"
                ],
                [
                  "test_remove_action_error",
                  "[PyAssertStatement]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_remove_action_success",
                  "false"
                ],
                [
                  "test_add_action_success",
                  "false"
                ],
                [
                  "test_remove_action_error",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_remove_action_success",
                  "false"
                ],
                [
                  "test_add_action_success",
                  "false"
                ],
                [
                  "test_remove_action_error",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_remove_action_success",
                  "false"
                ],
                [
                  "test_add_action_success",
                  "false"
                ],
                [
                  "test_remove_action_error",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_remove_action_success",
                  "false"
                ],
                [
                  "test_add_action_success",
                  "false"
                ],
                [
                  "test_remove_action_error",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_remove_action_success",
                "false"
              ],
              [
                "test_add_action_success",
                "false"
              ],
              [
                "test_remove_action_error",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_remove_action_success",
                "false"
              ],
              [
                "test_add_action_success",
                "false"
              ],
              [
                "test_remove_action_error",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_remove_action_success",
                []
              ],
              [
                "test_add_action_success",
                []
              ],
              [
                "test_remove_action_error",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_remove_action_success",
                "false"
              ],
              [
                "test_add_action_success",
                "false"
              ],
              [
                "test_remove_action_error",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_remove_action_success",
                "false"
              ],
              [
                "test_add_action_success",
                "false"
              ],
              [
                "test_remove_action_error",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_remove_action_success",
                  "0"
                ],
                [
                  "test_add_action_success",
                  "0"
                ],
                [
                  "test_remove_action_error",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_remove_action_success",
                  "0"
                ],
                [
                  "test_add_action_success",
                  "0"
                ],
                [
                  "test_remove_action_error",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_remove_action_success",
                "false"
              ],
              [
                "test_add_action_success",
                "false"
              ],
              [
                "test_remove_action_error",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_remove_action_success",
                "false"
              ],
              [
                "test_add_action_success",
                "false"
              ],
              [
                "test_remove_action_error",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_remove_action_success",
                "1"
              ],
              [
                "test_add_action_success",
                "2"
              ],
              [
                "test_remove_action_error",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_remove_action_success",
                []
              ],
              [
                "test_add_action_success",
                []
              ],
              [
                "test_remove_action_error",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_remove_action_success",
                [
                  "self.actions"
                ]
              ],
              [
                "test_add_action_success",
                [
                  "self.actions"
                ]
              ],
              [
                "test_remove_action_error",
                [
                  "self.actions"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9755782183349618,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_remove_action_success",
                  "test_remove_action_error",
                  0.9815012929624984
                ],
                [
                  "test_add_action_success",
                  "test_remove_action_error",
                  0.9622197357514368
                ],
                [
                  "test_add_action_success",
                  "test_remove_action_success",
                  0.9830136262909501
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_remove_action_success",
                "false"
              ],
              [
                "test_add_action_success",
                "false"
              ],
              [
                "test_remove_action_error",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "tests_\u0026_Sensor_test.py",
    "testCases": [
      {
        "name": "SensorsTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_remove_sensor_error",
                  "[]"
                ],
                [
                  "test_add_success",
                  "[]"
                ],
                [
                  "test_remove_sensor_success",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_remove_sensor_error",
                  "[PyAssertStatement]"
                ],
                [
                  "test_add_success",
                  "[PyAssertStatement, PyAssertStatement]"
                ],
                [
                  "test_remove_sensor_success",
                  "[PyAssertStatement]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_remove_sensor_error",
                  "false"
                ],
                [
                  "test_add_success",
                  "false"
                ],
                [
                  "test_remove_sensor_success",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_remove_sensor_error",
                  "false"
                ],
                [
                  "test_add_success",
                  "false"
                ],
                [
                  "test_remove_sensor_success",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_remove_sensor_error",
                  "false"
                ],
                [
                  "test_add_success",
                  "false"
                ],
                [
                  "test_remove_sensor_success",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_remove_sensor_error",
                  "false"
                ],
                [
                  "test_add_success",
                  "false"
                ],
                [
                  "test_remove_sensor_success",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_remove_sensor_error",
                "false"
              ],
              [
                "test_add_success",
                "false"
              ],
              [
                "test_remove_sensor_success",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_remove_sensor_error",
                "false"
              ],
              [
                "test_add_success",
                "false"
              ],
              [
                "test_remove_sensor_success",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_remove_sensor_error",
                []
              ],
              [
                "test_add_success",
                []
              ],
              [
                "test_remove_sensor_success",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_remove_sensor_error",
                "false"
              ],
              [
                "test_add_success",
                "false"
              ],
              [
                "test_remove_sensor_success",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_remove_sensor_error",
                "false"
              ],
              [
                "test_add_success",
                "false"
              ],
              [
                "test_remove_sensor_success",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_remove_sensor_error",
                  "0"
                ],
                [
                  "test_add_success",
                  "0"
                ],
                [
                  "test_remove_sensor_success",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_remove_sensor_error",
                  "0"
                ],
                [
                  "test_add_success",
                  "0"
                ],
                [
                  "test_remove_sensor_success",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_remove_sensor_error",
                "false"
              ],
              [
                "test_add_success",
                "false"
              ],
              [
                "test_remove_sensor_success",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_remove_sensor_error",
                "false"
              ],
              [
                "test_add_success",
                "false"
              ],
              [
                "test_remove_sensor_success",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_remove_sensor_error",
                "1"
              ],
              [
                "test_add_success",
                "2"
              ],
              [
                "test_remove_sensor_success",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_remove_sensor_error",
                []
              ],
              [
                "test_add_success",
                []
              ],
              [
                "test_remove_sensor_success",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_remove_sensor_error",
                [
                  "self.sensors"
                ]
              ],
              [
                "test_add_success",
                [
                  "self.sensors"
                ]
              ],
              [
                "test_remove_sensor_success",
                [
                  "self.sensors"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.391287530609584,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_remove_sensor_success",
                  "test_remove_sensor_error",
                  0.6172133998483678
                ],
                [
                  "test_add_success",
                  "test_remove_sensor_error",
                  0.0927837023781507
                ],
                [
                  "test_add_success",
                  "test_remove_sensor_success",
                  0.46386548960223345
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_remove_sensor_error",
                "false"
              ],
              [
                "test_add_success",
                "false"
              ],
              [
                "test_remove_sensor_success",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "tests_\u0026_Planner_test.py",
    "testCases": [
      {
        "name": "PlannerTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_plan",
                  "[]"
                ],
                [
                  "test_graph_isomorphic",
                  "[]"
                ],
                [
                  "test_set_goal",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_plan",
                  "[PyAssertStatement]"
                ],
                [
                  "test_graph_isomorphic",
                  "[PyAssertStatement]"
                ],
                [
                  "test_set_goal",
                  "[PyAssertStatement]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_plan",
                  "false"
                ],
                [
                  "test_graph_isomorphic",
                  "false"
                ],
                [
                  "test_set_goal",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_plan",
                  "true"
                ],
                [
                  "test_graph_isomorphic",
                  "false"
                ],
                [
                  "test_set_goal",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_plan",
                  "false"
                ],
                [
                  "test_graph_isomorphic",
                  "false"
                ],
                [
                  "test_set_goal",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_plan",
                  "false"
                ],
                [
                  "test_graph_isomorphic",
                  "false"
                ],
                [
                  "test_set_goal",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_plan",
                "false"
              ],
              [
                "test_graph_isomorphic",
                "false"
              ],
              [
                "test_set_goal",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_plan",
                "false"
              ],
              [
                "test_graph_isomorphic",
                "false"
              ],
              [
                "test_set_goal",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_plan",
                [
                  "self.print"
                ]
              ],
              [
                "test_graph_isomorphic",
                [
                  "self.init_ws",
                  "self.gs",
                  "self.print"
                ]
              ],
              [
                "test_set_goal",
                [
                  "self.init_ws",
                  "self.print"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_plan",
                "false"
              ],
              [
                "test_graph_isomorphic",
                "false"
              ],
              [
                "test_set_goal",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_plan",
                "false"
              ],
              [
                "test_graph_isomorphic",
                "false"
              ],
              [
                "test_set_goal",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_plan",
                  "0"
                ],
                [
                  "test_graph_isomorphic",
                  "0"
                ],
                [
                  "test_set_goal",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_plan",
                  "0"
                ],
                [
                  "test_graph_isomorphic",
                  "0"
                ],
                [
                  "test_set_goal",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_plan",
                "false"
              ],
              [
                "test_graph_isomorphic",
                "false"
              ],
              [
                "test_set_goal",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_plan",
                "false"
              ],
              [
                "test_graph_isomorphic",
                "false"
              ],
              [
                "test_set_goal",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_plan",
                "1"
              ],
              [
                "test_graph_isomorphic",
                "1"
              ],
              [
                "test_set_goal",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_plan",
                [
                  "create_token",
                  "action_plan",
                  "plan",
                  "create_tmp_dir"
                ]
              ],
              [
                "test_graph_isomorphic",
                [
                  "node2",
                  "node3",
                  "edge1",
                  "g1",
                  "edge2",
                  "g2",
                  "acts",
                  "node1"
                ]
              ],
              [
                "test_set_goal",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_plan",
                [
                  "self.init_ws",
                  "self.gs",
                  "self.planner"
                ]
              ],
              [
                "test_graph_isomorphic",
                [
                  "self.planner"
                ]
              ],
              [
                "test_set_goal",
                [
                  "self.gs",
                  "self.planner"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.16555851876814112,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_set_goal",
                  "test_plan",
                  0.2153527608232662
                ],
                [
                  "test_set_goal",
                  "test_graph_isomorphic",
                  0.06650198959341774
                ],
                [
                  "test_graph_isomorphic",
                  "test_plan",
                  0.21482080588773944
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_plan",
                "false"
              ],
              [
                "test_graph_isomorphic",
                "false"
              ],
              [
                "test_set_goal",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "tests_\u0026_Automaton_test.py",
    "testCases": [
      {
        "name": "AutomatonTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_planning",
                  "[]"
                ],
                [
                  "test_sensing",
                  "[]"
                ],
                [
                  "test_acting",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_planning",
                  "[PyAssertStatement]"
                ],
                [
                  "test_sensing",
                  "[PyAssertStatement]"
                ],
                [
                  "test_acting",
                  "[PyAssertStatement]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_planning",
                  "false"
                ],
                [
                  "test_sensing",
                  "false"
                ],
                [
                  "test_acting",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_planning",
                  "true"
                ],
                [
                  "test_sensing",
                  "false"
                ],
                [
                  "test_acting",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_planning",
                  "false"
                ],
                [
                  "test_sensing",
                  "false"
                ],
                [
                  "test_acting",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_planning",
                  "false"
                ],
                [
                  "test_sensing",
                  "false"
                ],
                [
                  "test_acting",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_planning",
                "false"
              ],
              [
                "test_sensing",
                "false"
              ],
              [
                "test_acting",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_planning",
                "false"
              ],
              [
                "test_sensing",
                "false"
              ],
              [
                "test_acting",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_planning",
                [
                  "self.sensors",
                  "self.print"
                ]
              ],
              [
                "test_sensing",
                [
                  "self.sensors",
                  "self.actions",
                  "self.print"
                ]
              ],
              [
                "test_acting",
                [
                  "self.sensors",
                  "self.actions",
                  "self.print"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_planning",
                "false"
              ],
              [
                "test_sensing",
                "false"
              ],
              [
                "test_acting",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_planning",
                "false"
              ],
              [
                "test_sensing",
                "false"
              ],
              [
                "test_acting",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_planning",
                  "0"
                ],
                [
                  "test_sensing",
                  "0"
                ],
                [
                  "test_acting",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_planning",
                  "0"
                ],
                [
                  "test_sensing",
                  "0"
                ],
                [
                  "test_acting",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_planning",
                "false"
              ],
              [
                "test_sensing",
                "false"
              ],
              [
                "test_acting",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_planning",
                "false"
              ],
              [
                "test_sensing",
                "false"
              ],
              [
                "test_acting",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_planning",
                "1"
              ],
              [
                "test_sensing",
                "1"
              ],
              [
                "test_acting",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_planning",
                [
                  "create_token",
                  "action_plan",
                  "create_tmp_dir"
                ]
              ],
              [
                "test_sensing",
                []
              ],
              [
                "test_acting",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_planning",
                [
                  "self.actions",
                  "self.automaton",
                  "self.goal"
                ]
              ],
              [
                "test_sensing",
                [
                  "self.automaton",
                  "self.goal"
                ]
              ],
              [
                "test_acting",
                [
                  "self.automaton",
                  "self.goal"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.31563834705016935,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_sensing",
                  "test_planning",
                  0.2559372500614013
                ],
                [
                  "test_planning",
                  "test_acting",
                  0.27212388279741134
                ],
                [
                  "test_sensing",
                  "test_acting",
                  0.4188539082916955
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_planning",
                "false"
              ],
              [
                "test_sensing",
                "false"
              ],
              [
                "test_acting",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  }
]