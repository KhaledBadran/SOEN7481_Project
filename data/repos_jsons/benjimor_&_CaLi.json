[
  {
    "name": "tests_\u0026_test_license.py",
    "testCases": [
      {
        "name": "testLicense",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_odrl_license",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertTrue, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_odrl_licenses",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertIsInstance]"
                ],
                [
                  "test_license_functions",
                  "[PyCallExpression: self.assertCountEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_odrl_license",
                  "[]"
                ],
                [
                  "test_odrl_licenses",
                  "[]"
                ],
                [
                  "test_license_functions",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_odrl_license",
                  "false"
                ],
                [
                  "test_odrl_licenses",
                  "true"
                ],
                [
                  "test_license_functions",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_odrl_license",
                  "false"
                ],
                [
                  "test_odrl_licenses",
                  "false"
                ],
                [
                  "test_license_functions",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_odrl_license",
                  "false"
                ],
                [
                  "test_odrl_licenses",
                  "false"
                ],
                [
                  "test_license_functions",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_odrl_license",
                  "false"
                ],
                [
                  "test_odrl_licenses",
                  "false"
                ],
                [
                  "test_license_functions",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_odrl_license",
                "false"
              ],
              [
                "test_odrl_licenses",
                "false"
              ],
              [
                "test_license_functions",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_odrl_license",
                "false"
              ],
              [
                "test_odrl_licenses",
                "false"
              ],
              [
                "test_license_functions",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_odrl_license",
                []
              ],
              [
                "test_odrl_licenses",
                []
              ],
              [
                "test_license_functions",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_odrl_license",
                "false"
              ],
              [
                "test_odrl_licenses",
                "false"
              ],
              [
                "test_license_functions",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_odrl_license",
                "false"
              ],
              [
                "test_odrl_licenses",
                "true"
              ],
              [
                "test_license_functions",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_odrl_license",
                  "0"
                ],
                [
                  "test_odrl_licenses",
                  "0"
                ],
                [
                  "test_license_functions",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_odrl_license",
                  "0"
                ],
                [
                  "test_odrl_licenses",
                  "0"
                ],
                [
                  "test_license_functions",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_odrl_license",
                "false"
              ],
              [
                "test_odrl_licenses",
                "false"
              ],
              [
                "test_license_functions",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_odrl_license",
                "false"
              ],
              [
                "test_odrl_licenses",
                "false"
              ],
              [
                "test_license_functions",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_odrl_license",
                "6"
              ],
              [
                "test_odrl_licenses",
                "3"
              ],
              [
                "test_license_functions",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_odrl_license",
                [
                  "ld_licenses_graph",
                  "rep_licenses_graph",
                  "apache_license",
                  "DL1",
                  "DL2",
                  "mit_license",
                  "odrl"
                ]
              ],
              [
                "test_odrl_licenses",
                [
                  "ld_licenses_graph",
                  "licenses",
                  "DL1",
                  "odrl"
                ]
              ],
              [
                "test_license_functions",
                [
                  "ld_licenses_graph",
                  "rep_licenses_graph",
                  "apache_license",
                  "permissions",
                  "DL1",
                  "mit_license",
                  "state",
                  "odrl"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_odrl_license",
                []
              ],
              [
                "test_odrl_licenses",
                []
              ],
              [
                "test_license_functions",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8848290459429022,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_odrl_license",
                  "test_license_functions",
                  0.9084443034745142
                ],
                [
                  "test_odrl_licenses",
                  "test_license_functions",
                  0.8482465893631214
                ],
                [
                  "test_odrl_license",
                  "test_odrl_licenses",
                  0.897796244991071
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_odrl_license",
                "false"
              ],
              [
                "test_odrl_licenses",
                "false"
              ],
              [
                "test_license_functions",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "tests_\u0026_test_vocabulary.py",
    "testCases": [
      {
        "name": "testVocabularies",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_odrl_vocabulary",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_odrl_vocabulary",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_odrl_vocabulary",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_odrl_vocabulary",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_odrl_vocabulary",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_odrl_vocabulary",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_odrl_vocabulary",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_odrl_vocabulary",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_odrl_vocabulary",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_odrl_vocabulary",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_odrl_vocabulary",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_odrl_vocabulary",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_odrl_vocabulary",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_odrl_vocabulary",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_odrl_vocabulary",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_odrl_vocabulary",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_odrl_vocabulary",
                [
                  "ODRL"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_odrl_vocabulary",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_odrl_vocabulary",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "tests_\u0026_test_constraints.py",
    "testCases": [
      {
        "name": "testLicenseConstraint",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_license_constraint",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_license_constraint",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_license_constraint",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_license_constraint",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_license_constraint",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_license_constraint",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_license_constraint",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_license_constraint",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_license_constraint",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_license_constraint",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_license_constraint",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_license_constraint",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_license_constraint",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_license_constraint",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_license_constraint",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_license_constraint",
                "6"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_license_constraint",
                [
                  "ld_licenses_graph",
                  "non_valid1",
                  "DL1",
                  "non_valid3",
                  "non_valid_graph",
                  "non_valid2",
                  "ODRL",
                  "mit_license",
                  "license_constraints"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_license_constraint",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_license_constraint",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "testCompatibilityConstraint",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_license_constraint",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_license_constraint",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_license_constraint",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_license_constraint",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_license_constraint",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_license_constraint",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_license_constraint",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_license_constraint",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_license_constraint",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_license_constraint",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_license_constraint",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_license_constraint",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_license_constraint",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_license_constraint",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_license_constraint",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_license_constraint",
                "5"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_license_constraint",
                [
                  "cc_by_sa",
                  "ld_licenses_graph",
                  "cc_by_nc_sa",
                  "DL1",
                  "mit",
                  "ODRL",
                  "compatibility_constraints"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_license_constraint",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_license_constraint",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "tests_\u0026_test_cali_ordering.py",
    "testCases": [
      {
        "name": "testCaliOrdering",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_cali_ordering",
                  "[]"
                ],
                [
                  "test_order",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse, PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_cali_ordering",
                  "[]"
                ],
                [
                  "test_order",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_cali_ordering",
                  "false"
                ],
                [
                  "test_order",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_cali_ordering",
                  "false"
                ],
                [
                  "test_order",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_cali_ordering",
                  "false"
                ],
                [
                  "test_order",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_cali_ordering",
                  "false"
                ],
                [
                  "test_order",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_cali_ordering",
                "false"
              ],
              [
                "test_order",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_cali_ordering",
                "false"
              ],
              [
                "test_order",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_cali_ordering",
                []
              ],
              [
                "test_order",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_cali_ordering",
                "false"
              ],
              [
                "test_order",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_cali_ordering",
                "false"
              ],
              [
                "test_order",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_cali_ordering",
                  "0"
                ],
                [
                  "test_order",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_cali_ordering",
                  "0"
                ],
                [
                  "test_order",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_cali_ordering",
                "false"
              ],
              [
                "test_order",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_cali_ordering",
                "false"
              ],
              [
                "test_order",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_cali_ordering",
                "0"
              ],
              [
                "test_order",
                "8"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_cali_ordering",
                []
              ],
              [
                "test_order",
                [
                  "ld_licenses_graph",
                  "licenses",
                  "cc_by_sa_license",
                  "cali_ordering",
                  "DL1",
                  "cc_by_nc_sa_license",
                  "mit_license",
                  "odrl"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_cali_ordering",
                []
              ],
              [
                "test_order",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7320003672654615,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_cali_ordering",
                  "test_order",
                  0.7320003672654615
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_cali_ordering",
                "false"
              ],
              [
                "test_order",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "tests_\u0026_test_deontic_lattice.py",
    "testCases": [
      {
        "name": "testRestrictivenessLatticeOfStatus",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_restrictiveness",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_ls",
                  "[PyCallExpression: self.assertCountEqual, PyCallExpression: self.assertCountEqual, PyCallExpression: self.assertCountEqual, PyCallExpression: self.assertCountEqual, PyCallExpression: self.assertCountEqual, PyCallExpression: self.assertCountEqual, PyCallExpression: self.assertCountEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_restrictiveness",
                  "[]"
                ],
                [
                  "test_ls",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_restrictiveness",
                  "false"
                ],
                [
                  "test_ls",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_restrictiveness",
                  "false"
                ],
                [
                  "test_ls",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_restrictiveness",
                  "false"
                ],
                [
                  "test_ls",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_restrictiveness",
                  "false"
                ],
                [
                  "test_ls",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_restrictiveness",
                "false"
              ],
              [
                "test_ls",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_restrictiveness",
                "false"
              ],
              [
                "test_ls",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_restrictiveness",
                []
              ],
              [
                "test_ls",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_restrictiveness",
                "false"
              ],
              [
                "test_ls",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_restrictiveness",
                "false"
              ],
              [
                "test_ls",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_restrictiveness",
                  "0"
                ],
                [
                  "test_ls",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_restrictiveness",
                  "0"
                ],
                [
                  "test_ls",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_restrictiveness",
                "false"
              ],
              [
                "test_ls",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_restrictiveness",
                "false"
              ],
              [
                "test_ls",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_restrictiveness",
                "7"
              ],
              [
                "test_ls",
                "7"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_restrictiveness",
                [
                  "DL1"
                ]
              ],
              [
                "test_ls",
                [
                  "DL1",
                  "DL2"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_restrictiveness",
                []
              ],
              [
                "test_ls",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.634706486639777,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_ls",
                  "test_restrictiveness",
                  0.634706486639777
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_restrictiveness",
                "false"
              ],
              [
                "test_ls",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  }
]