[
  {
    "name": "flaskerizer_\u0026_flaskerizer_src_\u0026_tests_\u0026_test_write_app.py",
    "testCases": [
      {
        "name": "TestWriteApp",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_get_routes",
                  "[PyCallExpression: self.assertIsInstance]"
                ],
                [
                  "test_write_app",
                  "[PyCallExpression: self.assertMultiLineEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_get_routes",
                  "[]"
                ],
                [
                  "test_write_app",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_get_routes",
                  "false"
                ],
                [
                  "test_write_app",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_get_routes",
                  "false"
                ],
                [
                  "test_write_app",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_get_routes",
                  "false"
                ],
                [
                  "test_write_app",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_get_routes",
                  "false"
                ],
                [
                  "test_write_app",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_routes",
                "false"
              ],
              [
                "test_write_app",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_get_routes",
                "false"
              ],
              [
                "test_write_app",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_get_routes",
                []
              ],
              [
                "test_write_app",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_routes",
                "false"
              ],
              [
                "test_write_app",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_routes",
                "false"
              ],
              [
                "test_write_app",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_get_routes",
                  "0"
                ],
                [
                  "test_write_app",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_get_routes",
                  "0"
                ],
                [
                  "test_write_app",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_get_routes",
                "false"
              ],
              [
                "test_write_app",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_routes",
                "false"
              ],
              [
                "test_write_app",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_routes",
                "1"
              ],
              [
                "test_write_app",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_get_routes",
                []
              ],
              [
                "test_write_app",
                [
                  "gold_string",
                  "gold_dir",
                  "test_string",
                  "test_dir"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_get_routes",
                [
                  "self.test"
                ]
              ],
              [
                "test_write_app",
                [
                  "self.test"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.41626602579563776,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_get_routes",
                  "test_write_app",
                  0.41626602579563776
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_get_routes",
                "false"
              ],
              [
                "test_write_app",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "flaskerizer_\u0026_flaskerizer_src_\u0026_tests_\u0026_test_status_code_to_word.py",
    "testCases": [
      {
        "name": "TestStatusCode",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_status_code_to_word",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsInstance]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_status_code_to_word",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_status_code_to_word",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_status_code_to_word",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_status_code_to_word",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_status_code_to_word",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_status_code_to_word",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_status_code_to_word",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_status_code_to_word",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_status_code_to_word",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_status_code_to_word",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_status_code_to_word",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_status_code_to_word",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_status_code_to_word",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_status_code_to_word",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_status_code_to_word",
                "4"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_status_code_to_word",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_status_code_to_word",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_status_code_to_word",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "flaskerizer_\u0026_flaskerizer_src_\u0026_tests_\u0026_test_structure_directory.py",
    "testCases": [
      {
        "name": "TestStructureDirectory",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_mkdir",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_migrate_files",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_detect_and_migrate_html_files",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_mkdir",
                  "[]"
                ],
                [
                  "test_migrate_files",
                  "[]"
                ],
                [
                  "test_detect_and_migrate_html_files",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_mkdir",
                  "false"
                ],
                [
                  "test_migrate_files",
                  "true"
                ],
                [
                  "test_detect_and_migrate_html_files",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_mkdir",
                  "false"
                ],
                [
                  "test_migrate_files",
                  "false"
                ],
                [
                  "test_detect_and_migrate_html_files",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_mkdir",
                  "false"
                ],
                [
                  "test_migrate_files",
                  "false"
                ],
                [
                  "test_detect_and_migrate_html_files",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_mkdir",
                  "false"
                ],
                [
                  "test_migrate_files",
                  "false"
                ],
                [
                  "test_detect_and_migrate_html_files",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_mkdir",
                "false"
              ],
              [
                "test_migrate_files",
                "false"
              ],
              [
                "test_detect_and_migrate_html_files",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_mkdir",
                "false"
              ],
              [
                "test_migrate_files",
                "false"
              ],
              [
                "test_detect_and_migrate_html_files",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_mkdir",
                [
                  "self.gold_standard_dir"
                ]
              ],
              [
                "test_migrate_files",
                []
              ],
              [
                "test_detect_and_migrate_html_files",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_mkdir",
                "false"
              ],
              [
                "test_migrate_files",
                "false"
              ],
              [
                "test_detect_and_migrate_html_files",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_mkdir",
                "false"
              ],
              [
                "test_migrate_files",
                "false"
              ],
              [
                "test_detect_and_migrate_html_files",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_mkdir",
                  "0"
                ],
                [
                  "test_migrate_files",
                  "0"
                ],
                [
                  "test_detect_and_migrate_html_files",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_mkdir",
                  "0"
                ],
                [
                  "test_migrate_files",
                  "0"
                ],
                [
                  "test_detect_and_migrate_html_files",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_mkdir",
                "false"
              ],
              [
                "test_migrate_files",
                "false"
              ],
              [
                "test_detect_and_migrate_html_files",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_mkdir",
                "false"
              ],
              [
                "test_migrate_files",
                "false"
              ],
              [
                "test_detect_and_migrate_html_files",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_mkdir",
                "6"
              ],
              [
                "test_migrate_files",
                "1"
              ],
              [
                "test_detect_and_migrate_html_files",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_mkdir",
                []
              ],
              [
                "test_migrate_files",
                [
                  "extensions",
                  "test_file_list",
                  "migrate_dict",
                  "gold_standard_file_list",
                  "test_dir"
                ]
              ],
              [
                "test_detect_and_migrate_html_files",
                [
                  "test_file_list",
                  "migrate_dict",
                  "gold_standard_file_list",
                  "gold_standard_dir",
                  "test_dir"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_mkdir",
                [
                  "self.test",
                  "self.flaskerized_app_dir"
                ]
              ],
              [
                "test_migrate_files",
                [
                  "self.gold_standard_dir",
                  "self.test",
                  "self.flaskerized_app_dir"
                ]
              ],
              [
                "test_detect_and_migrate_html_files",
                [
                  "self.gold_standard_dir",
                  "self.test",
                  "self.flaskerized_app_dir"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.4373546155648418,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_mkdir",
                  "test_detect_and_migrate_html_files",
                  0.23935816747382216
                ],
                [
                  "test_mkdir",
                  "test_migrate_files",
                  0.1938006332446037
                ],
                [
                  "test_detect_and_migrate_html_files",
                  "test_migrate_files",
                  0.8789050459760995
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_mkdir",
                "false"
              ],
              [
                "test_migrate_files",
                "false"
              ],
              [
                "test_detect_and_migrate_html_files",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  }
]