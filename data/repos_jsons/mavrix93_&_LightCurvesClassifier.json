[
  {
    "name": "test_\u0026_stars_processing_\u0026_test_descriptors.py",
    "testCases": [
      {
        "name": "TestDescriptors",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "testSkewness",
                  "[]"
                ],
                [
                  "testAbbe",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "testComparative",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "testSkewness",
                  "[PyAssertStatement]"
                ],
                [
                  "testAbbe",
                  "[PyAssertStatement]"
                ],
                [
                  "testComparative",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "testSkewness",
                  "false"
                ],
                [
                  "testAbbe",
                  "false"
                ],
                [
                  "testComparative",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "testSkewness",
                  "false"
                ],
                [
                  "testAbbe",
                  "false"
                ],
                [
                  "testComparative",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "testSkewness",
                  "false"
                ],
                [
                  "testAbbe",
                  "false"
                ],
                [
                  "testComparative",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "testSkewness",
                  "false"
                ],
                [
                  "testAbbe",
                  "false"
                ],
                [
                  "testComparative",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "testSkewness",
                "false"
              ],
              [
                "testAbbe",
                "false"
              ],
              [
                "testComparative",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "testSkewness",
                "false"
              ],
              [
                "testAbbe",
                "false"
              ],
              [
                "testComparative",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "testSkewness",
                []
              ],
              [
                "testAbbe",
                []
              ],
              [
                "testComparative",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "testSkewness",
                "false"
              ],
              [
                "testAbbe",
                "false"
              ],
              [
                "testComparative",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "testSkewness",
                "false"
              ],
              [
                "testAbbe",
                "false"
              ],
              [
                "testComparative",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "testSkewness",
                  "0"
                ],
                [
                  "testAbbe",
                  "0"
                ],
                [
                  "testComparative",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "testSkewness",
                  "0"
                ],
                [
                  "testAbbe",
                  "0"
                ],
                [
                  "testComparative",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "testSkewness",
                "false"
              ],
              [
                "testAbbe",
                "false"
              ],
              [
                "testComparative",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "testSkewness",
                "false"
              ],
              [
                "testAbbe",
                "false"
              ],
              [
                "testComparative",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "testSkewness",
                "1"
              ],
              [
                "testAbbe",
                "2"
              ],
              [
                "testComparative",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "testSkewness",
                [
                  "sk_values",
                  "skewness_descr"
                ]
              ],
              [
                "testAbbe",
                [
                  "abbe_filter",
                  "abbe_values"
                ]
              ],
              [
                "testComparative",
                [
                  "descr"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "testSkewness",
                [
                  "self.descriptors",
                  "self.stars"
                ]
              ],
              [
                "testAbbe",
                [
                  "self.descriptors",
                  "self.stars"
                ]
              ],
              [
                "testComparative",
                [
                  "self.descriptors",
                  "self.stars"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.2924084066229347,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "testAbbe",
                  "testSkewness",
                  0.3359355065735126
                ],
                [
                  "testAbbe",
                  "testComparative",
                  0.2921532737340716
                ],
                [
                  "testSkewness",
                  "testComparative",
                  0.2491364395612199
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "testSkewness",
                "false"
              ],
              [
                "testAbbe",
                "true"
              ],
              [
                "testComparative",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "test_\u0026_stars_processing_\u0026_test_params_estim.py",
    "testCases": [
      {
        "name": "Test",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "testName",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "testName",
                  "[PyAssertStatement]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "testName",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "testName",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "testName",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "testName",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "testName",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "testName",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "testName",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "testName",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "testName",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "testName",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "testName",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "testName",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "testName",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "testName",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "testName",
                [
                  "descriptors",
                  "stat",
                  "star_filter",
                  "best_params",
                  "est",
                  "deciders",
                  "tuned_params",
                  "static_params"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "testName",
                [
                  "self.noisy",
                  "self.template",
                  "self.variables"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "testName",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "test_\u0026_stars_processing_\u0026_test_comp_descriptors.py",
    "testCases": [
      {
        "name": "TestComparative",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "testCurveShape",
                  "[]"
                ],
                [
                  "testHistShape",
                  "[]"
                ],
                [
                  "testVarioShape",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "testCurveShape",
                  "[PyAssertStatement]"
                ],
                [
                  "testHistShape",
                  "[PyAssertStatement]"
                ],
                [
                  "testVarioShape",
                  "[PyAssertStatement]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "testCurveShape",
                  "false"
                ],
                [
                  "testHistShape",
                  "false"
                ],
                [
                  "testVarioShape",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "testCurveShape",
                  "false"
                ],
                [
                  "testHistShape",
                  "false"
                ],
                [
                  "testVarioShape",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "testCurveShape",
                  "false"
                ],
                [
                  "testHistShape",
                  "false"
                ],
                [
                  "testVarioShape",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "testCurveShape",
                  "false"
                ],
                [
                  "testHistShape",
                  "false"
                ],
                [
                  "testVarioShape",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "testCurveShape",
                "false"
              ],
              [
                "testHistShape",
                "false"
              ],
              [
                "testVarioShape",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "testCurveShape",
                "false"
              ],
              [
                "testHistShape",
                "false"
              ],
              [
                "testVarioShape",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "testCurveShape",
                []
              ],
              [
                "testHistShape",
                []
              ],
              [
                "testVarioShape",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "testCurveShape",
                "false"
              ],
              [
                "testHistShape",
                "false"
              ],
              [
                "testVarioShape",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "testCurveShape",
                "false"
              ],
              [
                "testHistShape",
                "false"
              ],
              [
                "testVarioShape",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "testCurveShape",
                  "0"
                ],
                [
                  "testHistShape",
                  "0"
                ],
                [
                  "testVarioShape",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "testCurveShape",
                  "0"
                ],
                [
                  "testHistShape",
                  "0"
                ],
                [
                  "testVarioShape",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "testCurveShape",
                "false"
              ],
              [
                "testHistShape",
                "false"
              ],
              [
                "testVarioShape",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "testCurveShape",
                "false"
              ],
              [
                "testHistShape",
                "false"
              ],
              [
                "testVarioShape",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "testCurveShape",
                "1"
              ],
              [
                "testHistShape",
                "1"
              ],
              [
                "testVarioShape",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "testCurveShape",
                [
                  "lcdes"
                ]
              ],
              [
                "testHistShape",
                [
                  "hist"
                ]
              ],
              [
                "testVarioShape",
                [
                  "vario"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "testCurveShape",
                [
                  "self.star1",
                  "self.star3",
                  "self.star2"
                ]
              ],
              [
                "testHistShape",
                [
                  "self.star1",
                  "self.star3",
                  "self.star2"
                ]
              ],
              [
                "testVarioShape",
                [
                  "self.star1",
                  "self.star3",
                  "self.star2"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6535257583906476,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "testCurveShape",
                  "testVarioShape",
                  0.6128258770283411
                ],
                [
                  "testCurveShape",
                  "testHistShape",
                  0.7315635209502899
                ],
                [
                  "testHistShape",
                  "testVarioShape",
                  0.6161878771933119
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "testCurveShape",
                "false"
              ],
              [
                "testHistShape",
                "false"
              ],
              [
                "testVarioShape",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  }
]