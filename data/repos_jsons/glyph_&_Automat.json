[
  {
    "name": "automat_\u0026__test_\u0026_test_core.py",
    "testCases": [
      {
        "name": "CoreTests",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_oneTransition",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_oneTransition_nonIterableOutputs",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_noOutputForInput",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_initialState",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_NoTransition",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertIs, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_oneTransition",
                  "[]"
                ],
                [
                  "test_oneTransition_nonIterableOutputs",
                  "[]"
                ],
                [
                  "test_noOutputForInput",
                  "[]"
                ],
                [
                  "test_initialState",
                  "[]"
                ],
                [
                  "test_NoTransition",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_oneTransition",
                  "false"
                ],
                [
                  "test_oneTransition_nonIterableOutputs",
                  "false"
                ],
                [
                  "test_noOutputForInput",
                  "false"
                ],
                [
                  "test_initialState",
                  "false"
                ],
                [
                  "test_NoTransition",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_oneTransition",
                  "false"
                ],
                [
                  "test_oneTransition_nonIterableOutputs",
                  "false"
                ],
                [
                  "test_noOutputForInput",
                  "false"
                ],
                [
                  "test_initialState",
                  "false"
                ],
                [
                  "test_NoTransition",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_oneTransition",
                  "false"
                ],
                [
                  "test_oneTransition_nonIterableOutputs",
                  "false"
                ],
                [
                  "test_noOutputForInput",
                  "false"
                ],
                [
                  "test_initialState",
                  "false"
                ],
                [
                  "test_NoTransition",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_oneTransition",
                  "false"
                ],
                [
                  "test_oneTransition_nonIterableOutputs",
                  "false"
                ],
                [
                  "test_noOutputForInput",
                  "false"
                ],
                [
                  "test_initialState",
                  "false"
                ],
                [
                  "test_NoTransition",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_oneTransition",
                "false"
              ],
              [
                "test_oneTransition_nonIterableOutputs",
                "false"
              ],
              [
                "test_noOutputForInput",
                "false"
              ],
              [
                "test_initialState",
                "false"
              ],
              [
                "test_NoTransition",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_oneTransition",
                "false"
              ],
              [
                "test_oneTransition_nonIterableOutputs",
                "false"
              ],
              [
                "test_noOutputForInput",
                "false"
              ],
              [
                "test_initialState",
                "false"
              ],
              [
                "test_NoTransition",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_oneTransition",
                []
              ],
              [
                "test_oneTransition_nonIterableOutputs",
                []
              ],
              [
                "test_noOutputForInput",
                []
              ],
              [
                "test_initialState",
                []
              ],
              [
                "test_NoTransition",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_oneTransition",
                "false"
              ],
              [
                "test_oneTransition_nonIterableOutputs",
                "false"
              ],
              [
                "test_noOutputForInput",
                "false"
              ],
              [
                "test_initialState",
                "false"
              ],
              [
                "test_NoTransition",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_oneTransition",
                "false"
              ],
              [
                "test_oneTransition_nonIterableOutputs",
                "false"
              ],
              [
                "test_noOutputForInput",
                "false"
              ],
              [
                "test_initialState",
                "false"
              ],
              [
                "test_NoTransition",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_oneTransition",
                  "0"
                ],
                [
                  "test_oneTransition_nonIterableOutputs",
                  "0"
                ],
                [
                  "test_noOutputForInput",
                  "0"
                ],
                [
                  "test_initialState",
                  "0"
                ],
                [
                  "test_NoTransition",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_oneTransition",
                  "0"
                ],
                [
                  "test_oneTransition_nonIterableOutputs",
                  "0"
                ],
                [
                  "test_noOutputForInput",
                  "0"
                ],
                [
                  "test_initialState",
                  "0"
                ],
                [
                  "test_NoTransition",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_oneTransition",
                "false"
              ],
              [
                "test_oneTransition_nonIterableOutputs",
                "false"
              ],
              [
                "test_noOutputForInput",
                "false"
              ],
              [
                "test_initialState",
                "false"
              ],
              [
                "test_NoTransition",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_oneTransition",
                "false"
              ],
              [
                "test_oneTransition_nonIterableOutputs",
                "false"
              ],
              [
                "test_noOutputForInput",
                "false"
              ],
              [
                "test_initialState",
                "false"
              ],
              [
                "test_NoTransition",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_oneTransition",
                "4"
              ],
              [
                "test_oneTransition_nonIterableOutputs",
                "5"
              ],
              [
                "test_noOutputForInput",
                "1"
              ],
              [
                "test_initialState",
                "2"
              ],
              [
                "test_NoTransition",
                "4"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_oneTransition",
                [
                  "a"
                ]
              ],
              [
                "test_oneTransition_nonIterableOutputs",
                [
                  "a",
                  "nonIterableOutputs"
                ]
              ],
              [
                "test_noOutputForInput",
                [
                  "a"
                ]
              ],
              [
                "test_initialState",
                [
                  "a"
                ]
              ],
              [
                "test_NoTransition",
                [
                  "symbol",
                  "noTransitionException",
                  "state"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_oneTransition",
                []
              ],
              [
                "test_oneTransition_nonIterableOutputs",
                []
              ],
              [
                "test_noOutputForInput",
                []
              ],
              [
                "test_initialState",
                []
              ],
              [
                "test_NoTransition",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.4727022527514575,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_NoTransition",
                  "test_oneTransition_nonIterableOutputs",
                  0.5066363678446132
                ],
                [
                  "test_noOutputForInput",
                  "test_oneTransition_nonIterableOutputs",
                  0.42331181358622477
                ],
                [
                  "test_noOutputForInput",
                  "test_oneTransition",
                  0.5062923273808899
                ],
                [
                  "test_oneTransition",
                  "test_oneTransition_nonIterableOutputs",
                  0.5298773241154081
                ],
                [
                  "test_NoTransition",
                  "test_initialState",
                  0.4419002992804453
                ],
                [
                  "test_NoTransition",
                  "test_noOutputForInput",
                  0.589422539799202
                ],
                [
                  "test_oneTransition",
                  "test_initialState",
                  0.4461684422858481
                ],
                [
                  "test_noOutputForInput",
                  "test_initialState",
                  0.39837179548515317
                ],
                [
                  "test_oneTransition_nonIterableOutputs",
                  "test_initialState",
                  0.4323897513439467
                ],
                [
                  "test_NoTransition",
                  "test_oneTransition",
                  0.4526518663928438
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_oneTransition",
                "false"
              ],
              [
                "test_oneTransition_nonIterableOutputs",
                "false"
              ],
              [
                "test_noOutputForInput",
                "false"
              ],
              [
                "test_initialState",
                "false"
              ],
              [
                "test_NoTransition",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 5
      }
    ]
  },
  {
    "name": "automat_\u0026__test_\u0026_test_trace.py",
    "testCases": [
      {
        "name": "TraceTests",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_only_inputs",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_inputs_and_outputs",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_only_inputs",
                  "[]"
                ],
                [
                  "test_inputs_and_outputs",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_only_inputs",
                  "false"
                ],
                [
                  "test_inputs_and_outputs",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_only_inputs",
                  "false"
                ],
                [
                  "test_inputs_and_outputs",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_only_inputs",
                  "true"
                ],
                [
                  "test_inputs_and_outputs",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_only_inputs",
                  "false"
                ],
                [
                  "test_inputs_and_outputs",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_only_inputs",
                "false"
              ],
              [
                "test_inputs_and_outputs",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_only_inputs",
                "false"
              ],
              [
                "test_inputs_and_outputs",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_only_inputs",
                []
              ],
              [
                "test_inputs_and_outputs",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_only_inputs",
                "false"
              ],
              [
                "test_inputs_and_outputs",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_only_inputs",
                "false"
              ],
              [
                "test_inputs_and_outputs",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_only_inputs",
                  "0"
                ],
                [
                  "test_inputs_and_outputs",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_only_inputs",
                  "0"
                ],
                [
                  "test_inputs_and_outputs",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_only_inputs",
                "false"
              ],
              [
                "test_inputs_and_outputs",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_only_inputs",
                "false"
              ],
              [
                "test_inputs_and_outputs",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_only_inputs",
                "4"
              ],
              [
                "test_inputs_and_outputs",
                "4"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_only_inputs",
                [
                  "s",
                  "traces"
                ]
              ],
              [
                "test_inputs_and_outputs",
                [
                  "s",
                  "traces"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_only_inputs",
                []
              ],
              [
                "test_inputs_and_outputs",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7507480202226862,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_only_inputs",
                  "test_inputs_and_outputs",
                  0.7507480202226862
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_only_inputs",
                "false"
              ],
              [
                "test_inputs_and_outputs",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "automat_\u0026__test_\u0026_test_discover.py",
    "testCases": [
      {
        "name": "OriginalLocationTests",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_failsWithNoModule",
                  "[PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_succeedsWithSameModule",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_failsWithDifferentModule",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_failsWithNoModule",
                  "[]"
                ],
                [
                  "test_succeedsWithSameModule",
                  "[]"
                ],
                [
                  "test_failsWithDifferentModule",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_failsWithNoModule",
                  "false"
                ],
                [
                  "test_succeedsWithSameModule",
                  "false"
                ],
                [
                  "test_failsWithDifferentModule",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_failsWithNoModule",
                  "false"
                ],
                [
                  "test_succeedsWithSameModule",
                  "false"
                ],
                [
                  "test_failsWithDifferentModule",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_failsWithNoModule",
                  "false"
                ],
                [
                  "test_succeedsWithSameModule",
                  "false"
                ],
                [
                  "test_failsWithDifferentModule",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_failsWithNoModule",
                  "false"
                ],
                [
                  "test_succeedsWithSameModule",
                  "false"
                ],
                [
                  "test_failsWithDifferentModule",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_failsWithNoModule",
                "false"
              ],
              [
                "test_succeedsWithSameModule",
                "false"
              ],
              [
                "test_failsWithDifferentModule",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_failsWithNoModule",
                "false"
              ],
              [
                "test_succeedsWithSameModule",
                "false"
              ],
              [
                "test_failsWithDifferentModule",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_failsWithNoModule",
                []
              ],
              [
                "test_succeedsWithSameModule",
                []
              ],
              [
                "test_failsWithDifferentModule",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_failsWithNoModule",
                "false"
              ],
              [
                "test_succeedsWithSameModule",
                "false"
              ],
              [
                "test_failsWithDifferentModule",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_failsWithNoModule",
                "false"
              ],
              [
                "test_succeedsWithSameModule",
                "false"
              ],
              [
                "test_failsWithDifferentModule",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_failsWithNoModule",
                  "0"
                ],
                [
                  "test_succeedsWithSameModule",
                  "0"
                ],
                [
                  "test_failsWithDifferentModule",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_failsWithNoModule",
                  "0"
                ],
                [
                  "test_succeedsWithSameModule",
                  "0"
                ],
                [
                  "test_failsWithDifferentModule",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_failsWithNoModule",
                "false"
              ],
              [
                "test_succeedsWithSameModule",
                "false"
              ],
              [
                "test_failsWithDifferentModule",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_failsWithNoModule",
                "false"
              ],
              [
                "test_succeedsWithSameModule",
                "false"
              ],
              [
                "test_failsWithDifferentModule",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_failsWithNoModule",
                "1"
              ],
              [
                "test_succeedsWithSameModule",
                "3"
              ],
              [
                "test_failsWithDifferentModule",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_failsWithNoModule",
                [
                  "moduleDict",
                  "source"
                ]
              ],
              [
                "test_succeedsWithSameModule",
                [
                  "mDict",
                  "mSource",
                  "nestingObject",
                  "nestedObject",
                  "nestingObjectDict"
                ]
              ],
              [
                "test_failsWithDifferentModule",
                [
                  "importingSource",
                  "nestingObject",
                  "importingDict",
                  "nestedObject",
                  "nestingObjectDict",
                  "originalSource"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_failsWithNoModule",
                [
                  "self.isOriginalLocation"
                ]
              ],
              [
                "test_succeedsWithSameModule",
                [
                  "self.isOriginalLocation"
                ]
              ],
              [
                "test_failsWithDifferentModule",
                [
                  "self.isOriginalLocation"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.49393926651790737,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_failsWithNoModule",
                  "test_succeedsWithSameModule",
                  0.4564450878356463
                ],
                [
                  "test_failsWithNoModule",
                  "test_failsWithDifferentModule",
                  0.38311859415551236
                ],
                [
                  "test_failsWithDifferentModule",
                  "test_succeedsWithSameModule",
                  0.6422541175625633
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_failsWithNoModule",
                "false"
              ],
              [
                "test_succeedsWithSameModule",
                "false"
              ],
              [
                "test_failsWithDifferentModule",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      },
      {
        "name": "FindMachinesViaWrapperTests",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_yieldsMachineInClass",
                  "[PyCallExpression: self.assertIn]"
                ],
                [
                  "test_yieldsMachine",
                  "[PyCallExpression: self.assertIn]"
                ],
                [
                  "test_descendsIntoPackages",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_yieldsMachineInNestedClassInModule",
                  "[PyCallExpression: self.assertIn]"
                ],
                [
                  "test_yieldsMachineInModule",
                  "[PyCallExpression: self.assertIn]"
                ],
                [
                  "test_yieldsMachineInClassInModule",
                  "[PyCallExpression: self.assertIn]"
                ],
                [
                  "test_yieldsMachineInNestedClass",
                  "[PyCallExpression: self.assertIn]"
                ],
                [
                  "test_infiniteLoop",
                  "[PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_ignoresImportedClass",
                  "[PyCallExpression: self.assertFalse]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_yieldsMachineInClass",
                  "[]"
                ],
                [
                  "test_yieldsMachine",
                  "[]"
                ],
                [
                  "test_descendsIntoPackages",
                  "[]"
                ],
                [
                  "test_yieldsMachineInNestedClassInModule",
                  "[]"
                ],
                [
                  "test_yieldsMachineInModule",
                  "[]"
                ],
                [
                  "test_yieldsMachineInClassInModule",
                  "[]"
                ],
                [
                  "test_yieldsMachineInNestedClass",
                  "[]"
                ],
                [
                  "test_infiniteLoop",
                  "[]"
                ],
                [
                  "test_ignoresImportedClass",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_yieldsMachineInClass",
                  "false"
                ],
                [
                  "test_yieldsMachine",
                  "false"
                ],
                [
                  "test_descendsIntoPackages",
                  "false"
                ],
                [
                  "test_yieldsMachineInNestedClassInModule",
                  "false"
                ],
                [
                  "test_yieldsMachineInModule",
                  "false"
                ],
                [
                  "test_yieldsMachineInClassInModule",
                  "false"
                ],
                [
                  "test_yieldsMachineInNestedClass",
                  "false"
                ],
                [
                  "test_infiniteLoop",
                  "false"
                ],
                [
                  "test_ignoresImportedClass",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_yieldsMachineInClass",
                  "false"
                ],
                [
                  "test_yieldsMachine",
                  "false"
                ],
                [
                  "test_descendsIntoPackages",
                  "false"
                ],
                [
                  "test_yieldsMachineInNestedClassInModule",
                  "false"
                ],
                [
                  "test_yieldsMachineInModule",
                  "false"
                ],
                [
                  "test_yieldsMachineInClassInModule",
                  "false"
                ],
                [
                  "test_yieldsMachineInNestedClass",
                  "false"
                ],
                [
                  "test_infiniteLoop",
                  "false"
                ],
                [
                  "test_ignoresImportedClass",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_yieldsMachineInClass",
                  "false"
                ],
                [
                  "test_yieldsMachine",
                  "false"
                ],
                [
                  "test_descendsIntoPackages",
                  "false"
                ],
                [
                  "test_yieldsMachineInNestedClassInModule",
                  "false"
                ],
                [
                  "test_yieldsMachineInModule",
                  "false"
                ],
                [
                  "test_yieldsMachineInClassInModule",
                  "false"
                ],
                [
                  "test_yieldsMachineInNestedClass",
                  "false"
                ],
                [
                  "test_infiniteLoop",
                  "false"
                ],
                [
                  "test_ignoresImportedClass",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_yieldsMachineInClass",
                  "false"
                ],
                [
                  "test_yieldsMachine",
                  "false"
                ],
                [
                  "test_descendsIntoPackages",
                  "false"
                ],
                [
                  "test_yieldsMachineInNestedClassInModule",
                  "false"
                ],
                [
                  "test_yieldsMachineInModule",
                  "false"
                ],
                [
                  "test_yieldsMachineInClassInModule",
                  "false"
                ],
                [
                  "test_yieldsMachineInNestedClass",
                  "false"
                ],
                [
                  "test_infiniteLoop",
                  "false"
                ],
                [
                  "test_ignoresImportedClass",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_yieldsMachineInClass",
                "false"
              ],
              [
                "test_yieldsMachine",
                "false"
              ],
              [
                "test_descendsIntoPackages",
                "false"
              ],
              [
                "test_yieldsMachineInNestedClassInModule",
                "false"
              ],
              [
                "test_yieldsMachineInModule",
                "false"
              ],
              [
                "test_yieldsMachineInClassInModule",
                "false"
              ],
              [
                "test_yieldsMachineInNestedClass",
                "false"
              ],
              [
                "test_infiniteLoop",
                "false"
              ],
              [
                "test_ignoresImportedClass",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_yieldsMachineInClass",
                "false"
              ],
              [
                "test_yieldsMachine",
                "false"
              ],
              [
                "test_descendsIntoPackages",
                "false"
              ],
              [
                "test_yieldsMachineInNestedClassInModule",
                "false"
              ],
              [
                "test_yieldsMachineInModule",
                "false"
              ],
              [
                "test_yieldsMachineInClassInModule",
                "false"
              ],
              [
                "test_yieldsMachineInNestedClass",
                "false"
              ],
              [
                "test_infiniteLoop",
                "false"
              ],
              [
                "test_ignoresImportedClass",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_yieldsMachineInClass",
                []
              ],
              [
                "test_yieldsMachine",
                []
              ],
              [
                "test_descendsIntoPackages",
                []
              ],
              [
                "test_yieldsMachineInNestedClassInModule",
                []
              ],
              [
                "test_yieldsMachineInModule",
                []
              ],
              [
                "test_yieldsMachineInClassInModule",
                []
              ],
              [
                "test_yieldsMachineInNestedClass",
                []
              ],
              [
                "test_infiniteLoop",
                []
              ],
              [
                "test_ignoresImportedClass",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_yieldsMachineInClass",
                "false"
              ],
              [
                "test_yieldsMachine",
                "false"
              ],
              [
                "test_descendsIntoPackages",
                "false"
              ],
              [
                "test_yieldsMachineInNestedClassInModule",
                "false"
              ],
              [
                "test_yieldsMachineInModule",
                "false"
              ],
              [
                "test_yieldsMachineInClassInModule",
                "false"
              ],
              [
                "test_yieldsMachineInNestedClass",
                "false"
              ],
              [
                "test_infiniteLoop",
                "false"
              ],
              [
                "test_ignoresImportedClass",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_yieldsMachineInClass",
                "false"
              ],
              [
                "test_yieldsMachine",
                "false"
              ],
              [
                "test_descendsIntoPackages",
                "false"
              ],
              [
                "test_yieldsMachineInNestedClassInModule",
                "false"
              ],
              [
                "test_yieldsMachineInModule",
                "false"
              ],
              [
                "test_yieldsMachineInClassInModule",
                "false"
              ],
              [
                "test_yieldsMachineInNestedClass",
                "false"
              ],
              [
                "test_infiniteLoop",
                "false"
              ],
              [
                "test_ignoresImportedClass",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_yieldsMachineInClass",
                  "0"
                ],
                [
                  "test_yieldsMachine",
                  "0"
                ],
                [
                  "test_descendsIntoPackages",
                  "0"
                ],
                [
                  "test_yieldsMachineInNestedClassInModule",
                  "0"
                ],
                [
                  "test_yieldsMachineInModule",
                  "0"
                ],
                [
                  "test_yieldsMachineInClassInModule",
                  "0"
                ],
                [
                  "test_yieldsMachineInNestedClass",
                  "0"
                ],
                [
                  "test_infiniteLoop",
                  "0"
                ],
                [
                  "test_ignoresImportedClass",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_yieldsMachineInClass",
                  "0"
                ],
                [
                  "test_yieldsMachine",
                  "0"
                ],
                [
                  "test_descendsIntoPackages",
                  "0"
                ],
                [
                  "test_yieldsMachineInNestedClassInModule",
                  "0"
                ],
                [
                  "test_yieldsMachineInModule",
                  "0"
                ],
                [
                  "test_yieldsMachineInClassInModule",
                  "0"
                ],
                [
                  "test_yieldsMachineInNestedClass",
                  "0"
                ],
                [
                  "test_infiniteLoop",
                  "0"
                ],
                [
                  "test_ignoresImportedClass",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_yieldsMachineInClass",
                "false"
              ],
              [
                "test_yieldsMachine",
                "false"
              ],
              [
                "test_descendsIntoPackages",
                "false"
              ],
              [
                "test_yieldsMachineInNestedClassInModule",
                "false"
              ],
              [
                "test_yieldsMachineInModule",
                "false"
              ],
              [
                "test_yieldsMachineInClassInModule",
                "false"
              ],
              [
                "test_yieldsMachineInNestedClass",
                "false"
              ],
              [
                "test_infiniteLoop",
                "false"
              ],
              [
                "test_ignoresImportedClass",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_yieldsMachineInClass",
                "false"
              ],
              [
                "test_yieldsMachine",
                "false"
              ],
              [
                "test_descendsIntoPackages",
                "false"
              ],
              [
                "test_yieldsMachineInNestedClassInModule",
                "false"
              ],
              [
                "test_yieldsMachineInModule",
                "false"
              ],
              [
                "test_yieldsMachineInClassInModule",
                "false"
              ],
              [
                "test_yieldsMachineInNestedClass",
                "false"
              ],
              [
                "test_infiniteLoop",
                "false"
              ],
              [
                "test_ignoresImportedClass",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_yieldsMachineInClass",
                "1"
              ],
              [
                "test_yieldsMachine",
                "1"
              ],
              [
                "test_descendsIntoPackages",
                "1"
              ],
              [
                "test_yieldsMachineInNestedClassInModule",
                "1"
              ],
              [
                "test_yieldsMachineInModule",
                "1"
              ],
              [
                "test_yieldsMachineInClassInModule",
                "1"
              ],
              [
                "test_yieldsMachineInNestedClass",
                "1"
              ],
              [
                "test_infiniteLoop",
                "1"
              ],
              [
                "test_ignoresImportedClass",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_yieldsMachineInClass",
                [
                  "moduleDict",
                  "PythonClass",
                  "source"
                ]
              ],
              [
                "test_yieldsMachine",
                [
                  "rootMachine",
                  "moduleDict",
                  "source"
                ]
              ],
              [
                "test_descendsIntoPackages",
                [
                  "package",
                  "test_package",
                  "rootMachine",
                  "pythonPath",
                  "moduleDict",
                  "PythonClass",
                  "source",
                  "machines",
                  "expectedMachines"
                ]
              ],
              [
                "test_yieldsMachineInNestedClassInModule",
                [
                  "module",
                  "PythonClass",
                  "source"
                ]
              ],
              [
                "test_yieldsMachineInModule",
                [
                  "module",
                  "rootMachine",
                  "source"
                ]
              ],
              [
                "test_yieldsMachineInClassInModule",
                [
                  "module",
                  "PythonClass",
                  "source"
                ]
              ],
              [
                "test_yieldsMachineInNestedClass",
                [
                  "moduleDict",
                  "PythonClass",
                  "source"
                ]
              ],
              [
                "test_infiniteLoop",
                [
                  "module",
                  "source"
                ]
              ],
              [
                "test_ignoresImportedClass",
                [
                  "importingModule",
                  "importingSource",
                  "originalSource"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_yieldsMachineInClass",
                [
                  "self.findMachinesViaWrapper"
                ]
              ],
              [
                "test_yieldsMachine",
                [
                  "self.findMachinesViaWrapper"
                ]
              ],
              [
                "test_descendsIntoPackages",
                [
                  "self.findMachinesViaWrapper"
                ]
              ],
              [
                "test_yieldsMachineInNestedClassInModule",
                [
                  "self.findMachinesViaWrapper"
                ]
              ],
              [
                "test_yieldsMachineInModule",
                [
                  "self.findMachinesViaWrapper"
                ]
              ],
              [
                "test_yieldsMachineInClassInModule",
                [
                  "self.findMachinesViaWrapper"
                ]
              ],
              [
                "test_yieldsMachineInNestedClass",
                [
                  "self.findMachinesViaWrapper"
                ]
              ],
              [
                "test_infiniteLoop",
                [
                  "self.findMachinesViaWrapper"
                ]
              ],
              [
                "test_ignoresImportedClass",
                [
                  "self.findMachinesViaWrapper"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7538003869470098,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_yieldsMachine",
                  "test_descendsIntoPackages",
                  0.7288976908624022
                ],
                [
                  "test_yieldsMachineInModule",
                  "test_descendsIntoPackages",
                  0.7213874461154394
                ],
                [
                  "test_yieldsMachineInNestedClass",
                  "test_infiniteLoop",
                  0.5282622899163375
                ],
                [
                  "test_yieldsMachine",
                  "test_yieldsMachineInNestedClassInModule",
                  0.7385680057144198
                ],
                [
                  "test_yieldsMachineInModule",
                  "test_yieldsMachineInNestedClassInModule",
                  0.7633862853691145
                ],
                [
                  "test_ignoresImportedClass",
                  "test_infiniteLoop",
                  0.5566639234359648
                ],
                [
                  "test_yieldsMachineInClass",
                  "test_yieldsMachineInModule",
                  0.7979249985750353
                ],
                [
                  "test_yieldsMachine",
                  "test_yieldsMachineInNestedClass",
                  0.7516317249137583
                ],
                [
                  "test_yieldsMachine",
                  "test_yieldsMachineInModule",
                  0.9452610848429753
                ],
                [
                  "test_descendsIntoPackages",
                  "test_infiniteLoop",
                  0.5537365213577488
                ],
                [
                  "test_yieldsMachineInNestedClassInModule",
                  "test_ignoresImportedClass",
                  0.7773056978602673
                ],
                [
                  "test_yieldsMachineInClass",
                  "test_descendsIntoPackages",
                  0.7857025758774898
                ],
                [
                  "test_yieldsMachineInModule",
                  "test_yieldsMachineInClassInModule",
                  0.8174569180352296
                ],
                [
                  "test_yieldsMachineInClass",
                  "test_yieldsMachineInNestedClassInModule",
                  0.9173866406781822
                ],
                [
                  "test_yieldsMachineInClassInModule",
                  "test_ignoresImportedClass",
                  0.8111278498158
                ],
                [
                  "test_yieldsMachineInClassInModule",
                  "test_infiniteLoop",
                  0.5749193098906611
                ],
                [
                  "test_yieldsMachine",
                  "test_yieldsMachineInClassInModule",
                  0.7886014711044821
                ],
                [
                  "test_yieldsMachineInClassInModule",
                  "test_descendsIntoPackages",
                  0.7970297044219264
                ],
                [
                  "test_yieldsMachine",
                  "test_infiniteLoop",
                  0.5897532576353801
                ],
                [
                  "test_yieldsMachineInModule",
                  "test_ignoresImportedClass",
                  0.7022866378759677
                ],
                [
                  "test_yieldsMachineInClassInModule",
                  "test_yieldsMachineInNestedClassInModule",
                  0.9566710098575028
                ],
                [
                  "test_yieldsMachine",
                  "test_ignoresImportedClass",
                  0.7016799106457515
                ],
                [
                  "test_yieldsMachineInModule",
                  "test_infiniteLoop",
                  0.5825256717021924
                ],
                [
                  "test_ignoresImportedClass",
                  "test_descendsIntoPackages",
                  0.6564451608056003
                ],
                [
                  "test_yieldsMachineInNestedClass",
                  "test_ignoresImportedClass",
                  0.7895192891656301
                ],
                [
                  "test_yieldsMachineInNestedClassInModule",
                  "test_infiniteLoop",
                  0.5473133644958584
                ],
                [
                  "test_yieldsMachineInNestedClass",
                  "test_yieldsMachineInNestedClassInModule",
                  0.9674832309958468
                ],
                [
                  "test_yieldsMachineInClass",
                  "test_yieldsMachineInClassInModule",
                  0.9609365167508828
                ],
                [
                  "test_yieldsMachineInClass",
                  "test_yieldsMachineInNestedClass",
                  0.9580321170475256
                ],
                [
                  "test_yieldsMachine",
                  "test_yieldsMachineInClass",
                  0.7960015354880126
                ],
                [
                  "test_yieldsMachineInClass",
                  "test_infiniteLoop",
                  0.5492512900695649
                ],
                [
                  "test_yieldsMachineInNestedClass",
                  "test_yieldsMachineInModule",
                  0.752093385712515
                ],
                [
                  "test_yieldsMachineInNestedClass",
                  "test_descendsIntoPackages",
                  0.75922235264536
                ],
                [
                  "test_yieldsMachineInClass",
                  "test_ignoresImportedClass",
                  0.8177678453615626
                ],
                [
                  "test_yieldsMachineInNestedClass",
                  "test_yieldsMachineInClassInModule",
                  0.9310398647034872
                ],
                [
                  "test_yieldsMachineInNestedClassInModule",
                  "test_descendsIntoPackages",
                  0.7635413503464782
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_yieldsMachineInClass",
                "false"
              ],
              [
                "test_yieldsMachine",
                "false"
              ],
              [
                "test_descendsIntoPackages",
                "false"
              ],
              [
                "test_yieldsMachineInNestedClassInModule",
                "false"
              ],
              [
                "test_yieldsMachineInModule",
                "false"
              ],
              [
                "test_yieldsMachineInClassInModule",
                "false"
              ],
              [
                "test_yieldsMachineInNestedClass",
                "false"
              ],
              [
                "test_infiniteLoop",
                "false"
              ],
              [
                "test_ignoresImportedClass",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 9
      },
      {
        "name": "WrapFQPNTests",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_singleModuleObject",
                  "[]"
                ],
                [
                  "test_multiplePackagesObject",
                  "[]"
                ],
                [
                  "test_failsWithMultiplePackagesMissingModuleOrPackage",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_failsWithBadDotting",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_failsWithMissingSingleModuleOrPackage",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_singlePackage",
                  "[]"
                ],
                [
                  "test_failsWithEmptyFQPN",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_multiplePackages",
                  "[]"
                ],
                [
                  "test_multiplePackagesFinalModule",
                  "[]"
                ],
                [
                  "test_singleModule",
                  "[PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertIs]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_singleModuleObject",
                  "[]"
                ],
                [
                  "test_multiplePackagesObject",
                  "[]"
                ],
                [
                  "test_failsWithMultiplePackagesMissingModuleOrPackage",
                  "[]"
                ],
                [
                  "test_failsWithBadDotting",
                  "[]"
                ],
                [
                  "test_failsWithMissingSingleModuleOrPackage",
                  "[]"
                ],
                [
                  "test_singlePackage",
                  "[]"
                ],
                [
                  "test_failsWithEmptyFQPN",
                  "[]"
                ],
                [
                  "test_multiplePackages",
                  "[]"
                ],
                [
                  "test_multiplePackagesFinalModule",
                  "[]"
                ],
                [
                  "test_singleModule",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_singleModuleObject",
                  "false"
                ],
                [
                  "test_multiplePackagesObject",
                  "true"
                ],
                [
                  "test_failsWithMultiplePackagesMissingModuleOrPackage",
                  "true"
                ],
                [
                  "test_failsWithBadDotting",
                  "true"
                ],
                [
                  "test_failsWithMissingSingleModuleOrPackage",
                  "false"
                ],
                [
                  "test_singlePackage",
                  "false"
                ],
                [
                  "test_failsWithEmptyFQPN",
                  "false"
                ],
                [
                  "test_multiplePackages",
                  "false"
                ],
                [
                  "test_multiplePackagesFinalModule",
                  "false"
                ],
                [
                  "test_singleModule",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_singleModuleObject",
                  "false"
                ],
                [
                  "test_multiplePackagesObject",
                  "false"
                ],
                [
                  "test_failsWithMultiplePackagesMissingModuleOrPackage",
                  "false"
                ],
                [
                  "test_failsWithBadDotting",
                  "false"
                ],
                [
                  "test_failsWithMissingSingleModuleOrPackage",
                  "false"
                ],
                [
                  "test_singlePackage",
                  "false"
                ],
                [
                  "test_failsWithEmptyFQPN",
                  "false"
                ],
                [
                  "test_multiplePackages",
                  "false"
                ],
                [
                  "test_multiplePackagesFinalModule",
                  "false"
                ],
                [
                  "test_singleModule",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_singleModuleObject",
                  "false"
                ],
                [
                  "test_multiplePackagesObject",
                  "false"
                ],
                [
                  "test_failsWithMultiplePackagesMissingModuleOrPackage",
                  "false"
                ],
                [
                  "test_failsWithBadDotting",
                  "false"
                ],
                [
                  "test_failsWithMissingSingleModuleOrPackage",
                  "false"
                ],
                [
                  "test_singlePackage",
                  "false"
                ],
                [
                  "test_failsWithEmptyFQPN",
                  "false"
                ],
                [
                  "test_multiplePackages",
                  "false"
                ],
                [
                  "test_multiplePackagesFinalModule",
                  "false"
                ],
                [
                  "test_singleModule",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_singleModuleObject",
                  "false"
                ],
                [
                  "test_multiplePackagesObject",
                  "false"
                ],
                [
                  "test_failsWithMultiplePackagesMissingModuleOrPackage",
                  "false"
                ],
                [
                  "test_failsWithBadDotting",
                  "false"
                ],
                [
                  "test_failsWithMissingSingleModuleOrPackage",
                  "false"
                ],
                [
                  "test_singlePackage",
                  "false"
                ],
                [
                  "test_failsWithEmptyFQPN",
                  "false"
                ],
                [
                  "test_multiplePackages",
                  "false"
                ],
                [
                  "test_multiplePackagesFinalModule",
                  "false"
                ],
                [
                  "test_singleModule",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_singleModuleObject",
                "false"
              ],
              [
                "test_multiplePackagesObject",
                "false"
              ],
              [
                "test_failsWithMultiplePackagesMissingModuleOrPackage",
                "false"
              ],
              [
                "test_failsWithBadDotting",
                "false"
              ],
              [
                "test_failsWithMissingSingleModuleOrPackage",
                "false"
              ],
              [
                "test_singlePackage",
                "false"
              ],
              [
                "test_failsWithEmptyFQPN",
                "false"
              ],
              [
                "test_multiplePackages",
                "false"
              ],
              [
                "test_multiplePackagesFinalModule",
                "false"
              ],
              [
                "test_singleModule",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_singleModuleObject",
                "false"
              ],
              [
                "test_multiplePackagesObject",
                "false"
              ],
              [
                "test_failsWithMultiplePackagesMissingModuleOrPackage",
                "false"
              ],
              [
                "test_failsWithBadDotting",
                "false"
              ],
              [
                "test_failsWithMissingSingleModuleOrPackage",
                "false"
              ],
              [
                "test_singlePackage",
                "false"
              ],
              [
                "test_failsWithEmptyFQPN",
                "false"
              ],
              [
                "test_multiplePackages",
                "false"
              ],
              [
                "test_multiplePackagesFinalModule",
                "false"
              ],
              [
                "test_singleModule",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_singleModuleObject",
                [
                  "self.PythonAttribute",
                  "self.NoModule",
                  "self.NoObject",
                  "self.InvalidFQPN",
                  "self.PythonModule"
                ]
              ],
              [
                "test_multiplePackagesObject",
                [
                  "self.PythonAttribute",
                  "self.NoModule",
                  "self.NoObject",
                  "self.InvalidFQPN",
                  "self.PythonModule"
                ]
              ],
              [
                "test_failsWithMultiplePackagesMissingModuleOrPackage",
                [
                  "self.PythonAttribute",
                  "self.NoModule",
                  "self.InvalidFQPN",
                  "self.PythonModule"
                ]
              ],
              [
                "test_failsWithBadDotting",
                [
                  "self.PythonAttribute",
                  "self.NoModule",
                  "self.NoObject",
                  "self.PythonModule"
                ]
              ],
              [
                "test_failsWithMissingSingleModuleOrPackage",
                [
                  "self.PythonAttribute",
                  "self.NoObject",
                  "self.InvalidFQPN",
                  "self.PythonModule"
                ]
              ],
              [
                "test_singlePackage",
                [
                  "self.PythonAttribute",
                  "self.NoModule",
                  "self.NoObject",
                  "self.InvalidFQPN",
                  "self.PythonModule"
                ]
              ],
              [
                "test_failsWithEmptyFQPN",
                [
                  "self.PythonAttribute",
                  "self.NoModule",
                  "self.NoObject",
                  "self.PythonModule"
                ]
              ],
              [
                "test_multiplePackages",
                [
                  "self.PythonAttribute",
                  "self.NoModule",
                  "self.NoObject",
                  "self.InvalidFQPN",
                  "self.PythonModule"
                ]
              ],
              [
                "test_multiplePackagesFinalModule",
                [
                  "self.PythonAttribute",
                  "self.NoModule",
                  "self.NoObject",
                  "self.InvalidFQPN",
                  "self.PythonModule"
                ]
              ],
              [
                "test_singleModule",
                [
                  "self.PythonAttribute",
                  "self.NoModule",
                  "self.NoObject",
                  "self.InvalidFQPN"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_singleModuleObject",
                "false"
              ],
              [
                "test_multiplePackagesObject",
                "false"
              ],
              [
                "test_failsWithMultiplePackagesMissingModuleOrPackage",
                "false"
              ],
              [
                "test_failsWithBadDotting",
                "false"
              ],
              [
                "test_failsWithMissingSingleModuleOrPackage",
                "false"
              ],
              [
                "test_singlePackage",
                "false"
              ],
              [
                "test_failsWithEmptyFQPN",
                "false"
              ],
              [
                "test_multiplePackages",
                "false"
              ],
              [
                "test_multiplePackagesFinalModule",
                "false"
              ],
              [
                "test_singleModule",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_singleModuleObject",
                "false"
              ],
              [
                "test_multiplePackagesObject",
                "false"
              ],
              [
                "test_failsWithMultiplePackagesMissingModuleOrPackage",
                "false"
              ],
              [
                "test_failsWithBadDotting",
                "false"
              ],
              [
                "test_failsWithMissingSingleModuleOrPackage",
                "false"
              ],
              [
                "test_singlePackage",
                "false"
              ],
              [
                "test_failsWithEmptyFQPN",
                "false"
              ],
              [
                "test_multiplePackages",
                "false"
              ],
              [
                "test_multiplePackagesFinalModule",
                "false"
              ],
              [
                "test_singleModule",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_singleModuleObject",
                  "0"
                ],
                [
                  "test_multiplePackagesObject",
                  "0"
                ],
                [
                  "test_failsWithMultiplePackagesMissingModuleOrPackage",
                  "0"
                ],
                [
                  "test_failsWithBadDotting",
                  "0"
                ],
                [
                  "test_failsWithMissingSingleModuleOrPackage",
                  "0"
                ],
                [
                  "test_singlePackage",
                  "0"
                ],
                [
                  "test_failsWithEmptyFQPN",
                  "0"
                ],
                [
                  "test_multiplePackages",
                  "0"
                ],
                [
                  "test_multiplePackagesFinalModule",
                  "0"
                ],
                [
                  "test_singleModule",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_singleModuleObject",
                  "0"
                ],
                [
                  "test_multiplePackagesObject",
                  "0"
                ],
                [
                  "test_failsWithMultiplePackagesMissingModuleOrPackage",
                  "0"
                ],
                [
                  "test_failsWithBadDotting",
                  "0"
                ],
                [
                  "test_failsWithMissingSingleModuleOrPackage",
                  "0"
                ],
                [
                  "test_singlePackage",
                  "0"
                ],
                [
                  "test_failsWithEmptyFQPN",
                  "0"
                ],
                [
                  "test_multiplePackages",
                  "0"
                ],
                [
                  "test_multiplePackagesFinalModule",
                  "0"
                ],
                [
                  "test_singleModule",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_singleModuleObject",
                "false"
              ],
              [
                "test_multiplePackagesObject",
                "false"
              ],
              [
                "test_failsWithMultiplePackagesMissingModuleOrPackage",
                "false"
              ],
              [
                "test_failsWithBadDotting",
                "false"
              ],
              [
                "test_failsWithMissingSingleModuleOrPackage",
                "false"
              ],
              [
                "test_singlePackage",
                "false"
              ],
              [
                "test_failsWithEmptyFQPN",
                "false"
              ],
              [
                "test_multiplePackages",
                "false"
              ],
              [
                "test_multiplePackagesFinalModule",
                "false"
              ],
              [
                "test_singleModule",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_singleModuleObject",
                "false"
              ],
              [
                "test_multiplePackagesObject",
                "false"
              ],
              [
                "test_failsWithMultiplePackagesMissingModuleOrPackage",
                "false"
              ],
              [
                "test_failsWithBadDotting",
                "false"
              ],
              [
                "test_failsWithMissingSingleModuleOrPackage",
                "false"
              ],
              [
                "test_singlePackage",
                "false"
              ],
              [
                "test_failsWithEmptyFQPN",
                "false"
              ],
              [
                "test_multiplePackages",
                "false"
              ],
              [
                "test_multiplePackagesFinalModule",
                "false"
              ],
              [
                "test_singleModule",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_singleModuleObject",
                "1"
              ],
              [
                "test_multiplePackagesObject",
                "1"
              ],
              [
                "test_failsWithMultiplePackagesMissingModuleOrPackage",
                "1"
              ],
              [
                "test_failsWithBadDotting",
                "1"
              ],
              [
                "test_failsWithMissingSingleModuleOrPackage",
                "1"
              ],
              [
                "test_singlePackage",
                "1"
              ],
              [
                "test_failsWithEmptyFQPN",
                "1"
              ],
              [
                "test_multiplePackages",
                "1"
              ],
              [
                "test_multiplePackagesFinalModule",
                "1"
              ],
              [
                "test_singleModule",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_singleModuleObject",
                []
              ],
              [
                "test_multiplePackagesObject",
                []
              ],
              [
                "test_failsWithMultiplePackagesMissingModuleOrPackage",
                []
              ],
              [
                "test_failsWithBadDotting",
                []
              ],
              [
                "test_failsWithMissingSingleModuleOrPackage",
                []
              ],
              [
                "test_singlePackage",
                []
              ],
              [
                "test_failsWithEmptyFQPN",
                []
              ],
              [
                "test_multiplePackages",
                []
              ],
              [
                "test_multiplePackagesFinalModule",
                []
              ],
              [
                "test_singleModule",
                [
                  "moduleWrapper"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_singleModuleObject",
                [
                  "self.wrapFQPN"
                ]
              ],
              [
                "test_multiplePackagesObject",
                [
                  "self.wrapFQPN"
                ]
              ],
              [
                "test_failsWithMultiplePackagesMissingModuleOrPackage",
                [
                  "self.NoObject",
                  "self.wrapFQPN"
                ]
              ],
              [
                "test_failsWithBadDotting",
                [
                  "self.InvalidFQPN",
                  "self.wrapFQPN"
                ]
              ],
              [
                "test_failsWithMissingSingleModuleOrPackage",
                [
                  "self.NoModule",
                  "self.wrapFQPN"
                ]
              ],
              [
                "test_singlePackage",
                [
                  "self.wrapFQPN"
                ]
              ],
              [
                "test_failsWithEmptyFQPN",
                [
                  "self.InvalidFQPN",
                  "self.wrapFQPN"
                ]
              ],
              [
                "test_multiplePackages",
                [
                  "self.wrapFQPN"
                ]
              ],
              [
                "test_multiplePackagesFinalModule",
                [
                  "self.wrapFQPN"
                ]
              ],
              [
                "test_singleModule",
                [
                  "self.wrapFQPN",
                  "self.PythonModule"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5246668854259654,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_multiplePackages",
                  "test_failsWithMultiplePackagesMissingModuleOrPackage",
                  0.4246502900652006
                ],
                [
                  "test_failsWithBadDotting",
                  "test_singleModule",
                  0.3765037352813515
                ],
                [
                  "test_singleModule",
                  "test_multiplePackages",
                  0.6562777210098555
                ],
                [
                  "test_multiplePackages",
                  "test_multiplePackagesObject",
                  0.6182364627083744
                ],
                [
                  "test_failsWithEmptyFQPN",
                  "test_failsWithMultiplePackagesMissingModuleOrPackage",
                  0.5668434311252413
                ],
                [
                  "test_singlePackage",
                  "test_singleModuleObject",
                  0.7216878364870323
                ],
                [
                  "test_multiplePackages",
                  "test_multiplePackagesFinalModule",
                  0.7597371763975863
                ],
                [
                  "test_failsWithEmptyFQPN",
                  "test_singleModuleObject",
                  0.406578556307363
                ],
                [
                  "test_failsWithEmptyFQPN",
                  "test_multiplePackagesObject",
                  0.35122309752289443
                ],
                [
                  "test_failsWithEmptyFQPN",
                  "test_multiplePackagesFinalModule",
                  0.33864810597807815
                ],
                [
                  "test_multiplePackages",
                  "test_singleModuleObject",
                  0.6891687876063168
                ],
                [
                  "test_failsWithEmptyFQPN",
                  "test_failsWithMissingSingleModuleOrPackage",
                  0.544949260913066
                ],
                [
                  "test_failsWithBadDotting",
                  "test_multiplePackages",
                  0.4010903143747116
                ],
                [
                  "test_singlePackage",
                  "test_multiplePackagesFinalModule",
                  0.6364688465216445
                ],
                [
                  "test_failsWithBadDotting",
                  "test_multiplePackagesFinalModule",
                  0.35283741601664204
                ],
                [
                  "test_singlePackage",
                  "test_failsWithMultiplePackagesMissingModuleOrPackage",
                  0.44353276257274377
                ],
                [
                  "test_failsWithEmptyFQPN",
                  "test_singlePackage",
                  0.3651483716701107
                ],
                [
                  "test_failsWithMissingSingleModuleOrPackage",
                  "test_multiplePackagesObject",
                  0.38910738429647607
                ],
                [
                  "test_failsWithBadDotting",
                  "test_singleModuleObject",
                  0.38007602280760266
                ],
                [
                  "test_failsWithMissingSingleModuleOrPackage",
                  "test_singleModuleObject",
                  0.5099504626286642
                ],
                [
                  "test_failsWithBadDotting",
                  "test_multiplePackagesObject",
                  0.3947922042034078
                ],
                [
                  "test_failsWithMissingSingleModuleOrPackage",
                  "test_multiplePackagesFinalModule",
                  0.44973403502592757
                ],
                [
                  "test_failsWithEmptyFQPN",
                  "test_singleModule",
                  0.3643993485805122
                ],
                [
                  "test_singleModuleObject",
                  "test_failsWithMultiplePackagesMissingModuleOrPackage",
                  0.42069260549380105
                ],
                [
                  "test_failsWithBadDotting",
                  "test_singlePackage",
                  0.3840147396408606
                ],
                [
                  "test_failsWithMissingSingleModuleOrPackage",
                  "test_singlePackage",
                  0.5863019699779287
                ],
                [
                  "test_singleModule",
                  "test_failsWithMissingSingleModuleOrPackage",
                  0.567369016246151
                ],
                [
                  "test_multiplePackagesFinalModule",
                  "test_failsWithMultiplePackagesMissingModuleOrPackage",
                  0.38714713479666185
                ],
                [
                  "test_failsWithEmptyFQPN",
                  "test_failsWithBadDotting",
                  0.7084919084320761
                ],
                [
                  "test_multiplePackagesFinalModule",
                  "test_multiplePackagesObject",
                  0.6888892626353349
                ],
                [
                  "test_failsWithEmptyFQPN",
                  "test_multiplePackages",
                  0.38138503569823695
                ],
                [
                  "test_singleModule",
                  "test_failsWithMultiplePackagesMissingModuleOrPackage",
                  0.40983606557377056
                ],
                [
                  "test_multiplePackagesFinalModule",
                  "test_singleModuleObject",
                  0.629940788348712
                ],
                [
                  "test_singleModule",
                  "test_multiplePackagesObject",
                  0.49225179978374023
                ],
                [
                  "test_singlePackage",
                  "test_multiplePackages",
                  0.761589744806178
                ],
                [
                  "test_singleModule",
                  "test_multiplePackagesFinalModule",
                  0.6129829634280479
                ],
                [
                  "test_singleModule",
                  "test_singleModuleObject",
                  0.6950573482071496
                ],
                [
                  "test_multiplePackagesObject",
                  "test_failsWithMultiplePackagesMissingModuleOrPackage",
                  0.40474036871107527
                ],
                [
                  "test_failsWithMissingSingleModuleOrPackage",
                  "test_multiplePackages",
                  0.48247525236638356
                ],
                [
                  "test_failsWithBadDotting",
                  "test_failsWithMultiplePackagesMissingModuleOrPackage",
                  0.6095774761698072
                ],
                [
                  "test_failsWithMissingSingleModuleOrPackage",
                  "test_failsWithMultiplePackagesMissingModuleOrPackage",
                  0.7564920216615347
                ],
                [
                  "test_singleModuleObject",
                  "test_multiplePackagesObject",
                  0.6224605791936401
                ],
                [
                  "test_failsWithBadDotting",
                  "test_failsWithMissingSingleModuleOrPackage",
                  0.5170876899950191
                ],
                [
                  "test_singlePackage",
                  "test_multiplePackagesObject",
                  0.5549215766253638
                ],
                [
                  "test_singleModule",
                  "test_singlePackage",
                  0.7946628662761659
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_singleModuleObject",
                "false"
              ],
              [
                "test_multiplePackagesObject",
                "false"
              ],
              [
                "test_failsWithMultiplePackagesMissingModuleOrPackage",
                "false"
              ],
              [
                "test_failsWithBadDotting",
                "false"
              ],
              [
                "test_failsWithMissingSingleModuleOrPackage",
                "false"
              ],
              [
                "test_singlePackage",
                "false"
              ],
              [
                "test_failsWithEmptyFQPN",
                "false"
              ],
              [
                "test_multiplePackages",
                "false"
              ],
              [
                "test_multiplePackagesFinalModule",
                "false"
              ],
              [
                "test_singleModule",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 10
      },
      {
        "name": "FindMachinesIntegrationTests",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_discoverAll",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_discoverAll",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_discoverAll",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_discoverAll",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_discoverAll",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_discoverAll",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_discoverAll",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_discoverAll",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_discoverAll",
                [
                  "self.pythonPath"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_discoverAll",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_discoverAll",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_discoverAll",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_discoverAll",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_discoverAll",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_discoverAll",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_discoverAll",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_discoverAll",
                [
                  "mRootLevel",
                  "tpRootLevel",
                  "mPythonClass",
                  "mRLAttr",
                  "machines",
                  "mPCAttr",
                  "tpPythonClass",
                  "expectedMachines"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_discoverAll",
                [
                  "self.findMachines",
                  "self.packageDict",
                  "self.moduleDict"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_discoverAll",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "automat_\u0026__test_\u0026_test_visualize.py",
    "testCases": [
      {
        "name": "ElementMakerTests",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_quotesAttrs",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_noAttrs",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_sortsAttrs",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_quotesAttrs",
                  "[]"
                ],
                [
                  "test_noAttrs",
                  "[]"
                ],
                [
                  "test_sortsAttrs",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_quotesAttrs",
                  "false"
                ],
                [
                  "test_noAttrs",
                  "false"
                ],
                [
                  "test_sortsAttrs",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_quotesAttrs",
                  "false"
                ],
                [
                  "test_noAttrs",
                  "false"
                ],
                [
                  "test_sortsAttrs",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_quotesAttrs",
                  "false"
                ],
                [
                  "test_noAttrs",
                  "false"
                ],
                [
                  "test_sortsAttrs",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_quotesAttrs",
                  "false"
                ],
                [
                  "test_noAttrs",
                  "false"
                ],
                [
                  "test_sortsAttrs",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_quotesAttrs",
                "false"
              ],
              [
                "test_noAttrs",
                "false"
              ],
              [
                "test_sortsAttrs",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_quotesAttrs",
                "false"
              ],
              [
                "test_noAttrs",
                "false"
              ],
              [
                "test_sortsAttrs",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_quotesAttrs",
                []
              ],
              [
                "test_noAttrs",
                []
              ],
              [
                "test_sortsAttrs",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_quotesAttrs",
                "false"
              ],
              [
                "test_noAttrs",
                "false"
              ],
              [
                "test_sortsAttrs",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_quotesAttrs",
                "false"
              ],
              [
                "test_noAttrs",
                "false"
              ],
              [
                "test_sortsAttrs",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_quotesAttrs",
                  "0"
                ],
                [
                  "test_noAttrs",
                  "0"
                ],
                [
                  "test_sortsAttrs",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_quotesAttrs",
                  "0"
                ],
                [
                  "test_noAttrs",
                  "0"
                ],
                [
                  "test_sortsAttrs",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_quotesAttrs",
                "false"
              ],
              [
                "test_noAttrs",
                "false"
              ],
              [
                "test_sortsAttrs",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_quotesAttrs",
                "false"
              ],
              [
                "test_noAttrs",
                "false"
              ],
              [
                "test_sortsAttrs",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_quotesAttrs",
                "1"
              ],
              [
                "test_noAttrs",
                "1"
              ],
              [
                "test_sortsAttrs",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_quotesAttrs",
                [
                  "expected"
                ]
              ],
              [
                "test_noAttrs",
                [
                  "expected"
                ]
              ],
              [
                "test_sortsAttrs",
                [
                  "expected"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_quotesAttrs",
                [
                  "self.elementMaker"
                ]
              ],
              [
                "test_noAttrs",
                [
                  "self.elementMaker"
                ]
              ],
              [
                "test_sortsAttrs",
                [
                  "self.elementMaker"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5006054168665269,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_quotesAttrs",
                  "test_noAttrs",
                  0.42067361711287704
                ],
                [
                  "test_sortsAttrs",
                  "test_noAttrs",
                  0.501739135685812
                ],
                [
                  "test_sortsAttrs",
                  "test_quotesAttrs",
                  0.5794034978008918
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_quotesAttrs",
                "false"
              ],
              [
                "test_noAttrs",
                "false"
              ],
              [
                "test_sortsAttrs",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      },
      {
        "name": "TableMakerTests",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_withOutputLabels",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_inputLabelRow",
                  "[PyCallExpression: self.assertGreater, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_noOutputLabels",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertNotIn]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_withOutputLabels",
                  "[]"
                ],
                [
                  "test_inputLabelRow",
                  "[]"
                ],
                [
                  "test_noOutputLabels",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_withOutputLabels",
                  "false"
                ],
                [
                  "test_inputLabelRow",
                  "true"
                ],
                [
                  "test_noOutputLabels",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_withOutputLabels",
                  "false"
                ],
                [
                  "test_inputLabelRow",
                  "false"
                ],
                [
                  "test_noOutputLabels",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_withOutputLabels",
                  "false"
                ],
                [
                  "test_inputLabelRow",
                  "false"
                ],
                [
                  "test_noOutputLabels",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_withOutputLabels",
                  "false"
                ],
                [
                  "test_inputLabelRow",
                  "false"
                ],
                [
                  "test_noOutputLabels",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_withOutputLabels",
                "false"
              ],
              [
                "test_inputLabelRow",
                "false"
              ],
              [
                "test_noOutputLabels",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_withOutputLabels",
                "false"
              ],
              [
                "test_inputLabelRow",
                "false"
              ],
              [
                "test_noOutputLabels",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_withOutputLabels",
                []
              ],
              [
                "test_inputLabelRow",
                []
              ],
              [
                "test_noOutputLabels",
                [
                  "self.inputLabel"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_withOutputLabels",
                "false"
              ],
              [
                "test_inputLabelRow",
                "false"
              ],
              [
                "test_noOutputLabels",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_withOutputLabels",
                "true"
              ],
              [
                "test_inputLabelRow",
                "true"
              ],
              [
                "test_noOutputLabels",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_withOutputLabels",
                  "0"
                ],
                [
                  "test_inputLabelRow",
                  "0"
                ],
                [
                  "test_noOutputLabels",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_withOutputLabels",
                  "0"
                ],
                [
                  "test_inputLabelRow",
                  "0"
                ],
                [
                  "test_noOutputLabels",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_withOutputLabels",
                "false"
              ],
              [
                "test_inputLabelRow",
                "false"
              ],
              [
                "test_noOutputLabels",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_withOutputLabels",
                "false"
              ],
              [
                "test_inputLabelRow",
                "false"
              ],
              [
                "test_noOutputLabels",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_withOutputLabels",
                "3"
              ],
              [
                "test_inputLabelRow",
                "4"
              ],
              [
                "test_noOutputLabels",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_withOutputLabels",
                [
                  "outputRow",
                  "table",
                  "inputRow"
                ]
              ],
              [
                "test_inputLabelRow",
                [
                  "inputLabelRow",
                  "portCandidates",
                  "table"
                ]
              ],
              [
                "test_noOutputLabels",
                [
                  "inputLabelRow",
                  "table"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_withOutputLabels",
                [
                  "self.port",
                  "self.inputLabel",
                  "self.tableMaker"
                ]
              ],
              [
                "test_inputLabelRow",
                [
                  "self.port",
                  "self.inputLabel",
                  "self.tableMaker"
                ]
              ],
              [
                "test_noOutputLabels",
                [
                  "self.port",
                  "self.tableMaker"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6617419576920591,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_noOutputLabels",
                  "test_withOutputLabels",
                  0.6363961030678928
                ],
                [
                  "test_inputLabelRow",
                  "test_noOutputLabels",
                  0.5793616301388602
                ],
                [
                  "test_inputLabelRow",
                  "test_withOutputLabels",
                  0.7694681398694242
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_withOutputLabels",
                "false"
              ],
              [
                "test_inputLabelRow",
                "false"
              ],
              [
                "test_noOutputLabels",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      },
      {
        "name": "IntegrationTests",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_validGraphviz",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_validGraphviz",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_validGraphviz",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_validGraphviz",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_validGraphviz",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_validGraphviz",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_validGraphviz",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_validGraphviz",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_validGraphviz",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_validGraphviz",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_validGraphviz",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_validGraphviz",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_validGraphviz",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_validGraphviz",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_validGraphviz",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_validGraphviz",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_validGraphviz",
                [
                  "p",
                  "err",
                  "out"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_validGraphviz",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_validGraphviz",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "SpotChecks",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_containsMachineFeatures",
                  "[PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_containsMachineFeatures",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_containsMachineFeatures",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_containsMachineFeatures",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_containsMachineFeatures",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_containsMachineFeatures",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_containsMachineFeatures",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_containsMachineFeatures",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_containsMachineFeatures",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_containsMachineFeatures",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_containsMachineFeatures",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_containsMachineFeatures",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_containsMachineFeatures",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_containsMachineFeatures",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_containsMachineFeatures",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_containsMachineFeatures",
                "4"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_containsMachineFeatures",
                [
                  "gvout"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_containsMachineFeatures",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_containsMachineFeatures",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "VisualizeToolTests",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_onlySaveDot",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_checksCurrentDirectory",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_quietHidesOutput",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_saveDotAndImagesInDifferentDirectories",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_saveDotAndImagesInSameDirectory",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_saveOnlyImage",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_onlySaveDot",
                  "[]"
                ],
                [
                  "test_checksCurrentDirectory",
                  "[]"
                ],
                [
                  "test_quietHidesOutput",
                  "[]"
                ],
                [
                  "test_saveDotAndImagesInDifferentDirectories",
                  "[]"
                ],
                [
                  "test_saveDotAndImagesInSameDirectory",
                  "[]"
                ],
                [
                  "test_saveOnlyImage",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_onlySaveDot",
                  "true"
                ],
                [
                  "test_checksCurrentDirectory",
                  "false"
                ],
                [
                  "test_quietHidesOutput",
                  "false"
                ],
                [
                  "test_saveDotAndImagesInDifferentDirectories",
                  "false"
                ],
                [
                  "test_saveDotAndImagesInSameDirectory",
                  "false"
                ],
                [
                  "test_saveOnlyImage",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_onlySaveDot",
                  "false"
                ],
                [
                  "test_checksCurrentDirectory",
                  "false"
                ],
                [
                  "test_quietHidesOutput",
                  "false"
                ],
                [
                  "test_saveDotAndImagesInDifferentDirectories",
                  "true"
                ],
                [
                  "test_saveDotAndImagesInSameDirectory",
                  "true"
                ],
                [
                  "test_saveOnlyImage",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_onlySaveDot",
                  "false"
                ],
                [
                  "test_checksCurrentDirectory",
                  "false"
                ],
                [
                  "test_quietHidesOutput",
                  "true"
                ],
                [
                  "test_saveDotAndImagesInDifferentDirectories",
                  "false"
                ],
                [
                  "test_saveDotAndImagesInSameDirectory",
                  "false"
                ],
                [
                  "test_saveOnlyImage",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_onlySaveDot",
                  "false"
                ],
                [
                  "test_checksCurrentDirectory",
                  "false"
                ],
                [
                  "test_quietHidesOutput",
                  "false"
                ],
                [
                  "test_saveDotAndImagesInDifferentDirectories",
                  "false"
                ],
                [
                  "test_saveDotAndImagesInSameDirectory",
                  "false"
                ],
                [
                  "test_saveOnlyImage",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_onlySaveDot",
                "false"
              ],
              [
                "test_checksCurrentDirectory",
                "false"
              ],
              [
                "test_quietHidesOutput",
                "false"
              ],
              [
                "test_saveDotAndImagesInDifferentDirectories",
                "false"
              ],
              [
                "test_saveDotAndImagesInSameDirectory",
                "false"
              ],
              [
                "test_saveOnlyImage",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_onlySaveDot",
                "false"
              ],
              [
                "test_checksCurrentDirectory",
                "false"
              ],
              [
                "test_quietHidesOutput",
                "false"
              ],
              [
                "test_saveDotAndImagesInDifferentDirectories",
                "false"
              ],
              [
                "test_saveDotAndImagesInSameDirectory",
                "false"
              ],
              [
                "test_saveOnlyImage",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_onlySaveDot",
                [
                  "self.fakeDigraph",
                  "self.fakeProgname",
                  "self.fakeSysPath"
                ]
              ],
              [
                "test_checksCurrentDirectory",
                [
                  "self.fakeDigraph",
                  "self.collectedOutput",
                  "self.fakeProgname",
                  "self.digraphRecorder"
                ]
              ],
              [
                "test_quietHidesOutput",
                [
                  "self.fakeDigraph",
                  "self.fakeProgname",
                  "self.digraphRecorder",
                  "self.fakeSysPath"
                ]
              ],
              [
                "test_saveDotAndImagesInDifferentDirectories",
                [
                  "self.fakeDigraph",
                  "self.fakeProgname",
                  "self.fakeSysPath"
                ]
              ],
              [
                "test_saveDotAndImagesInSameDirectory",
                [
                  "self.fakeDigraph",
                  "self.fakeProgname",
                  "self.fakeSysPath"
                ]
              ],
              [
                "test_saveOnlyImage",
                [
                  "self.fakeDigraph",
                  "self.fakeProgname",
                  "self.fakeSysPath"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_onlySaveDot",
                "false"
              ],
              [
                "test_checksCurrentDirectory",
                "false"
              ],
              [
                "test_quietHidesOutput",
                "false"
              ],
              [
                "test_saveDotAndImagesInDifferentDirectories",
                "false"
              ],
              [
                "test_saveDotAndImagesInSameDirectory",
                "false"
              ],
              [
                "test_saveOnlyImage",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_onlySaveDot",
                "true"
              ],
              [
                "test_checksCurrentDirectory",
                "false"
              ],
              [
                "test_quietHidesOutput",
                "false"
              ],
              [
                "test_saveDotAndImagesInDifferentDirectories",
                "true"
              ],
              [
                "test_saveDotAndImagesInSameDirectory",
                "true"
              ],
              [
                "test_saveOnlyImage",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_onlySaveDot",
                  "0"
                ],
                [
                  "test_checksCurrentDirectory",
                  "0"
                ],
                [
                  "test_quietHidesOutput",
                  "0"
                ],
                [
                  "test_saveDotAndImagesInDifferentDirectories",
                  "0"
                ],
                [
                  "test_saveDotAndImagesInSameDirectory",
                  "0"
                ],
                [
                  "test_saveOnlyImage",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_onlySaveDot",
                  "0"
                ],
                [
                  "test_checksCurrentDirectory",
                  "0"
                ],
                [
                  "test_quietHidesOutput",
                  "0"
                ],
                [
                  "test_saveDotAndImagesInDifferentDirectories",
                  "0"
                ],
                [
                  "test_saveDotAndImagesInSameDirectory",
                  "0"
                ],
                [
                  "test_saveOnlyImage",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_onlySaveDot",
                "false"
              ],
              [
                "test_checksCurrentDirectory",
                "false"
              ],
              [
                "test_quietHidesOutput",
                "false"
              ],
              [
                "test_saveDotAndImagesInDifferentDirectories",
                "false"
              ],
              [
                "test_saveDotAndImagesInSameDirectory",
                "false"
              ],
              [
                "test_saveOnlyImage",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_onlySaveDot",
                "false"
              ],
              [
                "test_checksCurrentDirectory",
                "false"
              ],
              [
                "test_quietHidesOutput",
                "false"
              ],
              [
                "test_saveDotAndImagesInDifferentDirectories",
                "false"
              ],
              [
                "test_saveDotAndImagesInSameDirectory",
                "false"
              ],
              [
                "test_saveOnlyImage",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_onlySaveDot",
                "4"
              ],
              [
                "test_checksCurrentDirectory",
                "1"
              ],
              [
                "test_quietHidesOutput",
                "2"
              ],
              [
                "test_saveDotAndImagesInDifferentDirectories",
                "7"
              ],
              [
                "test_saveDotAndImagesInSameDirectory",
                "5"
              ],
              [
                "test_saveOnlyImage",
                "5"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_onlySaveDot",
                [
                  "call"
                ]
              ],
              [
                "test_checksCurrentDirectory",
                []
              ],
              [
                "test_quietHidesOutput",
                []
              ],
              [
                "test_saveDotAndImagesInDifferentDirectories",
                [
                  "renderCall",
                  "imageDirectory",
                  "dotDirectory",
                  "saveCall"
                ]
              ],
              [
                "test_saveDotAndImagesInSameDirectory",
                [
                  "renderCall",
                  "directory"
                ]
              ],
              [
                "test_saveOnlyImage",
                [
                  "call"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_onlySaveDot",
                [
                  "self.collectedOutput",
                  "self.fakeFQPN",
                  "self.digraphRecorder"
                ]
              ],
              [
                "test_checksCurrentDirectory",
                [
                  "self.fakeFQPN",
                  "self.fakeSysPath"
                ]
              ],
              [
                "test_quietHidesOutput",
                [
                  "self.collectedOutput",
                  "self.fakeFQPN"
                ]
              ],
              [
                "test_saveDotAndImagesInDifferentDirectories",
                [
                  "self.collectedOutput",
                  "self.fakeFQPN",
                  "self.digraphRecorder"
                ]
              ],
              [
                "test_saveDotAndImagesInSameDirectory",
                [
                  "self.collectedOutput",
                  "self.fakeFQPN",
                  "self.digraphRecorder"
                ]
              ],
              [
                "test_saveOnlyImage",
                [
                  "self.collectedOutput",
                  "self.fakeFQPN",
                  "self.digraphRecorder"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.45771881269467884,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_quietHidesOutput",
                  "test_onlySaveDot",
                  0.3396831102433787
                ],
                [
                  "test_onlySaveDot",
                  "test_saveDotAndImagesInSameDirectory",
                  0.5720022630386027
                ],
                [
                  "test_checksCurrentDirectory",
                  "test_quietHidesOutput",
                  0.3076923076923077
                ],
                [
                  "test_quietHidesOutput",
                  "test_saveDotAndImagesInSameDirectory",
                  0.3112658781274409
                ],
                [
                  "test_quietHidesOutput",
                  "test_saveOnlyImage",
                  0.34956991031712414
                ],
                [
                  "test_saveOnlyImage",
                  "test_saveDotAndImagesInSameDirectory",
                  0.60966053807506
                ],
                [
                  "test_checksCurrentDirectory",
                  "test_saveOnlyImage",
                  0.24317906804669506
                ],
                [
                  "test_checksCurrentDirectory",
                  "test_saveDotAndImagesInSameDirectory",
                  0.3112658781274409
                ],
                [
                  "test_quietHidesOutput",
                  "test_saveDotAndImagesInDifferentDirectories",
                  0.27086347533791216
                ],
                [
                  "test_checksCurrentDirectory",
                  "test_saveDotAndImagesInDifferentDirectories",
                  0.23216869314678187
                ],
                [
                  "test_saveDotAndImagesInDifferentDirectories",
                  "test_saveDotAndImagesInSameDirectory",
                  0.8475567535388051
                ],
                [
                  "test_checksCurrentDirectory",
                  "test_onlySaveDot",
                  0.2426307930309848
                ],
                [
                  "test_onlySaveDot",
                  "test_saveDotAndImagesInDifferentDirectories",
                  0.6407682432875706
                ],
                [
                  "test_onlySaveDot",
                  "test_saveOnlyImage",
                  0.9108546463618902
                ],
                [
                  "test_saveOnlyImage",
                  "test_saveDotAndImagesInDifferentDirectories",
                  0.6766206320481885
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_onlySaveDot",
                "false"
              ],
              [
                "test_checksCurrentDirectory",
                "false"
              ],
              [
                "test_quietHidesOutput",
                "false"
              ],
              [
                "test_saveDotAndImagesInDifferentDirectories",
                "false"
              ],
              [
                "test_saveDotAndImagesInSameDirectory",
                "false"
              ],
              [
                "test_saveOnlyImage",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 6
      }
    ]
  },
  {
    "name": "automat_\u0026__test_\u0026_test_methodical.py",
    "testCases": [
      {
        "name": "MethodicalTests",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_oneTransition",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_saveState",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_outputWithSubsetOfArguments",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_inputFunctionsMustBeEmpty",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_getArgNames",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_inputOutputMismatch",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn]"
                ],
                [
                  "test_methodName",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertIn]"
                ],
                [
                  "test_inputWithArguments",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_restoreState",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_collectOutputs",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_outputsArePrivate",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertRaises, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIn]"
                ],
                [
                  "test_multipleMachines",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_badTransitionForCurrentState",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertRaises, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn]"
                ],
                [
                  "test_machineItselfIsPrivate",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertIn, PyCallExpression: self.assertIs]"
                ],
                [
                  "test_multipleTransitionsFailure",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_filterArgs",
                  "[PyCallExpression: self.assertIs]"
                ],
                [
                  "test_multipleInitialStatesFailure",
                  "[PyCallExpression: self.assertRaises]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_oneTransition",
                  "[]"
                ],
                [
                  "test_saveState",
                  "[]"
                ],
                [
                  "test_outputWithSubsetOfArguments",
                  "[]"
                ],
                [
                  "test_inputFunctionsMustBeEmpty",
                  "[]"
                ],
                [
                  "test_getArgNames",
                  "[]"
                ],
                [
                  "test_inputOutputMismatch",
                  "[]"
                ],
                [
                  "test_methodName",
                  "[]"
                ],
                [
                  "test_inputWithArguments",
                  "[]"
                ],
                [
                  "test_restoreState",
                  "[]"
                ],
                [
                  "test_collectOutputs",
                  "[]"
                ],
                [
                  "test_outputsArePrivate",
                  "[]"
                ],
                [
                  "test_multipleMachines",
                  "[]"
                ],
                [
                  "test_badTransitionForCurrentState",
                  "[]"
                ],
                [
                  "test_machineItselfIsPrivate",
                  "[]"
                ],
                [
                  "test_multipleTransitionsFailure",
                  "[]"
                ],
                [
                  "test_filterArgs",
                  "[]"
                ],
                [
                  "test_multipleInitialStatesFailure",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_oneTransition",
                  "false"
                ],
                [
                  "test_saveState",
                  "false"
                ],
                [
                  "test_outputWithSubsetOfArguments",
                  "false"
                ],
                [
                  "test_inputFunctionsMustBeEmpty",
                  "false"
                ],
                [
                  "test_getArgNames",
                  "false"
                ],
                [
                  "test_inputOutputMismatch",
                  "false"
                ],
                [
                  "test_methodName",
                  "false"
                ],
                [
                  "test_inputWithArguments",
                  "false"
                ],
                [
                  "test_restoreState",
                  "false"
                ],
                [
                  "test_collectOutputs",
                  "false"
                ],
                [
                  "test_outputsArePrivate",
                  "false"
                ],
                [
                  "test_multipleMachines",
                  "false"
                ],
                [
                  "test_badTransitionForCurrentState",
                  "false"
                ],
                [
                  "test_machineItselfIsPrivate",
                  "false"
                ],
                [
                  "test_multipleTransitionsFailure",
                  "false"
                ],
                [
                  "test_filterArgs",
                  "false"
                ],
                [
                  "test_multipleInitialStatesFailure",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_oneTransition",
                  "false"
                ],
                [
                  "test_saveState",
                  "false"
                ],
                [
                  "test_outputWithSubsetOfArguments",
                  "false"
                ],
                [
                  "test_inputFunctionsMustBeEmpty",
                  "false"
                ],
                [
                  "test_getArgNames",
                  "false"
                ],
                [
                  "test_inputOutputMismatch",
                  "false"
                ],
                [
                  "test_methodName",
                  "false"
                ],
                [
                  "test_inputWithArguments",
                  "false"
                ],
                [
                  "test_restoreState",
                  "false"
                ],
                [
                  "test_collectOutputs",
                  "false"
                ],
                [
                  "test_outputsArePrivate",
                  "false"
                ],
                [
                  "test_multipleMachines",
                  "false"
                ],
                [
                  "test_badTransitionForCurrentState",
                  "false"
                ],
                [
                  "test_machineItselfIsPrivate",
                  "false"
                ],
                [
                  "test_multipleTransitionsFailure",
                  "false"
                ],
                [
                  "test_filterArgs",
                  "false"
                ],
                [
                  "test_multipleInitialStatesFailure",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_oneTransition",
                  "false"
                ],
                [
                  "test_saveState",
                  "false"
                ],
                [
                  "test_outputWithSubsetOfArguments",
                  "true"
                ],
                [
                  "test_inputFunctionsMustBeEmpty",
                  "false"
                ],
                [
                  "test_getArgNames",
                  "false"
                ],
                [
                  "test_inputOutputMismatch",
                  "false"
                ],
                [
                  "test_methodName",
                  "false"
                ],
                [
                  "test_inputWithArguments",
                  "false"
                ],
                [
                  "test_restoreState",
                  "false"
                ],
                [
                  "test_collectOutputs",
                  "false"
                ],
                [
                  "test_outputsArePrivate",
                  "false"
                ],
                [
                  "test_multipleMachines",
                  "false"
                ],
                [
                  "test_badTransitionForCurrentState",
                  "true"
                ],
                [
                  "test_machineItselfIsPrivate",
                  "false"
                ],
                [
                  "test_multipleTransitionsFailure",
                  "false"
                ],
                [
                  "test_filterArgs",
                  "false"
                ],
                [
                  "test_multipleInitialStatesFailure",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_oneTransition",
                  "false"
                ],
                [
                  "test_saveState",
                  "false"
                ],
                [
                  "test_outputWithSubsetOfArguments",
                  "false"
                ],
                [
                  "test_inputFunctionsMustBeEmpty",
                  "false"
                ],
                [
                  "test_getArgNames",
                  "false"
                ],
                [
                  "test_inputOutputMismatch",
                  "false"
                ],
                [
                  "test_methodName",
                  "false"
                ],
                [
                  "test_inputWithArguments",
                  "false"
                ],
                [
                  "test_restoreState",
                  "false"
                ],
                [
                  "test_collectOutputs",
                  "false"
                ],
                [
                  "test_outputsArePrivate",
                  "false"
                ],
                [
                  "test_multipleMachines",
                  "false"
                ],
                [
                  "test_badTransitionForCurrentState",
                  "false"
                ],
                [
                  "test_machineItselfIsPrivate",
                  "false"
                ],
                [
                  "test_multipleTransitionsFailure",
                  "false"
                ],
                [
                  "test_filterArgs",
                  "false"
                ],
                [
                  "test_multipleInitialStatesFailure",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_oneTransition",
                "false"
              ],
              [
                "test_saveState",
                "false"
              ],
              [
                "test_outputWithSubsetOfArguments",
                "false"
              ],
              [
                "test_inputFunctionsMustBeEmpty",
                "false"
              ],
              [
                "test_getArgNames",
                "false"
              ],
              [
                "test_inputOutputMismatch",
                "false"
              ],
              [
                "test_methodName",
                "false"
              ],
              [
                "test_inputWithArguments",
                "false"
              ],
              [
                "test_restoreState",
                "false"
              ],
              [
                "test_collectOutputs",
                "false"
              ],
              [
                "test_outputsArePrivate",
                "false"
              ],
              [
                "test_multipleMachines",
                "false"
              ],
              [
                "test_badTransitionForCurrentState",
                "false"
              ],
              [
                "test_machineItselfIsPrivate",
                "false"
              ],
              [
                "test_multipleTransitionsFailure",
                "false"
              ],
              [
                "test_filterArgs",
                "false"
              ],
              [
                "test_multipleInitialStatesFailure",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_oneTransition",
                "false"
              ],
              [
                "test_saveState",
                "false"
              ],
              [
                "test_outputWithSubsetOfArguments",
                "false"
              ],
              [
                "test_inputFunctionsMustBeEmpty",
                "false"
              ],
              [
                "test_getArgNames",
                "false"
              ],
              [
                "test_inputOutputMismatch",
                "false"
              ],
              [
                "test_methodName",
                "false"
              ],
              [
                "test_inputWithArguments",
                "false"
              ],
              [
                "test_restoreState",
                "false"
              ],
              [
                "test_collectOutputs",
                "false"
              ],
              [
                "test_outputsArePrivate",
                "false"
              ],
              [
                "test_multipleMachines",
                "false"
              ],
              [
                "test_badTransitionForCurrentState",
                "false"
              ],
              [
                "test_machineItselfIsPrivate",
                "false"
              ],
              [
                "test_multipleTransitionsFailure",
                "false"
              ],
              [
                "test_filterArgs",
                "false"
              ],
              [
                "test_multipleInitialStatesFailure",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_oneTransition",
                []
              ],
              [
                "test_saveState",
                []
              ],
              [
                "test_outputWithSubsetOfArguments",
                []
              ],
              [
                "test_inputFunctionsMustBeEmpty",
                []
              ],
              [
                "test_getArgNames",
                []
              ],
              [
                "test_inputOutputMismatch",
                []
              ],
              [
                "test_methodName",
                []
              ],
              [
                "test_inputWithArguments",
                []
              ],
              [
                "test_restoreState",
                []
              ],
              [
                "test_collectOutputs",
                []
              ],
              [
                "test_outputsArePrivate",
                []
              ],
              [
                "test_multipleMachines",
                []
              ],
              [
                "test_badTransitionForCurrentState",
                []
              ],
              [
                "test_machineItselfIsPrivate",
                []
              ],
              [
                "test_multipleTransitionsFailure",
                []
              ],
              [
                "test_filterArgs",
                []
              ],
              [
                "test_multipleInitialStatesFailure",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_oneTransition",
                "false"
              ],
              [
                "test_saveState",
                "false"
              ],
              [
                "test_outputWithSubsetOfArguments",
                "false"
              ],
              [
                "test_inputFunctionsMustBeEmpty",
                "false"
              ],
              [
                "test_getArgNames",
                "false"
              ],
              [
                "test_inputOutputMismatch",
                "false"
              ],
              [
                "test_methodName",
                "false"
              ],
              [
                "test_inputWithArguments",
                "false"
              ],
              [
                "test_restoreState",
                "false"
              ],
              [
                "test_collectOutputs",
                "false"
              ],
              [
                "test_outputsArePrivate",
                "false"
              ],
              [
                "test_multipleMachines",
                "false"
              ],
              [
                "test_badTransitionForCurrentState",
                "false"
              ],
              [
                "test_machineItselfIsPrivate",
                "false"
              ],
              [
                "test_multipleTransitionsFailure",
                "false"
              ],
              [
                "test_filterArgs",
                "false"
              ],
              [
                "test_multipleInitialStatesFailure",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_oneTransition",
                "false"
              ],
              [
                "test_saveState",
                "false"
              ],
              [
                "test_outputWithSubsetOfArguments",
                "true"
              ],
              [
                "test_inputFunctionsMustBeEmpty",
                "false"
              ],
              [
                "test_getArgNames",
                "false"
              ],
              [
                "test_inputOutputMismatch",
                "false"
              ],
              [
                "test_methodName",
                "false"
              ],
              [
                "test_inputWithArguments",
                "true"
              ],
              [
                "test_restoreState",
                "true"
              ],
              [
                "test_collectOutputs",
                "false"
              ],
              [
                "test_outputsArePrivate",
                "true"
              ],
              [
                "test_multipleMachines",
                "false"
              ],
              [
                "test_badTransitionForCurrentState",
                "false"
              ],
              [
                "test_machineItselfIsPrivate",
                "false"
              ],
              [
                "test_multipleTransitionsFailure",
                "false"
              ],
              [
                "test_filterArgs",
                "false"
              ],
              [
                "test_multipleInitialStatesFailure",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_oneTransition",
                  "0"
                ],
                [
                  "test_saveState",
                  "0"
                ],
                [
                  "test_outputWithSubsetOfArguments",
                  "0"
                ],
                [
                  "test_inputFunctionsMustBeEmpty",
                  "0"
                ],
                [
                  "test_getArgNames",
                  "0"
                ],
                [
                  "test_inputOutputMismatch",
                  "0"
                ],
                [
                  "test_methodName",
                  "0"
                ],
                [
                  "test_inputWithArguments",
                  "0"
                ],
                [
                  "test_restoreState",
                  "0"
                ],
                [
                  "test_collectOutputs",
                  "0"
                ],
                [
                  "test_outputsArePrivate",
                  "0"
                ],
                [
                  "test_multipleMachines",
                  "0"
                ],
                [
                  "test_badTransitionForCurrentState",
                  "0"
                ],
                [
                  "test_machineItselfIsPrivate",
                  "0"
                ],
                [
                  "test_multipleTransitionsFailure",
                  "0"
                ],
                [
                  "test_filterArgs",
                  "0"
                ],
                [
                  "test_multipleInitialStatesFailure",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_oneTransition",
                  "0"
                ],
                [
                  "test_saveState",
                  "0"
                ],
                [
                  "test_outputWithSubsetOfArguments",
                  "0"
                ],
                [
                  "test_inputFunctionsMustBeEmpty",
                  "0"
                ],
                [
                  "test_getArgNames",
                  "0"
                ],
                [
                  "test_inputOutputMismatch",
                  "0"
                ],
                [
                  "test_methodName",
                  "0"
                ],
                [
                  "test_inputWithArguments",
                  "0"
                ],
                [
                  "test_restoreState",
                  "0"
                ],
                [
                  "test_collectOutputs",
                  "0"
                ],
                [
                  "test_outputsArePrivate",
                  "0"
                ],
                [
                  "test_multipleMachines",
                  "0"
                ],
                [
                  "test_badTransitionForCurrentState",
                  "0"
                ],
                [
                  "test_machineItselfIsPrivate",
                  "0"
                ],
                [
                  "test_multipleTransitionsFailure",
                  "0"
                ],
                [
                  "test_filterArgs",
                  "0"
                ],
                [
                  "test_multipleInitialStatesFailure",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_oneTransition",
                "false"
              ],
              [
                "test_saveState",
                "false"
              ],
              [
                "test_outputWithSubsetOfArguments",
                "false"
              ],
              [
                "test_inputFunctionsMustBeEmpty",
                "false"
              ],
              [
                "test_getArgNames",
                "false"
              ],
              [
                "test_inputOutputMismatch",
                "false"
              ],
              [
                "test_methodName",
                "false"
              ],
              [
                "test_inputWithArguments",
                "false"
              ],
              [
                "test_restoreState",
                "false"
              ],
              [
                "test_collectOutputs",
                "false"
              ],
              [
                "test_outputsArePrivate",
                "false"
              ],
              [
                "test_multipleMachines",
                "false"
              ],
              [
                "test_badTransitionForCurrentState",
                "false"
              ],
              [
                "test_machineItselfIsPrivate",
                "false"
              ],
              [
                "test_multipleTransitionsFailure",
                "false"
              ],
              [
                "test_filterArgs",
                "false"
              ],
              [
                "test_multipleInitialStatesFailure",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_oneTransition",
                "false"
              ],
              [
                "test_saveState",
                "false"
              ],
              [
                "test_outputWithSubsetOfArguments",
                "false"
              ],
              [
                "test_inputFunctionsMustBeEmpty",
                "false"
              ],
              [
                "test_getArgNames",
                "false"
              ],
              [
                "test_inputOutputMismatch",
                "false"
              ],
              [
                "test_methodName",
                "false"
              ],
              [
                "test_inputWithArguments",
                "false"
              ],
              [
                "test_restoreState",
                "false"
              ],
              [
                "test_collectOutputs",
                "false"
              ],
              [
                "test_outputsArePrivate",
                "false"
              ],
              [
                "test_multipleMachines",
                "false"
              ],
              [
                "test_badTransitionForCurrentState",
                "false"
              ],
              [
                "test_machineItselfIsPrivate",
                "false"
              ],
              [
                "test_multipleTransitionsFailure",
                "false"
              ],
              [
                "test_filterArgs",
                "false"
              ],
              [
                "test_multipleInitialStatesFailure",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_oneTransition",
                "2"
              ],
              [
                "test_saveState",
                "1"
              ],
              [
                "test_outputWithSubsetOfArguments",
                "12"
              ],
              [
                "test_inputFunctionsMustBeEmpty",
                "2"
              ],
              [
                "test_getArgNames",
                "1"
              ],
              [
                "test_inputOutputMismatch",
                "3"
              ],
              [
                "test_methodName",
                "2"
              ],
              [
                "test_inputWithArguments",
                "2"
              ],
              [
                "test_restoreState",
                "3"
              ],
              [
                "test_collectOutputs",
                "1"
              ],
              [
                "test_outputsArePrivate",
                "4"
              ],
              [
                "test_multipleMachines",
                "2"
              ],
              [
                "test_badTransitionForCurrentState",
                "6"
              ],
              [
                "test_machineItselfIsPrivate",
                "3"
              ],
              [
                "test_multipleTransitionsFailure",
                "1"
              ],
              [
                "test_filterArgs",
                "1"
              ],
              [
                "test_multipleInitialStatesFailure",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_oneTransition",
                [
                  "machine",
                  "m"
                ]
              ],
              [
                "test_saveState",
                [
                  "m"
                ]
              ],
              [
                "test_outputWithSubsetOfArguments",
                [
                  "m"
                ]
              ],
              [
                "test_inputFunctionsMustBeEmpty",
                [
                  "m"
                ]
              ],
              [
                "test_getArgNames",
                [
                  "spec"
                ]
              ],
              [
                "test_inputOutputMismatch",
                [
                  "m"
                ]
              ],
              [
                "test_methodName",
                [
                  "m"
                ]
              ],
              [
                "test_inputWithArguments",
                [
                  "m"
                ]
              ],
              [
                "test_restoreState",
                [
                  "blob",
                  "m1",
                  "m2",
                  "self",
                  "m"
                ]
              ],
              [
                "test_collectOutputs",
                [
                  "m"
                ]
              ],
              [
                "test_outputsArePrivate",
                [
                  "mach2",
                  "mach1",
                  "machine",
                  "counter"
                ]
              ],
              [
                "test_multipleMachines",
                [
                  "mm",
                  "a",
                  "b"
                ]
              ],
              [
                "test_badTransitionForCurrentState",
                [
                  "machine",
                  "m"
                ]
              ],
              [
                "test_machineItselfIsPrivate",
                [
                  "machination",
                  "machine",
                  "expectedMachine"
                ]
              ],
              [
                "test_multipleTransitionsFailure",
                [
                  "m"
                ]
              ],
              [
                "test_filterArgs",
                [
                  "argsOut",
                  "inputSpec",
                  "outputSpec",
                  "argsIn",
                  "_"
                ]
              ],
              [
                "test_multipleInitialStatesFailure",
                [
                  "m"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_oneTransition",
                []
              ],
              [
                "test_saveState",
                []
              ],
              [
                "test_outputWithSubsetOfArguments",
                []
              ],
              [
                "test_inputFunctionsMustBeEmpty",
                []
              ],
              [
                "test_getArgNames",
                []
              ],
              [
                "test_inputOutputMismatch",
                []
              ],
              [
                "test_methodName",
                []
              ],
              [
                "test_inputWithArguments",
                []
              ],
              [
                "test_restoreState",
                []
              ],
              [
                "test_collectOutputs",
                []
              ],
              [
                "test_outputsArePrivate",
                []
              ],
              [
                "test_multipleMachines",
                []
              ],
              [
                "test_badTransitionForCurrentState",
                []
              ],
              [
                "test_machineItselfIsPrivate",
                []
              ],
              [
                "test_multipleTransitionsFailure",
                []
              ],
              [
                "test_filterArgs",
                []
              ],
              [
                "test_multipleInitialStatesFailure",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.47527254819217135,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_methodName",
                  "test_filterArgs",
                  0.39880917976296004
                ],
                [
                  "test_oneTransition",
                  "test_filterArgs",
                  0.274218932528218
                ],
                [
                  "test_getArgNames",
                  "test_saveState",
                  0.3457329171484833
                ],
                [
                  "test_oneTransition",
                  "test_collectOutputs",
                  0.46982177993912416
                ],
                [
                  "test_inputOutputMismatch",
                  "test_multipleTransitionsFailure",
                  0.3631448248002488
                ],
                [
                  "test_filterArgs",
                  "test_badTransitionForCurrentState",
                  0.2843976854916798
                ],
                [
                  "test_outputWithSubsetOfArguments",
                  "test_inputFunctionsMustBeEmpty",
                  0.5553785459947591
                ],
                [
                  "test_collectOutputs",
                  "test_inputFunctionsMustBeEmpty",
                  0.5865800865800865
                ],
                [
                  "test_inputFunctionsMustBeEmpty",
                  "test_saveState",
                  0.6046090014889862
                ],
                [
                  "test_outputsArePrivate",
                  "test_collectOutputs",
                  0.5798295088033917
                ],
                [
                  "test_multipleMachines",
                  "test_multipleTransitionsFailure",
                  0.5146769339394976
                ],
                [
                  "test_inputOutputMismatch",
                  "test_saveState",
                  0.445828723708323
                ],
                [
                  "test_multipleMachines",
                  "test_inputFunctionsMustBeEmpty",
                  0.5433315950718894
                ],
                [
                  "test_inputFunctionsMustBeEmpty",
                  "test_multipleTransitionsFailure",
                  0.561127896271506
                ],
                [
                  "test_inputFunctionsMustBeEmpty",
                  "test_getArgNames",
                  0.2751285751036958
                ],
                [
                  "test_machineItselfIsPrivate",
                  "test_saveState",
                  0.4913413365603138
                ],
                [
                  "test_oneTransition",
                  "test_inputOutputMismatch",
                  0.4278244791805927
                ],
                [
                  "test_collectOutputs",
                  "test_multipleTransitionsFailure",
                  0.5574523860339198
                ],
                [
                  "test_outputWithSubsetOfArguments",
                  "test_multipleTransitionsFailure",
                  0.4103535468530731
                ],
                [
                  "test_machineItselfIsPrivate",
                  "test_multipleInitialStatesFailure",
                  0.37344184118973284
                ],
                [
                  "test_outputsArePrivate",
                  "test_restoreState",
                  0.7073559108996919
                ],
                [
                  "test_outputsArePrivate",
                  "test_filterArgs",
                  0.5126332126986075
                ],
                [
                  "test_inputWithArguments",
                  "test_inputOutputMismatch",
                  0.4605587664621209
                ],
                [
                  "test_methodName",
                  "test_inputOutputMismatch",
                  0.468573967484192
                ],
                [
                  "test_oneTransition",
                  "test_restoreState",
                  0.5024952882690673
                ],
                [
                  "test_collectOutputs",
                  "test_saveState",
                  0.5603124551074025
                ],
                [
                  "test_multipleTransitionsFailure",
                  "test_saveState",
                  0.5665643349444686
                ],
                [
                  "test_collectOutputs",
                  "test_getArgNames",
                  0.25489853281665936
                ],
                [
                  "test_outputWithSubsetOfArguments",
                  "test_getArgNames",
                  0.34443493093519734
                ],
                [
                  "test_collectOutputs",
                  "test_methodName",
                  0.5059952427077118
                ],
                [
                  "test_machineItselfIsPrivate",
                  "test_outputsArePrivate",
                  0.5848090937266116
                ],
                [
                  "test_machineItselfIsPrivate",
                  "test_multipleMachines",
                  0.38267117304881004
                ],
                [
                  "test_getArgNames",
                  "test_multipleTransitionsFailure",
                  0.24581012112645206
                ],
                [
                  "test_multipleTransitionsFailure",
                  "test_badTransitionForCurrentState",
                  0.6090418426597005
                ],
                [
                  "test_machineItselfIsPrivate",
                  "test_getArgNames",
                  0.24870276919893836
                ],
                [
                  "test_machineItselfIsPrivate",
                  "test_methodName",
                  0.40021661704114253
                ],
                [
                  "test_outputsArePrivate",
                  "test_inputWithArguments",
                  0.5310981741718213
                ],
                [
                  "test_multipleMachines",
                  "test_outputWithSubsetOfArguments",
                  0.510214288839859
                ],
                [
                  "test_machineItselfIsPrivate",
                  "test_multipleTransitionsFailure",
                  0.3808512968617324
                ],
                [
                  "test_outputWithSubsetOfArguments",
                  "test_saveState",
                  0.6165609974560594
                ],
                [
                  "test_machineItselfIsPrivate",
                  "test_inputFunctionsMustBeEmpty",
                  0.3942597076285579
                ],
                [
                  "test_getArgNames",
                  "test_multipleInitialStatesFailure",
                  0.2625610539096176
                ],
                [
                  "test_collectOutputs",
                  "test_inputWithArguments",
                  0.5644093546547129
                ],
                [
                  "test_inputWithArguments",
                  "test_filterArgs",
                  0.39766831762650134
                ],
                [
                  "test_inputOutputMismatch",
                  "test_restoreState",
                  0.4912373687719376
                ],
                [
                  "test_filterArgs",
                  "test_saveState",
                  0.4590881595099651
                ],
                [
                  "test_multipleMachines",
                  "test_filterArgs",
                  0.42097893756142174
                ],
                [
                  "test_outputWithSubsetOfArguments",
                  "test_multipleInitialStatesFailure",
                  0.4247967479674797
                ],
                [
                  "test_inputOutputMismatch",
                  "test_multipleInitialStatesFailure",
                  0.3481337446976239
                ],
                [
                  "test_outputWithSubsetOfArguments",
                  "test_restoreState",
                  0.7041006238928185
                ],
                [
                  "test_oneTransition",
                  "test_badTransitionForCurrentState",
                  0.44412716919717765
                ],
                [
                  "test_methodName",
                  "test_inputWithArguments",
                  0.5891558305872936
                ],
                [
                  "test_inputFunctionsMustBeEmpty",
                  "test_multipleInitialStatesFailure",
                  0.49712205515614794
                ],
                [
                  "test_collectOutputs",
                  "test_filterArgs",
                  0.39143015845474405
                ],
                [
                  "test_machineItselfIsPrivate",
                  "test_inputWithArguments",
                  0.43585253317612116
                ],
                [
                  "test_getArgNames",
                  "test_restoreState",
                  0.3597785754413962
                ],
                [
                  "test_multipleInitialStatesFailure",
                  "test_badTransitionForCurrentState",
                  0.4635474320885899
                ],
                [
                  "test_collectOutputs",
                  "test_restoreState",
                  0.6371471886880018
                ],
                [
                  "test_methodName",
                  "test_badTransitionForCurrentState",
                  0.5366804356110232
                ],
                [
                  "test_outputsArePrivate",
                  "test_inputFunctionsMustBeEmpty",
                  0.5743073230052641
                ],
                [
                  "test_outputsArePrivate",
                  "test_multipleTransitionsFailure",
                  0.5076161106359587
                ],
                [
                  "test_outputWithSubsetOfArguments",
                  "test_filterArgs",
                  0.47798349939458457
                ],
                [
                  "test_oneTransition",
                  "test_inputFunctionsMustBeEmpty",
                  0.4862282547941412
                ],
                [
                  "test_multipleMachines",
                  "test_restoreState",
                  0.6327809005139374
                ],
                [
                  "test_oneTransition",
                  "test_inputWithArguments",
                  0.5252927236626598
                ],
                [
                  "test_machineItselfIsPrivate",
                  "test_badTransitionForCurrentState",
                  0.4410208215765512
                ],
                [
                  "test_multipleInitialStatesFailure",
                  "test_restoreState",
                  0.5716165741540006
                ],
                [
                  "test_saveState",
                  "test_restoreState",
                  0.8435460331583786
                ],
                [
                  "test_methodName",
                  "test_restoreState",
                  0.563505494203592
                ],
                [
                  "test_inputWithArguments",
                  "test_restoreState",
                  0.6333342337064859
                ],
                [
                  "test_filterArgs",
                  "test_multipleTransitionsFailure",
                  0.3101849175934133
                ],
                [
                  "test_inputOutputMismatch",
                  "test_getArgNames",
                  0.24500836716164268
                ],
                [
                  "test_oneTransition",
                  "test_multipleTransitionsFailure",
                  0.4609497591384715
                ],
                [
                  "test_oneTransition",
                  "test_saveState",
                  0.49480211872085544
                ],
                [
                  "test_collectOutputs",
                  "test_inputOutputMismatch",
                  0.5639574193809547
                ],
                [
                  "test_badTransitionForCurrentState",
                  "test_saveState",
                  0.5087167385072494
                ],
                [
                  "test_inputWithArguments",
                  "test_badTransitionForCurrentState",
                  0.4535419731477476
                ],
                [
                  "test_outputsArePrivate",
                  "test_outputWithSubsetOfArguments",
                  0.6392606512449873
                ],
                [
                  "test_multipleMachines",
                  "test_inputWithArguments",
                  0.49664962470685287
                ],
                [
                  "test_multipleMachines",
                  "test_badTransitionForCurrentState",
                  0.44684622210993374
                ],
                [
                  "test_multipleMachines",
                  "test_saveState",
                  0.589738754116817
                ],
                [
                  "test_inputWithArguments",
                  "test_saveState",
                  0.5789794457332318
                ],
                [
                  "test_machineItselfIsPrivate",
                  "test_filterArgs",
                  0.333903484358086
                ],
                [
                  "test_machineItselfIsPrivate",
                  "test_restoreState",
                  0.47019990002679923
                ],
                [
                  "test_inputFunctionsMustBeEmpty",
                  "test_inputOutputMismatch",
                  0.4272180713003825
                ],
                [
                  "test_outputWithSubsetOfArguments",
                  "test_inputOutputMismatch",
                  0.45953654300086355
                ],
                [
                  "test_filterArgs",
                  "test_restoreState",
                  0.5551067833611872
                ],
                [
                  "test_inputWithArguments",
                  "test_multipleTransitionsFailure",
                  0.4895801972485961
                ],
                [
                  "test_methodName",
                  "test_saveState",
                  0.5480894109788881
                ],
                [
                  "test_getArgNames",
                  "test_filterArgs",
                  0.4633993194638691
                ],
                [
                  "test_outputsArePrivate",
                  "test_multipleMachines",
                  0.5637347782244918
                ],
                [
                  "test_methodName",
                  "test_getArgNames",
                  0.2671849142678827
                ],
                [
                  "test_multipleInitialStatesFailure",
                  "test_saveState",
                  0.6051733273183485
                ],
                [
                  "test_outputsArePrivate",
                  "test_saveState",
                  0.6633976650784643
                ],
                [
                  "test_inputOutputMismatch",
                  "test_filterArgs",
                  0.36535128020380564
                ],
                [
                  "test_collectOutputs",
                  "test_badTransitionForCurrentState",
                  0.4740753893079399
                ],
                [
                  "test_outputWithSubsetOfArguments",
                  "test_badTransitionForCurrentState",
                  0.4364673415542049
                ],
                [
                  "test_badTransitionForCurrentState",
                  "test_restoreState",
                  0.48999220612345656
                ],
                [
                  "test_oneTransition",
                  "test_outputWithSubsetOfArguments",
                  0.36842273842377626
                ],
                [
                  "test_machineItselfIsPrivate",
                  "test_inputOutputMismatch",
                  0.3232264661628015
                ],
                [
                  "test_inputWithArguments",
                  "test_inputFunctionsMustBeEmpty",
                  0.5822107628720229
                ],
                [
                  "test_methodName",
                  "test_outputWithSubsetOfArguments",
                  0.46934186921320237
                ],
                [
                  "test_multipleInitialStatesFailure",
                  "test_multipleTransitionsFailure",
                  0.5924479332691243
                ],
                [
                  "test_outputsArePrivate",
                  "test_methodName",
                  0.5513761201735413
                ],
                [
                  "test_multipleMachines",
                  "test_inputOutputMismatch",
                  0.42067596171077926
                ],
                [
                  "test_oneTransition",
                  "test_machineItselfIsPrivate",
                  0.48721575852609844
                ],
                [
                  "test_outputsArePrivate",
                  "test_getArgNames",
                  0.34201480513112015
                ],
                [
                  "test_methodName",
                  "test_multipleTransitionsFailure",
                  0.5145631067961165
                ],
                [
                  "test_outputsArePrivate",
                  "test_multipleInitialStatesFailure",
                  0.5271299402671142
                ],
                [
                  "test_inputWithArguments",
                  "test_outputWithSubsetOfArguments",
                  0.6685703374395964
                ],
                [
                  "test_collectOutputs",
                  "test_multipleInitialStatesFailure",
                  0.47576134184865726
                ],
                [
                  "test_getArgNames",
                  "test_badTransitionForCurrentState",
                  0.22569078312597302
                ],
                [
                  "test_machineItselfIsPrivate",
                  "test_collectOutputs",
                  0.3136156765227165
                ],
                [
                  "test_outputsArePrivate",
                  "test_badTransitionForCurrentState",
                  0.5055374504645718
                ],
                [
                  "test_methodName",
                  "test_inputFunctionsMustBeEmpty",
                  0.5929823183305872
                ],
                [
                  "test_inputFunctionsMustBeEmpty",
                  "test_restoreState",
                  0.6883465163504305
                ],
                [
                  "test_multipleMachines",
                  "test_getArgNames",
                  0.27414063840849645
                ],
                [
                  "test_inputWithArguments",
                  "test_getArgNames",
                  0.2831670227742222
                ],
                [
                  "test_machineItselfIsPrivate",
                  "test_outputWithSubsetOfArguments",
                  0.3887887661701328
                ],
                [
                  "test_multipleMachines",
                  "test_collectOutputs",
                  0.630627802506319
                ],
                [
                  "test_inputOutputMismatch",
                  "test_badTransitionForCurrentState",
                  0.45110000999235234
                ],
                [
                  "test_inputFunctionsMustBeEmpty",
                  "test_filterArgs",
                  0.3970220178612404
                ],
                [
                  "test_oneTransition",
                  "test_multipleMachines",
                  0.431179337185411
                ],
                [
                  "test_oneTransition",
                  "test_outputsArePrivate",
                  0.5646892020987003
                ],
                [
                  "test_methodName",
                  "test_multipleInitialStatesFailure",
                  0.47703599821669745
                ],
                [
                  "test_outputsArePrivate",
                  "test_inputOutputMismatch",
                  0.567598530602826
                ],
                [
                  "test_multipleMachines",
                  "test_methodName",
                  0.5146769339394976
                ],
                [
                  "test_filterArgs",
                  "test_multipleInitialStatesFailure",
                  0.3394658322230928
                ],
                [
                  "test_oneTransition",
                  "test_multipleInitialStatesFailure",
                  0.4589673097313145
                ],
                [
                  "test_inputFunctionsMustBeEmpty",
                  "test_badTransitionForCurrentState",
                  0.458095320005425
                ],
                [
                  "test_multipleTransitionsFailure",
                  "test_restoreState",
                  0.5494178568485022
                ],
                [
                  "test_oneTransition",
                  "test_getArgNames",
                  0.21467530028751247
                ],
                [
                  "test_multipleMachines",
                  "test_multipleInitialStatesFailure",
                  0.627168853616904
                ],
                [
                  "test_inputWithArguments",
                  "test_multipleInitialStatesFailure",
                  0.4340227108624265
                ],
                [
                  "test_oneTransition",
                  "test_methodName",
                  0.4904978206217069
                ],
                [
                  "test_collectOutputs",
                  "test_outputWithSubsetOfArguments",
                  0.49841664384145046
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_oneTransition",
                "false"
              ],
              [
                "test_saveState",
                "false"
              ],
              [
                "test_outputWithSubsetOfArguments",
                "false"
              ],
              [
                "test_inputFunctionsMustBeEmpty",
                "false"
              ],
              [
                "test_getArgNames",
                "false"
              ],
              [
                "test_inputOutputMismatch",
                "false"
              ],
              [
                "test_methodName",
                "false"
              ],
              [
                "test_inputWithArguments",
                "false"
              ],
              [
                "test_restoreState",
                "true"
              ],
              [
                "test_collectOutputs",
                "false"
              ],
              [
                "test_outputsArePrivate",
                "false"
              ],
              [
                "test_multipleMachines",
                "false"
              ],
              [
                "test_badTransitionForCurrentState",
                "false"
              ],
              [
                "test_machineItselfIsPrivate",
                "false"
              ],
              [
                "test_multipleTransitionsFailure",
                "false"
              ],
              [
                "test_filterArgs",
                "false"
              ],
              [
                "test_multipleInitialStatesFailure",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 17
      }
    ]
  }
]