[
  {
    "name": "test_\u0026_test_crc8.py",
    "testCases": [
      {
        "name": "TestCRC8",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_crc8_bytes",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_crc8_byte",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_crc8_bytes",
                  "[]"
                ],
                [
                  "test_crc8_byte",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_crc8_bytes",
                  "false"
                ],
                [
                  "test_crc8_byte",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_crc8_bytes",
                  "false"
                ],
                [
                  "test_crc8_byte",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_crc8_bytes",
                  "false"
                ],
                [
                  "test_crc8_byte",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_crc8_bytes",
                  "false"
                ],
                [
                  "test_crc8_byte",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_crc8_bytes",
                "false"
              ],
              [
                "test_crc8_byte",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_crc8_bytes",
                "false"
              ],
              [
                "test_crc8_byte",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_crc8_bytes",
                []
              ],
              [
                "test_crc8_byte",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_crc8_bytes",
                "false"
              ],
              [
                "test_crc8_byte",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_crc8_bytes",
                "false"
              ],
              [
                "test_crc8_byte",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_crc8_bytes",
                  "0"
                ],
                [
                  "test_crc8_byte",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_crc8_bytes",
                  "0"
                ],
                [
                  "test_crc8_byte",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_crc8_bytes",
                "false"
              ],
              [
                "test_crc8_byte",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_crc8_bytes",
                "false"
              ],
              [
                "test_crc8_byte",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_crc8_bytes",
                "1"
              ],
              [
                "test_crc8_byte",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_crc8_bytes",
                [
                  "dataFrame",
                  "crc"
                ]
              ],
              [
                "test_crc8_byte",
                [
                  "oldCRC"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_crc8_bytes",
                []
              ],
              [
                "test_crc8_byte",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6303240568118106,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_crc8_byte",
                  "test_crc8_bytes",
                  0.6303240568118106
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_crc8_bytes",
                "false"
              ],
              [
                "test_crc8_byte",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "test_\u0026_test_JMSPComm.py",
    "testCases": [
      {
        "name": "TestJMSPComm",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_checkPack_err_header",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_checkPack_err_crc",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_checkPack_err_len",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_addBuffer",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_checkPack_OK",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_checkPack_err_len_diff",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_checkPack_err_header",
                  "[]"
                ],
                [
                  "test_checkPack_err_crc",
                  "[]"
                ],
                [
                  "test_checkPack_err_len",
                  "[]"
                ],
                [
                  "test_addBuffer",
                  "[]"
                ],
                [
                  "test_checkPack_OK",
                  "[]"
                ],
                [
                  "test_checkPack_err_len_diff",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_checkPack_err_header",
                  "false"
                ],
                [
                  "test_checkPack_err_crc",
                  "false"
                ],
                [
                  "test_checkPack_err_len",
                  "false"
                ],
                [
                  "test_addBuffer",
                  "true"
                ],
                [
                  "test_checkPack_OK",
                  "false"
                ],
                [
                  "test_checkPack_err_len_diff",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_checkPack_err_header",
                  "false"
                ],
                [
                  "test_checkPack_err_crc",
                  "false"
                ],
                [
                  "test_checkPack_err_len",
                  "false"
                ],
                [
                  "test_addBuffer",
                  "false"
                ],
                [
                  "test_checkPack_OK",
                  "false"
                ],
                [
                  "test_checkPack_err_len_diff",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_checkPack_err_header",
                  "false"
                ],
                [
                  "test_checkPack_err_crc",
                  "false"
                ],
                [
                  "test_checkPack_err_len",
                  "false"
                ],
                [
                  "test_addBuffer",
                  "false"
                ],
                [
                  "test_checkPack_OK",
                  "false"
                ],
                [
                  "test_checkPack_err_len_diff",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_checkPack_err_header",
                  "false"
                ],
                [
                  "test_checkPack_err_crc",
                  "false"
                ],
                [
                  "test_checkPack_err_len",
                  "false"
                ],
                [
                  "test_addBuffer",
                  "false"
                ],
                [
                  "test_checkPack_OK",
                  "false"
                ],
                [
                  "test_checkPack_err_len_diff",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_checkPack_err_header",
                "false"
              ],
              [
                "test_checkPack_err_crc",
                "false"
              ],
              [
                "test_checkPack_err_len",
                "false"
              ],
              [
                "test_addBuffer",
                "false"
              ],
              [
                "test_checkPack_OK",
                "false"
              ],
              [
                "test_checkPack_err_len_diff",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_checkPack_err_header",
                "false"
              ],
              [
                "test_checkPack_err_crc",
                "false"
              ],
              [
                "test_checkPack_err_len",
                "false"
              ],
              [
                "test_addBuffer",
                "false"
              ],
              [
                "test_checkPack_OK",
                "false"
              ],
              [
                "test_checkPack_err_len_diff",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_checkPack_err_header",
                []
              ],
              [
                "test_checkPack_err_crc",
                []
              ],
              [
                "test_checkPack_err_len",
                []
              ],
              [
                "test_addBuffer",
                []
              ],
              [
                "test_checkPack_OK",
                []
              ],
              [
                "test_checkPack_err_len_diff",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_checkPack_err_header",
                "false"
              ],
              [
                "test_checkPack_err_crc",
                "false"
              ],
              [
                "test_checkPack_err_len",
                "false"
              ],
              [
                "test_addBuffer",
                "false"
              ],
              [
                "test_checkPack_OK",
                "false"
              ],
              [
                "test_checkPack_err_len_diff",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_checkPack_err_header",
                "false"
              ],
              [
                "test_checkPack_err_crc",
                "false"
              ],
              [
                "test_checkPack_err_len",
                "false"
              ],
              [
                "test_addBuffer",
                "false"
              ],
              [
                "test_checkPack_OK",
                "true"
              ],
              [
                "test_checkPack_err_len_diff",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_checkPack_err_header",
                  "0"
                ],
                [
                  "test_checkPack_err_crc",
                  "0"
                ],
                [
                  "test_checkPack_err_len",
                  "0"
                ],
                [
                  "test_addBuffer",
                  "0"
                ],
                [
                  "test_checkPack_OK",
                  "0"
                ],
                [
                  "test_checkPack_err_len_diff",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_checkPack_err_header",
                  "0"
                ],
                [
                  "test_checkPack_err_crc",
                  "0"
                ],
                [
                  "test_checkPack_err_len",
                  "0"
                ],
                [
                  "test_addBuffer",
                  "0"
                ],
                [
                  "test_checkPack_OK",
                  "0"
                ],
                [
                  "test_checkPack_err_len_diff",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_checkPack_err_header",
                "false"
              ],
              [
                "test_checkPack_err_crc",
                "false"
              ],
              [
                "test_checkPack_err_len",
                "false"
              ],
              [
                "test_addBuffer",
                "true"
              ],
              [
                "test_checkPack_OK",
                "false"
              ],
              [
                "test_checkPack_err_len_diff",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_checkPack_err_header",
                "false"
              ],
              [
                "test_checkPack_err_crc",
                "false"
              ],
              [
                "test_checkPack_err_len",
                "false"
              ],
              [
                "test_addBuffer",
                "false"
              ],
              [
                "test_checkPack_OK",
                "false"
              ],
              [
                "test_checkPack_err_len_diff",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_checkPack_err_header",
                "1"
              ],
              [
                "test_checkPack_err_crc",
                "1"
              ],
              [
                "test_checkPack_err_len",
                "1"
              ],
              [
                "test_addBuffer",
                "1"
              ],
              [
                "test_checkPack_OK",
                "3"
              ],
              [
                "test_checkPack_err_len_diff",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_checkPack_err_header",
                [
                  "data",
                  "isOK",
                  "spcomm"
                ]
              ],
              [
                "test_checkPack_err_crc",
                [
                  "data",
                  "isOK",
                  "spcomm"
                ]
              ],
              [
                "test_checkPack_err_len",
                [
                  "data",
                  "isOK",
                  "spcomm"
                ]
              ],
              [
                "test_addBuffer",
                [
                  "data",
                  "i",
                  "spcomm"
                ]
              ],
              [
                "test_checkPack_OK",
                [
                  "data",
                  "isOK",
                  "spcomm"
                ]
              ],
              [
                "test_checkPack_err_len_diff",
                [
                  "data",
                  "isOK",
                  "spcomm"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_checkPack_err_header",
                []
              ],
              [
                "test_checkPack_err_crc",
                []
              ],
              [
                "test_checkPack_err_len",
                []
              ],
              [
                "test_addBuffer",
                []
              ],
              [
                "test_checkPack_OK",
                []
              ],
              [
                "test_checkPack_err_len_diff",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.911824892979165,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_checkPack_OK",
                  "test_checkPack_err_header",
                  0.911447902699551
                ],
                [
                  "test_checkPack_err_header",
                  "test_checkPack_err_len_diff",
                  0.9747112033637667
                ],
                [
                  "test_checkPack_OK",
                  "test_checkPack_err_len_diff",
                  0.9083380924184183
                ],
                [
                  "test_checkPack_err_len",
                  "test_checkPack_err_len_diff",
                  0.9826906458494157
                ],
                [
                  "test_checkPack_err_crc",
                  "test_checkPack_err_len_diff",
                  0.9752228244757452
                ],
                [
                  "test_addBuffer",
                  "test_checkPack_err_header",
                  0.8311744456933424
                ],
                [
                  "test_checkPack_err_header",
                  "test_checkPack_err_crc",
                  0.9821558660202988
                ],
                [
                  "test_checkPack_err_header",
                  "test_checkPack_err_len",
                  0.9816606359013103
                ],
                [
                  "test_addBuffer",
                  "test_checkPack_OK",
                  0.8106022596759849
                ],
                [
                  "test_addBuffer",
                  "test_checkPack_err_len_diff",
                  0.8335482002990304
                ],
                [
                  "test_checkPack_OK",
                  "test_checkPack_err_crc",
                  0.9140872800534725
                ],
                [
                  "test_checkPack_OK",
                  "test_checkPack_err_len",
                  0.9169118129500093
                ],
                [
                  "test_addBuffer",
                  "test_checkPack_err_crc",
                  0.8310158144177329
                ],
                [
                  "test_addBuffer",
                  "test_checkPack_err_len",
                  0.8403848388085716
                ],
                [
                  "test_checkPack_err_crc",
                  "test_checkPack_err_len",
                  0.9834215720608249
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_checkPack_err_header",
                "false"
              ],
              [
                "test_checkPack_err_crc",
                "false"
              ],
              [
                "test_checkPack_err_len",
                "false"
              ],
              [
                "test_addBuffer",
                "false"
              ],
              [
                "test_checkPack_OK",
                "false"
              ],
              [
                "test_checkPack_err_len_diff",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 6
      }
    ]
  },
  {
    "name": "test_\u0026_test_JMSPCommSender.py",
    "testCases": [
      {
        "name": "TestJMSPCommSender",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_JMSPCommSender",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_JMSPCommSender",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_JMSPCommSender",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_JMSPCommSender",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_JMSPCommSender",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_JMSPCommSender",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_JMSPCommSender",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_JMSPCommSender",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_JMSPCommSender",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_JMSPCommSender",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_JMSPCommSender",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_JMSPCommSender",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_JMSPCommSender",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_JMSPCommSender",
                "true"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_JMSPCommSender",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_JMSPCommSender",
                "4"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_JMSPCommSender",
                [
                  "data",
                  "i",
                  "spcomm"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_JMSPCommSender",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_JMSPCommSender",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "test_\u0026_test_JMSPCommReceiver.py",
    "testCases": [
      {
        "name": "TestJMSPComm",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_addByte_err_len_diff",
                  "[]"
                ],
                [
                  "test_addByte_ok",
                  "[]"
                ],
                [
                  "test_addByte_err_crc",
                  "[]"
                ],
                [
                  "test_addByte_err_header",
                  "[]"
                ],
                [
                  "test_addByte_err_len",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_addByte_err_len_diff",
                  "[]"
                ],
                [
                  "test_addByte_ok",
                  "[]"
                ],
                [
                  "test_addByte_err_crc",
                  "[]"
                ],
                [
                  "test_addByte_err_header",
                  "[]"
                ],
                [
                  "test_addByte_err_len",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_addByte_err_len_diff",
                  "true"
                ],
                [
                  "test_addByte_ok",
                  "true"
                ],
                [
                  "test_addByte_err_crc",
                  "true"
                ],
                [
                  "test_addByte_err_header",
                  "true"
                ],
                [
                  "test_addByte_err_len",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_addByte_err_len_diff",
                  "false"
                ],
                [
                  "test_addByte_ok",
                  "false"
                ],
                [
                  "test_addByte_err_crc",
                  "false"
                ],
                [
                  "test_addByte_err_header",
                  "false"
                ],
                [
                  "test_addByte_err_len",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_addByte_err_len_diff",
                  "false"
                ],
                [
                  "test_addByte_ok",
                  "false"
                ],
                [
                  "test_addByte_err_crc",
                  "false"
                ],
                [
                  "test_addByte_err_header",
                  "false"
                ],
                [
                  "test_addByte_err_len",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_addByte_err_len_diff",
                  "false"
                ],
                [
                  "test_addByte_ok",
                  "false"
                ],
                [
                  "test_addByte_err_crc",
                  "false"
                ],
                [
                  "test_addByte_err_header",
                  "false"
                ],
                [
                  "test_addByte_err_len",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_addByte_err_len_diff",
                "false"
              ],
              [
                "test_addByte_ok",
                "false"
              ],
              [
                "test_addByte_err_crc",
                "false"
              ],
              [
                "test_addByte_err_header",
                "false"
              ],
              [
                "test_addByte_err_len",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_addByte_err_len_diff",
                "false"
              ],
              [
                "test_addByte_ok",
                "false"
              ],
              [
                "test_addByte_err_crc",
                "false"
              ],
              [
                "test_addByte_err_header",
                "false"
              ],
              [
                "test_addByte_err_len",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_addByte_err_len_diff",
                []
              ],
              [
                "test_addByte_ok",
                []
              ],
              [
                "test_addByte_err_crc",
                []
              ],
              [
                "test_addByte_err_header",
                []
              ],
              [
                "test_addByte_err_len",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_addByte_err_len_diff",
                "false"
              ],
              [
                "test_addByte_ok",
                "false"
              ],
              [
                "test_addByte_err_crc",
                "false"
              ],
              [
                "test_addByte_err_header",
                "false"
              ],
              [
                "test_addByte_err_len",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_addByte_err_len_diff",
                "false"
              ],
              [
                "test_addByte_ok",
                "false"
              ],
              [
                "test_addByte_err_crc",
                "false"
              ],
              [
                "test_addByte_err_header",
                "false"
              ],
              [
                "test_addByte_err_len",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_addByte_err_len_diff",
                  "0"
                ],
                [
                  "test_addByte_ok",
                  "0"
                ],
                [
                  "test_addByte_err_crc",
                  "0"
                ],
                [
                  "test_addByte_err_header",
                  "0"
                ],
                [
                  "test_addByte_err_len",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_addByte_err_len_diff",
                  "0"
                ],
                [
                  "test_addByte_ok",
                  "0"
                ],
                [
                  "test_addByte_err_crc",
                  "0"
                ],
                [
                  "test_addByte_err_header",
                  "0"
                ],
                [
                  "test_addByte_err_len",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_addByte_err_len_diff",
                "true"
              ],
              [
                "test_addByte_ok",
                "true"
              ],
              [
                "test_addByte_err_crc",
                "true"
              ],
              [
                "test_addByte_err_header",
                "true"
              ],
              [
                "test_addByte_err_len",
                "true"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_addByte_err_len_diff",
                "false"
              ],
              [
                "test_addByte_ok",
                "false"
              ],
              [
                "test_addByte_err_crc",
                "false"
              ],
              [
                "test_addByte_err_header",
                "false"
              ],
              [
                "test_addByte_err_len",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_addByte_err_len_diff",
                "0"
              ],
              [
                "test_addByte_ok",
                "0"
              ],
              [
                "test_addByte_err_crc",
                "0"
              ],
              [
                "test_addByte_err_header",
                "0"
              ],
              [
                "test_addByte_err_len",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_addByte_err_len_diff",
                [
                  "data",
                  "spcomm"
                ]
              ],
              [
                "test_addByte_ok",
                [
                  "data",
                  "spcomm"
                ]
              ],
              [
                "test_addByte_err_crc",
                [
                  "data",
                  "spcomm"
                ]
              ],
              [
                "test_addByte_err_header",
                [
                  "data",
                  "spcomm"
                ]
              ],
              [
                "test_addByte_err_len",
                [
                  "data",
                  "spcomm"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_addByte_err_len_diff",
                []
              ],
              [
                "test_addByte_ok",
                []
              ],
              [
                "test_addByte_err_crc",
                []
              ],
              [
                "test_addByte_err_header",
                []
              ],
              [
                "test_addByte_err_len",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.979581338230501,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_addByte_ok",
                  "test_addByte_err_header",
                  0.9687107653069617
                ],
                [
                  "test_addByte_err_header",
                  "test_addByte_err_crc",
                  0.9924812030075187
                ],
                [
                  "test_addByte_err_header",
                  "test_addByte_err_len",
                  0.9924812030075187
                ],
                [
                  "test_addByte_err_header",
                  "test_addByte_err_len_diff",
                  0.9839166316462634
                ],
                [
                  "test_addByte_ok",
                  "test_addByte_err_len_diff",
                  0.9604875824227781
                ],
                [
                  "test_addByte_ok",
                  "test_addByte_err_crc",
                  0.9687107653069617
                ],
                [
                  "test_addByte_ok",
                  "test_addByte_err_len",
                  0.9687107653069617
                ],
                [
                  "test_addByte_err_crc",
                  "test_addByte_err_len",
                  0.9924812030075187
                ],
                [
                  "test_addByte_err_len",
                  "test_addByte_err_len_diff",
                  0.9839166316462634
                ],
                [
                  "test_addByte_err_crc",
                  "test_addByte_err_len_diff",
                  0.9839166316462634
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_addByte_err_len_diff",
                "false"
              ],
              [
                "test_addByte_ok",
                "false"
              ],
              [
                "test_addByte_err_crc",
                "false"
              ],
              [
                "test_addByte_err_header",
                "false"
              ],
              [
                "test_addByte_err_len",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 5
      }
    ]
  }
]