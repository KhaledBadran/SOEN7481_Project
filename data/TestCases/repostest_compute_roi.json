{
    "functionName": "test_compute_roi",
    "className": null,
    "fileName": "/NSLS-II_&_PyXRF/pyxrf_&_core_&_tests_&_test_map_processing.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"Basic functionality of `_compute_roi` function\"\"\"\nft = _FitXRFMapTesting(dataset_params=dataset_params, use_snip=use_snip,\n    add_pts_before=add_pts_before, add_pts_after=add_pts_after)\nn_pts = ft.n_spectrum_points\nenergy_min, energy_max = 3.1, 12.2\nenergy_step = (energy_max - energy_min) / (n_pts - 1)\nsnip_param = {'e_offset': energy_min - energy_step * add_pts_before,\n    'e_linear': energy_step, 'e_quadratic': 0, 'b_width': 2.0}\nroi_dict = {'roi-1': (2.5, 3.5), 'roi-2': (3.5, 4.8), 'roi-3': (5.2, 7.4),\n    'roi-4': (6.0, 6.0), 'roi-5': (6.0, 5.5), 'roi-6': (10.1, 15.0)}\nroi_bands = [_ for _ in roi_dict.values()]\ndata_out = _compute_roi(ft.data_input, data_sel_indices=ft.data_sel_indices,\n    roi_bands=roi_bands, snip_param=snip_param, use_snip=use_snip)\nroi_keys = list(roi_dict.keys())\nassert data_out.shape == (*ft.data_input.shape[0:2], len(roi_keys)\n    ), 'Output data has unexpected shape'\ndata_out = {roi_keys[_]: data_out[:, :, (_)] for _ in range(len(roi_keys))}\nft.verify_roi_output(data_out=data_out, roi_dict=roi_dict, snip_param=\n    snip_param)\npytest.mark.parametrize('dataset_params', [{'n_data_dimensions': (8, 1)}, {\n    'n_data_dimensions': (1, 8)}, {'n_data_dimensions': (4, 4)}, {\n    'n_data_dimensions': (3, 5)}])pytest.mark.parametrize('add_pts_before, add_pts_after', [(0, 0), (50, 100)])pytest.mark.parametrize('use_snip', [False, True])"
}