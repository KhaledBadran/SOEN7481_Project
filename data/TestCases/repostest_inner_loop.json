{
    "functionName": "test_inner_loop",
    "className": null,
    "fileName": "/open-source-economics_&_OG-USA/ogusa_&_tests_&_test_SS.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "p = Specifications(baseline=baseline, client=dask_client, num_workers=\n    NUM_WORKERS)\np.update_specifications(param_updates)\np.output_base = CUR_PATH\np.get_tax_function_parameters(None, run_micro=False)\nbssmat = np.ones((p.S, p.J)) * 0.07\nnssmat = np.ones((p.S, p.J)) * 0.4 * p.ltilde\nif p.zeta_K[-1] == 1.0:\n    r = p.world_int_rate[-1]\nelse:\n    r = 0.05\nTR = 0.12\nY = 1.3\nfactor = 100000\nBQ = np.ones(p.J) * 0.00019646295986015257\nif p.budget_balance:\n    outer_loop_vars = bssmat, nssmat, r, BQ, TR, factor\nelse:\n    outer_loop_vars = bssmat, nssmat, r, BQ, Y, TR, factor\ntest_tuple = SS.inner_loop(outer_loop_vars, p, None)\nexpected_tuple = utils.safe_read_pickle(os.path.join(CUR_PATH,\n    'test_io_data', filename))\nfor i, v in enumerate(expected_tuple):\n    assert np.allclose(test_tuple[i], v, atol=1e-05)\npytest.mark.parametrize('baseline,param_updates,filename', [(True,\n    param_updates1, filename1), (True, param_updates2, filename2), (True,\n    param_updates3, filename3), (False, param_updates4, filename4), (False,\n    param_updates5, filename5)], ids=['Baseline, Small Open',\n    'Baseline, Balanced Budget', 'Baseline', 'Reform',\n    'Reform, baseline spending'])"
}