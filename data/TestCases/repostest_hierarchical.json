{
    "functionName": "test_hierarchical",
    "className": "TestValidationPolicyConfig",
    "fileName": "/named-data_&_PyNDN2/tests_&_integration_tests_&_test_validation_policy_config.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "fetcher = CertificateFetcherOffline()\nvalidator = ValidatorConfig(fetcher)\nvalidator.load(os.path.join(self._policyConfigDirectory,\n    'hierarchical_ruleset.conf'))\ndata = Data()\nKeyLocator.getFromSignature(data.getSignature()).setType(KeyLocatorType.KEYNAME\n    )\nKeyLocator.getFromSignature(data.getSignature()).setKeyName(Name(\n    '/SecurityTestSecRule/Basic/Longer/KEY/123'))\nresult = TestValidationResult(data)\ndata.setName(Name('/SecurityTestSecRule/Basic/Data1'))\nresult.checkPolicy(validator)\nself.assertTrue(result._calledFailure and not result.calledContinue_)\ndata.setName(Name('/SecurityTestSecRule/Basic/Longer/Data2'))\nresult.checkPolicy(validator)\nself.assertTrue(result.calledContinue_ and not result._calledFailure)\nKeyLocator.getFromSignature(data.getSignature()).setKeyName(Name(\n    '/SecurityTestSecRule/Basic/KEY/123'))\ndata.setName(Name('/SecurityTestSecRule/Basic/Data1'))\nresult.checkPolicy(validator)\nself.assertTrue(result.calledContinue_ and not result._calledFailure)\ndata.setName(Name('/SecurityTestSecRule/Basic/Longer/Data2'))\nresult.checkPolicy(validator)\nself.assertTrue(result.calledContinue_ and not result._calledFailure)\n"
}