{
    "functionName": "test_poll_fulfilment_request",
    "className": null,
    "fileName": "/EclecticIQ_&_OpenTAXII/tests_&_services_&_test_poll.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "server.config['count_blocks_in_poll_responses'] = count_blocks\nversion = 11\nservice = server.get_service('poll-A')\nblocks_amount = 30\nfor i in range(blocks_amount):\n    persist_content(server.persistence, COLLECTION_OPEN, service.id)\nheaders = prepare_headers(version, https)\nrequest = prepare_request(collection_name=COLLECTION_OPEN, version=version)\nresponse = service.process(headers, request)\nassert isinstance(response, tm11.PollResponse)\nif count_blocks:\n    assert response.record_count.record_count == POLL_MAX_COUNT\n    assert response.record_count.partial_count is True\n    assert len(response.content_blocks) == POLL_RESULT_SIZE\nelse:\n    assert response.record_count is None\nassert response.more is True\nassert response.result_id\nresult_id = response.result_id\npart_number = 2\nrequest = prepare_fulfilment_request(COLLECTION_OPEN, result_id, part_number)\nresponse = service.process(headers, request)\nassert isinstance(response, tm11.PollResponse)\nif count_blocks:\n    assert response.record_count.record_count == POLL_MAX_COUNT\n    assert response.record_count.partial_count is True\nelse:\n    assert response.record_count is None\nassert len(response.content_blocks) == blocks_amount - POLL_RESULT_SIZE\nassert not response.more\nassert response.result_id == result_id\nresult_id = response.result_id\npart_number = 3\nrequest = prepare_fulfilment_request(COLLECTION_OPEN, result_id, part_number)\nresponse = service.process(headers, request)\nassert isinstance(response, tm11.PollResponse)\nif count_blocks:\n    assert response.record_count.record_count == POLL_MAX_COUNT\n    assert response.record_count.partial_count is True\nelse:\n    assert response.record_count is None\nassert len(response.content_blocks) == 0\nassert not response.more\nassert response.result_id == result_id\nserver.config['count_blocks_in_poll_responses'] = True\npytest.mark.parametrize(('https', 'count_blocks'), [(True, True), (False, \n    True), (True, False), (False, False)])"
}