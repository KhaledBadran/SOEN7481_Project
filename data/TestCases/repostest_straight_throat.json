{
    "functionName": "test_straight_throat",
    "className": "ThroatEndpointsTest",
    "fileName": "/pmeal_&_OpenPNM/tests_&_unit_&_models_&_geometry_&_ThroatEndpointsTest.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        For a given network length and fixed cross-sectional area, check that\n        the conductance is independent of number of pores and throat lengths\n        \"\"\"\nlength = 5.0\nrad = 0.5\narea = np.pi * rad ** 2\nD_ab = 1.0\nN = np.arange(10, 110, 10)\nnets = []\nthroat_portion = 0.1\ndef throat_centroid(network):\n    cn = network['throat.conns']\n    return np.mean(network['pore.coords'][cn], axis=1)\ndef throat_vector(network):\n    cn = network['throat.conns']\n    vec = network['pore.coords'][cn[:, (1)]] - network['pore.coords'][cn[:,\n        (0)]]\n    return vec / np.linalg.norm(vec, axis=1)[:, (np.newaxis)]\nconds = []\nfor n in N:\n    lc = length / n\n    net = op.network.Cubic(shape=[n, 1, 1], spacing=lc)\n    net.add_boundary_pores(labels=['front', 'back'])\n    Ps = net.pores('*boundary', mode='not')\n    Ts = net.throats('*boundary', mode='not')\n    BPs = net.pores('*boundary')\n    BTs = net.throats('*boundary')\n    geom = op.geometry.GenericGeometry(network=net, pores=Ps, throats=Ts)\n    geom['pore.diameter'] = 2 * rad\n    geom['throat.diameter'] = 2 * rad\n    geom['pore.area'] = area\n    geom['throat.area'] = area\n    net['throat.centroid'] = throat_centroid(net)\n    net['throat.vector'] = throat_vector(net)\n    geom.add_model(propname='throat.ctc', model=op.models.geometry.\n        throat_length.ctc)\n    geom['throat.length'] = geom['throat.ctc'] * throat_portion\n    geom.add_model(propname='throat.endpoints', model=mods.straight_throat)\n    geom.add_model(propname='throat.conduit_lengths', model=gm.\n        throat_length.conduit_lengths)\n    boun = op.geometry.Boundary(network=net, pores=BPs, throats=BTs)\n    air = op.phases.Air(network=net)\n    air['pore.diffusivity'] = D_ab\n    phys = op.physics.GenericPhysics(network=net, phase=air, geometry=geom)\n    phys.add_model(propname='throat.diffusive_conductance', model=pm.\n        diffusive_conductance.ordinary_diffusion)\n    physb = op.physics.GenericPhysics(network=net, phase=air, geometry=boun)\n    physb.add_model(propname='throat.diffusive_conductance', model=pm.\n        diffusive_conductance.ordinary_diffusion)\n    FD = op.algorithms.FickianDiffusion(network=net)\n    FD.setup(phase=air)\n    FD.set_value_BC(pores=net.pores('front_boundary'), values=1.0)\n    FD.set_value_BC(pores=net.pores('back_boundary'), values=0.0)\n    FD.run()\n    D = FD.calc_effective_diffusivity(domain_area=area, domain_length=length)\n    conds.append(D[0])\n    nets.append(net)\nassert np.allclose(np.asarray(conds), D_ab)\n"
}