{
    "functionName": "test_mac_request_read",
    "className": "TestRequestMessage",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_core_&_messages_&_test_messages.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "self.stream = BytearrayStream(self.mac)\nrequest_message = messages.RequestMessage()\nrequest_message.read(self.stream)\nrequest_header = request_message.request_header\nmsg = 'Bad request header type: expected {0}, received{0}'\nself.assertIsInstance(request_header, messages.RequestHeader, msg.format(\n    messages.RequestHeader, type(request_header)))\nprotocol_version = request_header.protocol_version\nmsg = 'Bad protocol version type: expected {0}, received {1}'\nself.assertIsInstance(protocol_version, contents.ProtocolVersion, msg.\n    format(contents.ProtocolVersion, type(protocol_version)))\nprotocol_version_major = protocol_version.major\nmsg = 'Bad protocol version major type: expected {0}, received {1}'\nexp_type = int\nrcv_type = type(protocol_version_major)\nself.assertIsInstance(protocol_version_major, exp_type, msg.format(exp_type,\n    rcv_type))\nmsg = 'Bad protocol version major value: expected {0}, received {1}'\nself.assertEqual(1, protocol_version_major, msg.format(1,\n    protocol_version_major))\nprotocol_version_minor = protocol_version.minor\nmsg = 'Bad protocol version minor type: expected {0}, received {1}'\nexp_type = int\nrcv_type = type(protocol_version_minor)\nself.assertIsInstance(protocol_version_minor, exp_type, msg.format(exp_type,\n    rcv_type))\nmsg = 'Bad protocol version minor value: expected {0}, received {1}'\nself.assertEqual(2, protocol_version_minor, msg.format(2,\n    protocol_version_minor))\nbatch_count = request_header.batch_count\nmsg = 'Bad batch count type: expected {0}, received {1}'\nself.assertIsInstance(batch_count, contents.BatchCount, msg.format(contents\n    .BatchCount, type(batch_count)))\nmsg = 'Bad batch count value: expected {0}, received {1}'\nself.assertEqual(1, batch_count.value, msg.format(1, batch_count.value))\nbatch_items = request_message.batch_items\nmsg = 'Bad batch items type: expected {0}, received {1}'\nself.assertIsInstance(batch_items, list, msg.format(list, type(batch_items)))\nself.assertEquals(1, len(batch_items), self.msg.format('batch items',\n    'length', 1, len(batch_items)))\nbatch_item = batch_items[0]\nmsg = 'Bad batch item type: expected {0}, received {1}'\nself.assertIsInstance(batch_item, messages.RequestBatchItem, msg.format(\n    messages.RequestBatchItem, type(batch_item)))\noperation = batch_item.operation\nmsg = 'Bad operation type: expected {0}, received {1}'\nself.assertIsInstance(operation, contents.Operation, msg.format(contents.\n    Operation, type(operation)))\nmsg = 'Bad operation value: expected {0}, received {1}'\nself.assertEqual(enums.Operation.MAC, operation.value, msg.format(enums.\n    Operation.MAC, operation.value))\nrequest_payload = batch_item.request_payload\nmsg = 'Bad request payload type: expected {0}, received {1}'\nself.assertIsInstance(request_payload, payloads.MACRequestPayload, msg.\n    format(payloads.MACRequestPayload, type(request_payload)))\nunique_identifier = request_payload.unique_identifier\nmsg = 'Bad unique identifier type: expected {0}, received {1}'\nself.assertIsInstance(unique_identifier, attr.UniqueIdentifier, msg.format(\n    attr.UniqueIdentifier, type(unique_identifier)))\nmsg = 'Bad unique identifier value: expected {0}, received {1}'\nself.assertEqual('1', unique_identifier.value, msg.format('1',\n    unique_identifier.value))\nparameters_attribute = request_payload.cryptographic_parameters\nmsg = 'Bad cryptographic parameters type: expected {0}, received {1}'\nself.assertIsInstance(parameters_attribute, attr.CryptographicParameters,\n    msg.format(attr.CryptographicParameters, type(parameters_attribute)))\ncryptographic_algorithm = parameters_attribute.cryptographic_algorithm\nmsg = 'Bad cryptographic algorithm type: expected {0}, received {1}'\nself.assertIsInstance(cryptographic_algorithm, enums.CryptographicAlgorithm,\n    msg.format(enums.CryptographicAlgorithm, type(cryptographic_algorithm)))\nmsg = 'Bad cryptographic algorithm value: expected {0}, received {1}'\nself.assertEquals(cryptographic_algorithm, enums.CryptographicAlgorithm.\n    HMAC_SHA512, msg.format(cryptographic_algorithm, enums.\n    CryptographicAlgorithm.HMAC_SHA512))\ndata = request_payload.data\nmsg = 'Bad data type: expected {0}, received {1}'\nself.assertIsInstance(data, objects.Data, msg.format(objects.Data, type(data)))\nexp_value = b'\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\t\\n\\x0b\\x0c\\r\\x0e\\x0f'\nmsg = 'Bad data value: expected {0}, received {1}'\nself.assertEqual(exp_value, data.value, msg.format(binascii.hexlify(\n    exp_value), binascii.hexlify(data.value)))\n"
}