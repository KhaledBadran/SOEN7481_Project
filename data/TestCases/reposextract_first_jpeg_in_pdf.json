{
    "functionName": "extract_first_jpeg_in_pdf",
    "className": null,
    "fileName": "/konstantint_&_PassportEye/passporteye_&_util_&_pdf.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"\n    Reads a given PDF file and scans for the first valid embedded JPEG image.\n    Returns either None (if none found) or a string of data for the image.\n    There is no 100% guarantee for this code, yet it seems to work fine with most\n    scanner-produced images around.\n    More testing might be needed though.\n\n    Note that in principle there is no serious problem extracting PNGs or other image types from PDFs,\n    however at the moment I do not have enough test data to try this, and the one I have seems to be unsuitable\n    for PDFMiner.\n\n    :param fstream: Readable binary stream of the PDF\n    :return: binary stream, containing the whole contents of the JPEG image or None if extraction failed.\n    \"\"\"\nparser = PDFParser(fstream)\ndocument = PDFDocument(parser)\nrsrcmgr = PDFResourceManager()\ndevice = PDFPageAggregator(rsrcmgr)\ninterpreter = PDFPageInterpreter(rsrcmgr, device)\npages = PDFPage.create_pages(document)\nfor page in pages:\n    interpreter.process_page(page)\n    layout = device.result\n    for el in layout:\n        if isinstance(el, LTFigure):\n            for im in el:\n                if isinstance(im, LTImage):\n                    st = None\n                    try:\n                        imdata = im.stream.get_data()\n                    except:\n                        imdata = im.stream.get_rawdata()\n                    if imdata is not None and imdata.startswith(\n                        b'\\xff\\xd8\\xff\\xe0'):\n                        return imdata\nreturn None\n"
}