{
    "functionName": "power_law",
    "className": null,
    "fileName": "/pmeal_&_OpenPNM/openpnm_&_models_&_physics_&_generic_source_term.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"\n    Calculates the rate, as well as slope and intercept of the following\n    function at the given value of *X*:\n\n        .. math::\n            r = A_{1} x^{A_{2}} + A_{3}\n\n    Parameters\n    ----------\n    A1 -> A3 : string\n        The dictionary keys on the target object containing the coefficients\n        values to be used in the source term model\n\n    X : string\n        The dictionary key on the target objecxt containing the the quantity\n        of interest\n\n    Returns\n    -------\n    A dictionary containing the following three items:\n\n        **'rate'** - The value of the source term function at the given X.\n\n        **'S1'** - The slope of the source term function at the given X.\n\n        **'S2'** - The intercept of the source term function at the given X.\n\n    The slope and intercept provide a linearized source term equation about the\n    current value of X as follow:\n\n        .. math::\n            rate = S_{1}   X  +  S_{2}\n\n    \"\"\"\nA = _parse_args(target=target, key=A1, default=0.0)\nB = _parse_args(target=target, key=A2, default=1.0)\nC = _parse_args(target=target, key=A3, default=0.0)\nX = target[X]\nr = A * X ** B + C\nS1 = A * B * X ** (B - 1)\nS2 = A * X ** B * (1 - B) + C\nvalues = {'S1': S1, 'S2': S2, 'rate': r}\nreturn values\n"
}