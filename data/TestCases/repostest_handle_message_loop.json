{
    "functionName": "test_handle_message_loop",
    "className": "TestKmipSession",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_services_&_server_&_test_session.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that the correct logging and error handling occurs during the\n        message handling loop.\n        \"\"\"\ndata = utils.BytearrayStream()\nbatch_item = messages.ResponseBatchItem(result_status=contents.ResultStatus\n    (enums.ResultStatus.SUCCESS), result_reason=contents.ResultReason(enums\n    .ResultReason.OBJECT_ARCHIVED), result_message=contents.ResultMessage(\n    'Test message.'))\nbatch_items = [batch_item]\nheader = messages.ResponseHeader(protocol_version=contents.ProtocolVersion(\n    1, 0), time_stamp=contents.TimeStamp(int(time.time())), batch_count=\n    contents.BatchCount(len(batch_items)))\nmessage = messages.ResponseMessage(response_header=header, batch_items=\n    batch_items)\ncert_mock.return_value = 'test_certificate'\nkmip_engine = engine.KmipEngine()\nkmip_engine._logger = mock.MagicMock()\nkmip_session = session.KmipSession(kmip_engine, None, None, name='name',\n    enable_tls_client_auth=False)\nkmip_session._engine = mock.MagicMock()\nkmip_session.authenticate = mock.MagicMock()\nkmip_session.authenticate.return_value = 'test', ['group A', 'group B']\nkmip_session._engine.process_request = mock.MagicMock(return_value=(message,\n    kmip_session._max_response_size, contents.ProtocolVersion(1, 2)))\nkmip_session._logger = mock.MagicMock()\nkmip_session._connection = mock.MagicMock()\nkmip_session._connection.shared_ciphers = mock.MagicMock(return_value=[(\n    'AES128-SHA256', 'TLSv1/SSLv3', 128), ('AES256-SHA256', 'TLSv1/SSLv3', \n    256)])\nkmip_session._connection.cipher = mock.MagicMock(return_value=(\n    'AES128-SHA256', 'TLSv1/SSLv3', 128))\nkmip_session._receive_request = mock.MagicMock(return_value=data)\nkmip_session._send_response = mock.MagicMock()\nkmip_session.authenticate = mock.MagicMock(return_value=('John Doe', [\n    'Group A']))\nkmip_session._handle_message_loop()\nkmip_session._receive_request.assert_called_once_with()\nkmip_session._logger.info.assert_any_call('Session client identity: John Doe')\nkmip_session._logger.debug.assert_any_call('Possible session ciphers: 2')\nkmip_session._logger.debug.assert_any_call(('AES128-SHA256', 'TLSv1/SSLv3',\n    128))\nkmip_session._logger.debug.assert_any_call(('AES256-SHA256', 'TLSv1/SSLv3',\n    256))\nkmip_session._logger.debug.assert_any_call('Session cipher selected: {0}'.\n    format(('AES128-SHA256', 'TLSv1/SSLv3', 128)))\nkmip_session._logger.warning.assert_not_called()\nkmip_session._logger.exception.assert_not_called()\nself.assertTrue(kmip_session._send_response.called)\nmock.patch('kmip.services.server.auth.get_certificate_from_connection')mock.patch('kmip.core.messages.messages.RequestMessage')"
}