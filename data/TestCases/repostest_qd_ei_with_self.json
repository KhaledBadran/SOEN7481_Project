{
    "functionName": "test_qd_ei_with_self",
    "className": "TestExpectedImprovement",
    "fileName": "/Yelp_&_MOE/moe_&_tests_&_optimal_learning_&_python_&_python_version_&_expected_improvement_test.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"Compare the 1D analytic EI results to the qD analytic EI results, checking several random points per test case.\n\n        This test case (unfortunately) suffers from a lot of random variation in the qEI parameters. The tolerance is high because\n        changing the number of iterations or the maximum relative error allowed in the mvndst function leads to different answers.\n\n        These precomputed answers were calculated from:\n        maxpts = 200,000 * q\n        releps = 1.0e-14\n        abseps = 0\n\n        These values are a tradeoff between accuracy / speed.\n        \"\"\"\nei_tolerance = 6e-06\nnumpy.random.seed(8790)\nprecomputed_answers = [5.8358359319076654e-08, 5.835835933284698e-08, \n    2.4017434700631564e-07, 0.34959502089260613, 0.35052471599680496, \n    0.3505247527657193, 0.3505247477049013, 0.4095861927462218]\nfor test_case in self.gp_test_environments[2:3]:\n    domain, python_gp = test_case\n    all_points = domain.generate_uniform_random_points_in_domain(9)\n    for i in range(2, 10):\n        points_to_sample = all_points[0:i]\n        mvndst_accurate_parameters = (moe.optimal_learning.python.\n            python_version.expected_improvement.MVNDSTParameters(releps=0,\n            abseps=1e-06, maxpts_per_dim=200000))\n        python_ei_eval = (moe.optimal_learning.python.python_version.\n            expected_improvement.ExpectedImprovement(python_gp,\n            points_to_sample, mvndst_parameters=mvndst_accurate_parameters))\n        python_ei_eval.current_point = points_to_sample\n        python_qd_ei = python_ei_eval.compute_expected_improvement()\n        self.assert_scalar_within_absolute(python_qd_ei,\n            precomputed_answers[i - 2], ei_tolerance)\n"
}