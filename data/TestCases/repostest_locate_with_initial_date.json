{
    "functionName": "test_locate_with_initial_date",
    "className": "TestKmipEngine",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_services_&_server_&_test_engine.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test the Locate operation when 'Initial Date' attributes are given.\n        \"\"\"\ne = engine.KmipEngine()\ne._data_store = self.engine\ne._data_store_session_factory = self.session_factory\ne._data_session = e._data_store_session_factory()\ne._is_allowed_by_operation_policy = mock.Mock(return_value=True)\ne._logger = mock.MagicMock()\nkey = b'\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\nobj_a = pie_objects.SymmetricKey(enums.CryptographicAlgorithm.AES, 128, key,\n    name='name1')\nobj_a.initial_date = int(time.time())\nobj_a_time_str = time.strftime('%a %b %-2d %H:%M:%S %Y', time.gmtime(obj_a.\n    initial_date))\ntime.sleep(2)\nmid_time = int(time.time())\nmid_time_str = time.strftime('%a %b %-2d %H:%M:%S %Y', time.gmtime(mid_time))\ntime.sleep(2)\nobj_b = pie_objects.SymmetricKey(enums.CryptographicAlgorithm.DES, 128, key,\n    name='name2')\nobj_b.initial_date = int(time.time())\nobj_b_time_str = time.strftime('%a %b %-2d %H:%M:%S %Y', time.gmtime(obj_b.\n    initial_date))\ntime.sleep(2)\nend_time = int(time.time())\ne._data_session.add(obj_a)\ne._data_session.add(obj_b)\ne._data_session.commit()\ne._data_session = e._data_store_session_factory()\nid_a = str(obj_a.unique_identifier)\nid_b = str(obj_b.unique_identifier)\nattribute_factory = factory.AttributeFactory()\nattrs = [attribute_factory.create_attribute(enums.AttributeType.\n    INITIAL_DATE, obj_a.initial_date)]\npayload = payloads.LocateRequestPayload(attributes=attrs)\ne._logger.reset_mock()\nresponse_payload = e._process_locate(payload)\ne._data_session.commit()\ne._data_session = e._data_store_session_factory()\ne._logger.info.assert_any_call('Processing operation: Locate')\ne._logger.debug.assert_any_call(\n    \"Failed match: object's initial date ({}) does not match the specified initial date ({}).\"\n    .format(obj_b_time_str, obj_a_time_str))\ne._logger.debug.assert_any_call('Locate filter matched object: {}'.format(id_a)\n    )\nself.assertEqual(len(response_payload.unique_identifiers), 1)\nself.assertIn(id_a, response_payload.unique_identifiers)\nattrs = [attribute_factory.create_attribute(enums.AttributeType.\n    INITIAL_DATE, mid_time), attribute_factory.create_attribute(enums.\n    AttributeType.INITIAL_DATE, end_time)]\npayload = payloads.LocateRequestPayload(attributes=attrs)\ne._logger.reset_mock()\nresponse_payload = e._process_locate(payload)\ne._data_session.commit()\ne._data_session = e._data_store_session_factory()\ne._logger.info.assert_any_call('Processing operation: Locate')\ne._logger.debug.assert_any_call(\n    \"Failed match: object's initial date ({}) is less than the starting initial date ({}).\"\n    .format(obj_a_time_str, mid_time_str))\ne._logger.debug.assert_any_call('Locate filter matched object: {}'.format(id_b)\n    )\nself.assertEqual(len(response_payload.unique_identifiers), 1)\nself.assertIn(id_b, response_payload.unique_identifiers)\n"
}