{
    "functionName": "test_dstrf",
    "className": null,
    "fileName": "/proloyd_&_DstRF/dstrf_&_test_dstrf.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "meg = load('meg').sub(time=(0, 5))\nstim = load('stim').sub(time=(0, 5))\nfwd = load('fwd_sol')\nemptyroom = load('emptyroom')\nmodel = dstrf(meg, stim, fwd, emptyroom, tstop=0.2, normalize='l1', mu=\n    0.0019444, n_iter=3, n_iterc=3, n_iterf=10)\nassert model.residual == pytest.approx(172.714, 0.001)\nstim_baseline = stim.mean()\nassert model._stim_baseline[0] == stim_baseline\nassert model._stim_scaling[0] == (stim - stim_baseline).abs().mean()\nassert model.h.norm('time').norm('source').norm('space') == pytest.approx(\n    6.043e-10, rel=0.001)\nmodel_2 = pickle.loads(pickle.dumps(model, pickle.HIGHEST_PROTOCOL))\nassert_dataobj_equal(model_2.h, model.h)\nassert_dataobj_equal(model_2.h_scaled, model.h_scaled)\nassert model_2.residual == model.residual\ndiff = stim.diff('time')\nstim2 = concatenate([diff.clip(0), diff.clip(max=0)], Categorial('rep', [\n    'on', 'off']))\nmodel = dstrf(meg, [stim, stim2], fwd, emptyroom, tstop=0.2, normalize='l2',\n    mu=0.0019444, n_iter=3, n_iterc=3, n_iterf=10)\nassert model._stim_baseline[0] == stim.mean()\nassert model._stim_scaling[0] == stim.std()\nassert model.h[0].norm('time').norm('source').norm('space') == pytest.approx(\n    4.732e-10, 0.001)\nmodel = dstrf(meg, stim, fwd, emptyroom, tstop=0.2, normalize='l1', mu=\n    'auto', n_iter=1, n_iterc=2, n_iterf=2, n_workers=1)\nassert model.mu == pytest.approx(0.0203, 0.001)\nmodel.cv_info()\n"
}