{
    "functionName": "test_DMSAngle",
    "className": "TestConvert",
    "fileName": "/GeoscienceAustralia_&_GeodePy/geodepy_&_tests_&_test_convert.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "self.assertEqual(dec_ex, dms_ex.dec())\nself.assertEqual(hp_ex, dms_ex.hp())\nself.assertEqual(hp_ex3, dms_ex3.hp())\nself.assertEqual(ddm_ex, dms_ex.ddm())\nself.assertEqual(-ddm_ex, -dms_ex.ddm())\nself.assertEqual(ddm_ex3, dms_ex3.ddm())\nself.assertEqual(-dec_ex, DMSAngle(-dms_ex.degree, dms_ex.minute, dms_ex.\n    second).dec())\nself.assertEqual(dec_ex, DMSAngle(dms_ex.degree, -dms_ex.minute, -dms_ex.\n    second).dec())\nself.assertAlmostEqual(-dec_ex4, DMSAngle(0, -dms_ex4.minute, dms_ex4.\n    second).dec(), 9)\nself.assertAlmostEqual(dec_ex4, DMSAngle(0, dms_ex4.minute, dms_ex4.second)\n    .dec(), 9)\nself.assertEqual(-dec_ex5, DMSAngle(0, 0, -dms_ex5.second).dec())\nself.assertEqual(dec_ex5, DMSAngle(0, 0, dms_ex5.second).dec())\nself.assertEqual(-dms_ex3, DMSAngle(12, 34, -30))\nself.assertEqual(dms_ex.sign, 1)\nself.assertEqual(-dms_ex.sign, -1)\nself.assertEqual(dms_ex4.sign, 1)\nself.assertEqual(-dms_ex4.sign, -1)\nself.assertEqual(dms_ex5.sign, 1)\nself.assertEqual(-dms_ex5.sign, -1)\nself.assertEqual(DMSAngle(-1, 2, 3).sign, -1)\nself.assertEqual(DMSAngle(1, -2, 3).sign, 1)\nself.assertEqual(DMSAngle(1, 2, -3).sign, 1)\nself.assertEqual(DMSAngle(0, -1, 2).sign, -1)\nself.assertEqual(DMSAngle(0, 0, -3).sign, -1)\nself.assertEqual(DMSAngle(-0, 1, 2).sign, 1)\nself.assertEqual(DMSAngle(-0.0, 1, 2).sign, -1)\nself.assertEqual(repr(dms_ex), '{DMSAngle: +123d 44m 55.5s}')\nself.assertEqual(repr(dms_ex3), '{DMSAngle: -12d 34m 30s}')\nself.assertEqual(dec_ex + dec_ex2, (dms_ex + dms_ex2).dec())\nself.assertEqual(dec_ex2 + dec_ex, (dms_ex2 + dms_ex).dec())\nself.assertEqual(dec_ex - dec_ex2, (dms_ex - dms_ex2).dec())\nself.assertEqual(dec_ex2 - dec_ex, (dms_ex2 - dms_ex).dec())\nself.assertEqual(dec_ex * 5, (dms_ex * 5).dec())\nself.assertEqual(5 * dec_ex, (5 * dms_ex).dec())\nself.assertEqual(dec_ex / 3, (dms_ex / 3).dec())\nself.assertEqual(abs(-dms_ex), dms_ex)\nself.assertEqual(-dms_ex2, dms_ex3)\nself.assertEqual(dms_ex2, abs(dms_ex3))\nself.assertEqual(dms_ex, ddm_ex)\nself.assertTrue(dms_ex == dms_ex)\nself.assertFalse(dms_ex == dms_ex2)\nself.assertTrue(dms_ex != dms_ex2)\nself.assertFalse(dms_ex != dms_ex)\nself.assertTrue(dms_ex > dms_ex2)\nself.assertFalse(dms_ex2 > dms_ex)\nself.assertTrue(dms_ex2 < dms_ex)\nself.assertFalse(dms_ex < dms_ex2)\nwith self.assertRaises(TypeError):\n    dms_ex * 'a'\nwith self.assertRaises(TypeError):\n    'a' * dms_ex\nwith self.assertRaises(TypeError):\n    dms_ex / 'a'\nwith self.assertRaises(TypeError):\n    dms_ex + 'a'\nwith self.assertRaises(TypeError):\n    'a' + dms_ex\nwith self.assertRaises(TypeError):\n    dms_ex - 'a'\nwith self.assertRaises(TypeError):\n    'a' - dms_ex\nself.assertEqual(DMSAngle(1, 2, 3) + DDMAngle(2, 3), DMSAngle(3, 5, 3))\nself.assertEqual(DMSAngle(3, 2, 0) - DDMAngle(2, 2.5), DMSAngle(0, 59, 30))\nself.assertEqual(DDMAngle(2, 3) + DMSAngle(1, 2, 3), DDMAngle(3, 5.05))\nself.assertEqual(DDMAngle(3, 2) - DMSAngle(2, 2, 30), DDMAngle(0, 59.5))\n"
}