{
    "functionName": "test_drmm_padding",
    "className": null,
    "fileName": "/NTMC-Community_&_MatchZoo-py/tests_&_dataloader_&_test_callbacks.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "preprocessor = preprocessors.BasicPreprocessor()\ndata_preprocessed = preprocessor.fit_transform(train_raw, verbose=0)\nembedding_matrix = load_from_file(embeddings.EMBED_10_GLOVE, mode='glove')\nterm_index = preprocessor.context['vocab_unit'].state['term_index']\nembedding_matrix = embedding_matrix.build_matrix(term_index)\nhistgram_callback = callbacks.Histogram(embedding_matrix=embedding_matrix,\n    bin_size=30, hist_mode='LCH')\ndataset = Dataset(data_preprocessed, mode='point', batch_size=5, callbacks=\n    [histgram_callback])\npre_fixed_padding = callbacks.DRMMPadding(fixed_length_left=5,\n    fixed_length_right=5, pad_mode='pre')\ndataloader = DataLoader(dataset, callback=pre_fixed_padding)\nfor batch in dataloader:\n    assert batch[0]['text_left'].shape == (5, 5)\n    assert batch[0]['text_right'].shape == (5, 5)\n    assert batch[0]['match_histogram'].shape == (5, 5, 30)\npost_padding = callbacks.DRMMPadding(pad_mode='post')\ndataloader = DataLoader(dataset, callback=post_padding)\nfor batch in dataloader:\n    max_left_len = max(batch[0]['length_left'].detach().cpu().numpy())\n    max_right_len = max(batch[0]['length_right'].detach().cpu().numpy())\n    assert batch[0]['text_left'].shape == (5, max_left_len)\n    assert batch[0]['text_right'].shape == (5, max_right_len)\n    assert batch[0]['match_histogram'].shape == (5, max_left_len, 30)\n"
}