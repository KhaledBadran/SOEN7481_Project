{
    "functionName": "test_locate_with_offset_and_maximum_items",
    "className": "TestKmipEngine",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_services_&_server_&_test_engine.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test locate operation with specified offset and maximum item limits.\n        \"\"\"\ne = engine.KmipEngine()\ne._data_store = self.engine\ne._data_store_session_factory = self.session_factory\ne._data_session = e._data_store_session_factory()\ne._is_allowed_by_operation_policy = mock.Mock(return_value=True)\ne._logger = mock.MagicMock()\nkey = b'\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\nobj_a = pie_objects.SymmetricKey(enums.CryptographicAlgorithm.AES, 128, key,\n    name='name1')\nobj_a.initial_date = int(time.time())\ntime.sleep(2)\nobj_b = pie_objects.SymmetricKey(enums.CryptographicAlgorithm.DES, 128, key,\n    name='name2')\nobj_b.initial_date = int(time.time())\ntime.sleep(2)\nobj_c = pie_objects.SymmetricKey(enums.CryptographicAlgorithm.AES, 128, key,\n    name='name3')\nobj_c.initial_date = int(time.time())\ne._data_session.add(obj_a)\ne._data_session.add(obj_b)\ne._data_session.add(obj_c)\ne._data_session.commit()\ne._data_session = e._data_store_session_factory()\nid_a = str(obj_a.unique_identifier)\nid_b = str(obj_b.unique_identifier)\nid_c = str(obj_c.unique_identifier)\npayload = payloads.LocateRequestPayload()\ne._logger.reset_mock()\nresponse_payload = e._process_locate(payload)\ne._data_session.commit()\ne._data_session = e._data_store_session_factory()\ne._logger.info.assert_any_call('Processing operation: Locate')\nself.assertEqual([id_c, id_b, id_a], response_payload.unique_identifiers)\npayload = payloads.LocateRequestPayload(offset_items=1, maximum_items=1)\ne._logger.reset_mock()\nresponse_payload = e._process_locate(payload)\ne._data_session.commit()\ne._data_session = e._data_store_session_factory()\ne._logger.info.assert_any_call('Processing operation: Locate')\nself.assertEqual([id_b], response_payload.unique_identifiers)\npayload = payloads.LocateRequestPayload(offset_items=2)\ne._logger.reset_mock()\nresponse_payload = e._process_locate(payload)\ne._data_session.commit()\ne._data_session = e._data_store_session_factory()\ne._logger.info.assert_any_call('Processing operation: Locate')\nself.assertEqual([id_a], response_payload.unique_identifiers)\npayload = payloads.LocateRequestPayload(maximum_items=2)\ne._logger.reset_mock()\nresponse_payload = e._process_locate(payload)\ne._data_session.commit()\ne._data_session = e._data_store_session_factory()\ne._logger.info.assert_any_call('Processing operation: Locate')\nself.assertEqual([id_c, id_b], response_payload.unique_identifiers)\n"
}