{
    "functionName": "test_no_condition_specific",
    "className": "TestGetSimulationToOptimizationParameterMapping",
    "fileName": "/PEtab-dev_&_PEtab/tests_&_test_parameter_mapping.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "condition_df = condition_df_2_conditions\nmeasurement_df = pd.DataFrame(data={OBSERVABLE_ID: ['obs1', 'obs2'],\n    SIMULATION_CONDITION_ID: ['condition1', 'condition2'],\n    PREEQUILIBRATION_CONDITION_ID: ['', ''], OBSERVABLE_PARAMETERS: ['', ''\n    ], NOISE_PARAMETERS: ['', '']})\n_, sbml_model = minimal_sbml_model\nadd_global_parameter(sbml_model, 'dynamicParameter1').setValue(1.0)\nadd_global_parameter(sbml_model, 'dynamicParameter2').setValue(2.0)\nadd_global_parameter(sbml_model, 'dynamicParameter3').setValue(3.0)\ns = sbml_model.createSpecies()\ns.setId('someSpecies')\ncondition_df['someSpecies'] = [0.0, 0.0]\nexpected = [({}, {'dynamicParameter1': 1.0, 'dynamicParameter2': 2.0,\n    'dynamicParameter3': 3.0, 'fixedParameter1': 1.0}, {}, {\n    'dynamicParameter1': LIN, 'dynamicParameter2': LIN, 'dynamicParameter3':\n    LIN, 'fixedParameter1': LIN}), ({}, {'dynamicParameter1': 1.0,\n    'dynamicParameter2': 2.0, 'dynamicParameter3': 3.0, 'fixedParameter1': \n    2.0}, {}, {'dynamicParameter1': LIN, 'dynamicParameter2': LIN,\n    'dynamicParameter3': LIN, 'fixedParameter1': LIN})]\nactual = petab.get_optimization_to_simulation_parameter_mapping(sbml_model=\n    sbml_model, measurement_df=measurement_df, condition_df=condition_df)\nassert actual == expected\nparameter_df = pd.DataFrame(data={petab.PARAMETER_ID: ['dynamicParameter1',\n    'dynamicParameter2', 'dynamicParameter3'], petab.ESTIMATE: [0, 1, 1],\n    petab.NOMINAL_VALUE: [11.0, 12.0, None], petab.PARAMETER_SCALE: [petab.\n    LOG, petab.LOG10, petab.LIN]})\nparameter_df.set_index(PARAMETER_ID, inplace=True)\nexpected = [({}, {'dynamicParameter1': 11.0, 'dynamicParameter2':\n    'dynamicParameter2', 'dynamicParameter3': 'dynamicParameter3',\n    'fixedParameter1': 1.0}, {}, {'dynamicParameter1': LIN,\n    'dynamicParameter2': LOG10, 'dynamicParameter3': LIN, 'fixedParameter1':\n    LIN}), ({}, {'dynamicParameter1': 11.0, 'dynamicParameter2':\n    'dynamicParameter2', 'dynamicParameter3': 'dynamicParameter3',\n    'fixedParameter1': 2.0}, {}, {'dynamicParameter1': LIN,\n    'dynamicParameter2': LOG10, 'dynamicParameter3': LIN, 'fixedParameter1':\n    LIN})]\nactual = petab.get_optimization_to_simulation_parameter_mapping(sbml_model=\n    sbml_model, measurement_df=measurement_df, condition_df=condition_df,\n    parameter_df=parameter_df)\nassert actual == expected\nexpected = [({}, {'dynamicParameter1': np.log(11.0), 'dynamicParameter2':\n    'dynamicParameter2', 'dynamicParameter3': 'dynamicParameter3',\n    'fixedParameter1': 1.0}, {}, {'dynamicParameter1': LOG,\n    'dynamicParameter2': LOG10, 'dynamicParameter3': LIN, 'fixedParameter1':\n    LIN}), ({}, {'dynamicParameter1': np.log(11.0), 'dynamicParameter2':\n    'dynamicParameter2', 'dynamicParameter3': 'dynamicParameter3',\n    'fixedParameter1': 2.0}, {}, {'dynamicParameter1': LOG,\n    'dynamicParameter2': LOG10, 'dynamicParameter3': LIN, 'fixedParameter1':\n    LIN})]\nactual = petab.get_optimization_to_simulation_parameter_mapping(sbml_model=\n    sbml_model, measurement_df=measurement_df, condition_df=condition_df,\n    parameter_df=parameter_df, scaled_parameters=True)\nassert actual == expected\nexpected = [({}, {'dynamicParameter1': 'dynamicParameter1',\n    'dynamicParameter2': 'dynamicParameter2', 'dynamicParameter3':\n    'dynamicParameter3', 'fixedParameter1': 1.0}, {}, {'dynamicParameter1':\n    LOG, 'dynamicParameter2': LOG10, 'dynamicParameter3': LIN,\n    'fixedParameter1': LIN}), ({}, {'dynamicParameter1':\n    'dynamicParameter1', 'dynamicParameter2': 'dynamicParameter2',\n    'dynamicParameter3': 'dynamicParameter3', 'fixedParameter1': 2.0}, {},\n    {'dynamicParameter1': LOG, 'dynamicParameter2': LOG10,\n    'dynamicParameter3': LIN, 'fixedParameter1': LIN})]\nactual = petab.get_optimization_to_simulation_parameter_mapping(sbml_model=\n    sbml_model, measurement_df=measurement_df, condition_df=condition_df,\n    parameter_df=parameter_df, fill_fixed_parameters=False)\nassert actual == expected\nstaticmethod"
}