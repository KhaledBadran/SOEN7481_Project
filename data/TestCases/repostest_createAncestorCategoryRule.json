{
    "functionName": "test_createAncestorCategoryRule",
    "className": "DynamicPlaylistTests",
    "fileName": "/kaltura_&_KalturaGeneratedAPIClientsPython/KalturaClient_&_tests_&_test_playlist.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "referenceId = 'pytest.DynamicPlaylistTests.test_createAncestorCategoryRule'\ntopCategory = KalturaCategory()\ntopCategory.setName('TopCategory_' + str(time.time()))\ntopCategory = self.client.category.add(topCategory)\nself.addCleanup(self.client.category.delete, topCategory.getId())\nsubCategory = KalturaCategory()\nsubCategory.setName('SubCategory' + str(time.time()))\nsubCategory.setParentId(topCategory.getId())\nsubCategory = self.client.category.add(subCategory)\nself.addCleanup(self.client.category.delete, subCategory.getId())\nmediaEntry = KalturaMediaEntry()\nmediaEntry.setName(referenceId)\nmediaEntry.setReferenceId(referenceId)\nmediaEntry.setCategoriesIds(subCategory.getId())\nmediaEntry.setMediaType(KalturaMediaType(KalturaMediaType.VIDEO))\nulFile = getTestFile('DemoVideo.flv')\nuploadTokenId = self.client.media.upload(ulFile)\nmediaEntry = self.client.media.addFromUploadedFile(mediaEntry, uploadTokenId)\nself.addCleanup(self.client.media.delete, mediaEntry.getId())\nkplaylist = KalturaPlaylist()\nkplaylist.setName(referenceId)\nkplaylist.setPlaylistType(KalturaPlaylistType(KalturaPlaylistType.DYNAMIC))\nkplaylist.setTotalResults(10)\nkplaylist.setReferenceId(referenceId)\nkFilter = KalturaPlaylistFilter()\nkFilter.setCategoryAncestorIdIn(topCategory.getId())\nkplaylist.setFilters([kFilter])\nkplaylist = self.client.playlist.add(kplaylist)\nself.addCleanup(self.client.playlist.delete, kplaylist.getId())\nprint(\"Waiting for Media Entry to be 'Ready'\")\nsleeptime = 5\nmediaEntry = self.client.media.get(mediaEntry.getId())\nwhile mediaEntry.getStatus().getValue() != '2':\n    print('media entry status is {}'.format(mediaEntry.getStatus().getValue()))\n    time.sleep(sleeptime)\n    mediaEntry = self.client.media.get(mediaEntry.getId())\nresults = self.client.playlist.execute(kplaylist.getId(), kplaylist)\nself.assertEqual(len(results), 1)\nself.assertEqual(results[0].getName(), referenceId)\n"
}