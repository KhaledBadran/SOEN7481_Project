{
    "functionName": "createEmptyDataFile",
    "className": null,
    "fileName": "/jakob-lass_&_MJOLNIR/MJOLNIR_&_Data_&_DataFile.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"Create an empty data file with a given sample and measurement parameters.\n\n    Args:\n\n        - A3 (list or float): Value(s) of measurement A3.\n\n        - A4 (list or float): Value(s) of measurement A4.\n\n        - Ei (list or float): Value(s) of measurement Ei.\n\n        - sample (MJOLNIR Sample): Sample measured in data file.\n\n    Kwargs:\n\n        - Monitor (int): Monitor count for datafile (default 50 000)\n\n        - A3Off (float): Offset in A3 used in datafile (default 0.0)\n\n        - A4Off (float): Offset in A4 used in datafile (default 0.0)\n\n        - title (string): Title of datafile (default EmptyDataFileTitle)\n\n        - name (string): name of datafile (default EmptyDataFile)\n\n        - temperature (double): Sample temperature (default None)\n        \n        - electricField (double): Sample electricField (default None)\n\n        - magneticField (double): Sample magneticField (default None)\n\n        - detectors (int): Number of detectors in spectrometer (default 104)\n\n        - pixels (int): Number of pixels/detector in spectrometer (default 1024)\n\n        - normalizationFiles (list or string): List or string to normalization file (default None)\n\n    .. warning::\n        If no normalization file(s) is/are provided, the resulting data file cannot be converted to HKL!\n\n    \"\"\"\ndf = DataFile()\nA3 = np.asarray([A3]).flatten()\nA4 = np.asarray([A4]).flatten()\nEi = np.asarray([Ei]).flatten()\nisChanging = np.array([len(A3) > 1, len(A4) > 1, len(Ei) > 1])\nisChangingData = np.array([A3, A4, Ei])[isChanging]\nif np.sum(isChanging) > 1:\n    if not np.all([(x.shape == isChangingData[0].shape) for x in\n        isChangingData[1:]]):\n        names = np.array(['A3', 'A4', 'Ei'])\n        raise AttributeError(\n            'More than one parameter is changing but they do not have the same shape! Changing: {}'\n            .format(', '.join(str(x) for x in names[isChanging])))\nelif np.sum(isChanging) == 0:\n    raise AttributeError(\n        'No parameter is changing. At least one parameter must be changing through the scan.'\n        )\nsteps = len(isChangingData[0])\nMonitor = np.asarray([Monitor] * steps)\ndf.A3Off = np.array([A3Off])\ndf.A4Off = np.array([A4Off])\ndf.Monitor = np.array(Monitor)\ndf.MonitorPreset = Monitor[0]\ndf.MonitorMode = 'm'\ndf.sample = sample\ndf.title = title\ndf.name = name\ndf.fileLocation = 'Unknown'\ndf.temperature = temperature\ndf.electricField = electricField\ndf.magneticField = magneticField\nunits = np.array(['degree', 'degree', 'meV'])\nparams = np.array(['a3', 'a4', 'ei'])\ndf.scanUnits = units[isChanging]\ndf.scanParameters = params[isChanging]\ndf.type = 'hdf'\ndf.scanCommand = 'Unknown'\ndf.scanValues = isChangingData\ndf.instrument = 'CAMEA'\ndf.Time = df.Monitor * 0.0013011099243\ndf.Ei = np.array(Ei)\ndf.A3 = np.array(A3)\ndf.A4 = np.array(A4)\ndf.I = np.array(np.zeros((steps, detectors, pixels)))\ndf.binning = None\nif not normalizationFiles is None:\n    calib = []\n    binning = []\n    for f in normalizationFiles:\n        data = np.loadtxt(f, skiprows=3, delimiter=',')\n        EfTable = data[:, ([3, 4, 5, 6])]\n        A4 = data[:, (-1)]\n        bound = data[:, ([7, 8])]\n        calib.append([EfTable, A4, bound])\n        binning.append(len(A4) / (104 * 8))\n    df.instrumentCalibrations = np.array(calib)\n    df.possibleBinnings = binning\n    df.loadBinning(1)\ndf.mask = np.zeros_like(df.I, dtype=bool)\nreturn df\n_tools.KwargChecker()"
}