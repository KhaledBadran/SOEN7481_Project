{
    "functionName": "coldcard_test_suite",
    "className": null,
    "fileName": "/bitcoin-core_&_HWI/test_&_test_coldcard.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "try:\n    os.unlink('coldcard-emulator.stdout')\nexcept FileNotFoundError:\n    pass\ncoldcard_log = open('coldcard-emulator.stdout', 'a')\ncoldcard_proc = subprocess.Popen(['python3', os.path.basename(simulator),\n    '--ms'], cwd=os.path.dirname(simulator), stdout=coldcard_log,\n    preexec_fn=os.setsid)\nwhile True:\n    try:\n        enum_res = process_commands(['enumerate'])\n        found = False\n        for dev in enum_res:\n            if dev['type'] == 'coldcard' and 'error' not in dev:\n                found = True\n                break\n        if found:\n            break\n    except:\n        pass\n    time.sleep(0.5)\ndef cleanup_simulator():\n    if coldcard_proc.poll() is None:\n        os.killpg(os.getpgid(coldcard_proc.pid), signal.SIGTERM)\n        os.waitpid(os.getpgid(coldcard_proc.pid), 0)\n    coldcard_log.close()\natexit.register(cleanup_simulator)\nclass TestColdcardManCommands(DeviceTestCase):\n\n    def test_setup(self):\n        result = self.do_command(self.dev_args + ['-i', 'setup'])\n        self.assertIn('error', result)\n        self.assertIn('code', result)\n        self.assertEqual(result['error'],\n            'The Coldcard does not support software setup')\n        self.assertEqual(result['code'], -9)\n\n    def test_wipe(self):\n        result = self.do_command(self.dev_args + ['wipe'])\n        self.assertIn('error', result)\n        self.assertIn('code', result)\n        self.assertEqual(result['error'],\n            'The Coldcard does not support wiping via software')\n        self.assertEqual(result['code'], -9)\n\n    def test_restore(self):\n        result = self.do_command(self.dev_args + ['-i', 'restore'])\n        self.assertIn('error', result)\n        self.assertIn('code', result)\n        self.assertEqual(result['error'],\n            'The Coldcard does not support restoring via software')\n        self.assertEqual(result['code'], -9)\n\n    def test_backup(self):\n        result = self.do_command(self.dev_args + ['backup'])\n        self.assertTrue(result['success'])\n        self.assertIn('The backup has been written to', result['message'])\n        backup_filename = result['message'].split(' ')[-1]\n        os.remove(backup_filename)\n\n    def test_pin(self):\n        result = self.do_command(self.dev_args + ['promptpin'])\n        self.assertIn('error', result)\n        self.assertIn('code', result)\n        self.assertEqual(result['error'],\n            'The Coldcard does not need a PIN sent from the host')\n        self.assertEqual(result['code'], -9)\n        result = self.do_command(self.dev_args + ['sendpin', '1234'])\n        self.assertIn('error', result)\n        self.assertIn('code', result)\n        self.assertEqual(result['error'],\n            'The Coldcard does not need a PIN sent from the host')\n        self.assertEqual(result['code'], -9)\nclass TestColdcardGetXpub(DeviceTestCase):\n\n    def test_getxpub(self):\n        result = self.do_command(self.dev_args + ['--expert', 'getxpub',\n            'm/44h/0h/0h/3'])\n        self.assertEqual(result['xpub'],\n            'tpubDFHiBJDeNvqPWNJbzzxqDVXmJZoNn2GEtoVcFhMjXipQiorGUmps3e5ieDGbRrBPTFTh9TXEKJCwbAGW9uZnfrVPbMxxbFohuFzfT6VThty'\n            )\n        self.assertTrue(result['testnet'])\n        self.assertFalse(result['private'])\n        self.assertEqual(result['depth'], 4)\n        self.assertEqual(result['parent_fingerprint'], 'bc123c3e')\n        self.assertEqual(result['child_num'], 3)\n        self.assertEqual(result['chaincode'],\n            '806b26507824f73bc331494afe122f428ef30dde80b2c1ce025d2d03aff411e7')\n        self.assertEqual(result['pubkey'],\n            '0368000bdff5e0b71421c37b8514de8acd4d98ba9908d183d9da56d02ca4fcfd08'\n            )\nsuite = unittest.TestSuite()\nsuite.addTest(DeviceTestCase.parameterize(TestColdcardManCommands, rpc,\n    userpass, 'coldcard', 'coldcard', '/tmp/ckcc-simulator.sock',\n    '0f056943', '', interface=interface))\nsuite.addTest(DeviceTestCase.parameterize(TestColdcardGetXpub, rpc,\n    userpass, 'coldcard', 'coldcard', '/tmp/ckcc-simulator.sock',\n    '0f056943',\n    'tpubDDpWvmUrPZrhSPmUzCMBHffvC3HyMAPnWDSAQNBTnj1iZeJa7BZQEttFiP4DS4GCcXQHezdXhn86Hj6LHX5EDstXPWrMaSneRWM8yUf6NFd'\n    , interface=interface))\nsuite.addTest(DeviceTestCase.parameterize(TestDeviceConnect, rpc, userpass,\n    'coldcard', 'coldcard', '/tmp/ckcc-simulator.sock', '0f056943',\n    'tpubDDpWvmUrPZrhSPmUzCMBHffvC3HyMAPnWDSAQNBTnj1iZeJa7BZQEttFiP4DS4GCcXQHezdXhn86Hj6LHX5EDstXPWrMaSneRWM8yUf6NFd'\n    , interface=interface))\nsuite.addTest(DeviceTestCase.parameterize(TestDeviceConnect, rpc, userpass,\n    'coldcard_simulator', 'coldcard', '/tmp/ckcc-simulator.sock',\n    '0f056943',\n    'tpubDDpWvmUrPZrhSPmUzCMBHffvC3HyMAPnWDSAQNBTnj1iZeJa7BZQEttFiP4DS4GCcXQHezdXhn86Hj6LHX5EDstXPWrMaSneRWM8yUf6NFd'\n    , interface=interface))\nsuite.addTest(DeviceTestCase.parameterize(TestGetDescriptors, rpc, userpass,\n    'coldcard', 'coldcard', '/tmp/ckcc-simulator.sock', '0f056943',\n    'tpubDDpWvmUrPZrhSPmUzCMBHffvC3HyMAPnWDSAQNBTnj1iZeJa7BZQEttFiP4DS4GCcXQHezdXhn86Hj6LHX5EDstXPWrMaSneRWM8yUf6NFd'\n    , interface=interface))\nsuite.addTest(DeviceTestCase.parameterize(TestGetKeypool, rpc, userpass,\n    'coldcard', 'coldcard', '/tmp/ckcc-simulator.sock', '0f056943',\n    'tpubDDpWvmUrPZrhSPmUzCMBHffvC3HyMAPnWDSAQNBTnj1iZeJa7BZQEttFiP4DS4GCcXQHezdXhn86Hj6LHX5EDstXPWrMaSneRWM8yUf6NFd'\n    , interface=interface))\nsuite.addTest(DeviceTestCase.parameterize(TestDisplayAddress, rpc, userpass,\n    'coldcard', 'coldcard', '/tmp/ckcc-simulator.sock', '0f056943',\n    'tpubDDpWvmUrPZrhSPmUzCMBHffvC3HyMAPnWDSAQNBTnj1iZeJa7BZQEttFiP4DS4GCcXQHezdXhn86Hj6LHX5EDstXPWrMaSneRWM8yUf6NFd'\n    , interface=interface))\nsuite.addTest(DeviceTestCase.parameterize(TestSignMessage, rpc, userpass,\n    'coldcard', 'coldcard', '/tmp/ckcc-simulator.sock', '0f056943',\n    'tpubDDpWvmUrPZrhSPmUzCMBHffvC3HyMAPnWDSAQNBTnj1iZeJa7BZQEttFiP4DS4GCcXQHezdXhn86Hj6LHX5EDstXPWrMaSneRWM8yUf6NFd'\n    , interface=interface))\nsuite.addTest(DeviceTestCase.parameterize(TestSignTx, rpc, userpass,\n    'coldcard', 'coldcard', '/tmp/ckcc-simulator.sock', '0f056943',\n    'tpubDDpWvmUrPZrhSPmUzCMBHffvC3HyMAPnWDSAQNBTnj1iZeJa7BZQEttFiP4DS4GCcXQHezdXhn86Hj6LHX5EDstXPWrMaSneRWM8yUf6NFd'\n    , interface=interface))\nresult = unittest.TextTestRunner(stream=sys.stdout, verbosity=2).run(suite)\ncleanup_simulator()\natexit.unregister(cleanup_simulator)\nreturn result.wasSuccessful()\n"
}