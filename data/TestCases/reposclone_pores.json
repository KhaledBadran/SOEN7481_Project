{
    "functionName": "clone_pores",
    "className": null,
    "fileName": "/pmeal_&_OpenPNM/openpnm_&_topotools_&_topotools.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"\n    Clones the specified pores and adds them to the network\n\n    Parameters\n    ----------\n    network : OpenPNM Network Object\n        The Network object to which the new pores are to be added\n\n    pores : array_like\n        List of pores to clone\n\n    labels : string, or list of strings\n        The labels to apply to the clones, default is 'clone'\n\n    mode : string\n        Controls the connections between parents and clones.  Options are:\n\n        - 'parents': (Default) Each clone is connected only to its parent\n        - 'siblings': Clones are only connected to each other in the same\n                      manner as parents were connected\n        - 'isolated': No connections between parents or siblings\n    \"\"\"\nif len(network.project.geometries()) > 0:\n    logger.warning(\n        'Network has active Geometries, new pores must be assigned a Geometry')\nif len(network.project.phases()) > 0:\n    raise Exception('Network has active Phases, cannot proceed')\nif type(labels) == str:\n    labels = [labels]\nnetwork._parse_indices(pores)\nNp = network.Np\nNt = network.Nt\nparents = np.array(pores, ndmin=1)\npcurrent = network['pore.coords']\npclone = pcurrent[(pores), :]\npnew = np.concatenate((pcurrent, pclone), axis=0)\nNpnew = np.shape(pnew)[0]\nclones = np.arange(Np, Npnew)\nfor item in labels:\n    network['pore.' + item] = False\n    network['throat.' + item] = False\nif mode == 'parents':\n    tclone = np.vstack((parents, clones)).T\n    extend(network=network, pore_coords=pclone, throat_conns=tclone)\nif mode == 'siblings':\n    ts = network.find_neighbor_throats(pores=pores, mode='xnor')\n    tclone = network['throat.conns'][ts] + network.num_pores()\n    extend(network=network, pore_coords=pclone, throat_conns=tclone)\nif mode == 'isolated':\n    extend(network=network, pore_coords=pclone)\nfor item in labels:\n    network['pore.' + item][network.pores('all') >= Np] = True\n    network['throat.' + item][network.throats('all') >= Nt] = True\nnetwork._am.clear()\nnetwork._im.clear()\n"
}