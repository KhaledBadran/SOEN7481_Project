{
    "functionName": "test_get_with_key_format_type",
    "className": "TestKmipEngine",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_services_&_server_&_test_engine.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that the key format type is handled properly in a Get request.\n        \"\"\"\ne = engine.KmipEngine()\ne._data_store = self.engine\ne._data_store_session_factory = self.session_factory\ne._data_session = e._data_store_session_factory()\ne._is_allowed_by_operation_policy = mock.Mock(return_value=True)\ne._logger = mock.MagicMock()\nobj_a = pie_objects.SymmetricKey(enums.CryptographicAlgorithm.AES, 0, b'')\ne._data_session.add(obj_a)\ne._data_session.commit()\ne._data_session = e._data_store_session_factory()\nid_a = str(obj_a.unique_identifier)\npayload = payloads.GetRequestPayload(unique_identifier=id_a,\n    key_format_type=enums.KeyFormatType.RAW)\nresponse_payload = e._process_get(payload)\ne._data_session.commit()\ne._data_session = e._data_store_session_factory()\ne._logger.info.assert_any_call('Processing operation: Get')\nself.assertIsInstance(response_payload.secret, secrets.SymmetricKey)\nself.assertEqual(enums.CryptographicAlgorithm.AES, response_payload.secret.\n    key_block.cryptographic_algorithm.value)\nself.assertEqual(0, response_payload.secret.key_block.cryptographic_length.\n    value)\nself.assertEqual(b'', response_payload.secret.key_block.key_value.\n    key_material.value)\nself.assertEqual(enums.KeyFormatType.RAW, response_payload.secret.key_block\n    .key_format_type.value)\ne._logger.reset_mock()\npayload = payloads.GetRequestPayload(unique_identifier=id_a,\n    key_format_type=enums.KeyFormatType.OPAQUE)\nargs = payload,\nregex = 'Key format conversion from RAW to OPAQUE is unsupported.'\nsix.assertRaisesRegex(self, exceptions.KeyFormatTypeNotSupported, regex, e.\n    _process_get, *args)\ne._logger.info.assert_any_call('Processing operation: Get')\ne._data_session = e._data_store_session_factory()\ne._logger.reset_mock()\nobj_b = pie_objects.OpaqueObject(b'', enums.OpaqueDataType.NONE)\ne._data_session.add(obj_b)\ne._data_session.commit()\ne._data_session = e._data_store_session_factory()\nid_b = str(obj_b.unique_identifier)\npayload = payloads.GetRequestPayload(unique_identifier=id_b,\n    key_format_type=enums.KeyFormatType.RAW)\nargs = payload,\nregex = 'Key format is not applicable to the specified object.'\nsix.assertRaisesRegex(self, exceptions.KeyFormatTypeNotSupported, regex, e.\n    _process_get, *args)\ne._logger.info.assert_any_call('Processing operation: Get')\n"
}