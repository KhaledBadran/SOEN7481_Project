{
    "functionName": "benchmarkEncodeDataSeconds",
    "className": null,
    "fileName": "/named-data_&_PyNDN2/examples_&_test_encode_decode_benchmark.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"\n    Loop to encode a data packet nIterations times.\n\n    :param int nIterations: The number of iterations.\n    :param bool useComplex: If true, use a large name, large content and all\n      fields. If false, use a small name, small content and only required\n      fields.\n    :param bool useCrypto: If true, sign the data packet.  If false, use a blank\n      signature.\n    :param KeyType keyType: KeyType.RSA or EC, used if useCrypto is True.\n    :return: A tuple (duration, encoding) where duration is the number of\n      seconds for all iterations and encoding is the wire encoding.\n    :rtype: (float, Blob)\n    \"\"\"\nif useComplex:\n    name = Name(\n        '/ndn/ucla.edu/apps/lwndn-test/numbers.txt/%FD%05%05%E8%0C%CE%1D/%00')\n    contentString = ''\n    count = 1\n    contentString += '%d' % count\n    count += 1\n    while len(contentString) < 1115:\n        contentString += ' %d' % count\n        count += 1\n    content = Name.fromEscapedString(contentString)\nelse:\n    name = Name('/test')\n    content = Name.fromEscapedString('abc')\nfinalBlockId = Name('/%00')[0]\nkeyChain = KeyChain('pib-memory:', 'tpm-memory:')\nkeyChain.importSafeBag(SafeBag(Name('/testname/KEY/123'), Blob(\n    DEFAULT_EC_PRIVATE_KEY_DER if keyType == KeyType.EC else\n    DEFAULT_RSA_PRIVATE_KEY_DER, False), Blob(DEFAULT_EC_PUBLIC_KEY_DER if \n    keyType == KeyType.EC else DEFAULT_RSA_PUBLIC_KEY_DER, False)))\ncertificateName = keyChain.getDefaultCertificateName()\nsignatureBits = Blob(bytearray(256))\nstart = getNowSeconds()\nfor i in range(nIterations):\n    data = Data(name)\n    data.setContent(content)\n    if useComplex:\n        data.getMetaInfo().setFreshnessPeriod(1000)\n        data.getMetaInfo().setFinalBlockId(finalBlockId)\n    if useCrypto:\n        keyChain.sign(data)\n    else:\n        sha256Signature = data.getSignature()\n        keyLocator = sha256Signature.getKeyLocator()\n        keyLocator.setType(KeyLocatorType.KEYNAME)\n        keyLocator.setKeyName(certificateName)\n        sha256Signature.setSignature(signatureBits)\n    encoding = data.wireEncode()\nfinish = getNowSeconds()\nreturn finish - start, encoding\n"
}