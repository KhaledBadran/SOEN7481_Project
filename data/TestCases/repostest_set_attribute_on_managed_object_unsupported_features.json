{
    "functionName": "test_set_attribute_on_managed_object_unsupported_features",
    "className": "TestKmipEngine",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_services_&_server_&_test_engine.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that the right errors are generated when unsupported features\n        are referenced while setting managed object attributes.\n        \"\"\"\ne = engine.KmipEngine()\ne._data_store = self.engine\ne._data_store_session_factory = self.session_factory\ne._data_session = e._data_store_session_factory()\ne._logger = mock.MagicMock()\nattribute_factory = factory.AttributeFactory()\nmanaged_object = pie_objects.SymmetricKey(enums.CryptographicAlgorithm.AES,\n    8, b'\\x00')\nname_a = attribute_factory.create_attribute(enums.AttributeType.NAME,\n    attributes.Name.create('Test Symmetric Key', enums.NameType.\n    UNINTERPRETED_TEXT_STRING))\nname_b = attribute_factory.create_attribute(enums.AttributeType.NAME,\n    attributes.Name.create('Test Symmetric Key', enums.NameType.\n    UNINTERPRETED_TEXT_STRING))\nargs = managed_object, ('Name', [name_a.attribute_value, name_b.\n    attribute_value])\nregex = 'Cannot set duplicate name values.'\nsix.assertRaisesRegex(self, exceptions.InvalidField, regex, e.\n    _set_attribute_on_managed_object, *args)\nname_a = attribute_factory.create_attribute(enums.AttributeType.NAME,\n    attributes.Name.create('Test Symmetric Key', enums.NameType.\n    UNINTERPRETED_TEXT_STRING))\nname_b = attribute_factory.create_attribute(enums.AttributeType.NAME,\n    attributes.Name.create('Test Symmetric Key', enums.NameType.\n    UNINTERPRETED_TEXT_STRING))\nargs = managed_object, ('Digest', [name_a.attribute_value, name_b.\n    attribute_value])\nregex = 'The Digest attribute is unsupported.'\nsix.assertRaisesRegex(self, exceptions.InvalidField, regex, e.\n    _set_attribute_on_managed_object, *args)\nlength = attribute_factory.create_attribute(enums.AttributeType.\n    CRYPTOGRAPHIC_LENGTH, 128)\nargs = managed_object, ('Cryptographic Length', length.attribute_value)\nregex = 'Cannot overwrite the Cryptographic Length attribute.'\nsix.assertRaisesRegex(self, exceptions.InvalidField, regex, e.\n    _set_attribute_on_managed_object, *args)\ncustom_attribute = attribute_factory.create_attribute(enums.AttributeType.\n    CUSTOM_ATTRIBUTE, 'Test Group')\nargs = managed_object, ('Custom Attribute', custom_attribute.attribute_value)\nregex = 'The Custom Attribute attribute is unsupported.'\nsix.assertRaisesRegex(self, exceptions.InvalidField, regex, e.\n    _set_attribute_on_managed_object, *args)\n"
}