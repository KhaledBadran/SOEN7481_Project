{
    "functionName": "test_get_attribute_list_with_no_arguments",
    "className": "TestKmipEngine",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_services_&_server_&_test_engine.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that a GetAttributeList request with no arguments can be\n        processed correctly.\n        \"\"\"\ne = engine.KmipEngine()\ne._data_store = self.engine\ne._data_store_session_factory = self.session_factory\ne._data_session = e._data_store_session_factory()\ne._is_allowed_by_operation_policy = mock.Mock(return_value=True)\ne._logger = mock.MagicMock()\nsecret = pie_objects.SymmetricKey(enums.CryptographicAlgorithm.AES, 0, b'')\ne._data_session.add(secret)\ne._data_session.commit()\ne._data_session = e._data_store_session_factory()\ne._id_placeholder = '1'\npayload = payloads.GetAttributeListRequestPayload()\nresponse_payload = e._process_get_attribute_list(payload)\ne._data_session.commit()\ne._data_session = e._data_store_session_factory()\ne._logger.info.assert_any_call('Processing operation: GetAttributeList')\nself.assertEqual('1', response_payload.unique_identifier)\nself.assertEqual(9, len(response_payload.attribute_names))\nself.assertIn('Object Type', response_payload.attribute_names)\nself.assertIn('Name', response_payload.attribute_names)\nself.assertIn('Cryptographic Algorithm', response_payload.attribute_names)\nself.assertIn('Cryptographic Length', response_payload.attribute_names)\nself.assertIn('Operation Policy Name', response_payload.attribute_names)\nself.assertIn('Cryptographic Usage Mask', response_payload.attribute_names)\nself.assertIn('State', response_payload.attribute_names)\nself.assertIn('Unique Identifier', response_payload.attribute_names)\nself.assertIn('Initial Date', response_payload.attribute_names)\n"
}