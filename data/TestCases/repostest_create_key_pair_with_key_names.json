{
    "functionName": "test_create_key_pair_with_key_names",
    "className": "TestProxyKmipClient",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_pie_&_test_client.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that an asymmetric key pair can be created with proper inputs,\n        specifically testing that the private / public names are correctly\n        sent with the request\n        \"\"\"\ncommon_template = obj.TemplateAttribute(attributes=[self.attribute_factory.\n    create_attribute(enums.AttributeType.CRYPTOGRAPHIC_ALGORITHM, enums.\n    CryptographicAlgorithm.RSA), self.attribute_factory.create_attribute(\n    enums.AttributeType.CRYPTOGRAPHIC_LENGTH, 2048)], tag=enums.Tags.\n    COMMON_TEMPLATE_ATTRIBUTE)\nprivate_template = obj.TemplateAttribute(attributes=[self.attribute_factory\n    .create_attribute(enums.AttributeType.NAME, 'Test_Private_Key')], tag=\n    enums.Tags.PRIVATE_KEY_TEMPLATE_ATTRIBUTE)\npublic_template = obj.TemplateAttribute(attributes=[self.attribute_factory.\n    create_attribute(enums.AttributeType.NAME, 'Test_Public_Key')], tag=\n    enums.Tags.PUBLIC_KEY_TEMPLATE_ATTRIBUTE)\nstatus = enums.ResultStatus.SUCCESS\nresult = results.CreateKeyPairResult(contents.ResultStatus(status),\n    public_key_uuid='aaaaaaaa-1111-2222-3333-ffffffffffff',\n    private_key_uuid='ffffffff-3333-2222-1111-aaaaaaaaaaaa')\nwith ProxyKmipClient() as client:\n    client.proxy.create_key_pair.return_value = result\n    public_uid, private_uid = client.create_key_pair(enums.\n        CryptographicAlgorithm.RSA, 2048, public_name='Test_Public_Key',\n        private_name='Test_Private_Key')\n    kwargs = {'common_template_attribute': common_template,\n        'private_key_template_attribute': private_template,\n        'public_key_template_attribute': public_template}\n    client.proxy.create_key_pair.assert_called_with(**kwargs)\nmock.patch('kmip.pie.client.KMIPProxy', mock.MagicMock(spec_set=KMIPProxy))"
}