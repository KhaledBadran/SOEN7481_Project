{
    "functionName": "test_create_get_destroy",
    "className": "TestKmipEngine",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_services_&_server_&_test_engine.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that a managed object can be created, retrieved, and destroyed\n        without error.\n        \"\"\"\ne = engine.KmipEngine()\ne._data_store = self.engine\ne._data_store_session_factory = self.session_factory\ne._data_session = e._data_store_session_factory()\ne._is_allowed_by_operation_policy = mock.Mock(return_value=True)\ne._logger = mock.MagicMock()\nattribute_factory = factory.AttributeFactory()\nobject_type = enums.ObjectType.SYMMETRIC_KEY\ntemplate_attribute = objects.TemplateAttribute(attributes=[\n    attribute_factory.create_attribute(enums.AttributeType.NAME, attributes\n    .Name.create('Test Symmetric Key', enums.NameType.\n    UNINTERPRETED_TEXT_STRING)), attribute_factory.create_attribute(enums.\n    AttributeType.CRYPTOGRAPHIC_ALGORITHM, enums.CryptographicAlgorithm.AES\n    ), attribute_factory.create_attribute(enums.AttributeType.\n    CRYPTOGRAPHIC_LENGTH, 256), attribute_factory.create_attribute(enums.\n    AttributeType.CRYPTOGRAPHIC_USAGE_MASK, [enums.CryptographicUsageMask.\n    ENCRYPT, enums.CryptographicUsageMask.DECRYPT])])\npayload = payloads.CreateRequestPayload(object_type=object_type,\n    template_attribute=template_attribute)\nresponse_payload = e._process_create(payload)\ne._data_session.commit()\ne._data_session = e._data_store_session_factory()\ne._logger.info.assert_any_call('Processing operation: Create')\nuid = response_payload.unique_identifier\nself.assertEqual('1', uid)\ne._logger.reset_mock()\npayload = payloads.GetRequestPayload(unique_identifier=uid)\nresponse_payload = e._process_get(payload)\ne._data_session.commit()\ne._data_session = e._data_store_session_factory()\ne._logger.info.assert_any_call('Processing operation: Get')\nself.assertEqual(enums.ObjectType.SYMMETRIC_KEY, response_payload.object_type)\nself.assertEqual(str(uid), response_payload.unique_identifier)\nself.assertIsInstance(response_payload.secret, secrets.SymmetricKey)\nkey_block = response_payload.secret.key_block\nself.assertEqual(256, len(key_block.key_value.key_material.value) * 8)\nself.assertEqual(enums.KeyFormatType.RAW, key_block.key_format_type.value)\nself.assertEqual(enums.CryptographicAlgorithm.AES, key_block.\n    cryptographic_algorithm.value)\nself.assertEqual(256, key_block.cryptographic_length.value)\ne._logger.reset_mock()\npayload = payloads.DestroyRequestPayload(unique_identifier=attributes.\n    UniqueIdentifier(uid))\nresponse_payload = e._process_destroy(payload)\ne._data_session.commit()\ne._data_session = e._data_store_session_factory()\ne._logger.info.assert_any_call('Processing operation: Destroy')\nself.assertEqual(str(uid), response_payload.unique_identifier.value)\nargs = payload,\nregex = 'Could not locate object: {0}'.format(uid)\nsix.assertRaisesRegex(self, exceptions.ItemNotFound, regex, e.\n    _process_destroy, *args)\ne._data_session.commit()\ne._data_store_session_factory()\n"
}