{
    "functionName": "plot_throat",
    "className": "DelaunayGeometry",
    "fileName": "/pmeal_&_OpenPNM/openpnm_&_materials_&_VoronoiFibers.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"\n        Plot a throat or list of throats in 2D showing key data\n\n        Parameters\n        ----------\n        throats : list or array containing throat indices tp include in figure\n\n        fig : matplotlib figure object to place plot in\n        \"\"\"\nimport matplotlib.pyplot as plt\nthroat_list = []\nfor throat in throats:\n    if throat in range(self.num_throats()):\n        throat_list.append(throat)\n    else:\n        logger.warn('Throat: ' + str(throat) + ' not part of geometry')\nif len(throat_list) > 0:\n    verts = self['throat.vertices'][throat_list]\n    offsets = self['throat.offset_vertices'][throat_list]\n    normals = self['throat.normal'][throat_list]\n    coms = self['throat.centroid'][throat_list]\n    incentre = self['throat.incenter'][throat_list]\n    inradius = 0.5 * self['throat.indiameter'][throat_list]\n    row_col = np.ceil(np.sqrt(len(throat_list)))\n    for i in range(len(throat_list)):\n        if fig is None:\n            fig = plt.figure()\n        ax = fig.add_subplot(row_col, row_col, i + 1)\n        vert_2D = self._rotate_and_chop(verts[i], normals[i], [0, 0, 1])\n        hull = ConvexHull(vert_2D, qhull_options='QJ Pp')\n        for simplex in hull.simplices:\n            plt.plot(vert_2D[simplex, 0], vert_2D[simplex, 1], 'k-',\n                linewidth=2)\n        plt.scatter(vert_2D[:, (0)], vert_2D[:, (1)])\n        offset_2D = self._rotate_and_chop(offsets[i], normals[i], [0, 0, 1])\n        offset_hull = ConvexHull(offset_2D, qhull_options='QJ Pp')\n        for simplex in offset_hull.simplices:\n            plt.plot(offset_2D[simplex, 0], offset_2D[simplex, 1], 'g-',\n                linewidth=2)\n        plt.scatter(offset_2D[:, (0)], offset_2D[:, (1)])\n        xmax = vert_2D[:, (0)].max()\n        xmin = vert_2D[:, (0)].min()\n        ymax = vert_2D[:, (1)].max()\n        ymin = vert_2D[:, (1)].min()\n        x_range = xmax - xmin\n        y_range = ymax - ymin\n        if x_range > y_range:\n            my_range = x_range\n        else:\n            my_range = y_range\n        lower_bound_x = xmin - my_range * 0.5\n        upper_bound_x = xmin + my_range * 1.5\n        lower_bound_y = ymin - my_range * 0.5\n        upper_bound_y = ymin + my_range * 1.5\n        plt.axis((lower_bound_x, upper_bound_x, lower_bound_y, upper_bound_y))\n        plt.grid(b=True, which='major', color='b', linestyle='-')\n        centroid = self._rotate_and_chop(coms[i], normals[i], [0, 0, 1])\n        incent = self._rotate_and_chop(incentre[i], normals[i], [0, 0, 1])\n        plt.scatter(centroid[0][0], centroid[0][1])\n        plt.scatter(incent[0][0], incent[0][1], c='r')\n        t = np.linspace(0, 2 * np.pi, 200)\n        u = inradius[i] * np.cos(t) + incent[0][0]\n        v = inradius[i] * np.sin(t) + incent[0][1]\n        plt.plot(u, v, 'r-')\n        ax.ticklabel_format(style='sci', scilimits=(0, 0))\nelse:\n    logger.error('Please provide throat indices')\nreturn fig\n"
}