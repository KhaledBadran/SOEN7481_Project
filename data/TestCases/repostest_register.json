{
    "functionName": "test_register",
    "className": "TestKMIPClientIntegration",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_integration_&_services_&_test_kmip_client.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "credential_type = CredentialType.USERNAME_AND_PASSWORD\ncredential_value = {'Username': 'Peter', 'Password': 'abc123'}\ncredential = self.cred_factory.create_credential(credential_type,\n    credential_value)\nobject_type = ObjectType.SYMMETRIC_KEY\nalgorithm_value = CryptoAlgorithmEnum.AES\nmask_flags = [CryptographicUsageMask.ENCRYPT, CryptographicUsageMask.DECRYPT]\nattribute_type = AttributeType.CRYPTOGRAPHIC_USAGE_MASK\nusage_mask = self.attr_factory.create_attribute(attribute_type, mask_flags)\nattributes = [usage_mask]\ntemplate_attribute = TemplateAttribute(attributes=attributes)\nkey_format_type = KeyFormatType(KeyFormatTypeEnum.RAW)\nkey_data = b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\nkey_material = KeyMaterial(key_data)\nkey_value = KeyValue(key_material)\ncryptographic_algorithm = CryptographicAlgorithm(algorithm_value)\ncryptographic_length = CryptographicLength(128)\nkey_block = KeyBlock(key_format_type=key_format_type, key_compression_type=\n    None, key_value=key_value, cryptographic_algorithm=\n    cryptographic_algorithm, cryptographic_length=cryptographic_length,\n    key_wrapping_data=None)\nsecret = SymmetricKey(key_block)\nresult = self.client.register(object_type, template_attribute, secret,\n    credential)\nself._check_result_status(result.result_status.value, ResultStatus,\n    ResultStatus.SUCCESS)\nself._check_uuid(result.uuid, str)\nself._check_template_attribute(result.template_attribute, TemplateAttribute,\n    1, [[str, 'Unique Identifier', str, None]])\nuuid = result.uuid\nresult = self.client.get(uuid=uuid, credential=credential)\nself._check_result_status(result.result_status.value, ResultStatus,\n    ResultStatus.SUCCESS)\nself._check_object_type(result.object_type.value, ObjectType, ObjectType.\n    SYMMETRIC_KEY)\nself._check_uuid(result.uuid.value, str)\nsecret = result.secret\nexpected = SymmetricKey\nmessage = utils.build_er_error(result.__class__, 'type', expected, secret,\n    'secret')\nself.assertIsInstance(secret, expected, message)\nkey_block = result.secret.key_block\nkey_value = key_block.key_value\nkey_material = key_value.key_material\nexpected = key_data\nobserved = key_material.value\nmessage = utils.build_er_error(key_material.__class__, 'value', expected,\n    observed, 'value')\nself.assertEqual(expected, observed, message)\n"
}