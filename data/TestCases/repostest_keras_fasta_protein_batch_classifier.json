{
    "functionName": "test_keras_fasta_protein_batch_classifier",
    "className": null,
    "fileName": "/goeckslab_&_Galaxy-ML/galaxy_ml_&_tests_&_test_keras_galaxy.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "inputs = keras.Input(shape=(500, 20), name='protein')\nx = layers.Conv1D(32, 3, activation='relu')(inputs)\nx = layers.Conv1D(64, 3, activation='relu')(x)\nblock_1_output = layers.MaxPooling1D(3)(x)\nx = layers.Conv1D(64, 3, activation='relu', padding='same')(block_1_output)\nx = layers.Conv1D(64, 3, activation='relu', padding='same')(x)\nblock_2_output = layers.add([x, block_1_output])\nx = layers.Conv1D(64, 3, activation='relu', padding='same')(block_2_output)\nx = layers.Conv1D(64, 3, activation='relu', padding='same')(x)\nblock_3_output = layers.add([x, block_2_output])\nx = layers.Conv1D(64, 3, activation='relu')(block_3_output)\nx = layers.GlobalAveragePooling1D()(x)\nx = layers.Dense(256, activation='relu')(x)\nx = layers.Dropout(0.5)(x)\noutputs = layers.Dense(1, activation='softmax')(x)\nmodel = Model(inputs=inputs, outputs=outputs)\nconfig = model.get_config()\nfasta_path = 'None'\nbatch_generator = FastaProteinBatchGenerator(fasta_path, seq_length=500,\n    seed=42)\nclassifier = KerasGBatchClassifier(config, batch_generator, model_type=\n    'functional', batch_size=32, validation_fraction=0, epochs=3, seed=0)\nparams = classifier.get_params()\ngot = {}\nfor key, value in params.items():\n    if not key.startswith('layers') and not key.startswith('config'\n        ) and not key.endswith('generator'):\n        got[key] = value\nexpect = {'amsgrad': None, 'batch_size': 32, 'beta_1': None, 'beta_2': None,\n    'callbacks': None, 'class_positive_factor': 1,\n    'data_batch_generator__fasta_path': 'None',\n    'data_batch_generator__seed': 42, 'data_batch_generator__seq_length': \n    500, 'data_batch_generator__shuffle': True, 'decay': 0, 'epochs': 3,\n    'loss': 'binary_crossentropy', 'lr': 0.01, 'metrics': [], 'model_type':\n    'functional', 'momentum': 0, 'n_jobs': 1, 'nesterov': False,\n    'optimizer': 'sgd', 'prediction_steps': None, 'rho': None,\n    'schedule_decay': None, 'seed': 0, 'steps_per_epoch': None,\n    'validation_fraction': 0, 'validation_steps': None, 'verbose': 0}\nassert got == expect, got\ncloned_clf = clone(classifier)\nnew_params = {'data_batch_generator__fasta_path':\n    './tools/test-data/uniprot_sprot_10000L.fasta'}\ncloned_clf.set_params(**new_params)\nX1 = np.arange(1000)[:, (np.newaxis)]\ny1 = np.random.randint(2, size=1000)\ncv = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=123)\nscoring = {'acc': SCORERS['accuracy'], 'ba_acc': SCORERS['balanced_accuracy']}\ngrid = GridSearchCV(cloned_clf, {}, cv=cv, scoring=scoring, refit=False,\n    error_score='raise')\ngrid.fit(X1, y1)\nprint(grid.cv_results_)\ngot = grid.cv_results_['mean_test_acc'].tolist()[0]\nassert 0.4 <= got <= 0.6, got\n"
}