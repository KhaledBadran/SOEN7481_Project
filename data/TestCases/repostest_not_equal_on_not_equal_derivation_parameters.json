{
    "functionName": "test_not_equal_on_not_equal_derivation_parameters",
    "className": "TestDeriveKeyRequestPayload",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_core_&_messages_&_payloads_&_test_derive_key.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that the inequality operator returns True when comparing two\n        DeriveKey request payloads with different derivation parameters.\n        \"\"\"\na = payloads.DeriveKeyRequestPayload(derivation_parameters=attributes.\n    DerivationParameters(cryptographic_parameters=attributes.\n    CryptographicParameters(hashing_algorithm=enums.HashingAlgorithm.\n    SHA_256), initialization_vector=b'9Ht2I(4\\xa3', derivation_data=\n    b'\\xfa\\xd9\\x8bj\\xcam\\x87\\xdd'))\nb = payloads.DeriveKeyRequestPayload(derivation_parameters=attributes.\n    DerivationParameters(cryptographic_parameters=attributes.\n    CryptographicParameters(hashing_algorithm=enums.HashingAlgorithm.SHA_1),\n    initialization_vector=b'\\xfa\\xd9\\x8bj\\xcam\\x87\\xdd', derivation_data=\n    b'9Ht2I(4\\xa3'))\nself.assertTrue(a != b)\nself.assertTrue(b != a)\na = payloads.DeriveKeyRequestPayload(derivation_parameters=attributes.\n    DerivationParameters(cryptographic_parameters=attributes.\n    CryptographicParameters(hashing_algorithm=enums.HashingAlgorithm.\n    SHA_256), initialization_vector=b'9Ht2I(4\\xa3', derivation_data=\n    b'\\xfa\\xd9\\x8bj\\xcam\\x87\\xdd'))\nb = payloads.DeriveKeyRequestPayload(derivation_parameters=attributes.\n    DerivationParameters())\nself.assertTrue(a != b)\nself.assertTrue(b != a)\na = payloads.DeriveKeyRequestPayload(derivation_parameters=None)\nb = payloads.DeriveKeyRequestPayload(derivation_parameters=attributes.\n    DerivationParameters(cryptographic_parameters=attributes.\n    CryptographicParameters(hashing_algorithm=enums.HashingAlgorithm.\n    SHA_256), initialization_vector=b'9Ht2I(4\\xa3', derivation_data=\n    b'\\xfa\\xd9\\x8bj\\xcam\\x87\\xdd'))\nself.assertTrue(a != b)\nself.assertTrue(b != a)\n"
}