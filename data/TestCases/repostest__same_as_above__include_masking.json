{
    "functionName": "test__same_as_above__include_masking",
    "className": "TestSerialTrailsFromFrame",
    "fileName": "/Jammy2211_&_PyAutoCTI/test_&_unit_&_charge_injection_&_test_ci_frame.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "pattern = ci_pattern.CIPatternUniform(normalization=1.0, regions=[(0, 3, 1,\n    4), (0, 3, 5, 8)])\nimage = np.array([[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0],\n    [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0], [0.0, 1.0, \n    2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]])\nmask = np.array([[False, False, False, False, False, False, False, False, \n    False, False, False], [False, False, True, False, True, False, True, \n    False, False, False, False], [False, False, False, False, False, False,\n    False, True, False, True, False]])\nframe = ci_frame.ChInj(frame_geometry=ci_frame.FrameGeometry.\n    euclid_bottom_left(), ci_pattern=pattern)\nstacked_trails = frame.serial_trails_stacked_array_from_frame(image,\n    columns=(0, 3), mask=mask)\nassert (stacked_trails == np.array([[6.0, 7.0, 8.0], [8.0, 7.0, 10.0], [6.0,\n    5.0, 8.0]])).all()\nassert (stacked_trails.mask == np.array([[False, False, False], [False, \n    False, False], [False, False, False]])).all()\ntrails_line = frame.serial_trails_line_binned_over_rows_from_frame(image,\n    columns=(0, 3), mask=mask)\nassert (trails_line == np.array([20.0 / 3.0, 19.0 / 3.0, 26.0 / 3.0])).all()\nmask = np.array([[False, False, False, False, False, False, False, False, \n    False, False, False], [False, False, True, False, True, False, True, \n    False, False, False, False], [False, False, False, False, False, True, \n    False, True, False, True, False]])\nframe = ci_frame.ChInj(frame_geometry=ci_frame.FrameGeometry.\n    euclid_bottom_left(), ci_pattern=pattern)\nstacked_trails = frame.serial_trails_stacked_array_from_frame(image,\n    columns=(0, 3), mask=mask)\nassert (stacked_trails.mask == np.array([[False, False, False], [False, \n    False, False], [False, True, False]])).all()\n"
}