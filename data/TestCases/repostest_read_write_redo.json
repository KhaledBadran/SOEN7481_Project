{
    "functionName": "test_read_write_redo",
    "className": "TestThellierGUI",
    "fileName": "/PmagPy_&_PmagPy/pmagpy_tests_&_test_thellier_gui.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "analysis_menu = self.get_menu_from_frame(self.frame, 'Analysis')\nwrite_redo_event = wx.PyCommandEvent(wx.EVT_MENU.typeId, analysis_menu.\n    FindItem(\"&Save current interpretations to a 'redo' file\"))\nread_redo_event = wx.PyCommandEvent(wx.EVT_MENU.typeId, analysis_menu.\n    FindItem(\"&Import previous interpretation from a 'redo' file\"))\nclear_interps_event = wx.PyCommandEvent(wx.EVT_MENU.typeId, analysis_menu.\n    FindItem('&Clear all current interpretations'))\nself.run_ai_on_frame(self.frame)\nself.frame.ProcessEvent(write_redo_event)\nself.assertTrue(os.path.isfile(os.path.join(self.frame.WD,\n    'thellier_GUI.redo')))\nold_interps = {sp: self.frame.Data[sp]['pars'] for sp in list(self.frame.\n    Data.keys())}\nself.frame.ProcessEvent(clear_interps_event)\ncleared_vals = []\n[cleared_vals.extend(list(self.frame.Data[sp]['pars'].keys())) for sp in\n    list(self.frame.Data.keys())]\nself.assertEqual(cleared_vals.count('lab_dc_field'), len(cleared_vals) / 3)\nself.assertEqual(cleared_vals.count('er_specimen_name'), len(cleared_vals) / 3)\nself.assertEqual(cleared_vals.count('er_sample_name'), len(cleared_vals) / 3)\nself.frame.ProcessEvent(read_redo_event)\nnew_interps = {sp: self.frame.Data[sp]['pars'] for sp in list(self.frame.\n    Data.keys())}\nself.assertTrue(all([(array(old_interps[k][k2]).all() == array(new_interps[\n    k][k2]).all() if hasattr(old_interps[k][k2], '__iter__') else \n    old_interps[k][k2] == new_interps[k][k2]) for k in list(new_interps.\n    keys()) for k2 in list(new_interps[k].keys()) if isinstance(old_interps\n    [k][k2], float) and isinstance(new_interps[k][k2], float) and not isnan\n    (old_interps[k][k2]) and not isnan(new_interps[k][k2])]))\nself.assertTrue(os.path.isfile(os.path.join(self.frame.WD,\n    'thellier_GUI.redo')))\ntry:\n    os.remove(os.path.join(self.frame.WD, 'thellier_GUI.redo'))\nexcept OSError:\n    pass\nself.assertFalse(os.path.isfile(os.path.join(self.frame.WD,\n    'thellier_GUI.redo')))\n"
}