{
    "functionName": "conv_input_length",
    "className": null,
    "fileName": "/Lasagne_&_Lasagne/lasagne_&_layers_&_conv.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"Helper function to compute the input size of a convolution operation\n\n    This function computes the length along a single axis, which corresponds\n    to a 1D convolution. It can also be used for convolutions with higher\n    dimensionalities by using it individually for each axis.\n\n    Parameters\n    ----------\n    output_length : int or None\n        The size of the output.\n\n    filter_size : int\n        The size of the filter.\n\n    stride : int\n        The stride of the convolution operation.\n\n    pad : int, 'full' or 'same' (default: 0)\n        By default, the convolution is only computed where the input and the\n        filter fully overlap (a valid convolution). When ``stride=1``, this\n        yields an output that is smaller than the input by ``filter_size - 1``.\n        The `pad` argument allows you to implicitly pad the input with zeros,\n        extending the output size.\n\n        A single integer results in symmetric zero-padding of the given size on\n        both borders.\n\n        ``'full'`` pads with one less than the filter size on both sides. This\n        is equivalent to computing the convolution wherever the input and the\n        filter overlap by at least one position.\n\n        ``'same'`` pads with half the filter size on both sides (one less on\n        the second side for an even filter size). When ``stride=1``, this\n        results in an output size equal to the input size.\n\n    Returns\n    -------\n    int or None\n        The smallest input size corresponding to the given convolution\n        parameters for the given output size, or ``None`` if `output_size` is\n        ``None``. For a strided convolution, any input size of up to\n        ``stride - 1`` elements larger than returned will still give the same\n        output size.\n\n    Raises\n    ------\n    ValueError\n        When an invalid padding is specified, a `ValueError` is raised.\n\n    Notes\n    -----\n    This can be used to compute the output size of a convolution backward pass,\n    also called transposed convolution, fractionally-strided convolution or\n    (wrongly) deconvolution in the literature.\n    \"\"\"\nif output_length is None:\n    return None\nif pad == 'valid':\n    pad = 0\nelif pad == 'full':\n    pad = filter_size - 1\nelif pad == 'same':\n    pad = filter_size // 2\nif not isinstance(pad, int_types):\n    raise ValueError('Invalid pad: {0}'.format(pad))\nreturn (output_length - 1) * stride - 2 * pad + filter_size\n"
}