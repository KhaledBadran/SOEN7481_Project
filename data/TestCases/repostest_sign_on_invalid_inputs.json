{
    "functionName": "test_sign_on_invalid_inputs",
    "className": "TestProxyKmipClient",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_pie_&_test_client.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that TypeError exceptions are raised when trying to sign\n        data with invalid parameters.\n        \"\"\"\nclient = ProxyKmipClient()\nclient.open()\nclient.proxy.sign.return_value = {}\nargs = [1234]\nkwargs = {'uid': '1', 'cryptographic_parameters': {}}\nself.assertRaisesRegex(TypeError, 'Data to be signed must be bytes.',\n    client.sign, *args, **kwargs)\nargs = [b'\\x01\\x02\\x03\\x04']\nkwargs = {'uid': 0, 'cryptographic_parameters': {}}\nself.assertRaisesRegex(TypeError, 'Unique identifier must be a string.',\n    client.sign, *args, **kwargs)\nkwargs = {'uid': '1', 'cryptographic_parameters': 'invalid'}\nself.assertRaisesRegex(TypeError,\n    'Cryptographic parameters must be a dictionary.', client.sign, *args,\n    **kwargs)\nmock.patch('kmip.pie.client.KMIPProxy', mock.MagicMock(spec_set=KMIPProxy))"
}