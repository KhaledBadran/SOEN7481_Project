{
    "functionName": "test_generate_candidates",
    "className": null,
    "fileName": "/Accenture_&_AmpliGraph/tests_&_ampligraph_&_discovery_&_test_discovery.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "X = np.stack([['entity_{}'.format(np.mod(x, 15)) for x in range(50)], [\n    'rel_{}'.format(np.mod(x, 5)) for x in range(50)], ['entity_{}'.format(\n    np.mod(x, 20)) for x in range(50)]], axis=1)\nX_candidates = generate_candidates(X, strategy='random_uniform', target_rel\n    ='rel_0', max_candidates=15, consolidate_sides=False, seed=1916)\nassert X_candidates.shape == (15, 3)\nX_candidates = generate_candidates(X, strategy='random_uniform', target_rel\n    ='rel_1', max_candidates=20, consolidate_sides=True, seed=1916)\nassert X_candidates.shape == (20, 3)\nassert X_candidates[0, 0] == 'entity_16'\nassert np.all(X_candidates[:, (1)] == 'rel_1')\nX_candidates = generate_candidates(X, strategy='random_uniform', target_rel\n    ='rel_0', max_candidates=20, consolidate_sides=False, seed=0)\nassert np.all(np.isin(X_candidates[:, (0)], np.unique(X[:, (0)])))\nassert np.all(np.isin(X_candidates[:, (2)], np.unique(X[:, (2)])))\nX_candidates = generate_candidates(X, strategy='random_uniform', target_rel\n    ='rel_0', max_candidates=100, consolidate_sides=True, seed=1)\nassert np.logical_or(np.any(np.isin(X_candidates[:, (2)], np.unique(X[:, (0\n    )]))), np.all(np.isin(X_candidates[:, (0)], np.unique(X[:, (2)]))))\nX_candidates = generate_candidates(X, strategy='entity_frequency',\n    target_rel='rel_0', max_candidates=20, consolidate_sides=False, seed=1)\nassert X_candidates.shape == (20, 3)\nX_candidates = generate_candidates(X, strategy='graph_degree', target_rel=\n    'rel_0', max_candidates=30, consolidate_sides=False, seed=1)\nassert X_candidates.shape == (30, 3)\nX_candidates = generate_candidates(X, strategy='cluster_coefficient',\n    target_rel='rel_0', max_candidates=30, consolidate_sides=False, seed=2)\nassert X_candidates.shape == (30, 3)\nX_candidates = generate_candidates(X, strategy='cluster_triangles',\n    target_rel='rel_0', max_candidates=50, consolidate_sides=False, seed=1)\nassert X_candidates.shape == (50, 3)\nX_candidates = generate_candidates(X, strategy='cluster_squares',\n    target_rel='rel_0', max_candidates=60, consolidate_sides=False, seed=1)\nassert X_candidates.shape == (60, 3)\n"
}