{
    "functionName": "test_predict_generator",
    "className": null,
    "fileName": "/goeckslab_&_Galaxy-ML/galaxy_ml_&_tests_&_test_keras_galaxy.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "ref_genome_path = (\n    'projects/selene/manuscript/case1/data/GRCh38_no_alt_analysis_set_GCA_000001405.15.fasta'\n    )\nintervals_path = 'projects/selene/manuscript/case1/data/hg38_TF_intervals.txt'\ntarget_path = 'projects/selene/manuscript/case1/data/GATA1_proery_bm.bed.gz'\nseed = 42\nrandom_state = 0\ngenerator = GenomicIntervalBatchGenerator(ref_genome_path=ref_genome_path,\n    intervals_path=intervals_path, target_path=target_path, seed=seed,\n    features=['Proery_BM|GATA1'], random_state=random_state)\ngenerator.set_processing_attrs()\nmodel = Sequential()\nmodel.add(Conv1D(filters=320, kernel_size=8, input_shape=(1000, 4)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPool1D(pool_size=4, strides=4))\nmodel.add(Dropout(0.2))\nmodel.add(Conv1D(filters=480, kernel_size=8))\nmodel.add(Activation('relu'))\nmodel.add(MaxPool1D(pool_size=4, strides=4))\nmodel.add(Dropout(0.2))\nmodel.add(Conv1D(filters=960, kernel_size=8))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Reshape((50880,)))\nmodel.add(Dense(1))\nmodel.add(Activation('relu'))\nmodel.add(Dense(1))\nmodel.add(Activation('sigmoid'))\nconfig = model.get_config()\nclassifier = KerasGBatchClassifier(config, clone(generator), optimizer=\n    'sgd', momentum=0.9, decay=1e-06, nesterov=True, batch_size=64, n_jobs=\n    4, epochs=2, steps_per_epoch=3, prediction_steps=10,\n    class_positive_factor=3, validation_steps=10, metrics=['acc',\n    'sparse_categorical_accuracy'])\nclf = clone(classifier)\nintervals = pd.read_csv(intervals_path, sep='\\t', header=None)\nn_samples = intervals.shape[0]\nX = np.arange(n_samples)[:, (np.newaxis)]\ncv = ShuffleSplit(1, test_size=0.2, random_state=123)\ntrain_index, test_index = next(cv.split(X))\nX_train, X_test = X[train_index], X[test_index]\nclf.fit(X_train)\npred_data_generator = generator.flow(X_test, batch_size=64)\npreds, y_true = _predict_generator(clf.model_, pred_data_generator, steps=2)\nassert preds.shape == (128, 1), y_true.shape\nassert 0.47 < preds[0][0] < 0.5, preds[0][0]\nassert y_true.shape == (128, 1), y_true.shape\nassert np.sum(y_true) == 9, np.sum(y_true)\nnottest"
}