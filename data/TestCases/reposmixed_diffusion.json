{
    "functionName": "mixed_diffusion",
    "className": null,
    "fileName": "/pmeal_&_OpenPNM/openpnm_&_models_&_physics_&_diffusive_conductance.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"\n    Calculate the diffusive conductance of conduits in network, where a\n    conduit is ( 1/2 pore - full throat - 1/2 pore ), assuming Knudsen\n    diffusivity. See the notes section.\n\n    Parameters\n    ----------\n    target : OpenPNM Object\n        The object which this model is associated with. This controls the\n        length of the calculated array, and also provides access to other\n        necessary properties.\n\n    pore_area : string\n        Dictionary key of the pore area values\n\n    throat_area : string\n        Dictionary key of the throat area values\n\n    pore_diffusivity : string\n        Dictionary key of the pore diffusivity values\n\n    throat_diffusivity : string\n        Dictionary key of the throat diffusivity values\n\n    conduit_lengths : string\n        Dictionary key of the conduit length values\n\n    conduit_shape_factors : string\n        Dictionary key of the conduit DIFFUSION shape factor values\n\n    Returns\n    -------\n    g : ndarray\n        Array containing diffusive conductance values for conduits in the\n        geometry attached to the given physics object.\n\n    Notes\n    -----\n    (0) This function is ONLY suitable for dilute mixtures and NOT those with\n    concentrated species.\n\n    (1) This function requires that all the necessary phase properties already\n    be calculated.\n\n    (2) This function calculates the specified property for the *entire*\n    network then extracts the values for the appropriate throats at the end.\n\n    (3) This function assumes cylindrical throats with constant cross-section\n    area. Corrections for different shapes and variable cross-section area can\n    be imposed by passing the proper conduit_shape_factors argument.\n\n    (4) shape_factor depends on the physics of the problem, i.e. diffusion-like\n    processes and fluid flow need different shape factors.\n\n    \"\"\"\nnetwork = target.project.network\nthroats = network.map_throats(throats=target.Ts, origin=target)\nphase = target.project.find_phase(target)\ncn = network['throat.conns'][throats]\nA1, A2 = network[pore_area][cn].T\nAt = network[throat_area][throats]\nL1 = network[conduit_lengths + '.pore1'][throats]\nLt = network[conduit_lengths + '.throat'][throats]\nL2 = network[conduit_lengths + '.pore2'][throats]\ntry:\n    SF1 = phase[conduit_shape_factors + '.pore1'][throats]\n    SFt = phase[conduit_shape_factors + '.throat'][throats]\n    SF2 = phase[conduit_shape_factors + '.pore2'][throats]\nexcept KeyError:\n    SF1 = SF2 = SFt = 1.0\nD1, D2 = phase[pore_diffusivity][cn].T\nDt = phase.interpolate_data(propname=pore_diffusivity)[throats]\nd1, d2 = network[pore_diameter][cn].T\ndt = network[throat_diameter][throats]\nMW1, MW2 = phase[molecular_weight][cn].T\nMWt = phase.interpolate_data(propname=molecular_weight)[throats]\nT1, T2 = phase[pore_temperature][cn].T\nTt = phase.interpolate_data(propname=pore_temperature)[throats]\nDK1 = d1 / 3 * (8 * const.R * T1 / const.pi / MW1) ** 0.5\nDK2 = d2 / 3 * (8 * const.R * T2 / const.pi / MW2) ** 0.5\nDKt = dt / 3 * (8 * const.R * Tt / const.pi / MWt) ** 0.5\nD1e = (1 / DK1 + 1 / D1) ** -1\nD2e = (1 / DK2 + 1 / D2) ** -1\nDte = (1 / DKt + 1 / Dt) ** -1\ng1 = D1e * A1 / L1\ng2 = D2e * A2 / L2\ngt = Dte * At / Lt\ng1[L1 == 0] = _np.inf\ng2[L2 == 0] = _np.inf\ngt[Lt == 0] = _np.inf\nreturn (1 / gt / SFt + 1 / g1 / SF1 + 1 / g2 / SF2) ** -1\n"
}