{
    "functionName": "test_partial_gromov_wasserstein",
    "className": null,
    "fileName": "/PythonOT_&_POT/test_&_test_partial.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "n_samples = 20\nn_noise = 10\np = ot.unif(n_samples + n_noise)\nq = ot.unif(n_samples + n_noise)\nmu_s = np.array([0, 0])\ncov_s = np.array([[1, 0], [0, 1]])\nmu_t = np.array([0, 0, 0])\ncov_t = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])\nxs = ot.datasets.make_2D_samples_gauss(n_samples, mu_s, cov_s)\nxs = np.concatenate((xs, (np.random.rand(n_noise, 2) + 1) * 4), axis=0)\nP = sp.linalg.sqrtm(cov_t)\nxt = np.random.randn(n_samples, 3).dot(P) + mu_t\nxt = np.concatenate((xt, (np.random.rand(n_noise, 3) + 1) * 10), axis=0)\nxt2 = xs[::-1].copy()\nC1 = ot.dist(xs, xs)\nC2 = ot.dist(xt, xt)\nC3 = ot.dist(xt2, xt2)\nm = 2 / 3\nres0, log0 = ot.partial.partial_gromov_wasserstein(C1, C3, p, q, m=m, log=\n    True, verbose=True)\nnp.testing.assert_allclose(res0, 0, atol=0.1, rtol=0.1)\nC1 = sp.spatial.distance.cdist(xs, xs)\nC2 = sp.spatial.distance.cdist(xt, xt)\nm = 1\nres0, log0 = ot.partial.partial_gromov_wasserstein(C1, C2, p, q, m=m, log=True)\nG = ot.gromov.gromov_wasserstein(C1, C2, p, q, 'square_loss')\nnp.testing.assert_allclose(G, res0, atol=0.0001)\nres, log = ot.partial.entropic_partial_gromov_wasserstein(C1, C2, p, q, 10,\n    m=m, log=True)\nG = ot.gromov.entropic_gromov_wasserstein(C1, C2, p, q, 'square_loss',\n    epsilon=10)\nnp.testing.assert_allclose(G, res, atol=0.01)\nw0, log0 = ot.partial.partial_gromov_wasserstein2(C1, C2, p, q, m=m, log=True)\nw0_val = ot.partial.partial_gromov_wasserstein2(C1, C2, p, q, m=m, log=False)\nG = log0['T']\nnp.testing.assert_allclose(w0, w0_val, atol=0.1, rtol=0.1)\nm = 2 / 3\nres0, log0 = ot.partial.partial_gromov_wasserstein(C1, C2, p, q, m=m, log=True)\nres, log = ot.partial.entropic_partial_gromov_wasserstein(C1, C2, p, q, 100,\n    m=m, log=True)\nnp.testing.assert_equal(res0.sum(1) <= p, [True] * len(p))\nnp.testing.assert_equal(res0.sum(0) <= q, [True] * len(q))\nnp.testing.assert_allclose(np.sum(res0), m, atol=0.0001)\nnp.testing.assert_equal(res.sum(1) <= p, [True] * len(p))\nnp.testing.assert_equal(res.sum(0) <= q, [True] * len(q))\nnp.testing.assert_allclose(np.sum(res), m, atol=0.0001)\n"
}