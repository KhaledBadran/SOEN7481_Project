{
    "functionName": "test_valley_detect",
    "className": "TestDetectPeaks",
    "fileName": "/kyleniemeyer_&_PyTeCK/pyteck_&_tests_&_test_detect_peaks.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\" Tests detection of valleys instead of peaks.\n        \"\"\"\ny = np.sin(2 * np.pi * 5 * np.linspace(0, 1, 200)) + np.random.randn(200) / 5.0\nmpd = 20\nvalleys = detect_peaks(y, mph=0, mpd=mpd, valley=True, show=False)\nfor idx, ind in enumerate(valleys):\n    start = max(0, ind - mpd)\n    end = min(len(y) - 1, ind + mpd)\n    valleys_before = np.array([i for i in range(start, ind) if y[i] < y[ind]])\n    valleys_after = np.array([i for i in range(ind + 1, end + 1) if y[i] <\n        y[ind]])\n    if valleys_before.size and valleys_before[0] == 0:\n        valleys_before = valleys_before[1:]\n    if valleys_after.size and valleys_after[-1] == y.size - 1:\n        valleys_after = valleys_after[:-1]\n    if idx > 0:\n        ind_prev = valleys[idx - 1]\n        idel = np.zeros(valleys_before.size, dtype=bool)\n        for i in range(valleys_before.size):\n            if valleys_before[i] - ind_prev <= mpd and y[ind_prev] < y[\n                valleys_before[i]]:\n                idel[i] = 1\n        valleys_before = valleys_before[~idel]\n    if idx < len(valleys) - 1:\n        ind_next = valleys[idx + 1]\n        idel = np.zeros(valleys_after.size, dtype=bool)\n        for i in range(valleys_after.size):\n            if ind_next - valleys_after[i] <= mpd and y[ind_next] < y[\n                valleys_after[i]]:\n                idel[i] = 1\n        valleys_after = valleys_after[~idel]\n    assert valleys_before.size == 0 and valleys_after.size == 0\n"
}