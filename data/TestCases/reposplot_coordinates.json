{
    "functionName": "plot_coordinates",
    "className": null,
    "fileName": "/pmeal_&_OpenPNM/openpnm_&_topotools_&_plottools.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"\n    Produce a 3D plot showing specified pore coordinates as markers.\n\n    Parameters\n    ----------\n    network : OpenPNM Network Object\n        The network whose topological connections to plot\n    pores : array_like (optional)\n        The list of pores to plot if only a sub-sample is desired.  This is\n        useful for inspecting a small region of the network.  If no pores are\n        specified then all are shown.\n    fig : Matplotlib figure handle\n        If a ``fig`` is supplied, then the coordinates will be overlaid.  This\n        enables the plotting of multiple different sets of pores as well as\n        throat connections from ``plot_connections``.\n    size_by : str or array_like\n        An ND-array of pore values (e.g. alg['pore.concentration']).  These\n        values are normalized by scaled by ``markersize``.\n    color_by : str or array_like\n        An ND-array of pore values (e.g. alg['pore.concentration']).\n    cmap : str or cmap object\n        The matplotlib colormap to use if specfying a pore property\n        for ``color_by``\n    color : str\n        A matplotlib named color (e.g. 'r' for red).\n    alpha : float\n        The transparency of the lines, with 1 being solid and 0 being invisible\n    marker : 's'\n        The marker to use.  The default is a circle.  Options are explained\n        `here <https://matplotlib.org/3.2.1/api/markers_api.html>`_\n    markersize : scalar\n        Controls size of marker, default is 1.0.  This value is used to scale\n        the ``size_by`` argument if given.\n\n    Notes\n    -----\n    The figure handle returned by this method can be passed into\n    ``plot_connections`` to create a plot that combines pore coordinates and\n    throat connections, and vice versa.\n\n    See Also\n    --------\n    plot_connections\n\n    Examples\n    --------\n    >>> import openpnm as op\n    >>> import matplotlib as mpl\n    >>> mpl.use('Agg')\n    >>> pn = op.network.Cubic(shape=[10, 10, 3])\n    >>> pn.add_boundary_pores()\n    >>> Ps = pn.pores('internal')\n    >>> # Create figure showing internal pores\n    >>> fig = op.topotools.plot_coordinates(pn, pores=Ps, c='b')\n    >>> Ps = pn.pores('*boundary')\n    >>> # Pass existing fig back into function to plot boundary pores\n    >>> fig = op.topotools.plot_coordinates(pn, pores=Ps, fig=fig, c='r')\n\n    \"\"\"\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib import cm\nfrom openpnm.topotools import dimensionality\nPs = network.Ps if pores is None else network._parse_indices(pores)\ndim = dimensionality(network)\nThreeD = True if dim.sum() == 3 else False\nif dim.sum() == 1:\n    dim[np.argwhere(~dim)[0]] = True\nif dim.sum() == 0:\n    dim[[0, 1]] = True\nfig = plt.figure() if fig is None else fig\nax = fig.gca()\nif ThreeD and ax.name != '3d':\n    fig.delaxes(ax)\n    ax = fig.add_subplot(111, projection='3d')\nX, Y, Z = network['pore.coords'][Ps].T\nif 'c' in kwargs.keys():\n    color = kwargs.pop('c')\nif 's' in kwargs.keys():\n    markersize = kwargs.pop('s')\nif color_by is not None:\n    color = cm.get_cmap(name=cmap)(color_by / color_by.max())\nif size_by is not None:\n    markersize = size_by / size_by.max() * markersize\nif ThreeD:\n    ax.scatter(X, Y, Z, c=color, s=markersize, marker=marker, alpha=alpha)\n    _scale_3d_axes(ax=ax, X=X, Y=Y, Z=Z)\nelse:\n    X_temp, Y_temp = np.column_stack((X, Y, Z))[:, (dim)].T\n    ax.scatter(X_temp, Y_temp, c=color, s=markersize, marker=marker, alpha=\n        alpha)\n    _scale_3d_axes(ax=ax, X=X, Y=Y, Z=np.zeros_like(Y))\n_label_axes(ax=ax, X=X, Y=Y, Z=Z)\nreturn fig\n"
}