{
    "functionName": "test_query_1_1",
    "className": "TestKmipEngine",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_services_&_server_&_test_engine.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that a Query request can be processed correctly, for KMIP 1.1.\n        \"\"\"\ne = engine.KmipEngine()\ne._logger = mock.MagicMock()\ne._protocol_version = contents.ProtocolVersion(1, 1)\npayload = payloads.QueryRequestPayload(query_functions=[enums.QueryFunction\n    .QUERY_OPERATIONS, enums.QueryFunction.QUERY_OBJECTS, enums.\n    QueryFunction.QUERY_SERVER_INFORMATION, enums.QueryFunction.\n    QUERY_APPLICATION_NAMESPACES, enums.QueryFunction.QUERY_EXTENSION_LIST,\n    enums.QueryFunction.QUERY_EXTENSION_MAP])\nresult = e._process_query(payload)\ne._logger.info.assert_called_once_with('Processing operation: Query')\nself.assertIsInstance(result, payloads.QueryResponsePayload)\nself.assertIsInstance(result.operations, list)\nself.assertEqual(13, len(result.operations))\nself.assertEqual(enums.Operation.CREATE, result.operations[0])\nself.assertEqual(enums.Operation.CREATE_KEY_PAIR, result.operations[1])\nself.assertEqual(enums.Operation.REGISTER, result.operations[2])\nself.assertEqual(enums.Operation.DERIVE_KEY, result.operations[3])\nself.assertEqual(enums.Operation.LOCATE, result.operations[4])\nself.assertEqual(enums.Operation.GET, result.operations[5])\nself.assertEqual(enums.Operation.GET_ATTRIBUTES, result.operations[6])\nself.assertEqual(enums.Operation.GET_ATTRIBUTE_LIST, result.operations[7])\nself.assertEqual(enums.Operation.ACTIVATE, result.operations[8])\nself.assertEqual(enums.Operation.REVOKE, result.operations[9])\nself.assertEqual(enums.Operation.DESTROY, result.operations[10])\nself.assertEqual(enums.Operation.QUERY, result.operations[11])\nself.assertEqual(enums.Operation.DISCOVER_VERSIONS, result.operations[12])\nself.assertIsNone(result.object_types)\nself.assertIsNotNone(result.vendor_identification)\nself.assertEqual('PyKMIP {0} Software Server'.format(kmip.__version__),\n    result.vendor_identification)\nself.assertIsNone(result.server_information)\nself.assertIsNone(result.application_namespaces)\nself.assertIsNone(result.extension_information)\n"
}