{
    "functionName": "test_retry_sql_on_deadlock",
    "className": "TestCase",
    "fileName": "/IntegralDefense_&_ACE/lib_&_saq_&_test_database.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "from saq.database import User, retry_sql_on_deadlock\nwith get_db_connection() as db:\n    c = db.cursor()\n    c.execute(\n        \"INSERT INTO users ( username, email ) VALUES ( 'user0', 'user0@localhost' )\"\n        )\n    c.execute(\n        \"INSERT INTO users ( username, email ) VALUES ( 'user1', 'user1@localhost' )\"\n        )\n    db.commit()\nlock_user0 = threading.Event()\nlock_user1 = threading.Event()\ndef _t1():\n    session = saq.db()\n    retry_sql_on_deadlock(User.__table__.update().where(User.username ==\n        'user0').values(email='user0@_t1'), session=session)\n    lock_user0.set()\n    lock_user1.wait(5)\n    time.sleep(2)\n    retry_sql_on_deadlock(User.__table__.update().where(User.username ==\n        'user1').values(email='user1@_t1'), session=session, commit=True)\ndef _t2():\n    with get_db_connection() as db:\n        c = db.cursor()\n        lock_user0.wait(5)\n        execute_with_retry(db, c,\n            \"UPDATE users SET email = 'user1@_t2' WHERE username = 'user1'\")\n        lock_user1.set()\n        execute_with_retry(db, c,\n            \"UPDATE users SET email = 'user0@_t2' WHERE username = 'user0'\")\n        db.commit()\nt1 = threading.Thread(target=_t1)\nt1.start()\nt2 = threading.Thread(target=_t2)\nt2.start()\nt1.join(5)\nt2.join(5)\nself.assertEquals(log_count('DEADLOCK STATEMENT'), 1)\nself.assertIsNotNone(saq.db.query(User).filter(User.email == 'user0@_t2', \n    User.username == 'user0').first())\nself.assertIsNotNone(saq.db.query(User).filter(User.email == 'user1@_t1', \n    User.username == 'user1').first())\nunittest.skip(\"Can't seem to get this one to always fire.\")"
}