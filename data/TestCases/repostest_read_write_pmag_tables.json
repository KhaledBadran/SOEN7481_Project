{
    "functionName": "test_read_write_pmag_tables",
    "className": "TestDemagGUI",
    "fileName": "/PmagPy_&_PmagPy/pmagpy_tests_&_test_demag_gui.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "self.ie_add_n_fits_to_all(n_fits)\nfile_menu = self.get_menu_from_frame(self.frame, 'File')\nwritepmag_menu_evt = wx.PyCommandEvent(wx.EVT_MENU.typeId, file_menu.\n    FindItem('&Save MagIC tables\\tCtrl-Shift-S'))\nprint('-------------------------------------------------------------')\nself.frame.ProcessEvent(writepmag_menu_evt)\nprint('-------------------------------------------------------------')\nold_frame = str(self.frame)\nspeci_with_fits = []\nold_interpretations = {}\nfor speci in list(self.frame.pmag_results_data['specimens'].keys()):\n    if self.frame.pmag_results_data['specimens'][speci] and all([x.get(\n        'specimen') for x in self.frame.pmag_results_data['specimens'][speci]]\n        ):\n        if speci not in speci_with_fits:\n            speci_with_fits.append(speci)\n        old_interpretations[speci] = sorted(self.frame.pmag_results_data[\n            'specimens'][speci], key=fit_key)\nframe2 = demag_gui.Demag_GUI(project_WD, write_to_log_file=False,\n    test_mode_on=True)\nframe2.update_selection()\nimported_frame = str(frame2)\nimported_interpretations = {}\nfor speci in list(frame2.pmag_results_data['specimens'].keys()):\n    if frame2.pmag_results_data['specimens'][speci] and all([x.get(\n        'specimen') for x in frame2.pmag_results_data['specimens'][speci]]):\n        if speci not in speci_with_fits:\n            speci_with_fits.append(speci)\n        imported_interpretations[speci] = sorted(frame2.pmag_results_data[\n            'specimens'][speci], key=fit_key)\nfor speci in speci_with_fits:\n    if speci not in list(old_interpretations.keys()) or speci not in list(\n        imported_interpretations.keys()):\n        import pdb\n        pdb.set_trace()\n    self.assertTrue(speci in list(old_interpretations.keys()))\n    self.assertTrue(speci in list(imported_interpretations.keys()))\n    for ofit, ifit in zip(old_interpretations[speci],\n        imported_interpretations[speci]):\n        self.assertTrue(ofit.equal(ifit))\nunittest.skipIf(sys.platform == 'darwin',\n    'these tests cause a seg fault on mac')"
}