{
    "functionName": "test_handle_message_loop_with_authentication_failure",
    "className": "TestKmipSession",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_services_&_server_&_test_session.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that the correct logging and error handling occurs when an\n        authentication error is generated while processing a request.\n        \"\"\"\ndata = utils.BytearrayStream(())\ncert_mock.return_value = 'test_certificate'\nkmip_engine = engine.KmipEngine()\nkmip_engine._logger = mock.MagicMock()\nkmip_session = session.KmipSession(kmip_engine, None, None, name='name',\n    enable_tls_client_auth=False)\nkmip_session.authenticate = mock.MagicMock()\nkmip_session.authenticate.side_effect = exceptions.PermissionDenied(\n    'Authentication failed.')\nkmip_session._engine = mock.MagicMock()\nkmip_session._engine.default_protocol_version = (kmip_engine.\n    default_protocol_version)\nkmip_session._logger = mock.MagicMock()\nkmip_session._connection = mock.MagicMock()\nkmip_session._receive_request = mock.MagicMock(return_value=data)\nkmip_session._send_response = mock.MagicMock()\nfake_version = contents.ProtocolVersion(1, 2)\nfake_credential = objects.Credential(credential_type=enums.CredentialType.\n    USERNAME_AND_PASSWORD, credential_value=objects.\n    UsernamePasswordCredential(username='John Doe', password='secret'))\nfake_header = messages.RequestHeader(protocol_version=fake_version,\n    authentication=contents.Authentication(credentials=[fake_credential]))\nfake_request = messages.RequestMessage()\nfake_request.request_header = fake_header\nfake_request.read = mock.MagicMock()\nrequest_mock.return_value = fake_request\nkmip_session._handle_message_loop()\nkmip_session._receive_request.assert_called_once_with()\nfake_request.read.assert_called_once_with(data, kmip_version=enums.\n    KMIPVersion.KMIP_1_2)\nkmip_session.authenticate.assert_called_once_with('test_certificate',\n    fake_request)\nkmip_session._logger.warning.assert_called_once_with('Authentication failed.')\nkmip_session._engine.build_error_response.assert_called_once_with(fake_version,\n    enums.ResultReason.AUTHENTICATION_NOT_SUCCESSFUL,\n    'An error occurred during client authentication. See server logs for more information.'\n    )\nkmip_session._logger.exception.assert_not_called()\nself.assertTrue(kmip_session._send_response.called)\nmock.patch('kmip.services.server.auth.get_certificate_from_connection')mock.patch('kmip.core.messages.messages.RequestMessage')"
}