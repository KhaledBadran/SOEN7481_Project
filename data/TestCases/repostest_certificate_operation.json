{
    "functionName": "test_certificate_operation",
    "className": "TestPibKeyImpl",
    "fileName": "/named-data_&_PyNDN2/tests_&_unit_tests_&_test_pib_key_impl.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "fixture = self.fixture\npibImpl = PibMemory()\nkey11 = PibKeyImpl(fixture.id1Key1Name, fixture.id1Key1.toBytes(), pibImpl)\ntry:\n    PibKeyImpl(fixture.id1Key1Name, pibImpl)\nexcept Exception as ex:\n    self.fail('Unexpected exception: ' + str(ex))\nself.assertEqual(0, key11._certificates.size())\ntry:\n    key11.getCertificate(fixture.id1Key1Cert1.getName())\n    self.fail('Did not throw the expected exception')\nexcept Pib.Error:\n    pass\nelse:\n    self.fail('Did not throw the expected exception')\ntry:\n    key11.getDefaultCertificate()\n    self.fail('Did not throw the expected exception')\nexcept Pib.Error:\n    pass\nelse:\n    self.fail('Did not throw the expected exception')\ntry:\n    key11.setDefaultCertificate(fixture.id1Key1Cert1.getName())\n    self.fail('Did not throw the expected exception')\nexcept Pib.Error:\n    pass\nelse:\n    self.fail('Did not throw the expected exception')\nkey11.addCertificate(fixture.id1Key1Cert1)\ntry:\n    key11.getCertificate(fixture.id1Key1Cert1.getName())\nexcept Exception as ex:\n    self.fail('Unexpected exception: ' + str(ex))\ntry:\n    key11.getDefaultCertificate()\nexcept Exception as ex:\n    self.fail('Unexpected exception: ' + str(ex))\ndefaultCert0 = key11.getDefaultCertificate()\nself.assertTrue(fixture.id1Key1Cert1.getName().equals(defaultCert0.getName()))\nself.assertTrue(fixture.id1Key1Cert1.wireEncode().equals(defaultCert0.\n    wireEncode()))\nkey11.removeCertificate(fixture.id1Key1Cert1.getName())\ntry:\n    key11.getCertificate(fixture.id1Key1Cert1.getName())\n    self.fail('Did not throw the expected exception')\nexcept Pib.Error:\n    pass\nelse:\n    self.fail('Did not throw the expected exception')\ntry:\n    key11.getDefaultCertificate()\n    self.fail('Did not throw the expected exception')\nexcept Pib.Error:\n    pass\nelse:\n    self.fail('Did not throw the expected exception')\ntry:\n    key11.setDefaultCertificate(fixture.id1Key1Cert1)\nexcept Exception as ex:\n    self.fail('Unexpected exception: ' + str(ex))\ntry:\n    key11.getDefaultCertificate()\nexcept Exception as ex:\n    self.fail('Unexpected exception: ' + str(ex))\ntry:\n    key11.getCertificate(fixture.id1Key1Cert1.getName())\nexcept Exception as ex:\n    self.fail('Unexpected exception: ' + str(ex))\ndefaultCert1 = key11.getDefaultCertificate()\nself.assertTrue(fixture.id1Key1Cert1.getName().equals(defaultCert1.getName()))\nself.assertTrue(defaultCert1.wireEncode().equals(fixture.id1Key1Cert1.\n    wireEncode()))\nkey11.addCertificate(fixture.id1Key1Cert2)\nself.assertEqual(2, key11._certificates.size())\ntry:\n    key11.setDefaultCertificate(fixture.id1Key1Cert2.getName())\nexcept Exception as ex:\n    self.fail('Unexpected exception: ' + str(ex))\ntry:\n    key11.getDefaultCertificate()\nexcept Exception as ex:\n    self.fail('Unexpected exception: ' + str(ex))\ndefaultCert2 = key11.getDefaultCertificate()\nself.assertTrue(fixture.id1Key1Cert2.getName().equals(defaultCert2.getName()))\nself.assertTrue(defaultCert2.wireEncode().equals(fixture.id1Key1Cert2.\n    wireEncode()))\nkey11.removeCertificate(fixture.id1Key1Cert1.getName())\ntry:\n    key11.getCertificate(fixture.id1Key1Cert1.getName())\n    self.fail('Did not throw the expected exception')\nexcept Pib.Error:\n    pass\nelse:\n    self.fail('Did not throw the expected exception')\nself.assertEqual(1, key11._certificates.size())\ntry:\n    key11.setDefaultCertificate(fixture.id1Key1Cert1)\nexcept Exception as ex:\n    self.fail('Unexpected exception: ' + str(ex))\ndefaultCert3 = key11.getDefaultCertificate()\nself.assertTrue(fixture.id1Key1Cert1.getName().equals(defaultCert3.getName()))\nself.assertTrue(defaultCert3.wireEncode().equals(fixture.id1Key1Cert1.\n    wireEncode()))\nself.assertEqual(2, key11._certificates.size())\nkey11.removeCertificate(fixture.id1Key1Cert1.getName())\ntry:\n    key11.getCertificate(fixture.id1Key1Cert1.getName())\n    self.fail('Did not throw the expected exception')\nexcept Pib.Error:\n    pass\nelse:\n    self.fail('Did not throw the expected exception')\nself.assertEqual(1, key11._certificates.size())\nkey11.removeCertificate(fixture.id1Key1Cert2.getName())\ntry:\n    key11.getCertificate(fixture.id1Key1Cert2.getName())\n    self.fail('Did not throw the expected exception')\nexcept Pib.Error:\n    pass\nelse:\n    self.fail('Did not throw the expected exception')\ntry:\n    key11.getDefaultCertificate()\n    self.fail('Did not throw the expected exception')\nexcept Pib.Error:\n    pass\nelse:\n    self.fail('Did not throw the expected exception')\nself.assertEqual(0, key11._certificates.size())\n"
}