{
    "functionName": "test_team_update",
    "className": "TeamInitializationTest",
    "fileName": "/cmsteffen-code_&_PyKBLib/tests_&_test_pykblib_team.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "mock_call_api.side_effect = APIException(\"Team doesn't exist.\")\nwith self.assertRaises(APIException):\n    team = Team('test_team', 'keybase_instance')\nmock_call_api.assert_called_with('team', {'method': 'list-team-memberships',\n    'params': {'options': {'team': 'test_team'}}})\nmock_call_api.side_effect = None\nmock_call_api.return_value = dict_to_ntuple({'result': {'members': {\n    'owners': [{'username': 'team_owner', 'status': 0}], 'admins': [{\n    'username': 'team_admin', 'status': 0}], 'writers': None, 'readers': [{\n    'username': 'reader_1', 'status': 0}, {'username': 'reader_2', 'status':\n    1}, {'username': 'reader_3', 'status': 2}]}}})\nkeybase = mock.MagicMock()\nkeybase.username = 'team_owner'\nteam = Team('test_team', keybase)\nself.assertEqual(team.members_by_role.owner, {'team_owner'})\nself.assertEqual(team.members_by_role.admin, {'team_admin'})\nself.assertEqual(team.members_by_role.writer, set())\nself.assertEqual(team.members_by_role.reader, {'reader_1'})\nself.assertEqual(team.members_by_role.reset, {'reader_2'})\nself.assertEqual(team.members_by_role.deleted, {'reader_3'})\nself.assertEqual(team.role, 'owner')\nmock_call_api.return_value = dict_to_ntuple({'result': {'members': {\n    'owners': [{'username': 'team_owner2', 'status': 0}], 'admins': [],\n    'writers': [{'username': 'team_writer2', 'status': 0}], 'readers': [{\n    'username': 'reader_1a', 'status': 0}, {'username': 'reader_2a',\n    'status': 1}, {'username': 'reader_3a', 'status': 2}]}}})\nkeybase.username = 'team_writer2'\nteam = Team('test_team', keybase)\nself.assertEqual(team.members_by_role.owner, {'team_owner2'})\nself.assertEqual(team.members_by_role.admin, set())\nself.assertEqual(team.members_by_role.writer, {'team_writer2'})\nself.assertEqual(team.members_by_role.reader, {'reader_1a'})\nself.assertEqual(team.members_by_role.reset, {'reader_2a'})\nself.assertEqual(team.members_by_role.deleted, {'reader_3a'})\nself.assertEqual(team.role, 'writer')\nmock.patch('pykblib.team.KeybaseAPI.call_api')"
}