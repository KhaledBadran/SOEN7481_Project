{
    "functionName": "test_mapping_transport_class",
    "className": null,
    "fileName": "/PythonOT_&_POT/test_&_test_da.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"test_mapping_transport\n    \"\"\"\nns = 60\nnt = 120\nXs, ys = make_data_classif('3gauss', ns)\nXt, yt = make_data_classif('3gauss2', nt)\nXs_new, _ = make_data_classif('3gauss', ns + 1)\notda = ot.da.MappingTransport(kernel='linear', bias=False)\notda.fit(Xs=Xs, Xt=Xt)\nassert hasattr(otda, 'coupling_')\nassert hasattr(otda, 'mapping_')\nassert hasattr(otda, 'log_')\nassert_equal(otda.coupling_.shape, (Xs.shape[0], Xt.shape[0]))\nassert_equal(otda.mapping_.shape, (Xs.shape[1], Xt.shape[1]))\nmu_s = unif(ns)\nmu_t = unif(nt)\nassert_allclose(np.sum(otda.coupling_, axis=0), mu_t, rtol=0.001, atol=0.001)\nassert_allclose(np.sum(otda.coupling_, axis=1), mu_s, rtol=0.001, atol=0.001)\ntransp_Xs = otda.transform(Xs=Xs)\nassert_equal(transp_Xs.shape, Xs.shape)\ntransp_Xs_new = otda.transform(Xs_new)\nassert_equal(transp_Xs_new.shape, Xs_new.shape)\notda = ot.da.MappingTransport(kernel='linear', bias=True)\notda.fit(Xs=Xs, Xt=Xt)\nassert_equal(otda.coupling_.shape, (Xs.shape[0], Xt.shape[0]))\nassert_equal(otda.mapping_.shape, (Xs.shape[1] + 1, Xt.shape[1]))\nmu_s = unif(ns)\nmu_t = unif(nt)\nassert_allclose(np.sum(otda.coupling_, axis=0), mu_t, rtol=0.001, atol=0.001)\nassert_allclose(np.sum(otda.coupling_, axis=1), mu_s, rtol=0.001, atol=0.001)\ntransp_Xs = otda.transform(Xs=Xs)\nassert_equal(transp_Xs.shape, Xs.shape)\ntransp_Xs_new = otda.transform(Xs_new)\nassert_equal(transp_Xs_new.shape, Xs_new.shape)\notda = ot.da.MappingTransport(kernel='gaussian', bias=False)\notda.fit(Xs=Xs, Xt=Xt)\nassert_equal(otda.coupling_.shape, (Xs.shape[0], Xt.shape[0]))\nassert_equal(otda.mapping_.shape, (Xs.shape[0], Xt.shape[1]))\nmu_s = unif(ns)\nmu_t = unif(nt)\nassert_allclose(np.sum(otda.coupling_, axis=0), mu_t, rtol=0.001, atol=0.001)\nassert_allclose(np.sum(otda.coupling_, axis=1), mu_s, rtol=0.001, atol=0.001)\ntransp_Xs = otda.transform(Xs=Xs)\nassert_equal(transp_Xs.shape, Xs.shape)\ntransp_Xs_new = otda.transform(Xs_new)\nassert_equal(transp_Xs_new.shape, Xs_new.shape)\notda = ot.da.MappingTransport(kernel='gaussian', bias=True)\notda.fit(Xs=Xs, Xt=Xt)\nassert_equal(otda.coupling_.shape, (Xs.shape[0], Xt.shape[0]))\nassert_equal(otda.mapping_.shape, (Xs.shape[0] + 1, Xt.shape[1]))\nmu_s = unif(ns)\nmu_t = unif(nt)\nassert_allclose(np.sum(otda.coupling_, axis=0), mu_t, rtol=0.001, atol=0.001)\nassert_allclose(np.sum(otda.coupling_, axis=1), mu_s, rtol=0.001, atol=0.001)\ntransp_Xs = otda.transform(Xs=Xs)\nassert_equal(transp_Xs.shape, Xs.shape)\ntransp_Xs_new = otda.transform(Xs_new)\nassert_equal(transp_Xs_new.shape, Xs_new.shape)\notda = ot.da.MappingTransport(kernel='gaussian', log=True)\notda.fit(Xs=Xs, Xt=Xt)\nassert len(otda.log_.keys()) != 0\n"
}