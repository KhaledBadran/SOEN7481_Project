{
    "functionName": "test_policy_caching",
    "className": "TestSLUGSAuthenticationAndAccessControl",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_functional_&_services_&_test_authentication.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that:\n        1. a user in Group A can create and retrieve a symmetric key\n        2. a policy is uploaded if created after server start up\n        3. a user in Group A cannot retrieve or destroy the same symmetric key\n        4. the original policy is restored after the new policy is removed, and\n        5. a user in Group A can retrieve and destroy the same symmetric key.\n        \"\"\"\nwith self.client_john_doe as c:\n    uid = c.create(enums.CryptographicAlgorithm.AES, 256,\n        operation_policy_name='policy_1')\n    self.assertIsInstance(uid, six.string_types)\n    key = c.get(uid)\n    self.assertIsInstance(key, objects.SymmetricKey)\n    self.assertEqual(key.cryptographic_algorithm, enums.\n        CryptographicAlgorithm.AES)\n    self.assertEqual(key.cryptographic_length, 256)\n    with open('/tmp/pykmip/policies/policy_caching.json', 'w') as f:\n        f.write('{\\n')\n        f.write('  \"policy_1\": {\\n')\n        f.write('    \"groups\": {\\n')\n        f.write('      \"Group A\": {\\n')\n        f.write('        \"SYMMETRIC_KEY\": {\\n')\n        f.write('          \"GET\": \"DISALLOW_ALL\",\\n')\n        f.write('          \"DESTROY\": \"DISALLOW_ALL\"\\n')\n        f.write('        }\\n')\n        f.write('      }\\n')\n        f.write('    }\\n')\n        f.write('  }\\n')\n        f.write('}\\n')\n    time.sleep(1)\n    self.assertRaises(exceptions.KmipOperationFailure, c.get, uid)\n    self.assertRaises(exceptions.KmipOperationFailure, c.destroy, uid)\n    os.remove('/tmp/pykmip/policies/policy_caching.json')\n    time.sleep(1)\n    key = c.get(uid)\n    self.assertIsInstance(key, objects.SymmetricKey)\n    self.assertEqual(key.cryptographic_algorithm, enums.\n        CryptographicAlgorithm.AES)\n    self.assertEqual(key.cryptographic_length, 256)\n    c.destroy(uid)\n    self.assertRaises(exceptions.KmipOperationFailure, c.get, uid)\n    self.assertRaises(exceptions.KmipOperationFailure, c.destroy, uid)\n"
}