{
    "functionName": "test_ok3d_execute",
    "className": null,
    "fileName": "/bsmurphy_&_PyKrige/tests_&_test_core.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "data, (gridx_ref, gridy_ref, gridz_ref), mask_ref = sample_data_3d\nk3d = OrdinaryKriging3D(data[:, (0)], data[:, (1)], data[:, (2)], data[:, (3)])\nwith pytest.raises(ValueError):\n    k3d.execute('blurg', gridx_ref, gridy_ref, gridz_ref)\nk, ss = k3d.execute('grid', gridx_ref, gridy_ref, gridz_ref, backend=\n    'vectorized')\nshape = gridz_ref.size, gridy_ref.size, gridx_ref.size\nassert k.shape == shape\nassert ss.shape == shape\nassert np.amax(k) != np.amin(k)\nassert np.amax(ss) != np.amin(ss)\nassert not np.ma.is_masked(k)\nk, ss = k3d.execute('grid', gridx_ref, gridy_ref, gridz_ref, backend='loop')\nshape = gridz_ref.size, gridy_ref.size, gridx_ref.size\nassert k.shape == shape\nassert ss.shape == shape\nassert np.amax(k) != np.amin(k)\nassert np.amax(ss) != np.amin(ss)\nassert not np.ma.is_masked(k)\nwith pytest.raises(IOError):\n    k3d.execute('masked', gridx_ref, gridy_ref, gridz_ref, backend='vectorized'\n        )\nmask = np.array([True, False])\nwith pytest.raises(ValueError):\n    k3d.execute('masked', gridx_ref, gridy_ref, gridz_ref, mask=mask,\n        backend='vectorized')\nk, ss = k3d.execute('masked', gridx_ref, gridy_ref, gridz_ref, mask=\n    mask_ref, backend='vectorized')\nassert np.ma.is_masked(k)\nassert np.ma.is_masked(ss)\nassert k[0, 0, 0] is np.ma.masked\nassert ss[0, 0, 0] is np.ma.masked\nz, ss = k3d.execute('masked', gridx_ref, gridy_ref, gridz_ref, mask=\n    mask_ref.T, backend='vectorized')\nassert np.ma.is_masked(z)\nassert np.ma.is_masked(ss)\nassert z[0, 0, 0] is np.ma.masked\nassert ss[0, 0, 0] is np.ma.masked\nwith pytest.raises(IOError):\n    k3d.execute('masked', gridx_ref, gridy_ref, gridz_ref, backend='loop')\nmask = np.array([True, False])\nwith pytest.raises(ValueError):\n    k3d.execute('masked', gridx_ref, gridy_ref, gridz_ref, mask=mask,\n        backend='loop')\nk, ss = k3d.execute('masked', gridx_ref, gridy_ref, gridz_ref, mask=\n    mask_ref, backend='loop')\nassert np.ma.is_masked(k)\nassert np.ma.is_masked(ss)\nassert k[0, 0, 0] is np.ma.masked\nassert ss[0, 0, 0] is np.ma.masked\nz, ss = k3d.execute('masked', gridx_ref, gridy_ref, gridz_ref, mask=\n    mask_ref.T, backend='loop')\nassert np.ma.is_masked(z)\nassert np.ma.is_masked(ss)\nassert z[0, 0, 0] is np.ma.masked\nassert ss[0, 0, 0] is np.ma.masked\nwith pytest.raises(ValueError):\n    k3d.execute('points', np.array([0.0, 1.0, 2.0]), np.array([0.0, 1.0]),\n        np.array([1.0]), backend='vectorized')\nk, ss = k3d.execute('points', gridx_ref[0], gridy_ref[0], gridz_ref[0],\n    backend='vectorized')\nassert k.shape == (1,)\nassert ss.shape == (1,)\nwith pytest.raises(ValueError):\n    k3d.execute('points', np.array([0.0, 1.0, 2.0]), np.array([0.0, 1.0]),\n        np.array([1.0]), backend='loop')\nk, ss = k3d.execute('points', gridx_ref[0], gridy_ref[0], gridz_ref[0],\n    backend='loop')\nassert k.shape == (1,)\nassert ss.shape == (1,)\ndata = np.zeros((125, 4))\nz, y, x = np.meshgrid(np.arange(0.0, 5.0, 1.0), np.arange(0.0, 5.0, 1.0),\n    np.arange(0.0, 5.0, 1.0))\ndata[:, (0)] = np.ravel(x)\ndata[:, (1)] = np.ravel(y)\ndata[:, (2)] = np.ravel(z)\ndata[:, (3)] = np.ravel(z)\nk3d = OrdinaryKriging3D(data[:, (0)], data[:, (1)], data[:, (2)], data[:, (\n    3)], variogram_model='linear')\nk, ss = k3d.execute('grid', np.arange(2.0, 3.0, 0.1), np.arange(2.0, 3.0, \n    0.1), np.arange(0.0, 4.0, 1.0), backend='vectorized')\nassert_allclose(k[(0), :, :], 0.0, atol=0.01)\nassert_allclose(k[(1), :, :], 1.0, rtol=0.01)\nassert_allclose(k[(2), :, :], 2.0, rtol=0.01)\nassert_allclose(k[(3), :, :], 3.0, rtol=0.01)\nk, ss = k3d.execute('grid', np.arange(2.0, 3.0, 0.1), np.arange(2.0, 3.0, \n    0.1), np.arange(0.0, 4.0, 1.0), backend='loop')\nassert_allclose(k[(0), :, :], 0.0, atol=0.01)\nassert_allclose(k[(1), :, :], 1.0, rtol=0.01)\nassert_allclose(k[(2), :, :], 2.0, rtol=0.01)\nassert_allclose(k[(3), :, :], 3.0, rtol=0.01)\nk3d = OrdinaryKriging3D(data[:, (0)], data[:, (1)], data[:, (2)], data[:, (\n    3)], variogram_model='linear')\nk, ss = k3d.execute('points', [2.5, 2.5, 2.5], [2.5, 2.5, 2.5], [1.0, 2.0, \n    3.0], backend='vectorized')\nassert_allclose(k[0], 1.0, atol=0.01)\nassert_allclose(k[1], 2.0, rtol=0.01)\nassert_allclose(k[2], 3.0, rtol=0.01)\nk, ss = k3d.execute('points', [2.5, 2.5, 2.5], [2.5, 2.5, 2.5], [1.0, 2.0, \n    3.0], backend='loop')\nassert_allclose(k[0], 1.0, atol=0.01)\nassert_allclose(k[1], 2.0, rtol=0.01)\nassert_allclose(k[2], 3.0, rtol=0.01)\n"
}