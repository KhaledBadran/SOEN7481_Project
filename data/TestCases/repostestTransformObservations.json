{
    "functionName": "testTransformObservations",
    "className": "InverseGaussianCdfYTransformTest",
    "fileName": "/facebook_&_Ax/ax_&_modelbridge_&_tests_&_test_inverse_gaussian_cdf_y.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "transformed_obsd_mid = self.t.transform_observation_data([deepcopy(self.\n    obsd_mid)], [])[0]\nmean_results = np.array(list(transformed_obsd_mid.means))\nexpected = np.array([0, 1.28155])\nself.assertTrue(np.allclose(mean_results, expected), msg=\n    f'Mean Results: {mean_results}. Expected {expected}.')\ncov_results = np.array(transformed_obsd_mid.covariance)\nexpected = np.array([[0.0327499, 0.0], [0.0, 0.3684465]])\nself.assertTrue(np.allclose(cov_results, expected), msg=\n    f'Covariance Result: {cov_results}. Expected {expected}.')\nwith self.assertRaises(ValueError):\n    self.t.transform_observation_data([deepcopy(self.obsd_extreme)], [])[0]\ntransformed_obsd_nan_covars = self.t.transform_observation_data([deepcopy(\n    self.obsd_nan_covars)], [])[0]\ncov_results = np.array(transformed_obsd_nan_covars.covariance)\nself.assertTrue(np.all(np.isnan(cov_results)), msg=\n    f'Unexpected covariance Result: {cov_results}. Expected all nans.')\n"
}