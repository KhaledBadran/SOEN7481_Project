{
    "functionName": "test_get_attributes_with_no_arguments",
    "className": "TestKmipEngine",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_services_&_server_&_test_engine.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that a GetAttributes request with no arguments can be processed\n        correctly.\n        \"\"\"\ne = engine.KmipEngine()\ne._data_store = self.engine\ne._data_store_session_factory = self.session_factory\ne._data_session = e._data_store_session_factory()\ne._is_allowed_by_operation_policy = mock.Mock(return_value=True)\ne._logger = mock.MagicMock()\nsecret = pie_objects.SymmetricKey(enums.CryptographicAlgorithm.AES, 0, b'')\ne._data_session.add(secret)\ne._data_session.commit()\ne._data_session = e._data_store_session_factory()\ne._id_placeholder = '1'\npayload = payloads.GetAttributesRequestPayload()\nresponse_payload = e._process_get_attributes(payload)\ne._data_session.commit()\ne._data_session = e._data_store_session_factory()\ne._logger.info.assert_any_call('Processing operation: GetAttributes')\nself.assertEqual('1', response_payload.unique_identifier)\nself.assertEqual(9, len(response_payload.attributes))\nattribute_factory = factory.AttributeFactory()\nattribute = attribute_factory.create_attribute(enums.AttributeType.\n    OBJECT_TYPE, enums.ObjectType.SYMMETRIC_KEY)\nself.assertIn(attribute, response_payload.attributes)\nattribute = attribute_factory.create_attribute(enums.AttributeType.\n    CRYPTOGRAPHIC_ALGORITHM, enums.CryptographicAlgorithm.AES)\nself.assertIn(attribute, response_payload.attributes)\nattribute = attribute_factory.create_attribute(enums.AttributeType.\n    CRYPTOGRAPHIC_LENGTH, 0)\nself.assertIn(attribute, response_payload.attributes)\nattribute = attribute_factory.create_attribute(enums.AttributeType.\n    OPERATION_POLICY_NAME, 'default')\nself.assertIn(attribute, response_payload.attributes)\nattribute = attribute_factory.create_attribute(enums.AttributeType.\n    CRYPTOGRAPHIC_USAGE_MASK, [])\nself.assertIn(attribute, response_payload.attributes)\nattribute = attribute_factory.create_attribute(enums.AttributeType.STATE,\n    enums.State.PRE_ACTIVE)\nself.assertIn(attribute, response_payload.attributes)\nattribute = attribute_factory.create_attribute(enums.AttributeType.\n    UNIQUE_IDENTIFIER, '1')\nself.assertIn(attribute, response_payload.attributes)\n"
}