{
    "functionName": "test_iterative_gapfill_from_binary_phenotypes",
    "className": null,
    "fileName": "/gregmedlock_&_Medusa/medusa_&_test_&_test_reconstruct.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "universal = load_universal_modelseed()\nmodel = load_modelseed_model('Staphylococcus aureus')\nbiolog_base_composition = pd.read_csv(\n    './medusa/test/data/biolog_base_composition.csv', sep=',')\nbiolog_base_dict = dict(zip(biolog_base_composition['ID'], [(1000) for i in\n    range(0, len(biolog_base_composition['ID']))]))\nbiolog_thresholded = pd.read_csv('./medusa/test/data/plata_thresholded.csv',\n    sep='\\t', index_col=0)\ntest_mod_pheno = biolog_thresholded.loc['Staphylococcus aureus']\ntest_mod_pheno = list(test_mod_pheno[test_mod_pheno == True].index)\nadd_mets = []\nadd_exchanges = []\nfor met in list(biolog_base_dict.keys()):\n    try:\n        model.metabolites.get_by_id(met)\n    except:\n        print('no ' + met)\n        add_met = universal.metabolites.get_by_id(met).copy()\n        add_mets.append(add_met)\nmodel.add_metabolites(add_mets)\nfor met in list(biolog_base_dict.keys()):\n    try:\n        model.reactions.get_by_id('EX_' + met)\n    except:\n        add_met = model.metabolites.get_by_id(met)\n        ex_rxn = Reaction('EX_' + met)\n        ex_rxn.name = 'Exchange reaction for ' + met\n        ex_rxn.lower_bound = -1000\n        ex_rxn.upper_bound = 1000\n        ex_rxn.add_metabolites({add_met: -1})\n        add_exchanges.append(ex_rxn)\nmodel.add_reactions(add_exchanges)\nmissing_mets = []\nmissing_exchanges = []\nmedia_dicts = {}\nfor met_id in test_mod_pheno:\n    try:\n        model.metabolites.get_by_id(met_id)\n    except:\n        print(met_id + ' was not in model, adding met and exchange reaction')\n        met = universal.metabolites.get_by_id(met_id).copy()\n        missing_mets.append(met)\n        ex_rxn = Reaction('EX_' + met_id)\n        ex_rxn.name = 'Exchange reaction for ' + met_id\n        ex_rxn.lower_bound = -1000\n        ex_rxn.upper_bound = 1000\n        ex_rxn.add_metabolites({met: -1})\n        missing_exchanges.append(ex_rxn)\n    media_dicts[met_id] = biolog_base_dict.copy()\n    media_dicts[met_id] = {('EX_' + k): v for k, v in media_dicts[met_id].\n        items()}\n    media_dicts[met_id]['EX_' + met_id] = 1000\nmodel.add_metabolites(missing_mets)\nmodel.add_reactions(missing_exchanges)\ntransporters_in_universal = [rxn for rxn in universal.reactions if len(rxn.\n    compartments) > 1]\nfor met in media_dicts.keys():\n    metabolite = model.metabolites.get_by_id(met)\n    base_met_id = met.split('_')[0]\n    rxns_with_metabolite = metabolite.reactions\n    transport = False\n    for rxn in rxns_with_metabolite:\n        metabolites = [met_in_rxn.id for met_in_rxn in rxn.metabolites]\n        if (base_met_id + '_e' in metabolites and base_met_id + '_c' in\n            metabolites):\n            transport = True\n    pick_transporter = {}\n    if not transport:\n        print('missing transporter for ' + metabolite.name)\n        for rxn in transporters_in_universal:\n            metabolites = [met_in_rxn.id for met_in_rxn in rxn.metabolites]\n            if (base_met_id + '_e' in metabolites and base_met_id + '_c' in\n                metabolites):\n                pick_transporter[met] = rxn.id\ntransporters_to_add = list(pick_transporter.values())\ntransporter_list = []\nfor rxn in transporters_to_add:\n    transporter_list.append(universal.reactions.get_by_id(rxn).copy())\nmodel.add_reactions(transporter_list)\nuniversal.remove_reactions([universal.reactions.get_by_id(rxn) for rxn in\n    transporters_to_add])\nsources = list(media_dicts.keys())\nsub_dict = {sources[0]: media_dicts[sources[0]], sources[1]: media_dicts[\n    sources[1]], sources[2]: media_dicts[sources[2]], sources[3]:\n    media_dicts[sources[3]], sources[4]: media_dicts[sources[4]]}\nnum_cycles = 5\nlower_bound = 0.05\nflux_cutoff = 1e-10\nensemble = expand.iterative_gapfill_from_binary_phenotypes(model, universal,\n    sub_dict, num_cycles, lower_bound=lower_bound, inclusion_threshold=\n    1e-10, exchange_reactions=False, demand_reactions=False,\n    exchange_prefix='EX')\nassert len(ensemble.members) > num_cycles / 2\nex_rxns = [rxn for rxn in ensemble.base_model.reactions if rxn.id.\n    startswith('EX_')]\nfor source in sub_dict.keys():\n    for rxn in ex_rxns:\n        rxn.lower_bound = 0\n    ensemble.base_model.medium = sub_dict[source]\n    for member in ensemble.members:\n        ensemble.set_state(member)\n        assert ensemble.base_model.slim_optimize() > lower_bound * 0.99\n"
}