{
    "functionName": "test_evaluate_performance_default_protocol_with_filter",
    "className": null,
    "fileName": "/Accenture_&_AmpliGraph/tests_&_ampligraph_&_evaluation_&_test_protocol.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "wn18 = load_wn18()\nX_filter = np.concatenate((wn18['train'], wn18['valid'], wn18['test']))\nmodel = TransE(batches_count=10, seed=0, epochs=1, k=50, eta=10, verbose=\n    True, embedding_model_params={'normalize_ent_emb': False, 'norm': 1},\n    loss='self_adversarial', loss_params={'margin': 1, 'alpha': 0.5},\n    optimizer='adam', optimizer_params={'lr': 0.0005})\nmodel.fit(wn18['train'])\nfrom ampligraph.evaluation import evaluate_performance\nranks_sep = []\nfrom ampligraph.evaluation import hits_at_n_score, mrr_score, mr_score\nranks = evaluate_performance(wn18['test'][::100], model, X_filter, verbose=\n    True, corrupt_side='o')\nranks_sep.extend(ranks)\nfrom ampligraph.evaluation import evaluate_performance\nfrom ampligraph.evaluation import hits_at_n_score, mrr_score, mr_score\nranks = evaluate_performance(wn18['test'][::100], model, X_filter, verbose=\n    True, corrupt_side='s')\nranks_sep.extend(ranks)\nprint('----------EVAL WITH FILTER-----------------')\nprint('----------Subj and obj corrupted separately-----------------')\nmr_sep = mr_score(ranks_sep)\nprint('MAR:', mr_sep)\nprint('Mrr:', mrr_score(ranks_sep))\nprint('hits10:', hits_at_n_score(ranks_sep, 10))\nprint('hits3:', hits_at_n_score(ranks_sep, 3))\nprint('hits1:', hits_at_n_score(ranks_sep, 1))\nfrom ampligraph.evaluation import evaluate_performance\nfrom ampligraph.evaluation import hits_at_n_score, mrr_score, mr_score\nranks = evaluate_performance(wn18['test'][::100], model, X_filter, verbose=\n    True, corrupt_side='s,o')\nprint('----------corrupted with default protocol-----------------')\nmr_joint = mr_score(ranks)\nmrr_joint = mrr_score(ranks)\nprint('MAR:', mr_joint)\nprint('Mrr:', mrr_joint)\nprint('hits10:', hits_at_n_score(ranks, 10))\nprint('hits3:', hits_at_n_score(ranks, 3))\nprint('hits1:', hits_at_n_score(ranks, 1))\nnp.testing.assert_equal(mr_sep, mr_joint)\nassert mrr_joint is not np.Inf\n"
}