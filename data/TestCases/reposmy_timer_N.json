{
    "functionName": "my_timer_N",
    "className": null,
    "fileName": "/jakob-lass_&_MJOLNIR/MJOLNIR_&__tools.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"Timer function to measure time consumbtion of function.\n\n    Kwargs:\n\n        - N (int): Number of itterations to perform.\n\n    Raises:\n\n        - AttributeError\n    \"\"\"\nif N < 0:\n    raise AttributeError(\n        'Number of runs need to be bigger or equal to 1 or equal to 0 for no timing, but {} given.'\n        .format(N))\ndef my_timer(func):\n    import time\n\n    def newFunc(*args, **kwargs):\n        Time = []\n        if N == 0:\n            returnval = func(*args, **kwargs)\n        else:\n            for i in range(N):\n                startT = time.time()\n                returnval = func(*args, **kwargs)\n                stopT = time.time()\n                Time.append(stopT - startT)\n            if N > 1:\n                print('Function \"{}\" took: {}s (\\\\pm{}s)'.format(func.\n                    __name__, np.mean(Time), np.std(Time) / np.sqrt(N)))\n            else:\n                print('Function \"{}\" took: {}s'.format(func.__name__, Time[0]))\n        return returnval\n    return newFunc\nreturn my_timer\n"
}