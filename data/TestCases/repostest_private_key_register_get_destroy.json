{
    "functionName": "test_private_key_register_get_destroy",
    "className": "TestIntegration",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_integration_&_services_&_test_integration.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Tests that private keys are properly registered, retrieved,\n        and destroyed.\n        \"\"\"\npriv_key_object_type = ObjectType.PRIVATE_KEY\nmask_flags = [CryptographicUsageMask.ENCRYPT, CryptographicUsageMask.DECRYPT]\nattribute_type = AttributeType.CRYPTOGRAPHIC_USAGE_MASK\nusage_mask = self.attr_factory.create_attribute(attribute_type, mask_flags)\nname = Attribute.AttributeName('Name')\nkey_name = 'Integration Test - Register-Get-Destroy Key -'\npriv_name_value = Name.NameValue(key_name + ' Private')\nname_type = Name.NameType(NameType.UNINTERPRETED_TEXT_STRING)\npriv_value = Name(name_value=priv_name_value, name_type=name_type)\npriv_name = Attribute(attribute_name=name, attribute_value=priv_value)\npriv_key_attributes = [usage_mask, priv_name]\nprivate_template_attribute = TemplateAttribute(attributes=priv_key_attributes)\nkey_format_type = KeyFormatType(KeyFormatTypeEnum.RAW)\nkey_data = (\n    b'0\\x82\\x02v\\x02\\x01\\x000\\r\\x06\\t*\\x86H\\x86\\xf7\\r\\x01\\x01\\x01\\x05\\x00\\x04\\x82\\x02`0\\x82\\x02\\\\\\x02\\x01\\x00\\x02\\x81\\x81\\x00\\x93\\x04Q\\xc9\\xec\\xd9O[\\xb9\\xda\\x17\\xdd\\t8\\x1b\\xd2;\\xe4>\\xca\\x8cu9\\xf3\\x01\\xfc\\x8a\\x8c\\xd5\\xd5\\'L>v\\x99\\xdb\\xdcq\\x1c\\x97\\xa7\\xaa\\x91\\xe2\\xc5\\n\\x82\\xbd\\x0b\\x104\\xf0\\xdfI=\\xec\\x166$\\'\\xe5\\x8a\\xcc\\xe7\\xf6\\xce\\x0f\\x9b\\xcca{\\xbd\\x8c\\x90\\xd0\\tJ\\'\\x03\\xba\\r\\t\\xeb\\x19\\xd1\\x00_/\\xb2eRj\\xacu\\xaf2\\xf8\\xbcx,\\xde\\xd2\\xa5\\x7f\\x81\\x1e\\x03\\xea\\xf6z\\x94M\\xe5\\xe7\\x84\\x13\\xdc\\xa8\\xf22\\xd0t\\xe6\\xdc\\xeaL\\xec\\x9f\\x02\\x03\\x01\\x00\\x01\\x02\\x81\\x80\\x0bj}sa\\x99\\xeaH\\xa4 \\xe4S|\\xa0\\xc7\\xc0FxM\\xcb\\xea\\xa6;\\xae\\xbc\\x0b\\xc12xtI\\xcd\\xe8\\xd7\\xca\\xd0\\xc0\\xc8c\\xc0\\xfe\\xfb\\x06\\xc3\\x06+\\xef\\xc5\\x003\\xec\\xf8{N3\\xa9\\xbe{\\xcb\\xc8\\xf1Q\\x1a\\xe2\\x15\\xe8\\r\\xeb]\\x8a\\xf2\\xbd11\\x9dx!\\x19f@\\x93Z\\x0c\\xd6|\\x94Y\\x95y\\xf2\\x10\\re\\xe08\\x83\\x1f\\xda\\xfb\\r\\xbe+\\xbd\\xac\\x00\\xa6\\x96\\xe6~ucP\\xe1\\xc9\\x9a\\xce\\x11\\xa3m\\xab\\xac>\\xd3\\xe70\\x96\\x00Y\\x02A\\x00\\xdd\\xf6r\\xfb\\xcc[\\xda=s\\xaf\\xfcNy\\x1e\\x0c\\x039\\x02$@]i\\xcc\\xaa\\xbct\\x9f\\xaa\\r\\xcdL%\\x83\\xc7\\x1d\\xde\\x89A\\xa7\\xb9\\xaa\\x03\\x0fR\\xef\\x14QFl\\x07MM3\\x8f\\xe6w\\x89*\\xcd\\x9e\\x10\\xfd5\\xbd\\x02A\\x00\\xa9\\x8f\\xbc>\\xd6\\xb4\\xc6\\xf8`\\xf9qe\\xac/{\\xb6\\xf2\\xe2\\xcb\\x19*\\x9a\\xbdIy[\\xe5\\xbc\\xf3}\\x8e\\xe6\\x9an\\x16\\x9c$\\xe5\\xc3.N\\x7f\\xa32eF\\x14\\x07\\xf9R\\xbaI\\xe2\\x04\\x81\\x8a/x_\\x11?\\x92+\\x8b\\x02@%?\\x94p9\\r9\\x04\\x93\\x03w}\\xdb\\xc9u\\x0e\\x9dd\\x84\\x9c\\xe0\\x90>\\xaepM\\xc9\\xf5\\x89\\xb7h\\r\\xeb\\x9d`\\x9f\\xd5\\xbc\\xd4\\xde\\xcdo\\x12\\x05B\\xe5\\xcf\\xf5\\xd7o*C\\xc8a_\\xb5\\xb3\\xa9!4cyz\\xa9\\x02A\\x00\\xa1\\xdd\\xf0#\\xc0\\xcd\\x94\\xc0\\x19\\xbb&\\xd0\\x9b\\x9e<\\xa8\\xfa\\x97\\x1c\\xb1j\\xa5\\x8b\\x9b\\xafy\\xd6\\x08\\x1a\\x1d\\xbb\\xa4R\\xbaSe>(\\x04\\xba\\x98\\xffi\\xe8\\xbb\\x1b:\\x16\\x1e\\xa2%\\xeaP\\x14c!j\\x8d\\xab\\x9b\\x88\\xa7^_\\x02@axdn\\x11,\\xf7\\x9d\\x92\\x1a\\x8a\\x84?\\x17\\xf6\\xe7\\xff\\x97Oh\\x81\"6[\\xf6i\\x0c\\xdf\\xc9\\x96\\xe1\\x89\\tR\\xeb8 \\xdd\\x18\\x90\\xec\\x1c\\x86\\x19\\xe8z+\\xd3\\x8f\\x9d\\x03\\xb3\\x7f\\xact.\\xfbt\\x8cx\\x85\\x94,9'\n    )\nkey_material = KeyMaterial(key_data)\nkey_value = KeyValue(key_material)\nalgorithm_value = CryptoAlgorithmEnum.RSA\ncryptographic_algorithm = CryptographicAlgorithm(algorithm_value)\ncryptographic_length = CryptographicLength(2048)\nkey_block = KeyBlock(key_format_type=key_format_type, key_compression_type=\n    None, key_value=key_value, cryptographic_algorithm=\n    cryptographic_algorithm, cryptographic_length=cryptographic_length,\n    key_wrapping_data=None)\npriv_secret = PrivateKey(key_block)\npriv_key_result = self.client.register(priv_key_object_type,\n    private_template_attribute, priv_secret, credential=None)\nself._check_result_status(priv_key_result, ResultStatus, ResultStatus.SUCCESS)\nself._check_uuid(priv_key_result.uuid, str)\npriv_uuid = priv_key_result.uuid\npriv_key_result = self.client.get(uuid=priv_uuid, credential=None)\nself._check_result_status(priv_key_result, ResultStatus, ResultStatus.SUCCESS)\nself._check_object_type(priv_key_result.object_type, ObjectType, ObjectType\n    .PRIVATE_KEY)\nself._check_uuid(priv_key_result.uuid, str)\npriv_secret = priv_key_result.secret\npriv_expected = PrivateKey\nself.assertIsInstance(priv_secret, priv_expected)\npriv_key_block = priv_key_result.secret.key_block\npriv_key_value = priv_key_block.key_value\npriv_key_material = priv_key_value.key_material\nexpected = key_data\npriv_observed = priv_key_material.value\nself.assertEqual(expected, priv_observed)\nself.logger.debug('Destroying key: ' + key_name + ' Private' +\n    '\\nWith \" \"UUID: ' + priv_key_result.uuid)\npriv_result = self.client.destroy(priv_key_result.uuid)\nself._check_result_status(priv_result, ResultStatus, ResultStatus.SUCCESS)\nself._check_uuid(priv_result.uuid.value, str)\npriv_key_destroyed_result = self.client.get(uuid=priv_uuid, credential=None)\nself._check_result_status(priv_key_destroyed_result, ResultStatus,\n    ResultStatus.OPERATION_FAILED)\nexpected = ResultReason\npriv_observed = type(priv_key_destroyed_result.result_reason.value)\nself.assertEqual(expected, priv_observed)\n"
}