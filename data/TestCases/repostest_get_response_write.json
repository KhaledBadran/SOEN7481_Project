{
    "functionName": "test_get_response_write",
    "className": "TestResponseMessage",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_core_&_messages_&_test_messages.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "prot_ver = contents.ProtocolVersion(1, 1)\ntime_stamp = contents.TimeStamp(1335514343)\nbatch_count = contents.BatchCount(1)\nresponse_header = messages.ResponseHeader(protocol_version=prot_ver,\n    time_stamp=time_stamp, batch_count=batch_count)\noperation = contents.Operation(enums.Operation.GET)\nresult_status = contents.ResultStatus(enums.ResultStatus.SUCCESS)\nobject_type = attr.ObjectType(enums.ObjectType.SYMMETRIC_KEY)\nuuid = '49a1ca88-6bea-4fb2-b450-7e58802c3038'\nuniq_id = attr.UniqueIdentifier(uuid)\nkey = b'sgW\\x80Q\\x01*m\\x13J\\x85^%\\xc8\\xcd^L\\xa11EW)\\xd3\\xc8'\ncrypto_algorithm = enums.CryptographicAlgorithm.TRIPLE_DES\ncryptographic_length = 168\nkey_format_type = KeyFormatType(enums.KeyFormatType.RAW)\nkey_material = objects.KeyMaterial(key)\nkey_value = objects.KeyValue(key_material)\ncryptographic_algorithm = CryptographicAlgorithm(crypto_algorithm)\ncryptographic_length = CryptographicLength(cryptographic_length)\nkey_block = objects.KeyBlock(key_format_type=key_format_type,\n    key_compression_type=None, key_value=key_value, cryptographic_algorithm\n    =cryptographic_algorithm, cryptographic_length=cryptographic_length,\n    key_wrapping_data=None)\nsecret = SymmetricKey(key_block)\nresp_pl = payloads.GetResponsePayload(object_type=object_type.value,\n    unique_identifier=uniq_id.value, secret=secret)\nbatch_item = messages.ResponseBatchItem(operation=operation, result_status=\n    result_status, response_payload=resp_pl)\nrm = messages.ResponseMessage(response_header=response_header, batch_items=\n    [batch_item])\nrm.write(self.stream)\nresult = self.stream.read()\nlen_exp = len(self.get)\nlen_rcv = len(result)\nself.assertEqual(len_exp, len_rcv, self.msg.format('get response message',\n    'write', len_exp, len_rcv))\nmsg = 'Bad get response message write: encoding mismatch'\nprint(self.get)\nprint(result)\nself.assertEqual(self.get, result, msg)\n"
}