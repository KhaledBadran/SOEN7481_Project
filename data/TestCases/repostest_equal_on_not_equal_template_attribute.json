{
    "functionName": "test_equal_on_not_equal_template_attribute",
    "className": "TestDeriveKeyResponsePayload",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_core_&_messages_&_payloads_&_test_derive_key.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that the equality operator returns False when comparing two\n        DeriveKey response payloads with different template attributes.\n        \"\"\"\na = payloads.DeriveKeyResponsePayload(template_attribute=objects.\n    TemplateAttribute(attributes=[objects.Attribute(attribute_name=objects.\n    Attribute.AttributeName('Cryptographic Algorithm'), attribute_value=\n    primitives.Enumeration(enums.CryptographicAlgorithm, value=enums.\n    CryptographicAlgorithm.AES, tag=enums.Tags.CRYPTOGRAPHIC_ALGORITHM)),\n    objects.Attribute(attribute_name=objects.Attribute.AttributeName(\n    'Cryptographic Length'), attribute_value=primitives.Integer(value=128,\n    tag=enums.Tags.CRYPTOGRAPHIC_LENGTH))]))\nb = payloads.DeriveKeyResponsePayload(template_attribute=objects.\n    TemplateAttribute(attributes=[objects.Attribute(attribute_name=objects.\n    Attribute.AttributeName('Cryptographic Algorithm'), attribute_value=\n    primitives.Enumeration(enums.CryptographicAlgorithm, value=enums.\n    CryptographicAlgorithm.BLOWFISH, tag=enums.Tags.CRYPTOGRAPHIC_ALGORITHM\n    )), objects.Attribute(attribute_name=objects.Attribute.AttributeName(\n    'Cryptographic Length'), attribute_value=primitives.Integer(value=64,\n    tag=enums.Tags.CRYPTOGRAPHIC_LENGTH))]))\nself.assertFalse(a == b)\nself.assertFalse(b == a)\na = payloads.DeriveKeyResponsePayload(template_attribute=objects.\n    TemplateAttribute(attributes=[objects.Attribute(attribute_name=objects.\n    Attribute.AttributeName('Cryptographic Algorithm'), attribute_value=\n    primitives.Enumeration(enums.CryptographicAlgorithm, value=enums.\n    CryptographicAlgorithm.AES, tag=enums.Tags.CRYPTOGRAPHIC_ALGORITHM)),\n    objects.Attribute(attribute_name=objects.Attribute.AttributeName(\n    'Cryptographic Length'), attribute_value=primitives.Integer(value=128,\n    tag=enums.Tags.CRYPTOGRAPHIC_LENGTH))]))\nb = payloads.DeriveKeyResponsePayload(template_attribute=objects.\n    TemplateAttribute())\nself.assertFalse(a == b)\nself.assertFalse(b == a)\na = payloads.DeriveKeyResponsePayload(template_attribute=None)\nb = payloads.DeriveKeyResponsePayload(template_attribute=objects.\n    TemplateAttribute(attributes=[objects.Attribute(attribute_name=objects.\n    Attribute.AttributeName('Cryptographic Algorithm'), attribute_value=\n    primitives.Enumeration(enums.CryptographicAlgorithm, value=enums.\n    CryptographicAlgorithm.AES, tag=enums.Tags.CRYPTOGRAPHIC_ALGORITHM)),\n    objects.Attribute(attribute_name=objects.Attribute.AttributeName(\n    'Cryptographic Length'), attribute_value=primitives.Integer(value=128,\n    tag=enums.Tags.CRYPTOGRAPHIC_LENGTH))]))\nself.assertFalse(a == b)\nself.assertFalse(b == a)\n"
}