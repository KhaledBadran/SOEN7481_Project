{
    "functionName": "mixed_boundaries",
    "className": "TestTfCudaResample",
    "fileName": "/tum-pbs_&_PhiFlow/gpu_tests_&_test_tf_cuda_resample.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "with tf.device(device):\n    data = np.array([[[[1.0], [2.0], [3.0]], [[4.0], [5.0], [6.0]], [[7.0],\n        [8.0], [9.0]]]])\n    points = np.array([[[-0.5, -0.5], [2.5, 2.5]]])\n    precomputed = np.array([[[0.25, 2.25], [0.5, 4.5], [1.0, 4.0], [0.75, \n        4.25]], [[0.5, 4.5], [1.0, 9.0], [2.0, 8.0], [1.5, 8.5]], [[2.0, \n        3.0], [4.0, 6.0], [5.0, 5.0], [4.5, 5.5]], [[1.25, 3.75], [2.5, 7.5\n        ], [3.5, 6.5], [3.0, 7.0]]])\n    boundaries = ['zero', 'replicate', 'circular', 'reflect']\n    for i in range(4):\n        for j in range(4):\n            boundary = boundaries[i], boundaries[j]\n            data_placeholder = tf.placeholder(tf.float32, name=\n                'data_placeholder', shape=data.shape)\n            points_placeholder = tf.placeholder(tf.float32, name=\n                'points_placeholder', shape=points.shape)\n            cuda_resampled = resample_cuda(data_placeholder,\n                points_placeholder, boundary)\n            with tf.Session(config=tf.ConfigProto(allow_soft_placement=True)\n                ) as sess:\n                result = sess.run(cuda_resampled, feed_dict={\n                    data_placeholder: data, points_placeholder: points})\n            assert result.flat[0] == precomputed[i, j, 0]\n            assert result.flat[1] == precomputed[i, j, 1]\n    boundary = [('zero', 'replicate'), ('circular', 'reflect')]\n    points = np.array([[[-0.5, -0.5], [-0.5, 2.5], [2.5, -0.5], [2.5, 2.5]]])\n    points_placeholder = tf.placeholder(tf.float32, name=\n        'points_placeholder', shape=points.shape)\n    cuda_resampled = resample_cuda(data_placeholder, points_placeholder,\n        boundary)\n    with tf.Session(config=tf.ConfigProto(allow_soft_placement=True)) as sess:\n        result = sess.run(cuda_resampled, feed_dict={data_placeholder: data,\n            points_placeholder: points})\n    assert result.flat[0] == 1.0\n    assert result.flat[1] == 1.25\n    assert result.flat[2] == 8\n    assert result.flat[3] == 8.5\n"
}