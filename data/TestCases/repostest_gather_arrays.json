{
    "functionName": "test_gather_arrays",
    "className": null,
    "fileName": "/NASA_&_MLMCPy/tests_&_mlmc_&_test_MLMCSimulator.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n    Tests simulator's _gather_arrays() to ensure that it produces expected\n    results for axis=0 and axis=1 parameters.\n    \"\"\"\nsim = MLMCSimulator(data=data_input, models=models_from_data)\ntest = np.ones((2, 2)) * comm.rank\nexpected_result = np.zeros((2, 2))\nfor i in range(1, comm.size):\n    new_block = np.ones((2, 2)) * i\n    expected_result = np.concatenate((expected_result, new_block), axis=0)\ntest_result = sim._gather_arrays(test, axis=0)\nassert np.array_equal(expected_result, test_result)\ntest2 = np.ones((2, 2)) * comm.rank\nexpected_result2 = np.zeros((2, 2))\nfor i in range(1, comm.size):\n    new_block = np.ones((2, 2)) * i\n    expected_result2 = np.concatenate((expected_result2, new_block), axis=1)\ntest2_result = sim._gather_arrays(test2, axis=1)\nassert np.array_equal(expected_result2, test2_result)\nif comm.rank % 2 == 0:\n    sim._cpu_sample_sizes = np.array([2, 1, 0])\nelse:\n    sim._cpu_sample_sizes = np.array([2, 0, 0])\nsim._sample_sizes = sim._sample_sizes * comm.size\nsim._run_simulation()\n"
}