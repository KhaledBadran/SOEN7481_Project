{
    "functionName": "test_find_closest_ocean_cell_to_river_mouth",
    "className": null,
    "fileName": "/raphaeldussin_&_DICRIVERS/dicrivers_&_test_&_test_geo_utils.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"unit test\"\"\"\nfrom dicrivers.geo_utils import find_closest_ocean_cell_to_river_mouth\nrivers = pd.read_csv(FIXTURE_DIR + '20major_rivers.csv')\nprint(rivers)\nlon_grid, lat_grid = np.meshgrid(np.arange(0, 360, 1), np.arange(-90, 90, 1))\nmask_grid = np.ones(lon_grid.shape)\nfor index, river in rivers.iterrows():\n    print(river)\n    print(river['mouth_lon'], river['mouth_lat'])\n    lon_river = river['mouth_lon']\n    lat_river = river['mouth_lat']\n    jmouth, imouth = find_closest_ocean_cell_to_river_mouth(lon_river,\n        lat_river, lon_grid, lat_grid, mask_grid)\n    print(jmouth, imouth)\n    lon_river_360 = np.mod(lon_river + 360, 360)\n    assert np.abs(lon_grid[jmouth, imouth] - lon_river_360) < 1\n    assert np.abs(lat_grid[jmouth, imouth] - lat_river) < 1\nlon_grid, lat_grid = np.meshgrid(np.arange(-180, 180, 1), np.arange(-90, 90, 1)\n    )\nmask_grid = np.ones(lon_grid.shape)\nfor index, river in rivers.iterrows():\n    print(river)\n    print(river['mouth_lon'], river['mouth_lat'])\n    lon_river = river['mouth_lon']\n    lat_river = river['mouth_lat']\n    jmouth, imouth = find_closest_ocean_cell_to_river_mouth(lon_river,\n        lat_river, lon_grid, lat_grid, mask_grid)\n    print(jmouth, imouth)\n    assert np.abs(lon_grid[jmouth, imouth] - lon_river) < 1\n    assert np.abs(lat_grid[jmouth, imouth] - lat_river) < 1\nlon_grid, lat_grid = np.meshgrid(np.arange(-120, 30, 0.25), np.arange(10, \n    70, 0.25))\nmask_grid = np.ones(lon_grid.shape)\nMississippi = rivers.loc[rivers['basinname'] == 'Mississippi']\nlon_miss = Mississippi['mouth_lon'].values\nlat_miss = Mississippi['mouth_lat'].values\njmouth, imouth = find_closest_ocean_cell_to_river_mouth(lon_miss, lat_miss,\n    lon_grid, lat_grid, mask_grid)\nassert jmouth is not None\nassert imouth is not None\nAmazon = rivers.loc[rivers['basinname'] == 'Amazon']\nlon_ama = Amazon['mouth_lon'].values\nlat_ama = Amazon['mouth_lat'].values\njmouth, imouth = find_closest_ocean_cell_to_river_mouth(lon_ama, lat_ama,\n    lon_grid, lat_grid, mask_grid)\nassert jmouth is None\nassert imouth is None\nreturn None\n"
}