{
    "functionName": "test_parameters_nu",
    "className": null,
    "fileName": "/LSSTDESC_&_CCL/pyccl_&_tests_&_test_parameters.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "cosmo = ccl.Cosmology(Omega_c=0.25, Omega_b=0.05, h=0.7, A_s=2.1e-09, n_s=\n    0.96, wa=0.01, w0=-1, Neff=3.046, Omega_k=0.0, m_nu=0.15, m_nu_type=\n    m_nu_type)\nif m_nu_type == 'inverted':\n    assert np.allclose(cosmo['m_nu'][1] ** 2 - cosmo['m_nu'][0] ** 2, ccl.\n        physical_constants.DELTAM12_sq, atol=0.0001, rtol=0)\n    assert np.allclose(cosmo['m_nu'][2] ** 2 - cosmo['m_nu'][0] ** 2, ccl.\n        physical_constants.DELTAM13_sq_neg, atol=0.0001, rtol=0)\nelif m_nu_type == 'normal':\n    assert np.allclose(cosmo['m_nu'][1] ** 2 - cosmo['m_nu'][0] ** 2, ccl.\n        physical_constants.DELTAM12_sq, atol=0.0001, rtol=0)\n    assert np.allclose(cosmo['m_nu'][2] ** 2 - cosmo['m_nu'][0] ** 2, ccl.\n        physical_constants.DELTAM13_sq_pos, atol=0.0001, rtol=0)\nelif m_nu_type == 'single':\n    assert np.allclose(cosmo['m_nu'][0], 0.15, atol=0.0001, rtol=0)\n    assert np.allclose(cosmo['m_nu'][1], 0.0, atol=0.0001, rtol=0)\n    assert np.allclose(cosmo['m_nu'][2], 0.0, atol=0.0001, rtol=0)\npytest.mark.parametrize('m_nu_type', ['normal', 'inverted', 'single'])"
}