{
    "functionName": "_test_signtx",
    "className": "TestSignTx",
    "fileName": "/bitcoin-core_&_HWI/test_&_test_device.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "keypool_desc = self.do_command(self.dev_args + ['getkeypool', '--sh_wpkh',\n    '30', '50'])\nimport_result = self.wrpc.importmulti(keypool_desc)\nself.assertTrue(import_result[0]['success'])\nkeypool_desc = self.do_command(self.dev_args + ['getkeypool', '--sh_wpkh',\n    '--internal', '30', '50'])\nimport_result = self.wrpc.importmulti(keypool_desc)\nself.assertTrue(import_result[0]['success'])\nsh_wpkh_addr = self.wrpc.getnewaddress('', 'p2sh-segwit')\nwpkh_addr = self.wrpc.getnewaddress('', 'bech32')\npkh_addr = self.wrpc.getnewaddress('', 'legacy')\nself.wrpc.importaddress(wpkh_addr)\nself.wrpc.importaddress(pkh_addr)\nsh_wpkh_info = self.wrpc.getaddressinfo(sh_wpkh_addr)\nwpkh_info = self.wrpc.getaddressinfo(wpkh_addr)\npkh_info = self.wrpc.getaddressinfo(pkh_addr)\npubkeys = [sh_wpkh_info['desc'][8:-11], wpkh_info['desc'][5:-10], pkh_info[\n    'desc'][4:-10]]\nsh_multi_desc = self.wrpc.getdescriptorinfo('sh(sortedmulti(2,' + pubkeys[0\n    ] + ',' + pubkeys[1] + ',' + pubkeys[2] + '))')['descriptor']\nsh_wsh_multi_desc = self.wrpc.getdescriptorinfo('sh(wsh(sortedmulti(2,' +\n    pubkeys[0] + ',' + pubkeys[1] + ',' + pubkeys[2] + ')))')['descriptor']\nwsh_multi_desc = self.wrpc.getdescriptorinfo('wsh(sortedmulti(2,' + pubkeys\n    [2] + ',' + pubkeys[1] + ',' + pubkeys[0] + '))')['descriptor']\nsh_multi_import = {'desc': sh_multi_desc, 'timestamp': 'now', 'label':\n    'shmulti'}\nsh_wsh_multi_import = {'desc': sh_wsh_multi_desc, 'timestamp': 'now',\n    'label': 'shwshmulti'}\nwsh_multi_import = {'desc': wsh_multi_desc, 'timestamp': 'now', 'label':\n    'wshmulti'}\nmulti_result = self.wrpc.importmulti([sh_multi_import, sh_wsh_multi_import,\n    wsh_multi_import])\nself.assertTrue(multi_result[0]['success'])\nself.assertTrue(multi_result[1]['success'])\nself.assertTrue(multi_result[2]['success'])\nsh_multi_addr = self.wrpc.getaddressesbylabel('shmulti').popitem()[0]\nsh_wsh_multi_addr = self.wrpc.getaddressesbylabel('shwshmulti').popitem()[0]\nwsh_multi_addr = self.wrpc.getaddressesbylabel('wshmulti').popitem()[0]\nin_amt = 3\nout_amt = in_amt // 3\nnumber_inputs = 0\nif input_type == 'segwit' or input_type == 'all':\n    self.wpk_rpc.sendtoaddress(sh_wpkh_addr, in_amt)\n    self.wpk_rpc.sendtoaddress(wpkh_addr, in_amt)\n    number_inputs += 2\nif input_type == 'legacy' or input_type == 'all':\n    self.wpk_rpc.sendtoaddress(pkh_addr, in_amt)\n    number_inputs += 1\nif multisig:\n    if input_type == 'legacy' or input_type == 'all':\n        self.wpk_rpc.sendtoaddress(sh_multi_addr, in_amt)\n        number_inputs += 1\n    if input_type == 'segwit' or input_type == 'all':\n        self.wpk_rpc.sendtoaddress(wsh_multi_addr, in_amt)\n        self.wpk_rpc.sendtoaddress(sh_wsh_multi_addr, in_amt)\n        number_inputs += 2\nself.wpk_rpc.generatetoaddress(6, self.wpk_rpc.getnewaddress())\nfor i in range(number_inputs):\n    if i == number_inputs - 1:\n        self.assertTrue((i + 1) * in_amt == self.wrpc.getbalance('*', 0, True))\n    psbt = self.wrpc.walletcreatefundedpsbt([], [{self.wpk_rpc.\n        getnewaddress('', 'legacy'): (i + 1) * out_amt}, {self.wpk_rpc.\n        getnewaddress('', 'p2sh-segwit'): (i + 1) * out_amt}, {self.wpk_rpc\n        .getnewaddress('', 'bech32'): (i + 1) * out_amt}], 0, {\n        'includeWatching': True, 'subtractFeeFromOutputs': [0, 1, 2]}, True)\n    if external:\n        self._generate_and_finalize(True, psbt)\n    final_tx = self._generate_and_finalize(False, psbt)\nself.wrpc.sendrawtransaction(final_tx)\n"
}