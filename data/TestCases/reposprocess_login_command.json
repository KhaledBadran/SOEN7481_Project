{
    "functionName": "process_login_command",
    "className": "TestLogin",
    "fileName": "/Keeper-Security_&_Commander/unit-tests_&_test_login.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "if request['username'] == vault_env.user:\n    auth1 = auth_verifier(vault_env.password, vault_env.salt, vault_env.\n        iterations)\n    if auth1 == request['auth_response']:\n        device_token = None\n        if TestLogin.has2fa:\n            method = request.get('2fa_type') or ''\n            token = request.get('2fa_token') or ''\n            if method == 'one_time':\n                if token != vault_env.one_time_token:\n                    return {'result': 'fail', 'result_code': 'invalid_totp'}\n                device_token = vault_env.device_token\n            elif method == 'device_token':\n                if token != vault_env.device_token:\n                    return {'result': 'fail', 'result_code':\n                        'invalid_device_token'}\n            else:\n                return {'result': 'fail', 'result_code': 'need_totp'}\n        rs = {'result': 'success', 'result_code': 'auth_success',\n            'session_token': vault_env.session_token}\n        if TestLogin.has2fa and device_token:\n            rs['device_token'] = device_token\n            rs['dt_scope'] = 'expiration'\n        if 'include' in request:\n            include = request['include']\n            if 'keys' in include:\n                keys = {'encrypted_private_key': vault_env.\n                    encrypted_private_key}\n                if TestLogin.dataKeyAsEncParam:\n                    keys['encryption_params'] = vault_env.encryption_params\n                else:\n                    keys['encrypted_data_key'] = vault_env.encrypted_data_key\n                rs['keys'] = keys\n            if 'is_enterprise_admin' in include:\n                rs['is_enterprise_admin'] = False\n        return rs\n    return {'result': 'failure', 'result_code': 'auth_failed', 'salt':\n        base64.urlsafe_b64encode(vault_env.salt).decode('utf-8').strip('='),\n        'iterations': vault_env.iterations}\nreturn {'result': 'failure', 'result_code': 'Failed_to_find_user'}\nstaticmethod"
}