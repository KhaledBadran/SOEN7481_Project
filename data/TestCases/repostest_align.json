{
    "functionName": "test_align",
    "className": null,
    "fileName": "/quantOS-org_&_JAQS/test_&_test_data_basic.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "ds = RemoteDataService()\nds.init_from_config(data_config)\nraw, msg = ds.query_lb_fin_stat('income',\n    '000001.SZ,600000.SH,601328.SH,601988.SH', 20160505, 20170505, fields=\n    'oper_rev,oper_cost')\nidx_list = ['report_date', 'symbol']\nraw_idx = raw.set_index(idx_list)\nraw_idx.sort_index(axis=0, level=idx_list, inplace=True)\ndf_ann = raw_idx.loc[pd.IndexSlice[:, :], 'ann_date']\ndf_ann = df_ann.unstack(level=1)\ndf_value = raw_idx.loc[pd.IndexSlice[:, :], 'oper_rev']\ndf_value = df_value.unstack(level=1)\ndate_arr = np.array([20160325, 20160328, 20160329, 20160330, 20160331, \n    20160401, 20160405, 20160406, 20160407, 20160408, 20160411, 20160412, \n    20160413, 20160414, 20160415, 20160418, 20160419, 20160420, 20160421, \n    20160422, 20160425, 20160426, 20160427, 20160428, 20160429, 20160503, \n    20160504, 20160505, 20160506, 20160509, 20160510, 20160511, 20160512, \n    20160513, 20160516, 20160517, 20160518, 20160519, 20160520, 20160523, \n    20160524, 20160525, 20160526, 20160527, 20160530, 20160531, 20160601, \n    20160602, 20160603, 20160606, 20160607, 20160608, 20160613, 20160614, \n    20160615, 20160616, 20160617, 20160620, 20160621, 20160622, 20160623, \n    20160624, 20160627, 20160628, 20160629, 20160630, 20160701, 20160704, \n    20160705, 20160706, 20160707, 20160708, 20160711, 20160712, 20160713, \n    20160714, 20160715, 20160718, 20160719, 20160720, 20160721, 20160722, \n    20160725, 20160726, 20160727, 20160728, 20160729, 20160801, 20160802, \n    20160803, 20160804, 20160805, 20160808, 20160809, 20160810, 20160811, \n    20160812, 20160815, 20160816, 20160817, 20160818, 20160819, 20160822, \n    20160823, 20160824, 20160825, 20160826, 20160829, 20160830, 20160831, \n    20160901, 20160902, 20160905, 20160906, 20160907, 20160908, 20160909, \n    20160912, 20160913, 20160914, 20160919, 20160920, 20160921, 20160922, \n    20160923, 20160926, 20160927, 20160928, 20160929, 20160930, 20161010, \n    20161011, 20161012, 20161013, 20161014, 20161017, 20161018, 20161019, \n    20161020, 20161021, 20161024, 20161025, 20161026, 20161027, 20161028, \n    20161031, 20161101, 20161102, 20161103, 20161104, 20161107, 20161108, \n    20161109, 20161110, 20161111, 20161114, 20161115, 20161116, 20161117, \n    20161118, 20161121, 20161122, 20161123, 20161124, 20161125, 20161128, \n    20161129, 20161130, 20161201, 20161202, 20161205, 20161206, 20161207, \n    20161208, 20161209, 20161212, 20161213, 20161214, 20161215, 20161216, \n    20161219, 20161220, 20161221, 20161222, 20161223, 20161226, 20161227, \n    20161228, 20161229, 20161230, 20170103, 20170104, 20170105, 20170106, \n    20170109, 20170110, 20170111, 20170112, 20170113, 20170116, 20170117, \n    20170118, 20170119, 20170120, 20170123, 20170124, 20170125, 20170126, \n    20170203, 20170206, 20170207, 20170208, 20170209, 20170210, 20170213, \n    20170214, 20170215, 20170216, 20170217, 20170220, 20170221, 20170222, \n    20170223, 20170224, 20170227, 20170228, 20170301, 20170302, 20170303, \n    20170306, 20170307, 20170308, 20170309, 20170310, 20170313, 20170314, \n    20170315, 20170316, 20170317, 20170320, 20170321, 20170322, 20170323, \n    20170324, 20170327, 20170328, 20170329, 20170330, 20170331, 20170405, \n    20170406, 20170407, 20170410, 20170411, 20170412, 20170413, 20170414, \n    20170417, 20170418, 20170419, 20170420, 20170421, 20170424, 20170425, \n    20170426, 20170427, 20170428, 20170502, 20170503, 20170504, 20170505, \n    20170508, 20170509, 20170510, 20170511, 20170512, 20170515, 20170516, \n    20170517, 20170518, 20170519, 20170522, 20170523, 20170524, 20170525, \n    20170526, 20170531, 20170601, 20170602, 20170605, 20170606, 20170607, \n    20170608, 20170609, 20170612, 20170613, 20170614, 20170615, 20170616, \n    20170619, 20170620, 20170621, 20170622, 20170623])\nres_align = align(df_value, df_ann, date_arr)\nfor symbol, ser_value in df_value.iteritems():\n    ser_ann = df_ann[symbol]\n    ann_date_last = 0\n    assert res_align.loc[:ser_ann.iat[0] - 1, (symbol)].isnull().all()\n    for i in range(len(ser_value)):\n        value = ser_value.iat[i]\n        ann_date = ser_ann.iat[i]\n        if i + 1 >= len(ser_value):\n            ann_date_next = 99999999\n        else:\n            ann_date_next = ser_ann.iat[i + 1]\n        assert (res_align.loc[ann_date:ann_date_next - 1, (symbol)] == value\n            ).all()\n"
}