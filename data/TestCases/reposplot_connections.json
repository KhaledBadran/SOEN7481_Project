{
    "functionName": "plot_connections",
    "className": null,
    "fileName": "/pmeal_&_OpenPNM/openpnm_&_topotools_&_plottools.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"\n    Produce a 3D plot of the network topology.\n\n    This shows how throats connect for quick visualization without having\n    to export data to veiw in Paraview.\n\n    Parameters\n    ----------\n    network : OpenPNM Network Object\n        The network whose topological connections to plot\n    throats : array_like (optional)\n        The list of throats to plot if only a sub-sample is desired.  This is\n        useful for inspecting a small region of the network.  If no throats are\n        specified then all throats are shown.\n    fig : Matplotlib figure handle and line property arguments\n        If a ``fig`` is supplied, then the topology will be overlaid on this\n        plot.  This makes it possible to combine coordinates and connections,\n        and to color throats differently\n    size_by : array_like\n        An ND-array of throat values (e.g. alg['throat.rate']).  These\n        values are normalized by scaled by ``markersize``.\n    color_by : str or array_like\n        An ND-array of throat values (e.g. alg['throat.rate']).\n    cmap : str or cmap object\n        The matplotlib colormap to use if specfying a throat property\n        for ``color_by``\n    color : str\n        A matplotlib named color (e.g. 'r' for red).\n    alpha : float\n        The transparency of the lines, with 1 being solid and 0 being invisible\n    linestyle : str\n        Can be one of {'solid', 'dashed', 'dashdot', 'dotted'}\n    linewidth : float\n        Controls the thickness of drawn lines.  Is used to scale the thickness\n        if ``size_by`` is given.\n\n    Notes\n    -----\n    The figure handle returned by this method can be passed into\n    ``plot_coordinates`` to create a plot that combines pore coordinates and\n    throat connections, and vice versa.\n\n    See Also\n    --------\n    plot_coordinates\n\n    Examples\n    --------\n    >>> import openpnm as op\n    >>> import matplotlib as mpl\n    >>> mpl.use('Agg')\n    >>> pn = op.network.Cubic(shape=[10, 10, 3])\n    >>> pn.add_boundary_pores()\n    >>> Ts = pn.throats('*boundary', mode='nor')\n    >>> # Create figure showing boundary throats\n    >>> fig = op.topotools.plot_connections(network=pn, throats=Ts)\n    >>> Ts = pn.throats('*boundary')\n    >>> # Pass existing fig back into function to plot additional throats\n    >>> fig = op.topotools.plot_connections(network=pn, throats=Ts,\n    ...                                     fig=fig, colors='r')\n\n    \"\"\"\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib.collections import LineCollection\nfrom mpl_toolkits.mplot3d.art3d import Line3DCollection\nfrom matplotlib import colors as mcolors\nfrom matplotlib import cm\nfrom openpnm.topotools import dimensionality\nTs = network.Ts if throats is None else network._parse_indices(throats)\ndim = dimensionality(network)\nThreeD = True if dim.sum() == 3 else False\nif dim.sum() == 1:\n    dim[np.argwhere(~dim)[0]] = True\nfig = plt.figure() if fig is None else fig\nax = fig.gca()\nif ThreeD and ax.name != '3d':\n    fig.delaxes(ax)\n    ax = fig.add_subplot(111, projection='3d')\nPs = np.unique(network['throat.conns'][Ts])\nX, Y, Z = network['pore.coords'][Ps].T\nxyz = network['pore.coords'][:, (dim)]\nP1, P2 = network['throat.conns'][Ts].T\nthroat_pos = np.column_stack((xyz[P1], xyz[P2])).reshape((Ts.size, 2, dim.\n    sum()))\nif 'c' in kwargs.keys():\n    color = kwargs.pop('c')\ncolor = mcolors.to_rgb(color) + tuple([alpha])\nif color_by is not None:\n    color = cm.get_cmap(name=cmap)(color_by / color_by.max())\n    color[:, (3)] = alpha\nif size_by is not None:\n    if not size_by.startswith('throat.'):\n        size_by = 'throat.' + size_by\n    linewidth = size_by / size_by.max() * linewidth\nif ThreeD:\n    lc = Line3DCollection(throat_pos, colors=color, cmap=cmap, linestyles=\n        linestyle, linewidths=linewidth, antialiaseds=np.ones_like(network.Ts))\nelse:\n    lc = LineCollection(throat_pos, colors=color, cmap=cmap, linestyles=\n        linestyle, linewidths=linewidth, antialiaseds=np.ones_like(network.Ts))\nax.add_collection(lc)\n_scale_3d_axes(ax=ax, X=X, Y=Y, Z=Z)\n_label_axes(ax=ax, X=X, Y=Y, Z=Z)\nreturn fig\n"
}