{
    "functionName": "test_changes_to_private_bugs_still_have_bug_group",
    "className": "TestETL",
    "fileName": "/klahnakoski_&_Bugzilla-ETL/tests_&_test_etl.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "self.settings.param.allow_private_bugs = True\nFile(self.settings.param.first_run_time).delete()\nFile(self.settings.param.last_run_time).delete()\nprivate_bugs = set(Random.sample(self.settings.param.bugs, 3))\nLog.note('The private bugs for this test are {{bugs}}', bugs=private_bugs)\ndatabase.make_test_instance(self.settings.bugzilla)\nwith MySQL(self.settings.bugzilla) as db:\n    for b in private_bugs:\n        database.add_bug_group(db, b, BUG_GROUP_FOR_TESTING)\nbz_etl.main(es=self.settings.private.bugs.es, es_comments=self.settings.\n    private.comments.es, kwargs=self.settings)\nesq = jx_elasticsearch.new_instance(self.settings.private.bugs.es)\nesq.namespace.get_columns(esq.name, after=Date.now())\nresults = esq.query({'from': esq.name, 'where': {'and': [{'in': {'bug_id':\n    private_bugs}}, {'gte': {'expires_on': Date.now().milli}}]}, 'limit': \n    200000, 'format': 'list'})\nif set(results.data.bug_id) != set(private_bugs):\n    results = esq.query({'from': esq.name, 'where': {'and': [{'in': {\n        'bug_id': private_bugs}}, {'gte': {'expires_on': Date.now().milli}}\n        ]}, 'limit': 200000, 'format': 'list'})\n    Log.error('Expecting private bugs to exist')\nwith MySQL(self.settings.bugzilla) as db:\n    for b in private_bugs:\n        old_bug = db.query('SELECT * FROM bugs WHERE bug_id={{bug_id}}', {\n            'bug_id': b})[0]\n        new_bug = old_bug.copy()\n        new_bug.bug_status = 'NEW STATUS'\n        diff(db, 'bugs', old_bug, new_bug)\nbz_etl.main(es=self.settings.private.bugs.es, es_comments=self.settings.\n    private.comments.es, kwargs=self.settings)\nrefresh_metadata(esq.es)\nresults = esq.query({'from': esq.name, 'where': {'and': [{'in': {'bug_id':\n    private_bugs}}, {'gte': {'expires_on': Date.now().milli}}]}, 'limit': \n    200000, 'format': 'list'})\nlatest_bugs_index = jx.unique_index(results.data, 'bug_id')\nfor bug_id in private_bugs:\n    if latest_bugs_index[bug_id] == None:\n        Log.error('Expecting to find the private bug {{bug_id}}', bug_id=bug_id\n            )\n    bug_group = latest_bugs_index[bug_id].bug_group\n    if not bug_group:\n        Log.error('Expecting private bug ({{bug_id}}) to have a bug group',\n            bug_id=bug_id)\n    if BUG_GROUP_FOR_TESTING not in bug_group:\n        Log.error(\n            'Expecting private bug ({{bug_id}}) to have a \"{{bug_group}}\" bug group'\n            , bug_id=bug_id, bug_group=BUG_GROUP_FOR_TESTING)\n"
}