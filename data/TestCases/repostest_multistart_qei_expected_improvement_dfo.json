{
    "functionName": "test_multistart_qei_expected_improvement_dfo",
    "className": "TestExpectedImprovement",
    "fileName": "/Yelp_&_MOE/moe_&_tests_&_optimal_learning_&_python_&_python_version_&_expected_improvement_test.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"Check that multistart optimization (BFGS) can find the optimum point to sample (using 2-EI).\"\"\"\nnumpy.random.seed(7860)\nindex = numpy.argmax(numpy.greater_equal(self.num_sampled_list, 20))\ndomain, gaussian_process = self.gp_test_environments[index]\ntolerance = 6e-05\nnum_multistarts = 3\nexpanded_domain = TensorProductDomain([ClosedInterval(-4.0, 3.0)] * self.dim)\nnum_to_sample = 2\nrepeated_domain = RepeatedDomain(num_to_sample, expanded_domain)\nnum_mc_iterations = 100000\npoints_to_sample = repeated_domain.generate_random_point_in_domain()\nei_eval = ExpectedImprovement(gaussian_process, points_to_sample,\n    num_mc_iterations=num_mc_iterations)\nei_initial = ei_eval.compute_expected_improvement()\nei_optimizer = LBFGSBOptimizer(repeated_domain, ei_eval, self.BFGS_parameters)\nbest_point = multistart_expected_improvement_optimization(ei_optimizer,\n    num_multistarts, num_to_sample)\nei_eval.current_point = best_point\nei_final = ei_eval.compute_expected_improvement()\nfinite_diff_grad = numpy.zeros(best_point.shape)\nh_value = 1e-05\nfor i in range(best_point.shape[0]):\n    for j in range(best_point.shape[1]):\n        best_point[i, j] += h_value\n        ei_eval.current_point = best_point\n        ei_upper = ei_eval.compute_expected_improvement()\n        best_point[i, j] -= 2 * h_value\n        ei_eval.current_point = best_point\n        ei_lower = ei_eval.compute_expected_improvement()\n        best_point[i, j] += h_value\n        finite_diff_grad[i, j] = (ei_upper - ei_lower) / (2 * h_value)\nself.assert_vector_within_relative(finite_diff_grad, numpy.zeros(\n    finite_diff_grad.shape), tolerance)\nassert repeated_domain.check_point_inside(best_point) is True\nassert ei_final >= ei_initial\n"
}