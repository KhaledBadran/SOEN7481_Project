{
    "functionName": "testALEBOGP",
    "className": "ALEBOTest",
    "fileName": "/facebook_&_Ax/ax_&_models_&_tests_&_test_alebo.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "B = torch.tensor([[1.0, 2.0, 3.0, 4.0, 5.0], [2.0, 3.0, 4.0, 5.0, 6.0]],\n    dtype=torch.double)\ntrain_X = torch.tensor([[1.0, 2.0], [3.0, 4.0], [5.0, 6.0]], dtype=torch.double\n    )\ntrain_Y = torch.tensor([[1.0], [2.0], [3.0]], dtype=torch.double)\ntrain_Yvar = 0.1 * torch.ones(3, 1, dtype=torch.double)\nmll = get_map_model(B=B, train_X=train_X, train_Y=train_Y, train_Yvar=\n    train_Yvar, restarts=1, init_state_dict=None)\nm = mll.model\nm.eval()\nself.assertIsInstance(m, ALEBOGP)\nself.assertIsInstance(m.covar_module.base_kernel, ALEBOKernel)\nX = torch.tensor([[2.0, 2.0], [3.0, 3.0], [4.0, 4.0]], dtype=torch.double)\nf = m(X)\nself.assertEqual(f.mean.shape, torch.Size([3]))\nself.assertEqual(f.variance.shape, torch.Size([3]))\nself.assertEqual(f.covariance_matrix.shape, torch.Size([3, 3]))\nUvec_b = m.covar_module.base_kernel.Uvec.repeat(5, 1)\nmean_b = m.mean_module.constant.repeat(5, 1)\noutput_scale_b = m.covar_module.raw_outputscale.repeat(5)\nm_b = get_batch_model(B=B, train_X=train_X, train_Y=train_Y, train_Yvar=\n    train_Yvar, Uvec_batch=Uvec_b, mean_constant_batch=mean_b,\n    output_scale_batch=output_scale_b)\nself.assertEqual(m_b._aug_batch_shape, torch.Size([5]))\nf = m_b(X)\nself.assertEqual(f.mean.shape, torch.Size([3]))\nself.assertEqual(f.variance.shape, torch.Size([3]))\nself.assertEqual(f.covariance_matrix.shape, torch.Size([3, 3]))\nself.assertEqual(m_b.posterior(X).mvn.covariance_matrix.shape, torch.Size([\n    3, 3]))\ninit_state_dict = m.state_dict()\nm_b2 = get_fitted_model(B=B, train_X=train_X, train_Y=train_Y, train_Yvar=\n    train_Yvar, restarts=1, nsamp=5, init_state_dict=init_state_dict)\nself.assertEqual(m_b2._aug_batch_shape, torch.Size([5]))\nmap_sds = extract_map_statedict(m_b=m_b, num_outputs=1)\nself.assertEqual(len(map_sds), 1)\nself.assertEqual(len(map_sds[0]), 3)\nself.assertEqual(set(map_sds[0]), {'covar_module.base_kernel.Uvec',\n    'covar_module.raw_outputscale', 'mean_module.constant'})\nself.assertEqual(map_sds[0]['covar_module.base_kernel.Uvec'].shape, torch.\n    Size([3]))\nml = ModelListGP(m_b, m_b2)\nmap_sds = extract_map_statedict(m_b=ml, num_outputs=2)\nself.assertEqual(len(map_sds), 2)\nfor i in range(2):\n    self.assertEqual(len(map_sds[i]), 3)\n    self.assertEqual(set(map_sds[i]), {'covar_module.base_kernel.Uvec',\n        'covar_module.raw_outputscale', 'mean_module.constant'})\n    self.assertEqual(map_sds[i]['covar_module.base_kernel.Uvec'].shape,\n        torch.Size([3]))\n"
}