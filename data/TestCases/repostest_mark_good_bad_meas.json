{
    "functionName": "test_mark_good_bad_meas",
    "className": "TestDemagGUI",
    "fileName": "/PmagPy_&_PmagPy/pmagpy_tests_&_test_demag_gui.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "add_fit_evt = wx.PyCommandEvent(wx.EVT_BUTTON.typeId, self.frame.\n    add_fit_button.GetId())\ndelete_fit_evt = wx.PyCommandEvent(wx.EVT_BUTTON.typeId, self.frame.\n    delete_fit_button.GetId())\nedit_menu = self.get_menu_from_frame(self.frame, 'Edit')\nmark_meas_data_menu = edit_menu.FindItemById(edit_menu.FindItem(\n    '&Flag Measurement Data')).GetSubMenu()\nmarkgood_menu_evt = wx.PyCommandEvent(wx.EVT_MENU.typeId,\n    mark_meas_data_menu.FindItem('&Good Measurement\\tCtrl-Alt-G'))\nmarkbad_menu_evt = wx.PyCommandEvent(wx.EVT_MENU.typeId,\n    mark_meas_data_menu.FindItem('&Bad Measurement\\tCtrl-Alt-B'))\ntmin_box_evt = wx.PyCommandEvent(wx.EVT_COMBOBOX.typeId, self.frame.\n    tmin_box.GetId())\ntmax_box_evt = wx.PyCommandEvent(wx.EVT_COMBOBOX.typeId, self.frame.\n    tmax_box.GetId())\ntmin = self.frame.Data[self.frame.s]['zijdblock_steps'][0]\ntmax = self.frame.Data[self.frame.s]['zijdblock_steps'][-1]\nfor tmax_i in range(2, len(self.frame.Data[self.frame.s]['zijdblock_steps'])):\n    if tmin != tmax:\n        tmax_i -= 2\n        break\n    else:\n        tmax = self.frame.Data[self.frame.s]['zijdblock_steps'][-tmax_i]\nself.frame.ProcessEvent(add_fit_evt)\nself.frame.tmin_box.SetValue(tmin)\nself.frame.tmax_box.SetValue(tmax)\nself.frame.ProcessEvent(tmin_box_evt)\nself.assertEqual(len(self.frame.pmag_results_data['specimens'][self.frame.s\n    ]), 1)\nfit = self.frame.pmag_results_data['specimens'][self.frame.s][0]\nmeas_data_before = self.frame.Data[self.frame.s]['measurement_flag']\nself.frame.logger.Select(0)\nself.frame.ProcessEvent(markgood_menu_evt)\ntotal_num_of_good_meas_data = len([x for x in self.frame.Data[self.frame.s]\n    ['measurement_flag'] if x == 'g'])\ntotal_num_of_good_meas_data -= tmax_i\ntotal_n = len(self.frame.Data[self.frame.s]['measurement_flag'])\ntotal_n -= tmax_i\nself.assertEqual(fit.get(self.frame.COORDINATE_SYSTEM)['specimen_n'],\n    total_num_of_good_meas_data)\nself.frame.logger.Select(0)\nself.frame.ProcessEvent(markbad_menu_evt)\nself.assertEqual(fit.get(self.frame.COORDINATE_SYSTEM)['specimen_n'], \n    total_num_of_good_meas_data - 1)\nself.frame.logger.Select(0)\nself.frame.ProcessEvent(markgood_menu_evt)\nself.frame.tmin_box.SetValue(tmin)\nself.frame.ProcessEvent(tmin_box_evt)\nself.assertEqual(fit.get(self.frame.COORDINATE_SYSTEM)['specimen_n'],\n    total_num_of_good_meas_data)\nwhile self.frame.logger.GetSelectedItemCount() < int(\n    total_num_of_good_meas_data / 4):\n    n = rn.randint(0, total_n - 1)\n    if not self.frame.logger.IsSelected(n) and self.frame.Data[self.frame.s][\n        'measurement_flag'][n] != 'b':\n        self.frame.logger.Select(n)\nself.frame.ProcessEvent(markbad_menu_evt)\nself.assertEqual(fit.get(self.frame.COORDINATE_SYSTEM)['specimen_n'], \n    total_num_of_good_meas_data - int(total_num_of_good_meas_data / 4))\nfor i in range(len(self.frame.Data[self.frame.s]['measurement_flag'])):\n    self.frame.logger.Select(i)\nself.frame.ProcessEvent(markgood_menu_evt)\nfor b in self.frame.Data[self.frame.s]['measurement_flag']:\n    self.assertEqual(b, 'g')\nself.frame.tmin_box.SetValue(tmin)\nself.frame.ProcessEvent(tmin_box_evt)\nself.frame.tmax_box.SetValue(tmax)\nself.frame.ProcessEvent(tmax_box_evt)\nself.assertEqual(fit.get(self.frame.COORDINATE_SYSTEM)['specimen_n'], total_n)\nself.frame.logger.Select(0)\nself.frame.logger.Select(self.frame.logger.GetItemCount() - 1 - tmax_i)\nself.frame.ProcessEvent(markbad_menu_evt)\nself.assertEqual(fit.get(self.frame.COORDINATE_SYSTEM)['specimen_n'], \n    total_n - 2)\nself.frame.logger.Select(0)\nself.frame.logger.Select(self.frame.logger.GetItemCount() - 1 - tmax_i)\nself.frame.ProcessEvent(markgood_menu_evt)\nself.frame.tmin_box.SetValue(tmin)\nself.frame.ProcessEvent(tmin_box_evt)\nself.frame.tmax_box.SetValue(tmax)\nself.frame.ProcessEvent(tmax_box_evt)\nself.assertEqual(fit.get(self.frame.COORDINATE_SYSTEM)['specimen_n'], total_n)\nfor i, b in enumerate(meas_data_before):\n    if b == 'b':\n        self.frame.logger.Select(i)\nself.frame.ProcessEvent(markbad_menu_evt)\nfor i, b in enumerate(meas_data_before):\n    if b == 'g':\n        self.frame.logger.Select(i)\nself.frame.ProcessEvent(markgood_menu_evt)\nif self.frame.Data[self.frame.s]['measurement_flag'][0] == 'b':\n    total_num_of_good_meas_data -= 1\nelif self.frame.Data[self.frame.s]['measurement_flag'][-tmax_i] == 'b':\n    total_num_of_good_meas_data -= 1\nself.assertEqual(fit.get(self.frame.COORDINATE_SYSTEM)['specimen_n'],\n    total_num_of_good_meas_data)\n"
}