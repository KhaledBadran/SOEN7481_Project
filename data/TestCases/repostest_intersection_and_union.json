{
    "functionName": "test_intersection_and_union",
    "className": "TestInterval",
    "fileName": "/named-data_&_PyNDN2/tests_&_unit_tests_&_test_interval.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "interval1 = Interval(fromIsoString('20150825T030000'), fromIsoString(\n    '20150825T050000'))\ninterval2 = Interval(fromIsoString('20150825T050000'), fromIsoString(\n    '20150825T070000'))\ninterval3 = Interval(fromIsoString('20150825T060000'), fromIsoString(\n    '20150825T070000'))\ninterval4 = Interval(fromIsoString('20150825T010000'), fromIsoString(\n    '20150825T040000'))\ninterval5 = Interval(fromIsoString('20150825T030000'), fromIsoString(\n    '20150825T040000'))\ninterval6 = Interval(fromIsoString('20150825T010000'), fromIsoString(\n    '20150825T050000'))\ninterval7 = Interval(True)\ntempInterval = Interval(interval1)\ntempInterval.intersectWith(interval2)\nself.assertTrue(tempInterval.isEmpty())\ntempInterval = Interval(interval1)\ngotError = True\ntry:\n    tempInterval.unionWith(interval2)\n    gotError = False\nexcept:\n    pass\nif not gotError:\n    self.fail('Expected error in unionWith(interval2)')\ntempInterval = Interval(interval1)\ntempInterval.intersectWith(interval3)\nself.assertTrue(tempInterval.isEmpty())\ntempInterval = Interval(interval1)\ngotError = True\ntry:\n    tempInterval.unionWith(interval3)\n    gotError = False\nexcept:\n    pass\nif not gotError:\n    self.fail('Expected error in unionWith(interval3)')\ntempInterval = Interval(interval1)\ntempInterval.intersectWith(interval4)\nself.assertTrue(not tempInterval.isEmpty())\nself.assertEqual(toIsoString(tempInterval.getStartTime()), '20150825T030000')\nself.assertEqual(toIsoString(tempInterval.getEndTime()), '20150825T040000')\ntempInterval = Interval(interval1)\ntempInterval.unionWith(interval4)\nself.assertTrue(not tempInterval.isEmpty())\nself.assertEqual(toIsoString(tempInterval.getStartTime()), '20150825T010000')\nself.assertEqual(toIsoString(tempInterval.getEndTime()), '20150825T050000')\ntempInterval = Interval(interval1)\ntempInterval.intersectWith(interval5)\nself.assertTrue(not tempInterval.isEmpty())\nself.assertEqual(toIsoString(tempInterval.getStartTime()), '20150825T030000')\nself.assertEqual(toIsoString(tempInterval.getEndTime()), '20150825T040000')\ntempInterval = Interval(interval1)\ntempInterval.unionWith(interval5)\nself.assertTrue(not tempInterval.isEmpty())\nself.assertEqual(toIsoString(tempInterval.getStartTime()), '20150825T030000')\nself.assertEqual(toIsoString(tempInterval.getEndTime()), '20150825T050000')\ntempInterval = Interval(interval1)\ntempInterval.intersectWith(interval6)\nself.assertTrue(not tempInterval.isEmpty())\nself.assertEqual(toIsoString(tempInterval.getStartTime()), '20150825T030000')\nself.assertEqual(toIsoString(tempInterval.getEndTime()), '20150825T050000')\ntempInterval = Interval(interval1)\ntempInterval.unionWith(interval6)\nself.assertTrue(not tempInterval.isEmpty())\nself.assertEqual(toIsoString(tempInterval.getStartTime()), '20150825T010000')\nself.assertEqual(toIsoString(tempInterval.getEndTime()), '20150825T050000')\ntempInterval = Interval(interval1)\ntempInterval.intersectWith(interval7)\nself.assertTrue(tempInterval.isEmpty())\ntempInterval = Interval(interval1)\ntempInterval.unionWith(interval7)\nself.assertTrue(not tempInterval.isEmpty())\nself.assertEqual(toIsoString(tempInterval.getStartTime()), '20150825T030000')\nself.assertEqual(toIsoString(tempInterval.getEndTime()), '20150825T050000')\n"
}