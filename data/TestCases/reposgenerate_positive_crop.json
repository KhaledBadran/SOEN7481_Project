{
    "functionName": "generate_positive_crop",
    "className": null,
    "fileName": "/AlexBdx_&_Heli/10_Executable_&_test_CNN.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "assert frame.dtype == np.uint8\nx, y, w, h = roi_bbox\nxc, yc = x + w // 2, y + h // 2\nif method == 'nnSizeCrops':\n    x_start = max(0, xc - size[0] // 2)\n    x_end = min(FRAME_WIDTH, xc + size[0] // 2)\n    y_start = max(0, yc - size[1] // 2)\n    y_end = min(FRAME_HEIGHT, yc + size[1] // 2)\n    crop = frame[y_start:y_end, x_start:x_end]\n    crop = bbox.nn_size_crop(crop, size, (xc, yc), frame.shape)\nelif method == 'cropsResizedToNn':\n    s = max(w, h) if max(w, h) % 2 == 0 else max(w, h) + 1\n    x_start = max(0, xc - s // 2)\n    x_end = min(FRAME_WIDTH, xc + s // 2)\n    y_start = max(0, yc - s // 2)\n    y_end = min(FRAME_HEIGHT, yc + s // 2)\n    crop = frame[y_start:y_end, x_start:x_end]\n    crop = bbox.nn_size_crop(crop, (s, s), (xc, yc), frame.shape)\n    crop = cv2.resize(crop, size)\nelse:\n    print('[ERROR] Cropping method unknown')\n    raise\ncrop_bbox = x_start, y_start, x_end - x_start, y_end - y_start\nassert crop.shape == (size[0], size[1], 3)\nassert len(crop_bbox) == 4\nassert type(crop_bbox) == type(tuple())\nreturn crop, crop_bbox\n"
}