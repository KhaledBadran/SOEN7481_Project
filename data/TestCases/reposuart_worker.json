{
    "functionName": "uart_worker",
    "className": null,
    "fileName": "/FaradayRF_&_Faraday-Software/faraday_&_proxy.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"\n    Interface Faraday ports over USB UART\n\n    This function interfaces the USB UART serial data with an infinite loop\n    that checks all Faraday \"ports\" for data and appends/pops data from\n    queues for send and receive directions.\n    \"\"\"\nlogger.debug('Starting uart_worker thread')\npostDicts[modem['unit']] = {}\ngetDicts[modem['unit']] = {}\nwhile True:\n    try:\n        for port in modem['com'].RxPortListOpen():\n            if modem['com'].RxPortHasItem(port):\n                for i in range(0, modem['com'].RxPortItemCount(port)):\n                    item = {}\n                    item['data'] = base64.b64encode(modem['com'].GET(port))\n                    try:\n                        getDicts[modem['unit']][port].append(item)\n                    except:\n                        getDicts[modem['unit']][port] = deque([])\n                        getDicts[modem['unit']][port].append(item)\n                    if log:\n                        item['port'] = port\n                        sqlInsert(item)\n    except StandardError as e:\n        logger.error('StandardError: ' + str(e))\n    except ValueError as e:\n        logger.error('ValueError: ' + str(e))\n    except IndexError as e:\n        logger.error('IndexError: ' + str(e))\n    except KeyError as e:\n        logger.error('KeyError: ' + str(e))\n    for port in postDicts[modem['unit']].keys():\n        try:\n            count = len(postDicts[modem['unit']][port])\n        except:\n            pass\n        else:\n            for num in range(count):\n                try:\n                    message = postDicts[modem['unit']][port].popleft()\n                    message = base64.b64decode(message)\n                    modem['com'].POST(port, len(message), message)\n                except StandardError as e:\n                    logger.error(e)\n    time.sleep(0.01)\n"
}