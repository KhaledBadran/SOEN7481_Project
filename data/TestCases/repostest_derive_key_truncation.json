{
    "functionName": "test_derive_key_truncation",
    "className": "TestKmipEngine",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_services_&_server_&_test_engine.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that a derived key is properly truncated after it is generated if\n        needed.\n        \"\"\"\ne = engine.KmipEngine()\ne._data_store = self.engine\ne._data_store_session_factory = self.session_factory\ne._data_session = e._data_store_session_factory()\ne._is_allowed_by_operation_policy = mock.Mock(return_value=True)\ne._logger = mock.MagicMock()\ne._cryptography_engine.logger = mock.MagicMock()\nbase_key = pie_objects.SymmetricKey(algorithm=enums.CryptographicAlgorithm.\n    BLOWFISH, length=128, value=\n    b'\\x01#Eg\\x89\\xab\\xcd\\xef\\xf0\\xe1\\xd2\\xc3\\xb4\\xa5\\x96\\x87', masks=[\n    enums.CryptographicUsageMask.DERIVE_KEY])\ne._data_session.add(base_key)\ne._data_session.commit()\ne._data_session = e._data_store_session_factory()\nattribute_factory = factory.AttributeFactory()\npayload = payloads.DeriveKeyRequestPayload(object_type=enums.ObjectType.\n    SYMMETRIC_KEY, unique_identifiers=[str(base_key.unique_identifier)],\n    derivation_method=enums.DerivationMethod.ENCRYPT, derivation_parameters\n    =attributes.DerivationParameters(cryptographic_parameters=attributes.\n    CryptographicParameters(block_cipher_mode=enums.BlockCipherMode.CBC,\n    padding_method=enums.PaddingMethod.PKCS5, cryptographic_algorithm=enums\n    .CryptographicAlgorithm.BLOWFISH), derivation_data=\n    b'7654321 Now is the time for \\x00', initialization_vector=\n    b'\\xfe\\xdc\\xba\\x98vT2\\x10'), template_attribute=objects.\n    TemplateAttribute(attributes=[attribute_factory.create_attribute(enums.\n    AttributeType.CRYPTOGRAPHIC_LENGTH, 128), attribute_factory.\n    create_attribute(enums.AttributeType.CRYPTOGRAPHIC_ALGORITHM, enums.\n    CryptographicAlgorithm.AES)]))\nresponse_payload = e._process_derive_key(payload)\ne._logger.info.assert_any_call('Processing operation: DeriveKey')\ne._logger.info.assert_any_call(\n    'Object 1 will be used as the keying material for the derivation process.')\ne._logger.info.assert_any_call('Created a SymmetricKey with ID: 2')\nself.assertEqual('2', response_payload.unique_identifier)\nmanaged_object = e._data_session.query(pie_objects.SymmetricKey).filter(\n    pie_objects.SymmetricKey.unique_identifier == 2).one()\nself.assertEqual(b'kw\\xb4\\xd60\\x06\\xde\\xe6\\x05\\xb1V\\xe2t\\x03\\x97\\x93',\n    managed_object.value)\nself.assertEqual(enums.CryptographicAlgorithm.AES, managed_object.\n    cryptographic_algorithm)\nself.assertEqual(128, managed_object.cryptographic_length)\nself.assertIsNotNone(managed_object.initial_date)\n"
}