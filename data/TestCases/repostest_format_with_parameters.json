{
    "functionName": "test_format_with_parameters",
    "className": null,
    "fileName": "/goodmami_&_penman/tests_&_test_penman.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "assert format(('a', [('/', 'alpha'), ('ARG', ('b', [('/', 'beta')]))]),\n    indent=None) == '(a / alpha :ARG (b / beta))'\nassert format(('a', [('/', 'alpha'), ('ARG', ('b', [('/', 'beta')]))]), indent=-1) == \"\"\"(a / alpha\n   :ARG (b / beta))\"\"\"\nassert format(('a', [('/', 'alpha'), ('ARG', ('b', [('/', 'beta')]))]), indent=6) == \"\"\"(a / alpha\n      :ARG (b / beta))\"\"\"\nassert format(('a', [('/', 'alpha'), ('polarity', '-'), ('ARG', ('b', [('/', 'beta')]))]), compact=False) == \"\"\"(a / alpha\n   :polarity -\n   :ARG (b / beta))\"\"\"\nassert format(('a', [('/', 'alpha'), ('polarity', '-'), ('ARG', ('b', [('/', 'beta')]))]), compact=True) == \"\"\"(a / alpha :polarity -\n   :ARG (b / beta))\"\"\"\nassert format(('a', [('/', 'alpha'), ('polarity', '-'), ('ARG', ('b', [('/', 'beta')])), ('mode', 'expressive')]), compact=True) == \"\"\"(a / alpha :polarity -\n   :ARG (b / beta)\n   :mode expressive)\"\"\"\n"
}