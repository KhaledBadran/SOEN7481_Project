{
    "functionName": "test_doppelganger",
    "className": "TestSession",
    "fileName": "/ChristianVisintin_&_ATtila/tests_&_test_session.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test doppelganger feature in ATSession using AT+CPIN\n        \"\"\"\nsession = ATSession([])\ncpin_enter_pin = ATCommand('AT+CPIN=${SIM_PIN}', 'OK')\ncpin_command = ATCommand('AT+CPIN?', 'READY', 10, 0, None, cpin_enter_pin)\nsession.add_command(cpin_command)\nsim_pin = 7782\nsession.set_session_value('SIM_PIN', 7782)\nread_pin = session.get_session_value('SIM_PIN')\nself.assertEqual(sim_pin, read_pin, 'SIM PIN should be %d, but is %d' % (\n    sim_pin, read_pin))\nnext_command = session.get_next_command()\nself.assertEqual(next_command.command, 'AT+CPIN?', \n    'Next command should be AT+CPIN?, but is %s' % next_command.command)\nserial_response = ['CPIN:SIM PIN', 'OK']\nresponse = session.validate_response(serial_response, 100)\nself.assertTrue(session.last_command_failed)\nself.assertEqual(response.full_response, serial_response,\n    'Response associated to command is different from the response got from serial device'\n    )\nprint('%s (expected %s) has response: %s' % (next_command.command,\n    next_command.expected_response, response.full_response))\nnext_command = session.get_next_command()\nself.assertEqual(next_command.command, 'AT+CPIN=%d' % sim_pin, \n    'The next command should be the doppelganger, but is %s' % next_command\n    .command)\nprint('Next command is doppelganger with replaced session value: %s' %\n    next_command.command)\nserial_response = ['OK']\nresponse = session.validate_response(serial_response, 100)\nself.assertFalse(session.last_command_failed)\nprint('%s (expected %s) has response: %s' % (next_command.command,\n    next_command.expected_response, response.response))\nself.assertEqual(response.response, next_command.expected_response, \n    'The response should be OK, but is %s' % response.response)\n"
}