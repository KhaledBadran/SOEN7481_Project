{
    "functionName": "test_shock_tube_run_cases",
    "className": "TestSimulation",
    "fileName": "/kyleniemeyer_&_PyTeCK/pyteck_&_tests_&_test_simulation.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"Test that shock tube cases run correctly.\n        \"\"\"\nfile_path = os.path.join('testfile_st.yaml')\nfilename = pkg_resources.resource_filename(__name__, file_path)\nproperties = ChemKED(filename, skip_validation=True)\nsimulations = create_simulations(filename, properties)\nmechanism_filename = 'gri30.xml'\nSPEC_KEY = {'H2': 'H2', 'O2': 'O2', 'N2': 'N2', 'Ar': 'AR'}\nwith TemporaryDirectory() as temp_dir:\n    sim = simulations[0]\n    sim.setup_case(mechanism_filename, SPEC_KEY, path=temp_dir)\n    sim.run_case()\n    assert os.path.exists(sim.meta['save-file'])\n    with tables.open_file(sim.meta['save-file'], 'r') as h5file:\n        table = h5file.root.simulation\n        assert set(['time', 'temperature', 'pressure', 'volume',\n            'mass_fractions']) == set(table.colnames)\n        time_end = 0.047154\n        temp = 1250.440275095967\n        pres = 235715.78371450436\n        mass_fracs = np.array([3.78280811e-09, 6.55635749e-11, \n            3.88632912e-08, 0.00268924922, 9.14481216e-07, 0.00201249201, \n            7.30336393e-09, 4.48899838e-10, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, \n            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.995297294, 0.0, 0.0, \n            0.0, 0.0])\n        assert np.allclose(table.col('time')[-1], time_end)\n        assert np.allclose(table.col('temperature')[-1], temp)\n        assert np.allclose(table.col('pressure')[-1], pres)\n        assert np.allclose(table.col('mass_fractions')[-1], mass_fracs,\n            rtol=1e-05, atol=1e-09)\n    sim = simulations[1]\n    sim.setup_case(mechanism_filename, SPEC_KEY, path=temp_dir)\n    sim.run_case()\n    assert os.path.exists(sim.meta['save-file'])\n    with tables.open_file(sim.meta['save-file'], 'r') as h5file:\n        table = h5file.root.simulation\n        assert set(['time', 'temperature', 'pressure', 'volume',\n            'mass_fractions']) == set(table.colnames)\n        time_end = 0.044803\n        temp = 1250.9289794273782\n        pres = 235708.7300698561\n        mass_fracs = np.array([4.09616997e-09, 7.26607683e-11, \n            4.1607669e-08, 0.00268923307, 9.47551606e-07, 0.00201247148, \n            7.82886351e-09, 4.77404824e-10, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, \n            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.995297294, 0.0, 0.0, \n            0.0, 0.0])\n        assert np.allclose(table.col('time')[-1], time_end)\n        assert np.allclose(table.col('temperature')[-1], temp)\n        assert np.allclose(table.col('pressure')[-1], pres)\n        assert np.allclose(table.col('mass_fractions')[-1], mass_fracs,\n            rtol=1e-05, atol=1e-09)\npytest.mark.xfail(reason=\n    'cannot currently guarantee integration to specified end time')"
}