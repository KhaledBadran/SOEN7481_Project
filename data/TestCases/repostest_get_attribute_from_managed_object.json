{
    "functionName": "test_get_attribute_from_managed_object",
    "className": "TestKmipEngine",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_services_&_server_&_test_engine.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that an attribute can be retrieved from a given managed object.\n        \"\"\"\ne = engine.KmipEngine()\ne._data_store = self.engine\ne._data_store_session_factory = self.session_factory\ne._data_session = e._data_store_session_factory()\ne._logger = mock.MagicMock()\nsymmetric_key = pie_objects.SymmetricKey(enums.CryptographicAlgorithm.AES, \n    0, b'', masks=[enums.CryptographicUsageMask.ENCRYPT, enums.\n    CryptographicUsageMask.DECRYPT])\ncertificate = pie_objects.X509Certificate(b'')\nopaque_object = pie_objects.OpaqueObject(b'', enums.OpaqueDataType.NONE)\ne._data_session.add(symmetric_key)\ne._data_session.add(certificate)\ne._data_session.add(opaque_object)\ne._data_session.commit()\ne._data_session = e._data_store_session_factory()\nresult = e._get_attribute_from_managed_object(symmetric_key,\n    'Unique Identifier')\nself.assertEqual('1', result)\nresult = e._get_attribute_from_managed_object(symmetric_key, 'Name')\nself.assertEqual([attributes.Name(attributes.Name.NameValue('Symmetric Key'\n    ), attributes.Name.NameType(enums.NameType.UNINTERPRETED_TEXT_STRING))],\n    result)\nresult = e._get_attribute_from_managed_object(symmetric_key, 'Object Type')\nself.assertEqual(enums.ObjectType.SYMMETRIC_KEY, result)\nresult = e._get_attribute_from_managed_object(symmetric_key,\n    'Cryptographic Algorithm')\nself.assertEqual(enums.CryptographicAlgorithm.AES, result)\nresult = e._get_attribute_from_managed_object(symmetric_key,\n    'Cryptographic Length')\nself.assertEqual(0, result)\nresult = e._get_attribute_from_managed_object(certificate,\n    'Cryptographic Parameters')\nself.assertEqual(None, result)\nresult = e._get_attribute_from_managed_object(certificate,\n    'Cryptographic Domain Parameters')\nself.assertEqual(None, result)\nresult = e._get_attribute_from_managed_object(certificate, 'Certificate Type')\nself.assertEqual(enums.CertificateType.X_509, result)\nresult = e._get_attribute_from_managed_object(certificate, 'Certificate Length'\n    )\nself.assertEqual(None, result)\nresult = e._get_attribute_from_managed_object(certificate,\n    'X.509 Certificate Identifier')\nself.assertEqual(None, result)\nresult = e._get_attribute_from_managed_object(certificate,\n    'X.509 Certificate Subject')\nself.assertEqual(None, result)\nresult = e._get_attribute_from_managed_object(certificate,\n    'X.509 Certificate Issuer')\nself.assertEqual(None, result)\nresult = e._get_attribute_from_managed_object(certificate,\n    'Certificate Identifier')\nself.assertEqual(None, result)\nresult = e._get_attribute_from_managed_object(certificate,\n    'Certificate Subject')\nself.assertEqual(None, result)\nresult = e._get_attribute_from_managed_object(certificate, 'Certificate Issuer'\n    )\nself.assertEqual(None, result)\nresult = e._get_attribute_from_managed_object(certificate,\n    'Digital Signature Algorithm')\nself.assertEqual(None, result)\nresult = e._get_attribute_from_managed_object(opaque_object, 'Digest')\nself.assertEqual(None, result)\nresult = e._get_attribute_from_managed_object(symmetric_key,\n    'Operation Policy Name')\nself.assertEqual('default', result)\nresult = e._get_attribute_from_managed_object(symmetric_key,\n    'Cryptographic Usage Mask')\nself.assertEqual([enums.CryptographicUsageMask.ENCRYPT, enums.\n    CryptographicUsageMask.DECRYPT], result)\nresult = e._get_attribute_from_managed_object(symmetric_key, 'Lease Time')\nself.assertEqual(None, result)\nresult = e._get_attribute_from_managed_object(symmetric_key, 'Usage Limits')\nself.assertEqual(None, result)\nresult = e._get_attribute_from_managed_object(symmetric_key, 'State')\nself.assertEqual(enums.State.PRE_ACTIVE, result)\nresult = e._get_attribute_from_managed_object(symmetric_key, 'Initial Date')\nself.assertIsNotNone(result)\nself.assertIsInstance(result, six.integer_types)\nresult = e._get_attribute_from_managed_object(symmetric_key, 'Activation Date')\nself.assertEqual(None, result)\nresult = e._get_attribute_from_managed_object(symmetric_key,\n    'Process Start Date')\nself.assertEqual(None, result)\nresult = e._get_attribute_from_managed_object(symmetric_key,\n    'Protect Stop Date')\nself.assertEqual(None, result)\nresult = e._get_attribute_from_managed_object(symmetric_key,\n    'Deactivation Date')\nself.assertEqual(None, result)\nresult = e._get_attribute_from_managed_object(symmetric_key, 'Destroy Date')\nself.assertEqual(None, result)\nresult = e._get_attribute_from_managed_object(symmetric_key,\n    'Compromise Occurrence Date')\nself.assertEqual(None, result)\nresult = e._get_attribute_from_managed_object(symmetric_key, 'Compromise Date')\nself.assertEqual(None, result)\nresult = e._get_attribute_from_managed_object(symmetric_key,\n    'Revocation Reason')\nself.assertEqual(None, result)\nresult = e._get_attribute_from_managed_object(symmetric_key, 'Archive Date')\nself.assertEqual(None, result)\nresult = e._get_attribute_from_managed_object(symmetric_key, 'Object Group')\nself.assertEqual([], result)\nresult = e._get_attribute_from_managed_object(symmetric_key, 'Fresh')\nself.assertEqual(None, result)\nresult = e._get_attribute_from_managed_object(symmetric_key, 'Link')\nself.assertEqual(None, result)\nresult = e._get_attribute_from_managed_object(symmetric_key,\n    'Application Specific Information')\nself.assertEqual([], result)\nresult = e._get_attribute_from_managed_object(symmetric_key,\n    'Contact Information')\nself.assertEqual(None, result)\nresult = e._get_attribute_from_managed_object(symmetric_key, 'Last Change Date'\n    )\nself.assertEqual(None, result)\nresult = e._get_attribute_from_managed_object(symmetric_key, 'invalid')\nself.assertEqual(None, result)\n"
}