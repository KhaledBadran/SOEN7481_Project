{
    "functionName": "test_CEM_MAFExplainer",
    "className": "TestCEM_MAFImageExplainer",
    "fileName": "/IBM_&_AIX360/tests_&_contrastive_&_test_CEM_MAF.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "dwnld = dwnld_CEM_MAF_celebA()\nwith tf.Session() as sess:\n    random.seed(121)\n    np.random.seed(1211)\n    sess.run(tf.global_variables_initializer())\n    attributes = ['Brown_Hair', 'High_Cheekbones']\n    local_path_models = os.path.join(_PATH, '../../aix360/models/CEM_MAF')\n    celebA_model_file = dwnld.dwnld_celebA_model(local_path_models)\n    attr_model_files = dwnld.dwnld_celebA_attributes(local_path_models,\n        attributes)\n    model_file = os.path.join(_PATH, '../../aix360/models/CEM_MAF/celebA')\n    loaded_model = CELEBAModel(restore=model_file, use_softmax=False).model\n    mymodel = KerasClassifier(loaded_model)\n    img_ids = [15]\n    img_id = img_ids[0]\n    local_path_img = os.path.join(_PATH, '../../aix360/data/celeba_data')\n    img_files = dwnld.dwnld_celebA_data(local_path_img, img_ids)\n    dataset_obj = CelebADataset(local_path_img)\n    input_img = dataset_obj.get_img(img_id)\n    input_img = np.clip(input_img / 2, -0.5, 0.5)\n    _, orig_class, _ = mymodel.predict_long(input_img)\n    young_flag = orig_class % 2\n    smile_flag = orig_class // 2 % 2\n    sex_flag = orig_class // 4 % 2\n    arg_img_name = os.path.join(local_path_img, '{}_img.png'.format(img_id))\n    print('Image:{}, pred:{}'.format(arg_img_name, orig_class))\n    print('Male:{}, Smile:{}, Young:{}'.format(sex_flag, smile_flag,\n        young_flag))\n    aix360_path = os.path.join(_PATH, '../../aix360')\n    attributes = ['Brown_Hair', 'High_Cheekbones']\n    explainer = CEM_MAFImageExplainer(mymodel, attributes, aix360_path)\n    arg_mode = 'PP'\n    arg_kappa = 5\n    arg_gamma = 100.0\n    arg_beta = 0.1\n    arg_binary_search_steps = 1\n    arg_max_iterations = 10\n    arg_initial_const = 10\n    adv_pp, __, __ = explainer.explain_instance(sess, input_img, None,\n        arg_mode, arg_kappa, arg_binary_search_steps, arg_max_iterations,\n        arg_initial_const, arg_gamma, arg_beta)\n    _, adv_class, _ = mymodel.predict_long(adv_pp)\n    young_flag = adv_class % 2\n    smile_flag = adv_class // 2 % 2\n    sex_flag = adv_class // 4 % 2\n    print('Pertinent positive pred:{}'.format(adv_class))\n    print('Male:{}, Smile:{}, Young:{}'.format(sex_flag, smile_flag,\n        young_flag))\n    os.remove(celebA_model_file[0])\n    for model_file in attr_model_files:\n        os.remove(model_file)\n    for data_file in img_files:\n        os.remove(data_file)\n"
}