{
    "functionName": "test_updateStaticContent",
    "className": "PlaylistTests",
    "fileName": "/kaltura_&_KalturaGeneratedAPIClientsPython/KalturaClient_&_tests_&_test_playlist.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "mediaEntry1 = KalturaMediaEntry()\nmediaEntry1.setName('pytest.PlaylistTests.test_updateStaticContent1')\nmediaEntry1.setMediaType(KalturaMediaType(KalturaMediaType.VIDEO))\nulFile = getTestFile('DemoVideo.flv')\nuploadTokenId = self.client.media.upload(ulFile)\nmediaEntry1 = self.client.media.addFromUploadedFile(mediaEntry1, uploadTokenId)\nself.addCleanup(self.client.media.delete, mediaEntry1.getId())\nmediaEntry2 = KalturaMediaEntry()\nmediaEntry2.setName('pytest.PlaylistTests.test_updateStaticContent2')\nmediaEntry2.setMediaType(KalturaMediaType(KalturaMediaType.VIDEO))\nulFile = getTestFile('DemoVideo.flv')\nuploadTokenId = self.client.media.upload(ulFile)\nmediaEntry2 = self.client.media.addFromUploadedFile(mediaEntry2, uploadTokenId)\nself.addCleanup(self.client.media.delete, mediaEntry2.getId())\nplaylistContent = u','.join([mediaEntry1.getId(), mediaEntry2.getId()])\nkplaylist = KalturaPlaylist()\nkplaylist.setName('pytest.PlaylistTests.test_updateStaticContent')\nkplaylist.setPlaylistType(KalturaPlaylistType(KalturaPlaylistType.STATIC_LIST))\nkplaylist.setPlaylistContent(playlistContent)\nkplaylist = self.client.playlist.add(kplaylist)\nself.addCleanup(self.client.playlist.delete, kplaylist.getId())\nresultPlaylist = self.client.playlist.get(kplaylist.getId())\nself.assertEqual(resultPlaylist.playlistContent, playlistContent)\n"
}