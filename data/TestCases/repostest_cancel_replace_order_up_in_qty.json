{
    "functionName": "test_cancel_replace_order_up_in_qty",
    "className": null,
    "fileName": "/nabicht_&_Buttonwood/tests_&_test_MarketObjects_&_test_Orderbooks_&_test_orderlevelbook.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "ob = build_base_order_book()\nb = NewOrderCommand(56, 1234002.123, 1008, 'user_z', MARKET, BID_SIDE, FAR,\n    Price('34.50'), 35)\nbid_oec = OrderEventChain(b, LOGGER, SUBCHAIN_ID_GENERATOR)\nb_ack = AcknowledgementReport(57, 1234002.123, 1008, 'user_z', MARKET, b,\n    Price('34.50'), 35, 35)\nbid_oec.apply_acknowledgement_report(b_ack)\nob.handle_acknowledgement_report(b_ack, bid_oec)\nprev_order_chains = ob.order_chains_at_price(BID_SIDE, Price('34.50'))\nprev_visible_qty_at_tob = ob.visible_qty_at_price(BID_SIDE, Price('34.50'))\nprev_hidden_qty_at_tob = ob.hidden_qty_at_price(BID_SIDE, Price('34.50'))\nassert len(prev_order_chains) == 3\nassert prev_order_chains[0].chain_id() == 1001\nassert prev_order_chains[1].chain_id() == 1004\nassert prev_order_chains[2].chain_id() == 1008\nassert ob.best_priority_chain(BID_SIDE).chain_id() == 1001\ncr = CancelReplaceCommand(77, 1234012.123, prev_order_chains[0].chain_id(),\n    prev_order_chains[0].user_id(), MARKET, prev_order_chains[0].side(),\n    prev_order_chains[0].current_price(), prev_order_chains[0].current_qty(\n    ) + 40)\nprev_order_chains[0].apply_cancel_replace_command(cr)\ncr_ack = AcknowledgementReport(78, 1234012.123, prev_order_chains[0].\n    chain_id(), 'user_z', MARKET, cr, prev_order_chains[0].current_price(),\n    prev_order_chains[0].current_qty() + 40, prev_order_chains[0].\n    current_qty() + 40)\nprev_order_chains[0].apply_acknowledgement_report(cr_ack)\nob.handle_acknowledgement_report(cr_ack, prev_order_chains[0])\nassert len(ob.prices(BID_SIDE)) == 1\nassert ob.best_price(BID_SIDE) == Price('34.50')\nassert ob.visible_qty_at_price(BID_SIDE, Price('34.50')\n    ) == prev_visible_qty_at_tob + 40\nassert ob.hidden_qty_at_price(BID_SIDE, Price('34.50')\n    ) == prev_hidden_qty_at_tob, str(ob.hidden_qty_at_price(BID_SIDE, Price\n    ('34.50'))) + ' != ' + str(prev_hidden_qty_at_tob)\ncurrent_order_chains = ob.order_chains_at_price(BID_SIDE, Price('34.50'))\nassert len(current_order_chains) == 3\nassert current_order_chains[0].chain_id(\n    ) == 1004, 'First chain at level should be 1004'\nassert current_order_chains[1].chain_id(\n    ) == 1008, 'Second chain at level should be 1008'\nassert current_order_chains[2].chain_id(\n    ) == 1001, 'Third chain at level should be 1001'\nassert ob.best_priority_chain(BID_SIDE).chain_id(\n    ) == 1004, 'Best priority chain in order book should be 1004'\nprev_visible_qty_at_tob = ob.visible_qty_at_price(BID_SIDE, Price('34.50'))\nprev_hidden_qty_at_tob = ob.hidden_qty_at_price(BID_SIDE, Price('34.50'))\ncr2 = CancelReplaceCommand(79, 1234052.123, current_order_chains[1].\n    chain_id(), current_order_chains[1].user_id(), MARKET,\n    current_order_chains[1].side(), current_order_chains[1].current_price(),\n    current_order_chains[1].current_qty() + 100, current_order_chains[1].\n    current_qty() + 50)\ncurrent_order_chains[1].apply_cancel_replace_command(cr2)\ncr_ack2 = AcknowledgementReport(80, 1234062.123, current_order_chains[1].\n    chain_id(), current_order_chains[1].user_id(), MARKET, cr2,\n    current_order_chains[1].current_price(), current_order_chains[1].\n    current_qty() + 100, current_order_chains[1].current_qty() + 50)\ncurrent_order_chains[1].apply_acknowledgement_report(cr_ack2)\nob.handle_acknowledgement_report(cr_ack2, current_order_chains[1])\nassert len(ob.prices(BID_SIDE)) == 1\nassert ob.best_price(BID_SIDE) == Price('34.50')\nassert ob.visible_qty_at_price(BID_SIDE, Price('34.50')\n    ) == prev_visible_qty_at_tob + 50\nassert ob.hidden_qty_at_price(BID_SIDE, Price('34.50')\n    ) == prev_hidden_qty_at_tob + 50, str(ob.hidden_qty_at_price(BID_SIDE,\n    Price('34.50'))) + ' != ' + str(prev_hidden_qty_at_tob + 50)\ncurrent_order_chains = ob.order_chains_at_price(BID_SIDE, Price('34.50'))\nassert len(current_order_chains) == 3\nassert current_order_chains[0].chain_id(\n    ) == 1004, 'First chain at level should be 1004'\nassert current_order_chains[1].chain_id(\n    ) == 1001, 'Second chain at level should be 1001'\nassert current_order_chains[2].chain_id(\n    ) == 1008, 'Third chain at level should be 1008'\nassert ob.best_priority_chain(BID_SIDE).chain_id(\n    ) == 1004, 'Best priority chain in order book should be 1004'\n"
}