{
    "functionName": "run_order_odd",
    "className": null,
    "fileName": "/PyAbel_&_PyAbel/abel_&_tests_&_test_tools_distributions.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"\n    Test cossin distributions including odd orders using Gaussian peaks.\n\n    tol = list of tolerances for order=0, order=1, order=2, ...\n    \"\"\"\nsigma = 5.0\nstep = 6 * sigma\nfor n in range(0, len(tol)):\n    size = int((n + 2) * step)\n    x = np.arange(float(size))\n    y = size - np.arange(2 * float(size) + 1)[:, (None)]\n    r = np.sqrt(x ** 2 + y ** 2)\n    r[size, 0] = np.inf\n    c = y / r\n    s = x / r\n    r[size, 0] = 0\n\n    def peak(i):\n        m = i\n        k = n - m & ~1\n        return c ** m * s ** k * np.exp(-(r - (i + 1) * step) ** 2 / (2 * \n            sigma ** 2))\n    Q = peak(0)\n    for i in range(1, n + 1):\n        Q += peak(i)\n    for rmax in ['MIN', 'all']:\n        param = '-> rmax = {}, order={}, method = {}'.format(rmax, n, method)\n        res = Distributions((int(size), 0), rmax, n, odd=True, method=method\n            ).image(Q)\n        cossin = res.cossin()\n        cs = np.array([cossin[:, (int((i + 1) * step))] for i in range(n + 1)])\n        assert_allclose(cs, np.identity(n + 1), atol=tol[n], err_msg=param)\n        res.Ibeta()\n"
}