{
    "functionName": "test__ensure_list_with_pandas",
    "className": "TestElasticBuffer",
    "fileName": "/dkaslovsky_&_ElasticBatch/tests_&_test_buffer.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "series_list = [doc['c'] for doc in self.docs]\nclass TestCase:\n\n    def __init__(self, docs_in, expected_docs):\n        self.docs_in = docs_in\n        self.expected_docs = expected_docs\ntests = {'series': TestCase(docs_in=pd.Series(series_list), expected_docs=[\n    {(0): item} for item in series_list]), 'named series': TestCase(docs_in\n    =pd.Series(series_list).rename('my_name'), expected_docs=[{'my_name':\n    item} for item in series_list]), 'series with named index': TestCase(\n    docs_in=pd.Series(series_list).rename_axis('my_axis', axis=0),\n    expected_docs=[{(0): item, 'my_axis': i} for i, item in enumerate(\n    series_list)]), 'named series with named index': TestCase(docs_in=pd.\n    Series(series_list).rename_axis('my_axis', axis=0).rename('my_name'),\n    expected_docs=[{'my_name': item, 'my_axis': i} for i, item in enumerate\n    (series_list)]), 'series with single row': TestCase(docs_in=pd.Series(\n    series_list[0]), expected_docs=[{(0): item} for item in [series_list[0]\n    ]]), 'named series with single row': TestCase(docs_in=pd.Series(\n    series_list[0]).rename('my_name'), expected_docs=[{'my_name': item} for\n    item in [series_list[0]]]),\n    'named series with single row with named index': TestCase(docs_in=pd.\n    Series(series_list[0]).rename_axis('my_index', axis=0).rename('my_name'\n    ), expected_docs=[{'my_name': item, 'my_index': i} for i, item in\n    enumerate([series_list[0]])]), 'dataframe': TestCase(docs_in=pd.\n    DataFrame(self.docs), expected_docs=self.docs),\n    'dataframe with named index': TestCase(docs_in=pd.DataFrame(self.docs).\n    set_index('c'), expected_docs=self.docs), 'dataframe with single row':\n    TestCase(docs_in=pd.DataFrame(self.docs[0], index=[0]), expected_docs=[\n    self.docs[0]]), 'dataframe with single row and named index': TestCase(\n    docs_in=pd.DataFrame(self.docs[0], index=[0]).set_index('c'),\n    expected_docs=[self.docs[0]])}\nfor test_name, test in tests.items():\n    docs_out = ElasticBuffer._ensure_list(test.docs_in)\n    self.assertListEqual(docs_out, test.expected_docs, test_name)\nunittest.skipIf(pd is None,\n    'skipping test with pandas data because pandas not found')"
}