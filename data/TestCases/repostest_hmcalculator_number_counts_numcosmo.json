{
    "functionName": "test_hmcalculator_number_counts_numcosmo",
    "className": null,
    "fileName": "/LSSTDESC_&_CCL/benchmarks_&_test_halomod_numbercounts.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "cosmo = ccl.Cosmology(Omega_c=0.25, Omega_b=0.05, h=0.7, n_s=0.96, sigma8=\n    0.8, Omega_k=0.0, Omega_g=0, Neff=0.0, w0=-1.0, wa=0.0, T_CMB=2.7245,\n    mu_0=0.0, transfer_function='eisenstein_hu', matter_power_spectrum='linear'\n    )\nmdef = ccl.halos.MassDef(200, 'matter')\nhmf = ccl.halos.MassFuncTinker08(cosmo, mdef, mass_def_strict=False)\nhbf = ccl.halos.HaloBiasTinker10(cosmo, mass_def=mdef, mass_def_strict=False)\nbenches = np.loadtxt('./benchmarks/data/numcosmo_cluster_counts.txt')\nfor i in range(benches.shape[0]):\n    bench = benches[(i), :]\n    hmc = ccl.halos.HMCalculator(cosmo, hmf, hbf, mdef, log10M_min=np.log10\n        (bench[1]), log10M_max=np.log10(bench[2]), integration_method_M=\n        'spline')\n    a_2 = 1.0 / (1.0 + bench[4])\n    a_1 = 1.0 / (1.0 + bench[3])\n\n    def sel(m, a):\n        m = np.atleast_1d(m)\n        a = np.atleast_1d(a)\n        val = np.zeros_like(m.reshape(-1, 1) * a.reshape(1, -1))\n        msk_a = (a > a_2) & (a < a_1)\n        msk_m = (m > bench[1]) & (m < bench[2])\n        val[(msk_m), :] += 1\n        val[:, (msk_a)] += 1\n        msk = val == 2\n        val[~msk] = 0\n        val[msk] = 1.0\n        return val\n    area = 200 * (np.pi / 180) ** 2\n    nc = hmc.number_counts(cosmo, sel, amin=a_2, amax=a_1) * area\n    assert np.isfinite(nc)\n    assert not np.allclose(nc, 0)\n    tol = max(0.013, np.sqrt(bench[0]) / bench[0] / 10)\n    print(nc, bench[0], nc / bench[0] - 1, tol)\n    assert np.allclose(nc, bench[0], atol=0, rtol=tol)\n"
}