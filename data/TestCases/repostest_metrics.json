{
    "functionName": "test_metrics",
    "className": "TestSklearn",
    "fileName": "/microsoft_&_LightGBM/tests_&_python_package_test_&_test_sklearn.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "X, y = load_boston(return_X_y=True)\nparams = {'n_estimators': 2, 'verbose': -1}\nparams_fit = {'X': X, 'y': y, 'eval_set': (X, y), 'verbose': False}\ngbm = lgb.LGBMRegressor(**params).fit(**params_fit)\nself.assertEqual(len(gbm.evals_result_['training']), 1)\nself.assertIn('l2', gbm.evals_result_['training'])\ngbm = lgb.LGBMRegressor(metric='mape', **params).fit(**params_fit)\nself.assertEqual(len(gbm.evals_result_['training']), 1)\nself.assertIn('mape', gbm.evals_result_['training'])\ngbm = lgb.LGBMRegressor(metric='None', **params).fit(**params_fit)\nself.assertIs(gbm.evals_result_, None)\ngbm = lgb.LGBMRegressor(**params).fit(eval_metric='mape', **params_fit)\nself.assertEqual(len(gbm.evals_result_['training']), 2)\nself.assertIn('l2', gbm.evals_result_['training'])\nself.assertIn('mape', gbm.evals_result_['training'])\ngbm = lgb.LGBMRegressor(metric='gamma', **params).fit(eval_metric='mape',\n    **params_fit)\nself.assertEqual(len(gbm.evals_result_['training']), 2)\nself.assertIn('gamma', gbm.evals_result_['training'])\nself.assertIn('mape', gbm.evals_result_['training'])\ngbm = lgb.LGBMRegressor(metric='gamma', **params).fit(eval_metric=['l2',\n    'mape'], **params_fit)\nself.assertEqual(len(gbm.evals_result_['training']), 3)\nself.assertIn('gamma', gbm.evals_result_['training'])\nself.assertIn('l2', gbm.evals_result_['training'])\nself.assertIn('mape', gbm.evals_result_['training'])\nX_classification, y_classification = load_breast_cancer(return_X_y=True)\nparams_classification = {'n_estimators': 2, 'verbose': -1, 'objective':\n    'binary', 'metric': 'binary_logloss'}\nparams_fit_classification = {'X': X_classification, 'y': y_classification,\n    'eval_set': (X_classification, y_classification), 'verbose': False}\ngbm = lgb.LGBMClassifier(**params_classification).fit(eval_metric=['fair',\n    'error'], **params_fit_classification)\nself.assertEqual(len(gbm.evals_result_['training']), 3)\nself.assertIn('fair', gbm.evals_result_['training'])\nself.assertIn('binary_error', gbm.evals_result_['training'])\nself.assertIn('binary_logloss', gbm.evals_result_['training'])\ngbm = lgb.LGBMRegressor(objective='regression_l1', **params).fit(**params_fit)\nself.assertEqual(len(gbm.evals_result_['training']), 1)\nself.assertIn('l1', gbm.evals_result_['training'])\ngbm = lgb.LGBMRegressor(objective='regression_l1', metric='mape', **params\n    ).fit(**params_fit)\nself.assertEqual(len(gbm.evals_result_['training']), 1)\nself.assertIn('mape', gbm.evals_result_['training'])\ngbm = lgb.LGBMRegressor(objective='regression_l1', metric='None', **params\n    ).fit(**params_fit)\nself.assertIs(gbm.evals_result_, None)\ngbm = lgb.LGBMRegressor(objective='regression_l1', **params).fit(eval_metric\n    ='mape', **params_fit)\nself.assertEqual(len(gbm.evals_result_['training']), 2)\nself.assertIn('l1', gbm.evals_result_['training'])\nself.assertIn('mape', gbm.evals_result_['training'])\ngbm = lgb.LGBMRegressor(objective='regression_l1', metric='gamma', **params\n    ).fit(eval_metric='mape', **params_fit)\nself.assertEqual(len(gbm.evals_result_['training']), 2)\nself.assertIn('gamma', gbm.evals_result_['training'])\nself.assertIn('mape', gbm.evals_result_['training'])\ngbm = lgb.LGBMRegressor(objective='regression_l1', metric='gamma', **params\n    ).fit(eval_metric=['l2', 'mape'], **params_fit)\nself.assertEqual(len(gbm.evals_result_['training']), 3)\nself.assertIn('gamma', gbm.evals_result_['training'])\nself.assertIn('l2', gbm.evals_result_['training'])\nself.assertIn('mape', gbm.evals_result_['training'])\ngbm = lgb.LGBMRegressor(objective=custom_dummy_obj, **params).fit(**params_fit)\nself.assertEqual(len(gbm.evals_result_['training']), 1)\nself.assertIn('l2', gbm.evals_result_['training'])\ngbm = lgb.LGBMRegressor(objective=custom_dummy_obj, metric='mape', **params\n    ).fit(**params_fit)\nself.assertEqual(len(gbm.evals_result_['training']), 1)\nself.assertIn('mape', gbm.evals_result_['training'])\ngbm = lgb.LGBMRegressor(objective=custom_dummy_obj, metric=['l1', 'gamma'],\n    **params).fit(**params_fit)\nself.assertEqual(len(gbm.evals_result_['training']), 2)\nself.assertIn('l1', gbm.evals_result_['training'])\nself.assertIn('gamma', gbm.evals_result_['training'])\ngbm = lgb.LGBMRegressor(objective=custom_dummy_obj, metric='None', **params\n    ).fit(**params_fit)\nself.assertIs(gbm.evals_result_, None)\ngbm = lgb.LGBMRegressor(objective=custom_dummy_obj, **params).fit(eval_metric\n    ='mape', **params_fit)\nself.assertEqual(len(gbm.evals_result_['training']), 2)\nself.assertIn('l2', gbm.evals_result_['training'])\nself.assertIn('mape', gbm.evals_result_['training'])\ngbm = lgb.LGBMRegressor(objective=custom_dummy_obj, metric='mape', **params\n    ).fit(eval_metric='gamma', **params_fit)\nself.assertEqual(len(gbm.evals_result_['training']), 2)\nself.assertIn('mape', gbm.evals_result_['training'])\nself.assertIn('gamma', gbm.evals_result_['training'])\ngbm = lgb.LGBMRegressor(objective=custom_dummy_obj, metric=['l1', 'gamma'],\n    **params).fit(eval_metric='l2', **params_fit)\nself.assertEqual(len(gbm.evals_result_['training']), 3)\nself.assertIn('l1', gbm.evals_result_['training'])\nself.assertIn('gamma', gbm.evals_result_['training'])\nself.assertIn('l2', gbm.evals_result_['training'])\ngbm = lgb.LGBMRegressor(objective=custom_dummy_obj, metric=['l1', 'gamma'],\n    **params).fit(eval_metric=['l2', 'mape'], **params_fit)\nself.assertEqual(len(gbm.evals_result_['training']), 4)\nself.assertIn('l1', gbm.evals_result_['training'])\nself.assertIn('gamma', gbm.evals_result_['training'])\nself.assertIn('l2', gbm.evals_result_['training'])\nself.assertIn('mape', gbm.evals_result_['training'])\ngbm = lgb.LGBMRegressor(**params).fit(eval_metric=constant_metric, **params_fit\n    )\nself.assertEqual(len(gbm.evals_result_['training']), 2)\nself.assertIn('l2', gbm.evals_result_['training'])\nself.assertIn('error', gbm.evals_result_['training'])\ngbm = lgb.LGBMRegressor(metric='mape', **params).fit(eval_metric=\n    constant_metric, **params_fit)\nself.assertEqual(len(gbm.evals_result_['training']), 2)\nself.assertIn('mape', gbm.evals_result_['training'])\nself.assertIn('error', gbm.evals_result_['training'])\ngbm = lgb.LGBMRegressor(metric=['l1', 'gamma'], **params).fit(eval_metric=\n    constant_metric, **params_fit)\nself.assertEqual(len(gbm.evals_result_['training']), 3)\nself.assertIn('l1', gbm.evals_result_['training'])\nself.assertIn('gamma', gbm.evals_result_['training'])\nself.assertIn('error', gbm.evals_result_['training'])\ngbm = lgb.LGBMRegressor(metric='None', **params).fit(eval_metric=\n    constant_metric, **params_fit)\nself.assertEqual(len(gbm.evals_result_['training']), 1)\nself.assertIn('error', gbm.evals_result_['training'])\ngbm = lgb.LGBMRegressor(objective='regression_l1', **params).fit(eval_metric\n    =constant_metric, **params_fit)\nself.assertEqual(len(gbm.evals_result_['training']), 2)\nself.assertIn('l1', gbm.evals_result_['training'])\nself.assertIn('error', gbm.evals_result_['training'])\ngbm = lgb.LGBMRegressor(objective='regression_l1', metric='mape', **params\n    ).fit(eval_metric=constant_metric, **params_fit)\nself.assertEqual(len(gbm.evals_result_['training']), 2)\nself.assertIn('mape', gbm.evals_result_['training'])\nself.assertIn('error', gbm.evals_result_['training'])\ngbm = lgb.LGBMRegressor(objective='regression_l1', metric=['l1', 'gamma'],\n    **params).fit(eval_metric=constant_metric, **params_fit)\nself.assertEqual(len(gbm.evals_result_['training']), 3)\nself.assertIn('l1', gbm.evals_result_['training'])\nself.assertIn('gamma', gbm.evals_result_['training'])\nself.assertIn('error', gbm.evals_result_['training'])\ngbm = lgb.LGBMRegressor(objective='regression_l1', metric='None', **params\n    ).fit(eval_metric=constant_metric, **params_fit)\nself.assertEqual(len(gbm.evals_result_['training']), 1)\nself.assertIn('error', gbm.evals_result_['training'])\ngbm = lgb.LGBMRegressor(objective=custom_dummy_obj, **params).fit(eval_metric\n    =constant_metric, **params_fit)\nself.assertEqual(len(gbm.evals_result_['training']), 1)\nself.assertIn('error', gbm.evals_result_['training'])\ngbm = lgb.LGBMRegressor(objective=custom_dummy_obj, metric='mape', **params\n    ).fit(eval_metric=constant_metric, **params_fit)\nself.assertEqual(len(gbm.evals_result_['training']), 2)\nself.assertIn('mape', gbm.evals_result_['training'])\nself.assertIn('error', gbm.evals_result_['training'])\ngbm = lgb.LGBMRegressor(objective=custom_dummy_obj, metric=['l2', 'mape'],\n    **params).fit(eval_metric=constant_metric, **params_fit)\nself.assertEqual(len(gbm.evals_result_['training']), 3)\nself.assertIn('l2', gbm.evals_result_['training'])\nself.assertIn('mape', gbm.evals_result_['training'])\nself.assertIn('error', gbm.evals_result_['training'])\nX, y = load_digits(n_class=3, return_X_y=True)\nparams_fit = {'X': X, 'y': y, 'eval_set': (X, y), 'verbose': False}\ngbm = lgb.LGBMClassifier(**params).fit(eval_metric='binary_error', **params_fit\n    )\nself.assertEqual(len(gbm.evals_result_['training']), 2)\nself.assertIn('multi_logloss', gbm.evals_result_['training'])\nself.assertIn('multi_error', gbm.evals_result_['training'])\ngbm = lgb.LGBMClassifier(objective='invalid_obj', **params).fit(eval_metric\n    ='binary_error', **params_fit)\nself.assertEqual(gbm.objective_, 'multiclass')\nself.assertEqual(len(gbm.evals_result_['training']), 2)\nself.assertIn('multi_logloss', gbm.evals_result_['training'])\nself.assertIn('multi_error', gbm.evals_result_['training'])\ngbm = lgb.LGBMClassifier(objective='ovr', **params).fit(eval_metric=\n    'binary_error', **params_fit)\nself.assertEqual(gbm.objective_, 'ovr')\nself.assertEqual(len(gbm.evals_result_['training']), 2)\nself.assertIn('multi_logloss', gbm.evals_result_['training'])\nself.assertIn('multi_error', gbm.evals_result_['training'])\nX, y = load_digits(n_class=2, return_X_y=True)\nparams_fit = {'X': X, 'y': y, 'eval_set': (X, y), 'verbose': False}\ngbm = lgb.LGBMClassifier(**params).fit(eval_metric='multi_error', **params_fit)\nself.assertEqual(len(gbm.evals_result_['training']), 2)\nself.assertIn('binary_logloss', gbm.evals_result_['training'])\nself.assertIn('binary_error', gbm.evals_result_['training'])\ngbm = lgb.LGBMClassifier(objective=custom_dummy_obj, **params).fit(eval_metric\n    ='multi_logloss', **params_fit)\nself.assertEqual(len(gbm.evals_result_['training']), 1)\nself.assertIn('binary_logloss', gbm.evals_result_['training'])\n"
}