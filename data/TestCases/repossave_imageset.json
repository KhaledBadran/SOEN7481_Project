{
    "functionName": "save_imageset",
    "className": "Brain",
    "fileName": "/nipy_&_PySurfer/surfer_&_viz.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"Convenience wrapper for save_image\n\n        Files created are prefix+'_$view'+filetype\n\n        Parameters\n        ----------\n        prefix: string | None\n            filename prefix for image to be created. If None, a list of\n            arrays representing images is returned (not saved to disk).\n        views: list\n            desired views for images\n        filetype: string\n            image type\n        colorbar: 'auto' | int | list of int | None\n            For 'auto', the colorbar is shown in the middle view (default).\n            For int or list of int, the colorbar is shown in the specified\n            views. For ``None``, no colorbar is shown.\n        row : int\n            row index of the brain to use\n        col : int\n            column index of the brain to use\n\n        Returns\n        -------\n        images_written: list\n            all filenames written\n        \"\"\"\nif isinstance(views, string_types):\n    raise ValueError(\n        'Views must be a non-string sequenceUse show_view & save_image for a single view'\n        )\nif colorbar == 'auto':\n    colorbar = [len(views) // 2]\nelif isinstance(colorbar, int):\n    colorbar = [colorbar]\nimages_written = []\nfor iview, view in enumerate(views):\n    try:\n        if colorbar is not None and iview in colorbar:\n            self.show_colorbar(row, col)\n        else:\n            self.hide_colorbar(row, col)\n        self.show_view(view, row=row, col=col)\n        if prefix is not None:\n            fname = '%s_%s.%s' % (prefix, view, filetype)\n            images_written.append(fname)\n            self.save_single_image(fname, row, col)\n        else:\n            images_written.append(self.screenshot_single(row=row, col=col))\n    except ValueError:\n        print('Skipping %s: not in view dict' % view)\nreturn images_written\n"
}