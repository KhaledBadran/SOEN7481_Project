{
    "functionName": "test_DataSet_2Dcut",
    "className": null,
    "fileName": "/jakob-lass_&_MJOLNIR/MJOLNIR_&_Data_&_DataSet.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "q1 = np.array([1.23, -1.25])\nq2 = np.array([1.54, -1.51])\nwidth = 0.1\nminPixel = 0.02\nEnergyBins = np.linspace(2, 3, 4)\nplt.ioff()\nimport matplotlib\nmatplotlib.use('Agg')\nconvertFiles = ['Data/camea2018n000137.hdf']\nDatset = DataSet(dataFiles=convertFiles)\nDatset.convertDataFile(saveFile=False)\nax, Data, pos, cpos, distance = Datset.plotCutQELine(QPoints=[q1, q2],\n    width=width, minPixel=minPixel, EnergyBins=EnergyBins, rlu=False)\nData2, pos2, cpos2, distance2 = Datset.cutQELine(QPoints=[q1, q2], width=\n    width, minPixel=minPixel, EnergyBins=EnergyBins, rlu=False)\nassert Data.equals(Data2)\nfor i in range(len(pos)):\n    for j in range(len(pos[i])):\n        for k in range(len(pos[i][j])):\n            assert np.all(pos[i][j][k] == pos2[i][j][k])\nfor i in range(len(cpos)):\n    for j in range(len(cpos[i])):\n        assert np.all(cpos2[i][j] == cpos[i][j])\nfor i in range(len(distance)):\n    for j in range(len(distance[i])):\n        assert np.all(distance2[i][j] == distance[i][j])\nQ1 = np.array([1, 0, 0])\nQ2 = np.array([0.5, 1, 0])\nq1, q2 = Datset.convertToQxQy([Q1, Q2])\nData1, pos1, cpos1, distance1 = Datset.cutQE(Q1, Q2, width, minPixel,\n    EnergyBins, rlu=True)\nData2, pos2, cpos2, distance2 = Datset.cutQE(q1, q2, width, minPixel,\n    EnergyBins, rlu=False)\nassert np.all(Data1.columns == Data2.columns)\nchecker = []\nfor col in Data1.columns:\n    Nans = Data1[col].isna()\n    if np.any(Nans):\n        Nans2 = Data1[col].isna()\n        checker.append(np.all(np.isclose(Data1[col][np.logical_not(Nans)],\n            Data2[col][np.logical_not(Nans2)])))\n    else:\n        checker.append(np.all(np.isclose(Data1[col], Data2[col])))\nprint(checker)\nassert np.all(checker)\nfor i in range(len(pos)):\n    for j in range(len(pos[i])):\n        assert np.all(np.isclose(pos1[i][j], pos2[i][j]))\nfor i in range(len(cpos)):\n    for j in range(len(cpos[i])):\n        assert np.all(np.isclose(cpos2[i][j], cpos1[i][j]))\nfor i in range(len(distance)):\n    for j in range(len(distance[i])):\n        assert np.all(np.isclose(distance2[i][j], distance1[i][j]))\n"
}