{
    "functionName": "test_create_experiment",
    "className": "TestAxClient",
    "fileName": "/facebook_&_Ax/ax_&_service_&_tests_&_test_ax_client.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"Test basic experiment creation.\"\"\"\nax_client = AxClient(GenerationStrategy(steps=[GenerationStep(model=Models.\n    SOBOL, num_trials=30)]))\nwith self.assertRaisesRegex(ValueError, 'Experiment not set on Ax client'):\n    ax_client.experiment\nax_client.create_experiment(name='test_experiment', parameters=[{'name':\n    'x', 'type': 'range', 'bounds': [0.001, 0.1], 'value_type': 'float',\n    'log_scale': True}, {'name': 'y', 'type': 'choice', 'values': [1, 2, 3],\n    'value_type': 'int', 'is_ordered': True}, {'name': 'x3', 'type':\n    'fixed', 'value': 2, 'value_type': 'int'}, {'name': 'x4', 'type':\n    'range', 'bounds': [1.0, 3.0], 'value_type': 'int'}, {'name': 'x5',\n    'type': 'choice', 'values': ['one', 'two', 'three'], 'value_type':\n    'str'}, {'name': 'x6', 'type': 'range', 'bounds': [1.0, 3.0],\n    'value_type': 'int'}], objective_name='test_objective', minimize=True,\n    outcome_constraints=['some_metric >= 3', 'some_metric <= 4.0'],\n    parameter_constraints=['x4 <= x6'])\nassert ax_client._experiment is not None\nself.assertEqual(ax_client._experiment, ax_client.experiment)\nself.assertEqual(ax_client._experiment.search_space.parameters['x'],\n    RangeParameter(name='x', parameter_type=ParameterType.FLOAT, lower=\n    0.001, upper=0.1, log_scale=True))\nself.assertEqual(ax_client._experiment.search_space.parameters['y'],\n    ChoiceParameter(name='y', parameter_type=ParameterType.INT, values=[1, \n    2, 3], is_ordered=True))\nself.assertEqual(ax_client._experiment.search_space.parameters['x3'],\n    FixedParameter(name='x3', parameter_type=ParameterType.INT, value=2))\nself.assertEqual(ax_client._experiment.search_space.parameters['x4'],\n    RangeParameter(name='x4', parameter_type=ParameterType.INT, lower=1.0,\n    upper=3.0))\nself.assertEqual(ax_client._experiment.search_space.parameters['x5'],\n    ChoiceParameter(name='x5', parameter_type=ParameterType.STRING, values=\n    ['one', 'two', 'three']))\nself.assertEqual(ax_client._experiment.optimization_config.\n    outcome_constraints[0], OutcomeConstraint(metric=Metric(name=\n    'some_metric'), op=ComparisonOp.GEQ, bound=3.0, relative=False))\nself.assertEqual(ax_client._experiment.optimization_config.\n    outcome_constraints[1], OutcomeConstraint(metric=Metric(name=\n    'some_metric'), op=ComparisonOp.LEQ, bound=4.0, relative=False))\nself.assertTrue(ax_client._experiment.optimization_config.objective.minimize)\n"
}