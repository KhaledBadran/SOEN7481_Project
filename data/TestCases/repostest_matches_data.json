{
    "functionName": "test_matches_data",
    "className": "TestInterestMethods",
    "fileName": "/named-data_&_PyNDN2/tests_&_unit_tests_&_test_interest_methods.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "interest = Interest(Name('/A'))\ninterest.setMinSuffixComponents(2)\ninterest.setMaxSuffixComponents(2)\ninterest.getKeyLocator().setType(KeyLocatorType.KEYNAME)\ninterest.getKeyLocator().setKeyName(Name('/B'))\ninterest.getExclude().appendComponent(Name.Component('J'))\ninterest.getExclude().appendAny()\ndata = Data(Name('/A/D'))\nsignature = Sha256WithRsaSignature()\nsignature.getKeyLocator().setType(KeyLocatorType.KEYNAME)\nsignature.getKeyLocator().setKeyName(Name('/B'))\ndata.setSignature(signature)\nself.assertEqual(interest.matchesData(data), True)\ndata1 = Data(data)\ndata1.setName(Name('/A'))\nself.assertEqual(interest.matchesData(data1), False)\ninterest1 = Interest(interest)\ninterest1.setMinSuffixComponents(1)\nself.assertEqual(interest1.matchesData(data1), True)\ndata2 = Data(data)\ndata2.setName(Name('/A/E/F'))\nself.assertEqual(interest.matchesData(data2), False)\ninterest2 = Interest(interest)\ninterest2.setMaxSuffixComponents(3)\nself.assertEqual(interest2.matchesData(data2), True)\ndata3 = Data(data)\nsignature3 = Sha256WithRsaSignature()\nsignature3.getKeyLocator().setType(KeyLocatorType.KEYNAME)\nsignature3.getKeyLocator().setKeyName(Name('/G'))\ndata3.setSignature(signature3)\nself.assertEqual(interest.matchesData(data3), False)\ninterest3 = Interest(interest)\ninterest3.getKeyLocator().setType(KeyLocatorType.KEYNAME)\ninterest3.getKeyLocator().setKeyName(Name('/G'))\nself.assertEqual(interest3.matchesData(data3), True)\ndata4 = Data(data)\ndata4.setSignature(DigestSha256Signature())\nself.assertEqual(interest.matchesData(data4), False)\ninterest4 = Interest(interest)\ninterest4.setKeyLocator(KeyLocator())\nself.assertEqual(interest4.matchesData(data4), True)\ndata5 = Data(data)\ndata5.setName(Name('/A/J'))\nself.assertEqual(interest.matchesData(data5), False)\ninterest5 = Interest(interest)\ninterest5.getExclude().clear()\ninterest5.getExclude().appendComponent(Name.Component('K'))\ninterest5.getExclude().appendAny()\nself.assertEqual(interest5.matchesData(data5), True)\ndata6 = Data(data)\ndata6.setName(Name('/H/I'))\nself.assertEqual(interest.matchesData(data6), False)\ndata7 = Data(data)\ndata7.setName(Name('/A/B'))\ninterest7 = Interest(Name('/A/B/sha256digest=' +\n    '54008e240a7eea2714a161dfddf0dd6ced223b3856e9da96792151e180f3b128'))\nself.assertEqual(interest7.matchesData(data7), True)\ninterest7b = Interest(Name(\n    '/A/B/%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00' +\n    '%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00'))\nself.assertEqual(interest7b.matchesData(data7), False)\ninterest8 = Interest(Name('/A/B'))\ninterest8.getExclude().appendComponent(interest7.getName().get(2))\nself.assertEqual(interest8.matchesData(data7), False)\n"
}