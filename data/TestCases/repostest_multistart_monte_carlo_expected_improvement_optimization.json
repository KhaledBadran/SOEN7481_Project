{
    "functionName": "test_multistart_monte_carlo_expected_improvement_optimization",
    "className": "TestExpectedImprovement",
    "fileName": "/Yelp_&_MOE/moe_&_tests_&_optimal_learning_&_python_&_python_version_&_expected_improvement_test.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"Check that multistart optimization (gradient descent) can find the optimum point to sample (using 2-EI).\"\"\"\nnumpy.random.seed(7858)\nindex = numpy.argmax(numpy.greater_equal(self.num_sampled_list, 20))\ndomain, gaussian_process = self.gp_test_environments[index]\nmax_num_steps = 75\nmax_num_restarts = 5\nnum_steps_averaged = 50\ngamma = 0.2\npre_mult = 1.5\nmax_relative_change = 1.0\ntolerance = 0.03\ngd_parameters = GradientDescentParameters(max_num_steps, max_num_restarts,\n    num_steps_averaged, gamma, pre_mult, max_relative_change, tolerance)\nnum_multistarts = 2\nexpanded_domain = TensorProductDomain([ClosedInterval(-4.0, 2.0)] * self.dim)\nnum_to_sample = 2\nrepeated_domain = RepeatedDomain(num_to_sample, expanded_domain)\nnum_mc_iterations = 10000\npoints_to_sample = repeated_domain.generate_random_point_in_domain()\nei_eval = ExpectedImprovement(gaussian_process, points_to_sample,\n    num_mc_iterations=num_mc_iterations)\nei_initial = ei_eval.compute_expected_improvement(force_monte_carlo=True)\ngrad_ei_initial = ei_eval.compute_grad_expected_improvement()\nei_optimizer = GradientDescentOptimizer(repeated_domain, ei_eval, gd_parameters\n    )\nbest_point = multistart_expected_improvement_optimization(ei_optimizer,\n    num_multistarts, num_to_sample)\nei_eval.current_point = best_point\nei_final = ei_eval.compute_expected_improvement(force_monte_carlo=True)\ngrad_ei_final = ei_eval.compute_grad_expected_improvement()\nself.assert_vector_within_relative(grad_ei_final, numpy.zeros(grad_ei_final\n    .shape), tolerance)\nassert repeated_domain.check_point_inside(best_point) is True\nassert ei_final >= ei_initial\nfor index in numpy.ndindex(grad_ei_final.shape):\n    assert numpy.fabs(grad_ei_final[index]) <= numpy.fabs(grad_ei_initial[\n        index])\n"
}