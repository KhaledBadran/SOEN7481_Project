{
    "functionName": "fileListGenerator",
    "className": null,
    "fileName": "/jakob-lass_&_MJOLNIR/MJOLNIR_&__tools.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"Function to generate list of data files.\n    \n    Args:\n        \n        - numberString (str): List if numbers separated with comma and dashes for sequences.\n        \n        - folder (str): Folder of wanted data files.\n        \n    Kwargs:\n\n        - year (int): Year of wanted data files (default 2018)\n\n        - format (str): format of data files (default None, but CAMEA if instrument is provided)\n\n        - instrument (str): Instrument to be used to determine format string (default CAMEA)\n        \n    returns:\n        \n        - list of strings: List containing the full file string for each number provided.\n        \n    Example:\n        >>> numberString = '201-205,207-208,210,212'\n        >>> files = fileListGenerator(numberString,'data/',2018)\n        ['data/camea2018n000201.hdf', 'data/camea2018n000202.hdf', \n        'data/camea2018n000203.hdf', 'data/camea2018n000204.hdf', \n        'data/camea2018n000205.hdf', 'data/camea2018n000207.hdf', \n        'data/camea2018n000208.hdf', 'data/camea2018n000210.hdf', \n        'data/camea2018n000212.hdf']\n    \"\"\"\nsplits = numberString.split(',')\ndataFiles = []\nif format is None:\n    if instrument == 'CAMEA':\n        format = 'camea{:d}n{:06d}.hdf'\n    elif instrument == 'MultiFLEXX':\n        format = '{1:06d}'\n    else:\n        raise AttributeError('Provided instrument \"{}\" not understood'.\n            format(instrument))\nfor sp in splits:\n    isRange = sp.find('-') != -1\n    if isRange:\n        spSplits = sp.split('-')\n        if len(spSplits) > 2:\n            raise AttributeError(\n                'Sequence \"{}\" not understood - too many dashes.'.format(sp))\n        startNumber = int(spSplits[0])\n        endNumber = int(spSplits[1])\n        numbers = np.arange(startNumber, endNumber + 1)\n    else:\n        numbers = [int(sp)]\n    dataFiles.append([os.path.join(folder, format.format(year, x)) for x in\n        numbers])\nreturn list(np.concatenate(dataFiles))\nKwargChecker()"
}