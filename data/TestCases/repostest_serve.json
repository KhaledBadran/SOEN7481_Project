{
    "functionName": "test_serve",
    "className": "TestKmipServer",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_services_&_server_&_test_server.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that the right calls and log messages are triggered while\n        serving connections.\n        \"\"\"\ns = server.KmipServer(hostname='127.0.0.1', port=5696, config_path=None,\n    policy_path=None)\ns._is_serving = True\ns._logger = mock.MagicMock()\ns._socket = mock.MagicMock()\ns._setup_connection_handler = mock.MagicMock()\nexpected_error = KeyboardInterrupt\ns._socket.accept = mock.MagicMock(side_effect=[('connection', 'address'),\n    socket.timeout, expected_error])\ns.serve()\ns._socket.listen.assert_called_once_with(5)\ns._socket.accept.assert_any_call()\ns._setup_connection_handler.assert_called_once_with('connection', 'address')\ns._logger.warning.assert_called_with('Interrupting connection service.')\ns._logger.info.assert_called_with('Stopping connection service.')\nunexpected_error = socket.error()\ns._is_serving = True\ns._logger.reset_mock()\ns._socket.accept = mock.MagicMock(side_effect=[unexpected_error,\n    expected_error])\ns.serve()\ns._socket.accept.assert_any_call()\ns._logger.warning.assert_any_call(\n    'Error detected while establishing new connection.')\ns._logger.exception.assert_called_with(unexpected_error)\ns._logger.info.assert_called_with('Stopping connection service.')\nunexpected_error = Exception()\ns._is_serving = True\ns._logger.reset_mock()\ns._socket.accept = mock.MagicMock(side_effect=[unexpected_error,\n    expected_error])\ns.serve()\ns._socket.accept.assert_any_call()\ns._logger.warning.assert_any_call(\n    'Error detected while establishing new connection.')\ns._logger.exception.assert_called_with(unexpected_error)\ns._logger.info.assert_called_with('Stopping connection service.')\ns._is_serving = True\nhandler = signal.getsignal(signal.SIGINT)\nargs = signal.SIGINT, None\nself.assertRaisesRegex(KeyboardInterrupt, 'SIGINT received', handler, *args)\nself.assertFalse(s._is_serving)\ns._is_serving = True\nhandler = signal.getsignal(signal.SIGTERM)\nhandler(None, None)\nself.assertFalse(s._is_serving)\nmock.patch('kmip.services.server.engine.KmipEngine')mock.patch('kmip.services.server.server.KmipServer._setup_logging')"
}