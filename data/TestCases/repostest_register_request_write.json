{
    "functionName": "test_register_request_write",
    "className": "TestRequestMessage",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_core_&_messages_&_test_messages.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "prot_ver = contents.ProtocolVersion(1, 1)\nbatch_count = contents.BatchCount(1)\nreq_header = messages.RequestHeader(protocol_version=prot_ver, batch_count=\n    batch_count)\noperation = contents.Operation(enums.Operation.REGISTER)\nobject_type = enums.ObjectType.TEMPLATE\ntmpl_attr = objects.TemplateAttribute()\nattributes = []\nname = objects.Attribute.AttributeName('Object Group')\nvalue = TextString('Group1', tag=enums.Tags.OBJECT_GROUP)\nattribute = objects.Attribute(attribute_name=name, attribute_value=value)\nattributes.append(attribute)\nname = objects.Attribute.AttributeName('Application Specific Information')\nap_n_name = 'ssl'\nap_n_value = 'www.example.com'\nvalue = attr.ApplicationSpecificInformation(application_namespace=ap_n_name,\n    application_data=ap_n_value)\nattribute = objects.Attribute(attribute_name=name, attribute_value=value)\nattributes.append(attribute)\nname = objects.Attribute.AttributeName('Contact Information')\nvalue = ContactInformation('Joe')\nattribute = objects.Attribute(attribute_name=name, attribute_value=value)\nattributes.append(attribute)\nname = objects.Attribute.AttributeName('x-Purpose')\nvalue = TextString('demonstration')\nattribute = objects.Attribute(attribute_name=name, attribute_value=value)\nattributes.append(attribute)\nname = objects.Attribute.AttributeName('Name')\nname_value = Name.NameValue('Template1')\nname_type = Name.NameType(NameType.UNINTERPRETED_TEXT_STRING)\nvalue = Name(name_value=name_value, name_type=name_type)\nattribute = objects.Attribute(attribute_name=name, attribute_value=value)\nattributes.append(attribute)\ntemplate = Template(attributes=attributes)\nrequest_payload = payloads.RegisterRequestPayload(object_type=object_type,\n    template_attribute=tmpl_attr, managed_object=template)\nbatch_item = messages.RequestBatchItem(operation=operation, request_payload\n    =request_payload)\nrequest_message = messages.RequestMessage(request_header=req_header,\n    batch_items=[batch_item])\nrequest_message.write(self.stream)\nresult = self.stream.read()\nlen_exp = len(self.register)\nlen_rcv = len(result)\nself.assertEqual(len_exp, len_rcv, self.msg.format('request message',\n    'write', len_exp, len_rcv))\nmsg = 'Bad request message write: encoding mismatch'\nself.assertEqual(self.register, result, msg)\n"
}