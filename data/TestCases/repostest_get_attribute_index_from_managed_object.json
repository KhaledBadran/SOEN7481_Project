{
    "functionName": "test_get_attribute_index_from_managed_object",
    "className": "TestKmipEngine",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_services_&_server_&_test_engine.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that an attribute's index can be retrieved from a given managed\n        object.\n        \"\"\"\ne = engine.KmipEngine()\ne._data_store = self.engine\ne._data_store_session_factory = self.session_factory\ne._data_session = e._data_store_session_factory()\ne._logger = mock.MagicMock()\nsymmetric_key = pie_objects.SymmetricKey(enums.CryptographicAlgorithm.AES, \n    0, b'', masks=[enums.CryptographicUsageMask.ENCRYPT, enums.\n    CryptographicUsageMask.DECRYPT])\ncertificate = pie_objects.X509Certificate(b'')\ne._data_session.add(symmetric_key)\ne._data_session.add(certificate)\ne._data_session.commit()\ne._data_session = e._data_store_session_factory()\ne._set_attribute_on_managed_object(symmetric_key, (\n    'Application Specific Information', [attributes.\n    ApplicationSpecificInformation(application_namespace=\n    'Example Namespace', application_data='Example Data')]))\ne._set_attribute_on_managed_object(symmetric_key, ('Name', [attributes.Name\n    (name_value=attributes.Name.NameValue('Name 1')), attributes.Name(\n    name_value=attributes.Name.NameValue('Name 2'))]))\ne._set_attribute_on_managed_object(symmetric_key, ('Object Group', [\n    primitives.TextString('Example Group', tag=enums.Tags.OBJECT_GROUP)]))\nindex = e._get_attribute_index_from_managed_object(symmetric_key,\n    'Application Specific Information', attributes.\n    ApplicationSpecificInformation(application_namespace=\n    'Example Namespace', application_data='Example Data'))\nself.assertEqual(0, index)\nindex = e._get_attribute_index_from_managed_object(symmetric_key,\n    'Application Specific Information', attributes.\n    ApplicationSpecificInformation(application_namespace='Wrong Namespace',\n    application_data='Wrong Data'))\nself.assertIsNone(index)\nindex = e._get_attribute_index_from_managed_object(certificate,\n    'Certificate Type', primitives.Enumeration(enums.CertificateType, enums\n    .CertificateType.X_509, tag=enums.Tags.CERTIFICATE_TYPE))\nself.assertEqual(0, index)\nindex = e._get_attribute_index_from_managed_object(certificate,\n    'Certificate Type', primitives.Enumeration(enums.CertificateType, enums\n    .CertificateType.PGP, tag=enums.Tags.CERTIFICATE_TYPE))\nself.assertIsNone(index)\nindex = e._get_attribute_index_from_managed_object(symmetric_key,\n    'Cryptographic Algorithm', primitives.Enumeration(enums.\n    CryptographicAlgorithm, enums.CryptographicAlgorithm.AES, tag=enums.\n    Tags.CRYPTOGRAPHIC_ALGORITHM))\nself.assertEqual(0, index)\nindex = e._get_attribute_index_from_managed_object(symmetric_key,\n    'Cryptographic Algorithm', primitives.Enumeration(enums.\n    CryptographicAlgorithm, enums.CryptographicAlgorithm.RSA, tag=enums.\n    Tags.CRYPTOGRAPHIC_ALGORITHM))\nself.assertIsNone(index)\nindex = e._get_attribute_index_from_managed_object(symmetric_key,\n    'Cryptographic Length', primitives.Integer(0, tag=enums.Tags.\n    CRYPTOGRAPHIC_LENGTH))\nself.assertEqual(0, index)\nindex = e._get_attribute_index_from_managed_object(symmetric_key,\n    'Cryptographic Length', primitives.Integer(128, tag=enums.Tags.\n    CRYPTOGRAPHIC_LENGTH))\nself.assertIsNone(index)\nindex = e._get_attribute_index_from_managed_object(symmetric_key,\n    'Cryptographic Usage Mask', primitives.Integer(12, tag=enums.Tags.\n    CRYPTOGRAPHIC_USAGE_MASK))\nself.assertEqual(0, index)\nindex = e._get_attribute_index_from_managed_object(symmetric_key,\n    'Cryptographic Usage Mask', primitives.Integer(0, tag=enums.Tags.\n    CRYPTOGRAPHIC_USAGE_MASK))\nself.assertIsNone(index)\ndate = e._get_attribute_from_managed_object(symmetric_key, 'Initial Date')\nindex = e._get_attribute_index_from_managed_object(symmetric_key,\n    'Initial Date', primitives.DateTime(date, tag=enums.Tags.INITIAL_DATE))\nself.assertEqual(0, index)\nindex = e._get_attribute_index_from_managed_object(symmetric_key,\n    'Initial Date', primitives.DateTime(9999, tag=enums.Tags.INITIAL_DATE))\nself.assertIsNone(index)\nindex = e._get_attribute_index_from_managed_object(symmetric_key, 'Name',\n    attributes.Name(name_value=attributes.Name.NameValue('Name 2')))\nself.assertEqual(2, index)\nindex = e._get_attribute_index_from_managed_object(symmetric_key, 'Name',\n    attributes.Name(name_value=attributes.Name.NameValue('Name 3')))\nself.assertIsNone(index)\nindex = e._get_attribute_index_from_managed_object(symmetric_key,\n    'Object Group', primitives.TextString('Example Group', tag=enums.Tags.\n    OBJECT_GROUP))\nself.assertEqual(0, index)\nindex = e._get_attribute_index_from_managed_object(symmetric_key,\n    'Object Group', primitives.TextString('Invalid Group', tag=enums.Tags.\n    OBJECT_GROUP))\nself.assertIsNone(index)\nindex = e._get_attribute_index_from_managed_object(symmetric_key,\n    'Object Type', primitives.Enumeration(enums.ObjectType, enums.\n    ObjectType.SYMMETRIC_KEY, tag=enums.Tags.OBJECT_TYPE))\nself.assertEqual(0, index)\nindex = e._get_attribute_index_from_managed_object(symmetric_key,\n    'Object Type', primitives.Enumeration(enums.ObjectType, enums.\n    ObjectType.CERTIFICATE, tag=enums.Tags.OBJECT_TYPE))\nself.assertIsNone(index)\nindex = e._get_attribute_index_from_managed_object(symmetric_key,\n    'Operation Policy Name', primitives.TextString('default', tag=enums.\n    Tags.OPERATION_POLICY_NAME))\nself.assertEqual(0, index)\nindex = e._get_attribute_index_from_managed_object(symmetric_key,\n    'Operation Policy Name', primitives.TextString('invalid', tag=enums.\n    Tags.OPERATION_POLICY_NAME))\nself.assertIsNone(index)\nindex = e._get_attribute_index_from_managed_object(symmetric_key,\n    'Sensitive', primitives.Boolean(False, tag=enums.Tags.SENSITIVE))\nself.assertEqual(0, index)\nindex = e._get_attribute_index_from_managed_object(symmetric_key,\n    'Sensitive', primitives.Boolean(True, tag=enums.Tags.SENSITIVE))\nself.assertIsNone(index)\nindex = e._get_attribute_index_from_managed_object(symmetric_key, 'State',\n    primitives.Enumeration(enums.State, enums.State.PRE_ACTIVE, tag=enums.\n    Tags.STATE))\nself.assertEqual(0, index)\nindex = e._get_attribute_index_from_managed_object(symmetric_key, 'State',\n    primitives.Enumeration(enums.State, enums.State.ACTIVE, tag=enums.Tags.\n    STATE))\nself.assertIsNone(index)\nindex = e._get_attribute_index_from_managed_object(symmetric_key,\n    'Unique Identifier', primitives.TextString(value='1', tag=enums.Tags.\n    UNIQUE_IDENTIFIER))\nself.assertEqual(0, index)\nindex = e._get_attribute_index_from_managed_object(symmetric_key,\n    'Unique Identifier', primitives.TextString(value='9', tag=enums.Tags.\n    UNIQUE_IDENTIFIER))\nself.assertIsNone(index)\nindex = e._get_attribute_index_from_managed_object(symmetric_key,\n    'Archive Date', None)\nself.assertIsNone(index)\n"
}