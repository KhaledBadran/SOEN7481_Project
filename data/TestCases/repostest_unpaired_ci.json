{
    "functionName": "test_unpaired_ci",
    "className": null,
    "fileName": "/ACCLAB_&_DABEST-python/dabest_&_tests_&_test_99_confint.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "POPULATION_N = 10000\nSAMPLE_N = 10\nCONTROL_MEAN = np.random.randint(1, 1000)\nPOP_SD = np.random.randint(1, 15)\nPOP_D = np.round(np.random.uniform(-2, 2, 1)[0], 2)\nTRUE_STD_DIFFERENCE = CONTROL_MEAN + POP_D * POP_SD\nnorm_sample_kwargs = dict(scale=POP_SD, size=SAMPLE_N)\nc1 = norm.rvs(loc=CONTROL_MEAN, **norm_sample_kwargs)\nt1 = norm.rvs(loc=CONTROL_MEAN + TRUE_STD_DIFFERENCE, **norm_sample_kwargs)\nstd_diff_df = pd.DataFrame({'Control': c1, 'Test': t1})\nCONTROL_MEAN = np.random.randint(1, 1000)\nPOP_SD = np.random.randint(1, 15)\nTRUE_DIFFERENCE = np.random.randint(-POP_SD * 5, POP_SD * 5)\nc1 = norm.rvs(loc=CONTROL_MEAN, **norm_sample_kwargs)\nt1 = norm.rvs(loc=CONTROL_MEAN + TRUE_DIFFERENCE, **norm_sample_kwargs)\nmean_df = pd.DataFrame({'Control': c1, 'Test': t1})\nMEDIAN_DIFFERENCE = np.random.randint(-5, 5)\nA = np.random.randint(-7, 7)\nskew_kwargs = dict(a=A, scale=5, size=POPULATION_N)\nskewpop1 = skewnorm.rvs(**skew_kwargs, loc=100)\nskewpop2 = skewnorm.rvs(**skew_kwargs, loc=100 + MEDIAN_DIFFERENCE)\nsample_kwargs = dict(replace=False, size=SAMPLE_N)\nskewsample1 = np.random.choice(skewpop1, **sample_kwargs)\nskewsample2 = np.random.choice(skewpop2, **sample_kwargs)\nmedian_df = pd.DataFrame({'Control': skewsample1, 'Test': skewsample2})\nCD_DIFFERENCE = np.random.randint(1, 10)\nSD = np.abs(CD_DIFFERENCE)\npop_kwargs = dict(scale=SD, size=POPULATION_N)\npop1 = norm.rvs(loc=100, **pop_kwargs)\npop2 = norm.rvs(loc=100 + CD_DIFFERENCE, **pop_kwargs)\nsample_kwargs = dict(replace=False, size=SAMPLE_N)\nsample1 = np.random.choice(pop1, **sample_kwargs)\nsample2 = np.random.choice(pop2, **sample_kwargs)\ncd_df = pd.DataFrame({'Control': sample1, 'Test': sample2})\nerror_count_cohens_d = 0\nerror_count_hedges_g = 0\nerror_count_mean_diff = 0\nerror_count_median_diff = 0\nerror_count_cliffs_delta = 0\nfor i in range(0, reps):\n    rnd_sd = np.random.randint(0, 999999)\n    load_kwargs = dict(ci=ci, random_seed=rnd_sd)\n    std_diff_data = load(data=std_diff_df, idx=('Control', 'Test'), **\n        load_kwargs)\n    cd = std_diff_data.cohens_d.results\n    cd_low, cd_high = float(cd.bca_low), float(cd.bca_high)\n    if cd_low < POP_D < cd_high is False:\n        error_count_cohens_d += 1\n    hg = std_diff_data.hedges_g.results\n    hg_low, hg_high = float(hg.bca_low), float(hg.bca_high)\n    if hg_low < POP_D < hg_high is False:\n        error_count_hedges_g += 1\n    mean_diff_data = load(data=mean_df, idx=('Control', 'Test'), **load_kwargs)\n    mean_d = mean_diff_data.mean_diff.results\n    mean_d_low, mean_d_high = float(mean_d.bca_low), float(mean_d.bca_high)\n    if mean_d_low < TRUE_DIFFERENCE < mean_d_high is False:\n        error_count_mean_diff += 1\n    median_diff_data = load(data=median_df, idx=('Control', 'Test'), **\n        load_kwargs)\n    median_d = median_diff_data.median_diff.results\n    median_d_low, median_d_high = float(median_d.bca_low), float(median_d.\n        bca_high)\n    if median_d_low < MEDIAN_DIFFERENCE < median_d_high is False:\n        error_count_median_diff += 1\n    cd_data = load(data=cd_df, idx=('Control', 'Test'), **load_kwargs)\n    cliffs = cd_data.cliffs_delta.results\n    low, high = float(cliffs.bca_low), float(cliffs.bca_high)\n    if low < 0.5 < high is False:\n        error_count_cliffs_delta += 1\nmax_errors = int(np.ceil(reps * (100 - ci) / 100))\nassert error_count_cohens_d <= max_errors\nassert error_count_hedges_g <= max_errors\nassert error_count_mean_diff <= max_errors\nassert error_count_median_diff <= max_errors\nassert error_count_cliffs_delta <= max_errors\n"
}