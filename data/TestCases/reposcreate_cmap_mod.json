{
    "functionName": "create_cmap_mod",
    "className": null,
    "fileName": "/1313e_&_CMasher/cmasher_&_utils.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"\n    Creates a standalone Python module of the provided *CMasher* `cmap` and\n    saves it in the given `save_dir` as '`cmap`.py'.\n\n    A standalone colormap module can be used to quickly share a colormap with\n    someone without adding the *CMasher* dependency.\n    Importing the created module allows the colormap to be used in the same way\n    as usual through *MPL* (including the 'cmr.' prefix).\n\n    Parameters\n    ----------\n    cmap : str\n        The name of the *CMasher* colormap a standalone Python module must be\n        made for. An added 'cmr.' prefix will be ignored.\n\n    Optional\n    --------\n    save_dir : str. Default: '.'\n        The path to the directory where the module must be saved.\n        By default, the current directory is used.\n\n    Returns\n    -------\n    cmap_path : str\n        The path to the Python file containing the colormap module.\n\n    Example\n    -------\n    Creating a standalone Python module of the 'rainforest' colormap::\n\n        >>> create_cmap_mod('rainforest')\n\n    One can now import the 'rainforest' colormap in any script by moving the\n    created 'rainforest.py' file to the proper working directory and importing\n    it with ``import rainforest``.\n\n    Note\n    ----\n    Unlike other *CMasher* utility functions, `cmap` solely accepts names of\n    colormaps that are registered in *CMasher* (:mod:`cmasher.cm`).\n\n    \"\"\"\nsave_dir = path.abspath(save_dir)\nname = cmap.replace('cmr.', '')\ncmap = cmrcm.cmap_d.get(name, None)\nif cmap is None:\n    raise ValueError(\n        \"Input argument 'cmap' is not a valid CMasher colormap (%r)!\" % name)\nrgb = np.array(cmap.colors)\narray_str = np.array2string(rgb, max_line_width=79, prefix='cm_data = ',\n    separator=', ', threshold=rgb.size, precision=8)\nfor i in range(8, 0, -1):\n    array_str = array_str.replace(' ' * i + ', ', '0' * i + ', ')\n    array_str = array_str.replace(' ' * i + ']', '0' * i + ']')\ncm_py_file = dedent(\n    \"\"\"\n        # %% IMPORTS\n        # Package imports\n        from matplotlib.cm import register_cmap\n        from matplotlib.colors import ListedColormap\n\n        # All declaration\n        __all__ = ['cmap']\n\n        # Author declaration\n        __author__ = \"Ellert van der Velden (@1313e)\"\n\n        # Package declaration\n        __package__ = 'cmasher'\n\n\n        # %% GLOBALS AND DEFINITIONS\n        # Type of this colormap\n        cm_type = '{0}'\n\n        # RGB-values of this colormap\n        cm_data = {1}\n\n        # Create ListedColormap object for this colormap\n        cmap = ListedColormap(cm_data, name='cmr.{2}', N=len(cm_data))\n        cmap_r = cmap.reversed()\n\n        # Register (reversed) cmap in MPL\n        register_cmap(cmap=cmap)\n        register_cmap(cmap=cmap_r)\n        \"\"\"\n    ).format(get_cmap_type(cmap), array_str, name)\ncmap_path = path.join(save_dir, '{0}.py'.format(name))\nwith open(cmap_path, 'w') as f:\n    f.write(cm_py_file[1:])\nreturn cmap_path\n"
}