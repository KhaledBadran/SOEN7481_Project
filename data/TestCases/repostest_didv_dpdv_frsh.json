{
    "functionName": "test_didv_dpdv_frsh",
    "className": null,
    "fileName": "/SunPower_&_PVMismatch/pvmismatch_&_contrib_&_gen_coeffs_&_tests_&_test_two_diode.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n    Test derivative of IV curve.\n    \"\"\"\nisat1, isat2, rs, rsh, vt, vc = sympy.symbols(['isat1', 'isat2', 'rs',\n    'rsh', 'vt', 'vc'])\nic = sympy.Function('ic')('vc')\nisc0, alpha_isc, tc, t0, ee = sympy.symbols(['isc', 'alpha_isc', 'tc', 't0',\n    'ee'])\nisc = isc0 * (1 + alpha_isc * (tc - t0))\nvd_sc = isc * rs\nid1_sc = isat1 * (sympy.exp(vd_sc / vt) - 1.0)\nid2_sc = isat2 * (sympy.exp(vd_sc / 2.0 / vt) - 1.0)\nish_sc = vd_sc / rsh\naph = 1.0 + (id1_sc + id2_sc + ish_sc) / isc\niph = aph * ee * isc\nvd = vc + ic * rs\nid1 = isat1 * (sympy.exp(vd / vt) - 1.0)\nid2 = isat2 * (sympy.exp(vd / 2.0 / vt) - 1.0)\nish = vd / rsh\ndiph_dv = sympy.diff(iph, vc)\ndid1_dv = sympy.diff(id1, vc)\ndid2_dv = sympy.diff(id2, vc)\ndish_dv = sympy.diff(ish, vc)\ndi_dv = sympy.Derivative(ic, vc)\nf = di_dv - diph_dv + did1_dv + did2_dv + dish_dv\nsolution_set = sympy.solve(f, di_dv)\ndidv = solution_set[0]\ntest_data = {'isat1': ISAT1_2, 'isat2': ISAT2_2, 'rs': RS_2, 'rsh': RSH_2,\n    'ic': IC, 'vc': VC, 'vt': VT}\nfdidv_test, jdidv_test = fdidv(**test_data)\nexpected_data = {isat1: ISAT1_2, isat2: ISAT2_2, rs: RS_2, rsh: RSH_2, ic:\n    IC, vc: VC, 'vd': VD_2, vt: VT}\ndidv_simple = didv.subs(vc + ic * rs, 'vd')\nfdidv_expected = np.float(didv_simple.evalf(subs=expected_data))\nLOGGER.debug('fdidv test: %g, expected: %g', fdidv_test, fdidv_expected)\nassert np.isclose(fdidv_test, fdidv_expected)\nd_didv_isat1 = didv.diff(isat1).subs(vc + ic * rs, 'vd')\nd_didv_isat2 = didv.diff(isat2).subs(vc + ic * rs, 'vd')\nd_didv_rs = didv.diff(rs).subs(vc + ic * rs, 'vd')\nd_didv_rsh = didv.diff(rsh).subs(vc + ic * rs, 'vd')\nd_didv_ic = didv.diff(ic).subs(vc + ic * rs, 'vd')\nd_didv_vc = didv.diff(vc).subs(vc + ic * rs, 'vd')\nexpected_data[di_dv] = fdidv_expected\njdidv_expected = np.array([d_didv_isat1.evalf(subs=expected_data),\n    d_didv_isat2.evalf(subs=expected_data), d_didv_rs.evalf(subs=\n    expected_data), d_didv_rsh.evalf(subs=expected_data), d_didv_ic.evalf(\n    subs=expected_data), d_didv_vc.evalf(subs=expected_data)], dtype=np.float)\nLOGGER.debug(\"\"\"\njdidv test:\n%r\nexpected:\n%r\n\"\"\", jdidv_test,\n    jdidv_expected.reshape(-1, 1))\nassert np.allclose(jdidv_test.flatten(), jdidv_expected)\ndpdv = didv * vc + ic\nfdpdv_test, jdpdv_test = fdpdv(**test_data)\ndpdv_simple = dpdv.subs(vc + ic * rs, 'vd')\nfdpdv_expected = np.float(dpdv_simple.evalf(subs=expected_data))\nLOGGER.debug('fdpdv test: %g, expected: %g', fdpdv_test, fdpdv_expected)\nassert np.isclose(fdpdv_test, fdpdv_expected)\nd_dpdv_isat1 = dpdv.diff(isat1).subs(vc + ic * rs, 'vd')\nd_dpdv_isat2 = dpdv.diff(isat2).subs(vc + ic * rs, 'vd')\nd_dpdv_rs = dpdv.diff(rs).subs(vc + ic * rs, 'vd')\nd_dpdv_rsh = dpdv.diff(rsh).subs(vc + ic * rs, 'vd')\nd_dpdv_ic = dpdv.diff(ic).subs(vc + ic * rs, 'vd')\nd_dpdv_vc = dpdv.diff(vc).subs(vc + ic * rs, 'vd')\njdpdv_expected = np.array([d_dpdv_isat1.evalf(subs=expected_data),\n    d_dpdv_isat2.evalf(subs=expected_data), d_dpdv_rs.evalf(subs=\n    expected_data), d_dpdv_rsh.evalf(subs=expected_data), d_dpdv_ic.evalf(\n    subs=expected_data), d_dpdv_vc.evalf(subs=expected_data)], dtype=np.float)\nLOGGER.debug(\"\"\"\njdidv test:\n%r\nexpected:\n%r\n\"\"\", jdpdv_test,\n    jdpdv_expected.reshape(-1, 1))\nassert np.allclose(jdpdv_test.flatten(), jdpdv_expected)\nfrsh = vd * (1.0 / rsh + didv)\ndel test_data['ic'], test_data['vc']\ntest_data['isc'] = ISC0\nfrsh_test, jfrsh_test = fjrsh(**test_data)\nfrsh_simple = frsh.subs(vc + ic * rs, 'vd')\nexpected_data[ic] = ISC0\nexpected_data[vc] = 0\nexpected_data['vd'] = ISC0 * RS_2\ndidv_isc = np.float(didv_simple.evalf(subs=expected_data))\nexpected_data[di_dv] = didv_isc\nfrsh_expected = np.float(frsh_simple.evalf(subs=expected_data))\nLOGGER.debug('frsh test: %r, expected: %r', frsh_test, frsh_expected)\nassert np.isclose(frsh_test, frsh_expected)\ndfrsh_isat1 = frsh.diff(isat1).subs(vc + ic * rs, 'vd')\ndfrsh_isat2 = frsh.diff(isat2).subs(vc + ic * rs, 'vd')\ndfrsh_rs = frsh.diff(rs).subs(vc + ic * rs, 'vd')\ndfrsh_rsh = frsh.diff(rsh).subs(vc + ic * rs, 'vd')\ndfrsh_ic = frsh.diff(ic).subs(vc + ic * rs, 'vd')\ndfrsh_vc = frsh.diff(vc).subs(vc + ic * rs, 'vd')\njfrsh_expected = np.array([dfrsh_isat1.evalf(subs=expected_data),\n    dfrsh_isat2.evalf(subs=expected_data), dfrsh_rs.evalf(subs=\n    expected_data), dfrsh_rsh.evalf(subs=expected_data), dfrsh_ic.evalf(\n    subs=expected_data), dfrsh_vc.evalf(subs=expected_data)], dtype=np.float)\nLOGGER.debug(\"\"\"\njdidv test:\n%r\nexpected:\n%r\n\"\"\", jfrsh_test,\n    jfrsh_expected.reshape(-1, 1))\nassert np.allclose(jfrsh_test.flatten(), jfrsh_expected)\nreturn dfrsh_isat1, dfrsh_isat2, dfrsh_rs, dfrsh_rsh, dfrsh_ic, dfrsh_vc\n"
}