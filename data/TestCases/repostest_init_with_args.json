{
    "functionName": "test_init_with_args",
    "className": "TestKeyWrappingSpecification",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_core_&_objects_&_test_objects.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that a KeyWrappingSpecification struct can be constructed with\n        valid values.\n        \"\"\"\nencryption_key_information = objects.EncryptionKeyInformation(unique_identifier\n    ='12345678-9012-3456-7890-123456789012', cryptographic_parameters=\n    attributes.CryptographicParameters(block_cipher_mode=enums.\n    BlockCipherMode.CTR))\nmac_signature_key_information = objects.MACSignatureKeyInformation(\n    unique_identifier='00000000-1111-2222-3333-444444444444',\n    cryptographic_parameters=attributes.CryptographicParameters(\n    block_cipher_mode=enums.BlockCipherMode.NIST_KEY_WRAP))\nkey_wrapping_specification = objects.KeyWrappingSpecification(wrapping_method\n    =enums.WrappingMethod.ENCRYPT, encryption_key_information=\n    encryption_key_information, mac_signature_key_information=\n    mac_signature_key_information, attribute_names=[\n    'Cryptographic Algorithm', 'Cryptographic Length',\n    'Cryptographic Usage Mask'], encoding_option=enums.EncodingOption.\n    TTLV_ENCODING)\nself.assertEqual(enums.WrappingMethod.ENCRYPT, key_wrapping_specification.\n    wrapping_method)\nself.assertIsInstance(key_wrapping_specification.encryption_key_information,\n    objects.EncryptionKeyInformation)\ne = key_wrapping_specification.encryption_key_information\nself.assertEqual('12345678-9012-3456-7890-123456789012', e.unique_identifier)\nself.assertIsInstance(e.cryptographic_parameters, attributes.\n    CryptographicParameters)\nself.assertEqual(enums.BlockCipherMode.CTR, e.cryptographic_parameters.\n    block_cipher_mode)\nself.assertIsInstance(key_wrapping_specification.\n    mac_signature_key_information, objects.MACSignatureKeyInformation)\nm = key_wrapping_specification.mac_signature_key_information\nself.assertEqual('00000000-1111-2222-3333-444444444444', m.unique_identifier)\nself.assertIsInstance(m.cryptographic_parameters, attributes.\n    CryptographicParameters)\nself.assertEqual(enums.BlockCipherMode.NIST_KEY_WRAP, m.\n    cryptographic_parameters.block_cipher_mode)\nself.assertIsInstance(key_wrapping_specification.attribute_names, list)\nself.assertEqual(3, len(key_wrapping_specification.attribute_names))\nself.assertEqual('Cryptographic Algorithm', key_wrapping_specification.\n    attribute_names[0])\nself.assertEqual('Cryptographic Length', key_wrapping_specification.\n    attribute_names[1])\nself.assertEqual('Cryptographic Usage Mask', key_wrapping_specification.\n    attribute_names[2])\nself.assertEqual(enums.EncodingOption.TTLV_ENCODING,\n    key_wrapping_specification.encoding_option)\n"
}