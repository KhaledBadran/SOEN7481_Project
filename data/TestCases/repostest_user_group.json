{
    "functionName": "test_user_group",
    "className": "TestUserGroup",
    "fileName": "/SUSE_&_Enceladus/mockboto3_&_tests_&_test_iam.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"Test user and group endpoints.\"\"\"\nself.client.create_user(UserName=self.user)\nmsg = (\n    'An error occurred (NoSuchEntity) when calling the AddUserToGroup operation: The group with name Admins cannot be found.'\n    )\nwith pytest.raises(MockBoto3ClientError) as e:\n    self.client.add_user_to_group(GroupName=self.group, UserName=self.user)\nassert msg == str(e.value)\nself.client.create_group(GroupName=self.group)\nself.client.add_user_to_group(GroupName=self.group, UserName=self.user)\nassert self.client.list_users()['Users'][0]['UserName'] == self.user\nassert self.client.list_groups()['Groups'][0]['GroupName'] == self.group\nassert self.group == self.client.list_groups_for_user(UserName=self.user)[\n    'Groups'][0]['GroupName']\nmsg = (\n    'An error occurred (EntityAlreadyExists) when calling the CreateGroup operation: Group with name Admins already exists.'\n    )\nwith pytest.raises(MockBoto3ClientError) as e:\n    self.client.create_group(GroupName=self.group)\nassert msg == str(e.value)\nmsg = (\n    'An error occurred (EntityAlreadyExists) when calling the CreateUser operation: User with name John already exists.'\n    )\nwith pytest.raises(MockBoto3ClientError) as e:\n    self.client.create_user(UserName=self.user)\nassert msg == str(e.value)\nresponse = self.client.get_user(UserName=self.user)\nassert response['User']['UserName'] == self.user\nresponse = self.client.list_groups_for_user(GroupName=self.group, UserName=\n    self.user)\nassert response['Groups'][0]['GroupName'] == self.group\nassert 1 == len(response['Groups'])\nself.client.remove_user_from_group(GroupName=self.group, UserName=self.user)\nassert 0 == len(self.client.list_groups_for_user(UserName=self.user)['Groups'])\nself.client.delete_group(GroupName=self.group)\nassert 0 == len(self.client.list_groups()['Groups'])\nself.client.delete_user(UserName=self.user)\nassert 0 == len(self.client.list_users()['Users'])\nmock_iam"
}