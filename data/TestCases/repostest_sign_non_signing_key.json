{
    "functionName": "test_sign_non_signing_key",
    "className": "TestKmipEngine",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_services_&_server_&_test_engine.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that the right error is thrown when a non-signing key\n        is specified in a Sign request.\n        \"\"\"\ne = engine.KmipEngine()\ne._data_store = self.engine\ne._data_store_session_factory = self.session_factory\ne._data_session = e._data_store_session_factory()\ne._is_allowed_by_operation_policy = mock.Mock(return_value=True)\ne._logger = mock.MagicMock()\ne._cryptography_engine.logger = mock.MagicMock()\nsigning_key = pie_objects.PrivateKey(enums.CryptographicAlgorithm.RSA, 1024,\n    b'0\\x82\\x02^\\x02\\x01\\x00\\x02\\x81\\x81\\x00\\xae\\xba\\xc1\\xb9\\xa1t1]\\'\\xcc< \\x1e!W\\x89Cr\\xd6E\\rL\\xf8\\x0c\\xe0\\xeb\\xcfQiQ\\x9b\\x9e\\x85P\\x03oJ\\xbe\\x0f\\xe4\\xf9O\\xbf\\x9c\\xca`o9t3eI\\x96\\x11\\xba?%\\xa9\\xa4qX\\xba\\x05!Ke_BX\\xa4\\xc2\\x95\\x16\\xbe\\xca\\xa5\\x83\\xf2\\xd2fPij\\xd6\\xfc\\x03\\xd5\\xb4}:\\xba\\x9cTy\\xfd\\xb0G})Q3\\x99\\xcb\\x19(<\\xcd\\xc2\\x8d\\xbb#\\xb7\\xc7\\xee\\xe4\\xb3]\\xc9@\\xda\\xca\\x00U\\xdc\\xd2\\x8fP;\\x02\\x03\\x01\\x00\\x01\\x02\\x81\\x81\\x00\\x92\\x89\\tB\\xd6\\xc6\\x8dG\\xa4\\xc2\\xc1\\x81\\xe6\\x02\\xecX\\xafz5|\\x7f\\xa5\\x17:%\\xbf]\\x84\\xd7 \\x9b\\xb4\\x1b\\xf5x\\x8b\\xf3P\\xe6\\x1f\\x8f~t!\\xd8\\x0f{\\xf7\\xe1\\x1d\\xe1J\\x0fS\\x1a\\xb1.\\xb2\\xd0\\xb8FB\\xeb]\\x18\\x11p\\xc2\\xc5\\x8a\\xab\\xbdgT\\x84/\\xaf\\xeeW\\xfe\\xf2\\xf5E\\xd0\\x9f\\xdcfI\\x02\\xe5[\\xac\\xedZ<m&\\xf3FXY\\xd3:3\\xa5US}\\xaf\"c\\xaa\\xef(5L\\x8bSQ1E\\xa7\\xe2(\\x82M\\xab\\xb1\\x02A\\x00\\xd3\\xaa#~\\x89B\\xb9=V\\xa6\\x81%L\\'\\xbe\\x1fJIl\\xa4\\xa8\\x7f\\xc0`K\\x0c\\xff\\x8f\\x98\\x0et-+\\xbb\\x91\\xb8\\x8a${n\\xbb\\xed\\x01E\\x8cJ\\xfd\\xb6\\x8c\\x0f\\x8cmJ7\\xe0(\\xc5\\xfc\\xb3\\xa6\\xa3\\x9c\\xa6O\\x02A\\x00\\xd3T\\x16\\x8ca\\x9c\\x83n\\x85\\x97\\xfe\\xf5\\x01\\x93\\xa6\\xf4&\\x07\\x95*\\x1c\\x87\\xeb\\xae\\x91\\xdbPC\\xb8\\x85Pr\\xb4\\xe9*\\xf5\\xdc\\xed\\xb2\\x14\\x87s\\xdf\\xbd!{\\xaf\\xc8\\xdc\\x9d\\xa8\\xae\\x8eu~rH\\xc1\\xe5\\x13\\xa1DhU\\x02A\\x00\\x90\\xfd\\xa2\\x14\\xc2\\xb7\\xb7&\\x82]\\xcag\\x9f463>\\xf2\\xee\\xfe\\x18\\x02r\\xe8C`\\xe3\\x0b\\x1d\\x11\\x01\\x9a\\x13\\xb4\\x08\\r\\x0el\\x115x{\\xd0|0\\xaf\\t\\xfe\\xeb\\x10\\x97\\x94!\\xdc\\x06\\xacG{d \\xc9@\\xbcW\\x02@\\x16M\\xe8\\xb7VR\\x13\\x99%\\xa6~5S\\xbeF\\xbf\\xbc\\x07\\xce\\xd9\\x8b\\xfbX\\x87\\xabCO|fLC\\xcag\\x87\\xb8\\x8e\\x0c\\x8cU\\xe0N\\xcf\\x8f\\x0c\\xc2,\\xf0\\xc7\\xadiBuq\\xf9\\xba\\xa7\\xcb@\\x13\\xb2w\\xb1\\xe5\\xa5\\x02A\\x00\\xca\\xe1P\\xf5\\xfaU\\x9b.,9DN\\x0f\\\\e\\x104\\t*\\xc9{\\xac\\x10\\xd5(\\xdd\\x15\\xdf\\xda%L\\xb0k\\xefA\\xe3\\x98\\x81\\xf7\\xe7Ii\\x10\\xb4eVY\\xdc\\x84-0\\xb9\\xae\\'Y\\xf3\\xc2\\xcdA\\xc7\\x9a6\\x84\\xec'\n    , enums.KeyFormatType.RAW, masks=[enums.CryptographicUsageMask.VERIFY])\nsigning_key.state = enums.State.ACTIVE\ne._data_session.add(signing_key)\ne._data_session.commit()\ne.data_session = e._data_store_session_factory()\nunique_identifier = str(signing_key.unique_identifier)\npayload = payloads.SignRequestPayload(unique_identifier=unique_identifier,\n    cryptographic_parameters=attributes.CryptographicParameters(\n    padding_method=enums.PaddingMethod.PSS, digital_signature_algorithm=\n    enums.DigitalSignatureAlgorithm.SHA1_WITH_RSA_ENCRYPTION), data=\n    b'\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\t\\x10\\x11\\x12\\x13\\x14\\x15\\x16')\nargs = payload,\nself.assertRaisesRegex(exceptions.PermissionDenied,\n    \"The Sign bit must be set in the signing key's cryptographic usage mask.\",\n    e._process_sign, *args)\n"
}