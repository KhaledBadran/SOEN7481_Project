{
    "functionName": "get_sub_cmap",
    "className": null,
    "fileName": "/1313e_&_CMasher/cmasher_&_utils.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"\n    Creates a :obj:`~matplotlib.cm.ListedColormap` object using the colors in\n    the range `[start, stop]` of the provided `cmap` and returns it.\n\n    This function can be used to create a colormap that only uses a portion of\n    an existing colormap.\n\n    .. versionadded:: 1.3.2\n\n    Parameters\n    ----------\n    cmap : str or :obj:`~matplotlib.colors.Colormap` object\n        The registered name of the colormap in :mod:`matplotlib.cm` or its\n        corresponding :obj:`~matplotlib.colors.Colormap` object.\n    start, stop : float\n        The normalized range of the colors in `cmap` that must be in the sub\n        colormap.\n\n    Returns\n    -------\n    sub_cmap : :obj:`~matplotlib.colors.ListedColormap`\n        The created colormap that uses a subset of the colors in `cmap`.\n\n    Example\n    -------\n    Creating a colormap using the first 80% of the 'rainforest' colormap::\n\n        >>> get_sub_cmap('cmr.rainforest', 0, 0.8)\n\n    Notes\n    -----\n    As it can create artifacts, this function does not interpolate between the\n    colors in `cmap` to fill up the space. Therefore, using values for `start`\n    and `stop` that are too close to each other, may result in a colormap that\n    contains too few different colors to be smooth.\n    It is recommended to use at least 128 different colors in a colormap for\n    optimal results (*CMasher* colormaps have 256 or 511 different colors, for\n    sequential or diverging colormaps respectively).\n    One can check the number of colors in a colormap with\n    :attr:`matplotlib.colors.Colormap.N`.\n\n    Any colormaps created using this function is not registered in either\n    *CMasher* or *MPL*.\n\n    \"\"\"\ncmap = mplcm.get_cmap(cmap)\ncolors = take_cmap_colors(cmap, None, cmap_range=(start, stop))\nsub_cmap = LC(colors, cmap.name + '_sub', N=len(colors))\nreturn sub_cmap\n"
}