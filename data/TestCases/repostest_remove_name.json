{
    "functionName": "test_remove_name",
    "className": "TestX509Certificate",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_pie_&_objects_&_test_x509_certificate.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Tests that a name can be removed from the list of names. This will\n        verify that the list of names is correct. It will verify that updating\n        this object removes the name from the database.\n        \"\"\"\nnames = ['bowser', 'frumpy', 'big fat cat']\nremove_index = 1\ncert = X509Certificate(self.bytes_a, name=names[0])\ncert.names.append(names[1])\ncert.names.append(names[2])\ncert.names.pop(remove_index)\nself.assertEquals(3, cert.name_index)\nexpected_names = list()\nexpected_mo_names = list()\nfor i, name in enumerate(names):\n    if i != remove_index:\n        expected_names.append(name)\n        expected_mo_names.append(sqltypes.ManagedObjectName(name, i))\nself.assertEquals(expected_names, cert.names)\nself.assertEquals(expected_mo_names, cert._names)\nSession = sessionmaker(bind=self.engine)\nsession = Session()\nsession.add(cert)\nsession.commit()\nsession = Session()\nget_obj = session.query(X509Certificate).filter(ManagedObject.\n    unique_identifier == cert.unique_identifier).one()\nsession.commit()\nself.assertEquals(expected_names, get_obj.names)\nself.assertEquals(expected_mo_names, get_obj._names)\n"
}