{
    "functionName": "run_orders",
    "className": null,
    "fileName": "/PyAbel_&_PyAbel/abel_&_tests_&_test_rbasex.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"\n    Test angular orders using Gaussian peaks by comparison with hansenlaw.\n    \"\"\"\nmaxorder = 6\nsigma = 5.0\nstep = 6 * sigma\nfor order in range(maxorder + 1):\n    rmax = int((order + 2) * step)\n    if odd:\n        if order == 0:\n            continue\n        height = 2 * rmax + 1\n    else:\n        if order % 2:\n            continue\n        height = rmax + 1\n    x = np.arange(float(rmax + 1))\n    y = rmax - np.arange(float(height))[:, (None)]\n    r = np.sqrt(x ** 2 + y ** 2)\n    r[rmax, 0] = np.inf\n    c = y / r\n    s = x / r\n    r[rmax, 0] = 0\n\n    def peak(i):\n        m = i\n        k = order - m & ~1\n        return c ** m * s ** k * np.exp(-(r - (i + 1) * step) ** 2 / (2 * \n            sigma ** 2))\n    src = peak(0)\n    for i in range(1, order + 1):\n        if not odd and i % 2:\n            continue\n        src += peak(i)\n    abel = hansenlaw_transform(src, direction='forward', hold_order=1)\n    param = ', order = {}, odd = {}, '.format(order, odd)\n    for mode in ['clean', 'cached']:\n        if mode == 'clean':\n            cache_cleanup()\n        proj, _ = rbasex_transform(src, origin=(rmax, 0), order=order, odd=\n            odd, direction='forward', out='fold')\n        assert_allclose(proj, abel, rtol=0.003, atol=0.4, err_msg=\n            '-> forward' + param + mode)\n    for reg in [None, ('L2', 1), ('diff', 1), ('SVD', 1 / rmax)]:\n        for mode in ['clean', 'cached']:\n            if mode == 'clean':\n                cache_cleanup()\n            recon, _ = rbasex_transform(abel, origin=(rmax, 0), order=order,\n                odd=odd, reg=reg, out='fold')\n            recon[rmax - 2:rmax + 3, :2] = 0\n            assert_allclose(recon, src, atol=0.03, err_msg='-> reg = ' +\n                str(reg) + param + mode)\n"
}