{
    "functionName": "test_infinite_certificate_chain",
    "className": "TestValidator",
    "fileName": "/named-data_&_PyNDN2/tests_&_integration_tests_&_test_validator.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "def processInterest(interest, onData, onTimeout, onNetworkNack):\n    try:\n        parentKey = self._fixture._keyChain.createKey(self._fixture.\n            _subIdentity)\n        requestedKey = self._fixture._subIdentity.getKey(interest.getName())\n        certificateName = Name(requestedKey.getName())\n        certificateName.append('looper').appendVersion(1)\n        certificate = CertificateV2()\n        certificate.setName(certificateName)\n        certificate.getMetaInfo().setType(ContentType.KEY)\n        certificate.getMetaInfo().setFreshnessPeriod(3600 * 1000.0)\n        certificate.setContent(requestedKey.getPublicKey())\n        params = SigningInfo(parentKey)\n        now = Common.getNowMilliseconds()\n        params.setValidityPeriod(ValidityPeriod(now - 10 * 24 * 3600 * \n            1000.0, now + 10 * 24 * 3600 * 1000.0))\n        self._fixture._keyChain.sign(certificate, params)\n        onData(interest, certificate)\n    except Exception as ex:\n        self.fail('Error in InfiniteCertificateChain: ' + repr(ex))\nself._fixture._face._processInterest = processInterest\ndata = Data(Name('/Security/V2/ValidatorFixture/Sub1/Sub2/Data'))\nself._fixture._keyChain.sign(data, SigningInfo(self._fixture._subIdentity))\nself._fixture._validator.setMaxDepth(40)\nself.assertEqual(40, self._fixture._validator.getMaxDepth())\nself.validateExpectFailure(data,\n    'Should fail since the certificate should be looped')\nself.assertEqual(40, len(self._fixture._face._sentInterests))\nself._fixture._face._sentInterests = []\nself._fixture._validator._setCacheNowOffsetMilliseconds(5 * 3600 * 1000.0)\nself._fixture._validator.setMaxDepth(30)\nself.assertEqual(30, self._fixture._validator.getMaxDepth())\nself.validateExpectFailure(data,\n    'Should fail since the certificate chain is infinite')\nself.assertEqual(30, len(self._fixture._face._sentInterests))\n"
}