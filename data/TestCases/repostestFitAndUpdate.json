{
    "functionName": "testFitAndUpdate",
    "className": "NumpyModelBridgeTest",
    "fileName": "/facebook_&_Ax/ax_&_modelbridge_&_tests_&_test_numpy_modelbridge.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "sq_feat = ObservationFeatures({})\nsq_data = self.observation_data[2]\nsq_obs = Observation(features=ObservationFeatures({}), data=self.\n    observation_data[2], arm_name='status_quo')\nma = NumpyModelBridge()\nma._training_data = self.observations + [sq_obs]\nmodel = mock.create_autospec(NumpyModel, instance=True)\nwith self.assertRaises(ValueError):\n    ma._fit(model, self.search_space, self.observation_features + [sq_feat],\n        self.observation_data + [sq_data])\nma._fit(model, self.search_space, self.observation_features, self.\n    observation_data)\nself.assertEqual(ma.parameters, ['x', 'y', 'z'])\nself.assertEqual(sorted(ma.outcomes), ['a', 'b'])\nXs = {'a': np.array([[0.2, 1.2, 3.0], [0.4, 1.4, 3.0], [0.6, 1.6, 3.0]]),\n    'b': np.array([[0.2, 1.2, 3.0], [0.4, 1.4, 3.0]])}\nYs = {'a': np.array([[1.0], [2.0], [3.0]]), 'b': np.array([[-1.0], [-2.0]])}\nYvars = {'a': np.array([[1.0], [2.0], [3.0]]), 'b': np.array([[6.0], [7.0]])}\nbounds = [(0.0, 1.0), (1.0, 2.0), (0.0, 5.0)]\nmodel_fit_args = model.fit.mock_calls[0][2]\nfor i, x in enumerate(model_fit_args['Xs']):\n    self.assertTrue(np.array_equal(x, Xs[ma.outcomes[i]]))\nfor i, y in enumerate(model_fit_args['Ys']):\n    self.assertTrue(np.array_equal(y, Ys[ma.outcomes[i]]))\nfor i, v in enumerate(model_fit_args['Yvars']):\n    self.assertTrue(np.array_equal(v, Yvars[ma.outcomes[i]]))\nself.assertEqual(model_fit_args['bounds'], bounds)\nself.assertEqual(model_fit_args['feature_names'], ['x', 'y', 'z'])\nma._update(observation_features=self.observation_features, observation_data\n    =self.observation_data)\nmodel_update_args = model.update.mock_calls[0][2]\nfor i, x in enumerate(model_update_args['Xs']):\n    self.assertTrue(np.array_equal(x, Xs[ma.outcomes[i]]))\nfor i, y in enumerate(model_update_args['Ys']):\n    self.assertTrue(np.array_equal(y, Ys[ma.outcomes[i]]))\nfor i, v in enumerate(model_update_args['Yvars']):\n    self.assertTrue(np.array_equal(v, Yvars[ma.outcomes[i]]))\nmock.patch('ax.modelbridge.numpy.NumpyModelBridge.__init__', return_value=None)"
}