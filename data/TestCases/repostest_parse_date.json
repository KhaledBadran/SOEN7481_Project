{
    "functionName": "test_parse_date",
    "className": null,
    "fileName": "/PlaidWeb_&_Publ/tests_&_test_utils.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\" tests for the date parser \"\"\"\nimport arrow\nfrom . import PublMock\napp = PublMock()\nwith app.app_context():\n\n    def make_date(year=None, month=None, day=None):\n        return arrow.Arrow(year=year or 1, month=month or 1, day=day or 1,\n            tzinfo=app.publ_config.timezone)\n    with pytest.raises(ValueError):\n        utils.parse_date('not a date')\n    with pytest.raises(ValueError):\n        utils.parse_date('12345678')\n    with pytest.raises(ValueError):\n        utils.parse_date('')\n    assert utils.parse_date('1978-06-14') == (make_date(1978, 6, 14), 'day',\n        utils.DAY_FORMAT)\n    assert utils.parse_date('19780614') == (make_date(1978, 6, 14), 'day',\n        utils.DAY_FORMAT)\n    assert utils.parse_date('1983-07') == (make_date(1983, 7), 'month',\n        utils.MONTH_FORMAT)\n    assert utils.parse_date('198307') == (make_date(1983, 7), 'month',\n        utils.MONTH_FORMAT)\n    assert utils.parse_date('1979') == (make_date(1979), 'year', utils.\n        YEAR_FORMAT)\n    assert utils.parse_date('19810505_w') == (make_date(1981, 5, 4), 'week',\n        utils.WEEK_FORMAT)\n"
}