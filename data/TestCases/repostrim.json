{
    "functionName": "trim",
    "className": null,
    "fileName": "/pmeal_&_OpenPNM/openpnm_&_topotools_&_topotools.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"\n    Remove pores or throats from the network.\n\n    Parameters\n    ----------\n    network : OpenPNM Network Object\n        The Network from which pores or throats should be removed\n\n    pores (or throats) : array_like\n        The indices of the of the pores or throats to be removed from the\n        network.\n\n    Notes\n    -----\n    This is an in-place operation, meaning the received Network object will\n    be altered directly.\n\n\n    Examples\n    --------\n    >>> import openpnm as op\n    >>> pn = op.network.Cubic(shape=[5, 5, 5])\n    >>> pn.Np\n    125\n    >>> pn.Nt\n    300\n    >>> op.topotools.trim(network=pn, pores=[1])\n    >>> pn.Np\n    124\n    >>> pn.Nt\n    296\n\n    \"\"\"\npores = network._parse_indices(pores)\nthroats = network._parse_indices(throats)\nPkeep = np.copy(network['pore.all'])\nTkeep = np.copy(network['throat.all'])\nif np.size(pores) > 0:\n    Pkeep[pores] = False\n    if not np.any(Pkeep):\n        raise Exception('Cannot delete ALL pores')\n    Ts = network.find_neighbor_throats(pores=~Pkeep, mode='union')\n    if len(Ts) > 0:\n        Tkeep[Ts] = False\nif np.size(throats) > 0:\n    Tkeep[throats] = False\n    if not np.any(Tkeep):\n        logger.info('Removing ALL throats from network')\n        for item in network.keys():\n            if item.split('.')[0] == 'throat':\n                del network[item]\n        network['throat.all'] = np.array([], ndmin=1)\n        return\nNp_old = network.Np\nNt_old = network.Nt\nPkeep_inds = np.where(Pkeep)[0]\nTkeep_inds = np.where(Tkeep)[0]\nPmap = np.ones((network.Np,), dtype=int) * -1\ntpore1 = network['throat.conns'][:, (0)]\ntpore2 = network['throat.conns'][:, (1)]\nfor obj in network.project[::-1]:\n    if obj.Np == Np_old and obj.Nt == Nt_old:\n        Ps = Pkeep_inds\n        Ts = Tkeep_inds\n    else:\n        Ps = obj.map_pores(pores=Pkeep, origin=network)\n        Ts = obj.map_throats(throats=Tkeep, origin=network)\n    for key in list(obj.keys()):\n        temp = obj.pop(key)\n        if key.split('.')[0] == 'throat':\n            obj.update({key: temp[Ts]})\n        if key.split('.')[0] == 'pore':\n            obj.update({key: temp[Ps]})\nPmap[Pkeep] = np.arange(0, np.sum(Pkeep))\nTnew1 = Pmap[tpore1[Tkeep]]\nTnew2 = Pmap[tpore2[Tkeep]]\nnetwork.update({'throat.conns': np.vstack((Tnew1, Tnew2)).T})\nnetwork._am.clear()\nnetwork._im.clear()\n"
}