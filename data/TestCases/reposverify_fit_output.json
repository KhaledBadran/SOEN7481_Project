{
    "functionName": "verify_fit_output",
    "className": "_FitXRFMapTesting",
    "fileName": "/NSLS-II_&_PyXRF/pyxrf_&_core_&_tests_&_test_map_processing.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "assert data_out.shape == (self.data_tmp.shape[1], self.data_tmp.shape[2], \n    self.n_lines + 4\n    ), f\"The shape of 'data_out' is incorrect: data_out.shape={data_out.shape}\"\nweights_estimated = data_out[:, :, 0:self.n_lines]\nbg_sum = data_out[:, :, (self.n_lines)]\nif not self.use_snip:\n    self.fitting_data.validate_output_weights(np.moveaxis(weights_estimated,\n        2, 0), decimal=10)\n    assert (bg_sum == 0.0).all(), f\"\"\"Baseline estimate is non-zero when snip method is disabled: \nbg_sum = {bg_sum}\nmin(bg_sum) = {np.min(bg_sum)}\nmax(bg_sum) = {np.max(bg_sum)}\"\"\"\nelse:\n    assert snip_param is not None, \"Test parameter `snip_param` must be provided if 'use_snip' is enabled\"\n    _data = np.moveaxis(self.data_tmp, 0, 2)\n    bg_sel = np.zeros(shape=_data.shape)\n    for ny in range(bg_sel.shape[0]):\n        for nx in range(bg_sel.shape[1]):\n            bg = snip_method_numba(_data[(ny), (nx), :], snip_param[\n                'e_offset'], snip_param['e_linear'], snip_param[\n                'e_quadratic'], width=snip_param['b_width'])\n            bg_sel[(ny), (nx), :] = bg\n    _data_no_bg = _data - bg_sel\n    weights_expected, rfactor, _ = fit_spectrum(_data_no_bg, self.spectra,\n        axis=2, method='nnls')\n    npt.assert_array_almost_equal(weights_estimated, weights_expected,\n        err_msg='Estimated weights are not equal to expected (use_snip==True)')\n    bg_sum_expected = np.sum(bg_sel, axis=2)\n    npt.assert_array_almost_equal(bg_sum, bg_sum_expected, err_msg=\n        'Baseline is estimated incorrectly (use_snip==True)')\nsm_total = np.sum(self.data_input, axis=2)\nsm_sel = np.sum(self.data_tmp, axis=0)\nnpt.assert_array_almost_equal(data_out[:, :, (self.n_lines + 2)], sm_sel,\n    err_msg='Total count for the selected region is computed incorrectly')\nnpt.assert_array_almost_equal(data_out[:, :, (self.n_lines + 3)], sm_total,\n    err_msg='Total count is computed incorrectly')\n"
}