{
    "functionName": "test_incorrect_input",
    "className": "TestClass",
    "fileName": "/kdecarlo_&_CG1D_rootprocessing/test_&_rootprocessing_&_test_RP.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"assert error when processing option not listed in code is given\"\"\"\nanalysis_list = ['RP_stitch']\noverride = 1\nbad_analysis_list_sp = ['sitch']\nbad_analysis_list_str = 'RP_stitch'\nbad_analysis_list_int = 4\nbad_override_str = 'override'\nbad_override_int = 4\nwd = self.data_path\nsys.path.append(wd)\nfrom RP_run import RP_run\nself.assertRaises(ValueError, RP_run, wd, wd + '/Sample_Data_unittest',\n    bad_analysis_list_sp, 0, 1)\nself.assertRaises(ValueError, RP_run, wd, wd + '/Sample_Data_unittest',\n    bad_analysis_list_str, 0, 1)\nself.assertRaises(ValueError, RP_run, wd, wd + '/Sample_Data_unittest',\n    bad_analysis_list_int, 0, 1)\nself.assertRaises(ValueError, RP_run, wd, wd + '/Sample_Data_unittest',\n    bad_analysis_list_sp, 0, 0)\nself.assertRaises(ValueError, RP_run, wd, wd + '/Sample_Data_unittest',\n    bad_analysis_list_str, 0, 0)\nself.assertRaises(ValueError, RP_run, wd, wd + '/Sample_Data_unittest',\n    bad_analysis_list_int, 0, 0)\nself.assertRaises(ValueError, RP_run, wd, wd + '/Sample_Data_unittest',\n    analysis_list, bad_override_str)\nself.assertRaises(ValueError, RP_run, wd, wd + '/Sample_Data_unittest',\n    analysis_list, bad_override_int)\n"
}