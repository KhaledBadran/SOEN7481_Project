{
    "functionName": "test_constraints_equality",
    "className": null,
    "fileName": "/bytesandbrains_&_ProcessOptimizer/ProcessOptimizer_&_tests_&_test_constraints.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "space_a = Space([(0.0, 5.0), (1.0, 5.0)])\nspace_b = Space([(0.0, 5.0), (1.0, 5.0)])\ncons_list_a = [Single(0, 4.0, 'real'), Single(1, 4.0, 'real')]\ncons_list_b = [Single(0, 4.0, 'real'), Single(1, 4.0, 'real')]\ncons_a = Constraints(cons_list_a, space_a)\ncons_b = Constraints(cons_list_b, space_b)\nassert_equal(cons_a, cons_b)\nspace_a = Space([(0.0, 5.0)])\nspace_b = Space([(0.0, 5.0), (1.0, 5.0)])\ncons_list_a = [Single(0, 4.0, 'real')]\ncons_list_b = [Single(0, 4.0, 'real'), Single(1, 4.0, 'real')]\ncons_a = Constraints(cons_list_a, space_a)\ncons_b = Constraints(cons_list_b, space_b)\nassert_not_equal(cons_a, cons_b)\nspace_a = Space([(0.0, 5.0)])\nspace_b = Space([(0, 5)])\ncons_list_a = [Single(0, 4.0, 'real')]\ncons_list_b = [Single(0, 4, 'integer')]\ncons_a = Constraints(cons_list_a, space_a)\ncons_b = Constraints(cons_list_b, space_b)\nassert_not_equal(cons_a, cons_b)\nspace_a = Space([(0.0, 5.0)])\nspace_b = Space([(0.0, 5.0)])\ncons_list_a = [Single(0, 4.0, 'real')]\ncons_list_b = [Single(0, 4.1, 'real')]\ncons_a = Constraints(cons_list_a, space_a)\ncons_b = Constraints(cons_list_b, space_b)\nassert_not_equal(cons_a, cons_b)\npytest.mark.fast_test"
}