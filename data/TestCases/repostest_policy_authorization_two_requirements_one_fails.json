{
    "functionName": "test_policy_authorization_two_requirements_one_fails",
    "className": null,
    "fileName": "/RobertoPrevato_&_GuardPost/tests_&_test_authorization.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "class ExampleOne(Requirement):\n\n    async def handle(self, context: AuthorizationContext):\n        context.succeed(self)\nclass ExampleTwo(Requirement):\n\n    async def handle(self, context: AuthorizationContext):\n        pass\nauth = get_strategy([Policy('user', ExampleOne(), ExampleTwo())])\n@auth(policy='user')\nasync def some_method():\n    return True\nwith raises(UnauthorizedError, match=\n    'The user is not authorized to perform the selected action. Failed requirements: ExampleTwo.'\n    ):\n    await some_method()\npytest.mark.asyncio"
}