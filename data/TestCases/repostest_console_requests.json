{
    "functionName": "test_console_requests",
    "className": "Test",
    "fileName": "/fabioz_&_PyDev.Debugger/tests_&_test_pydevconsole.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "self.original_stdout = sys.stdout\nsys.stdout = pydevd_io.IOBuf()\ntry:\n    client_port, _server_port = self.get_free_addresses()\n    client_thread = self.start_client_thread(client_port)\n    import time\n    time.sleep(0.3)\n    from _pydev_bundle import pydev_localhost\n    from _pydev_bundle.pydev_console_utils import CodeFragment\n    interpreter = pydevconsole.InterpreterInterface(pydev_localhost.\n        get_localhost(), client_port, threading.currentThread())\n    sys.stdout = pydevd_io.IOBuf()\n    interpreter.add_exec(CodeFragment(\"\"\"class Foo:\n    CONSTANT=1\n\"\"\"))\n    interpreter.add_exec(CodeFragment('foo=Foo()'))\n    interpreter.add_exec(CodeFragment('foo.__doc__=None'))\n    interpreter.add_exec(CodeFragment('val = %s()' % (raw_input_name,)))\n    interpreter.add_exec(CodeFragment('50'))\n    interpreter.add_exec(CodeFragment('print (val)'))\n    found = sys.stdout.getvalue().split()\n    try:\n        self.assertEqual(['50', 'input_request'], found)\n    except:\n        try:\n            self.assertEqual(['input_request'], found)\n        except:\n            self.assertEqual([u'50', u'input_request'], found[1:])\n            self.assertTrue(found[0].startswith(u'Out'))\n    comps = interpreter.getCompletions('foo.', 'foo.')\n    self.assertTrue(('CONSTANT', '', '', '3') in comps or ('CONSTANT', '',\n        '', '4') in comps, 'Found: %s' % comps)\n    comps = interpreter.getCompletions('\"\".', '\"\".')\n    self.assertTrue(('__add__', 'x.__add__(y) <==> x+y', '', '3') in comps or\n        ('__add__', '', '', '4') in comps or ('__add__',\n        'x.__add__(y) <==> x+y\\r\\nx.__add__(y) <==> x+y', '()', '2') in\n        comps or ('__add__',\n        \"\"\"x.\n__add__(y) <==> x+yx.\n__add__(y) <==> x+y\"\"\", '()', '2'), \n        'Did not find __add__ in : %s' % (comps,))\n    completions = interpreter.getCompletions('', '')\n    for c in completions:\n        if c[0] == 'AssertionError':\n            break\n    else:\n        self.fail('Could not find AssertionError')\n    completions = interpreter.getCompletions('Assert', 'Assert')\n    for c in completions:\n        if c[0] == 'RuntimeError':\n            self.fail('Did not expect to find RuntimeError there')\n    assert ('__doc__', None, '', '3') not in interpreter.getCompletions(\n        'foo.CO', 'foo.')\n    comps = interpreter.getCompletions('va', 'va')\n    assert ('val', '', '', '3') in comps or ('val', '', '', '4') in comps\n    interpreter.add_exec(CodeFragment('s = \"mystring\"'))\n    desc = interpreter.getDescription('val')\n    self.assertTrue(desc.find('str(object) -> string') >= 0 or desc ==\n        \"'input_request'\" or desc.find(\n        'str(string[, encoding[, errors]]) -> str') >= 0 or desc.find(\n        'str(Char* value)') >= 0 or desc.find(\"str(object='') -> string\") >=\n        0 or desc.find('str(value: Char*)') >= 0 or desc.find(\n        \"str(object='') -> str\") >= 0 or desc.find('The most base type') >=\n        0, 'Could not find what was needed in %s' % desc)\n    desc = interpreter.getDescription('val.join')\n    self.assertTrue(desc.find('S.join(sequence) -> string') >= 0 or desc.\n        find('S.join(sequence) -> str') >= 0 or desc.find(\n        'S.join(iterable) -> string') >= 0 or desc ==\n        \"<builtin method 'join'>\" or desc ==\n        '<built-in method join of str object>' or desc.find(\n        'str join(str self, list sequence)') >= 0 or desc.find(\n        'S.join(iterable) -> str') >= 0 or desc.find(\n        'join(self: str, sequence: list) -> str') >= 0 or desc.find(\n        'Concatenate any number of strings.') >= 0 or desc.find(\n        'bound method str.join') >= 0, 'Could not recognize: %s' % (desc,))\nfinally:\n    sys.stdout = self.original_stdout\n"
}