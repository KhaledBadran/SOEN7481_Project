{
    "functionName": "test_eff_charge_interpolation",
    "className": null,
    "fileName": "/mesonepigreco_&_CellConstructor/tests_&_TestEffChargeInterp_&_test_eff_interpol.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "total_path = os.path.dirname(os.path.abspath(__file__))\nos.chdir(total_path)\ndyn = CC.Phonons.Phonons('dyn', 32)\nfp = open('matdyn.in', 'r')\nlines = [l.strip() for l in fp.readlines()]\nfp.close()\nreading = False\nq_points = []\nq_prev = None\nn_prev = None\nfor l in lines:\n    if l == '/':\n        reading = True\n        continue\n    if not reading:\n        continue\n    data = l.split()\n    if len(data) != 4:\n        continue\n    current_q = np.array([float(data[0]), float(data[1]), float(data[2])])\n    if q_prev is not None:\n        q_x = np.linspace(q_prev[0], current_q[0], n_prev)\n        q_y = np.linspace(q_prev[1], current_q[1], n_prev)\n        q_z = np.linspace(q_prev[2], current_q[2], n_prev)\n        for i in range(n_prev):\n            q_vector = np.array([q_x[i], q_y[i], q_z[i]]) / dyn.alat\n            q_points.append(q_vector)\n    q_prev = current_q\n    n_prev = int(data[-1])\nprint('Preparing the interpolation...')\ntime1 = time.time()\nt2 = CC.ForceTensor.Tensor2(dyn.structure, dyn.structure.generate_supercell\n    (dyn.GetSupercell()), dyn.GetSupercell())\nt2.SetupFromPhonons(dyn)\ntime2 = time.time()\nprint('Time elapsed for preparing interpolation: {} s'.format(time2 - time1))\nt2.WriteOnFile('mat2R_cc.d3q', 'D3Q')\nt2.Center()\ntime3 = time.time()\nmasses = np.tile(dyn.structure.get_masses_array(), (3, 1)).T.ravel()\n_m_ = np.sqrt(np.outer(masses, masses))\nws = []\nprint('Interpolating...')\nfor iq, q in enumerate(q_points):\n    dynq = t2.Interpolate(-q)\n    fc = dynq / _m_\n    w2 = np.linalg.eigvalsh(fc)\n    freqs = np.sign(w2) * np.sqrt(np.abs(w2))\n    freqs *= CC.Units.RY_TO_CM\n    ws.append(freqs)\ntime4 = time.time()\nprint('Time elapsed for interpolating: {} s'.format(time4 - time3))\nnp.savetxt('cc.freqs.gp', np.array(ws), header=\n    'Frequencies interpolated with cellconstructor [cm-1]')\npytest.mark.skip(reason='Too long to be performed each commit')"
}