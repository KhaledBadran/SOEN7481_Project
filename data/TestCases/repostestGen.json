{
    "functionName": "testGen",
    "className": "NumpyModelBridgeTest",
    "fileName": "/facebook_&_Ax/ax_&_modelbridge_&_tests_&_test_numpy_modelbridge.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "optimization_config = OptimizationConfig(objective=Objective(Metric('a'),\n    minimize=True), outcome_constraints=[OutcomeConstraint(Metric('b'),\n    ComparisonOp.GEQ, 2, False)])\nma = NumpyModelBridge()\nma.parameters = ['x', 'y', 'z']\nma.outcomes = ['a', 'b']\nma.transforms = OrderedDict()\nobservation_features, weights, best_obsf, _ = ma._gen(n=3, search_space=\n    self.search_space, optimization_config=optimization_config,\n    pending_observations=self.pending_observations, fixed_features=\n    ObservationFeatures({'z': 3.0}), model_gen_options=self.model_gen_options)\ngen_args = mock_gen.mock_calls[0][2]\nself.assertEqual(gen_args['n'], 3)\nself.assertEqual(gen_args['bounds'], [(0.0, 1.0), (1.0, 2.0), (0.0, 5.0)])\nself.assertTrue(np.array_equal(gen_args['objective_weights'], np.array([-\n    1.0, 0.0])))\nself.assertTrue(np.array_equal(gen_args['outcome_constraints'][0], np.array\n    ([[0.0, -1.0]])))\nself.assertTrue(np.array_equal(gen_args['outcome_constraints'][1], np.array\n    ([[-2]])))\nself.assertTrue(np.array_equal(gen_args['linear_constraints'][0], np.array(\n    [[1.0, -1, 0.0], [-1.0, 0.0, -1.0]])))\nself.assertTrue(np.array_equal(gen_args['linear_constraints'][1], np.array(\n    [[0.0], [-3.5]])))\nself.assertEqual(gen_args['fixed_features'], {(2): 3.0})\nself.assertTrue(np.array_equal(gen_args['pending_observations'][0], np.\n    array([])))\nself.assertTrue(np.array_equal(gen_args['pending_observations'][1], np.\n    array([[0.6, 1.6, 3.0]])))\nself.assertEqual(gen_args['model_gen_options'], {'option': 'yes'})\nself.assertEqual(observation_features[0].parameters, {'x': 1.0, 'y': 2.0,\n    'z': 3.0})\nself.assertEqual(observation_features[1].parameters, {'x': 3.0, 'y': 4.0,\n    'z': 3.0})\nself.assertTrue(np.array_equal(weights, np.array([1.0, 2.0])))\noc2 = OptimizationConfig(objective=ScalarizedObjective(metrics=[Metric(name\n    ='a'), Metric(name='b')], minimize=True))\nobservation_features, weights, best_obsf, _ = ma._gen(n=3, search_space=\n    self.search_space, optimization_config=oc2, pending_observations=self.\n    pending_observations, fixed_features=ObservationFeatures({'z': 3.0}),\n    model_gen_options=self.model_gen_options)\ngen_args = mock_gen.mock_calls[1][2]\nself.assertEqual(gen_args['bounds'], [(0.0, 1.0), (1.0, 2.0), (0.0, 5.0)])\nself.assertIsNone(gen_args['outcome_constraints'])\nself.assertTrue(np.array_equal(gen_args['objective_weights'], np.array([-\n    1.0, -1.0])))\noc3 = OptimizationConfig(objective=MultiObjective(metrics=[Metric(name='a'),\n    Metric(name='b', lower_is_better=True)], minimize=True))\nsearch_space = SearchSpace(self.parameters)\nobservation_features, weights, best_obsf, _ = ma._gen(n=3, search_space=\n    search_space, optimization_config=oc3, pending_observations=self.\n    pending_observations, fixed_features=ObservationFeatures({'z': 3.0}),\n    model_gen_options=self.model_gen_options)\ngen_args = mock_gen.mock_calls[2][2]\nself.assertEqual(gen_args['bounds'], [(0.0, 1.0), (1.0, 2.0), (0.0, 5.0)])\nself.assertIsNone(gen_args['outcome_constraints'])\nself.assertTrue(np.array_equal(gen_args['objective_weights'], np.array([1.0,\n    -1.0])))\nsearch_space = SearchSpace(self.parameters[:2])\noptimization_config.outcome_constraints = []\nma.parameters = ['x', 'y']\nma._gen(3, search_space, {}, ObservationFeatures({}), None, optimization_config\n    )\ngen_args = mock_gen.mock_calls[3][2]\nself.assertEqual(gen_args['bounds'], [(0.0, 1.0), (1.0, 2.0)])\nself.assertIsNone(gen_args['outcome_constraints'])\nself.assertIsNone(gen_args['linear_constraints'])\nself.assertIsNone(gen_args['fixed_features'])\nself.assertIsNone(gen_args['pending_observations'])\noptimization_config = OptimizationConfig(objective=Objective(Metric('a'),\n    minimize=False), outcome_constraints=[OutcomeConstraint(Metric('b'),\n    ComparisonOp.GEQ, 2, False)])\nwith self.assertRaises(ValueError):\n    ma._gen(n=3, search_space=self.search_space, optimization_config=\n        optimization_config, pending_observations={}, fixed_features=\n        ObservationFeatures({}))\noptimization_config.objective.minimize = True\noptimization_config.outcome_constraints[0].relative = True\nwith self.assertRaises(ValueError):\n    ma._gen(n=3, search_space=self.search_space, optimization_config=\n        optimization_config, pending_observations={}, fixed_features=\n        ObservationFeatures({}))\nmock.patch('ax.modelbridge.numpy.NumpyModelBridge._model_gen', autospec=\n    True, return_value=(np.array([[1.0, 2.0, 3.0], [3.0, 4.0, 3.0]]), np.\n    array([1.0, 2.0]), {}, []))mock.patch('ax.modelbridge.numpy.NumpyModelBridge._model_best_point',\n    autospec=True, return_value=None)mock.patch('ax.modelbridge.numpy.NumpyModelBridge.__init__', return_value=None)"
}