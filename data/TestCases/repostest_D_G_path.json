{
    "functionName": "test_D_G_path",
    "className": null,
    "fileName": "/open-source-economics_&_OG-USA/ogusa_&_tests_&_test_fiscal.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "p = Specifications()\nnew_param_values = {'T': 320, 'S': 80, 'debt_ratio_ss': 1.2, 'tG1': 20,\n    'tG2': 256, 'alpha_T': [0.09], 'alpha_G': [0.05], 'rho_G': 0.1,\n    'g_y_annual': 0.03, 'baseline_spending': baseline_spending,\n    'budget_balance': budget_balance}\np.update_specifications(new_param_values, raise_errors=False)\nr_gov = np.ones(p.T + p.S) * 0.03\np.g_n = np.ones(p.T + p.S) * 0.02\nD0_baseline = 0.59\nGbaseline[0] = 0.05\nnet_revenue = Revenue\npension_amount = np.zeros_like(net_revenue)\ndg_fixed_values = Y, Revenue, pension_amount, TR, Gbaseline, D0_baseline\ntest_tuple = fiscal.D_G_path(r_gov, dg_fixed_values, p)\nfor i, v in enumerate(test_tuple):\n    assert np.allclose(v[:p.T], expected_tuple[i][:p.T])\npytest.mark.parametrize(\n    'baseline_spending,Y,TR,Revenue,Gbaseline,budget_balance,expected_tuple',\n    [(False, Y, TR, Revenue, Gbaseline, False, expected_tuple1), (True, Y,\n    TR, Revenue, Gbaseline, False, expected_tuple2), (False, Y, TR, Revenue,\n    Gbaseline, True, expected_tuple3)], ids=['baseline_spending = False',\n    'baseline_spending = True', 'balanced_budget = True'])"
}