{
    "functionName": "test_plot_split_value_histogram",
    "className": "TestBasic",
    "fileName": "/microsoft_&_LightGBM/tests_&_python_package_test_&_test_plotting.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "gbm0 = lgb.train(self.params, self.train_data, num_boost_round=10)\nax0 = lgb.plot_split_value_histogram(gbm0, 27)\nself.assertIsInstance(ax0, matplotlib.axes.Axes)\nself.assertEqual(ax0.get_title(),\n    'Split value histogram for feature with index 27')\nself.assertEqual(ax0.get_xlabel(), 'Feature split value')\nself.assertEqual(ax0.get_ylabel(), 'Count')\nself.assertLessEqual(len(ax0.patches), 2)\ngbm1 = lgb.LGBMClassifier(n_estimators=10, num_leaves=3, silent=True)\ngbm1.fit(self.X_train, self.y_train)\nax1 = lgb.plot_split_value_histogram(gbm1, gbm1.booster_.feature_name()[27],\n    figsize=(10, 5), title='Histogram for feature @index/name@ @feature@',\n    xlabel='x', ylabel='y', color='r')\nself.assertIsInstance(ax1, matplotlib.axes.Axes)\nself.assertEqual(ax1.get_title(), 'Histogram for feature name {}'.format(\n    gbm1.booster_.feature_name()[27]))\nself.assertEqual(ax1.get_xlabel(), 'x')\nself.assertEqual(ax1.get_ylabel(), 'y')\nself.assertLessEqual(len(ax1.patches), 2)\nfor patch in ax1.patches:\n    self.assertTupleEqual(patch.get_facecolor(), (1.0, 0, 0, 1.0))\nax2 = lgb.plot_split_value_histogram(gbm0, 27, bins=10, color=['r', 'y',\n    'g', 'b'], title=None, xlabel=None, ylabel=None)\nself.assertIsInstance(ax2, matplotlib.axes.Axes)\nself.assertEqual(ax2.get_title(), '')\nself.assertEqual(ax2.get_xlabel(), '')\nself.assertEqual(ax2.get_ylabel(), '')\nself.assertEqual(len(ax2.patches), 10)\nself.assertTupleEqual(ax2.patches[0].get_facecolor(), (1.0, 0, 0, 1.0))\nself.assertTupleEqual(ax2.patches[1].get_facecolor(), (0.75, 0.75, 0, 1.0))\nself.assertTupleEqual(ax2.patches[2].get_facecolor(), (0, 0.5, 0, 1.0))\nself.assertTupleEqual(ax2.patches[3].get_facecolor(), (0, 0, 1.0, 1.0))\nself.assertRaises(ValueError, lgb.plot_split_value_histogram, gbm0, 0)\nunittest.skipIf(not MATPLOTLIB_INSTALLED, 'matplotlib is not installed')"
}