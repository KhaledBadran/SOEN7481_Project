{
    "functionName": "test_task_feature",
    "className": "BotorchDefaultsTest",
    "fileName": "/facebook_&_Ax/ax_&_models_&_tests_&_test_botorch_defaults.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "x = [torch.zeros(2, 2)]\ny = [torch.zeros(2, 1)]\nyvars = [torch.ones(2, 1)]\nget_and_fit_model(Xs=x, Ys=y, Yvars=yvars, task_features=[1],\n    fidelity_features=[], metric_names=['L2NormMetric'], state_dict=None,\n    refit_model=False)\nself.assertEqual(get_model_mock.mock_calls[0][2]['task_feature'], 1)\nwith self.assertRaises(NotImplementedError):\n    get_and_fit_model(Xs=x, Ys=y, Yvars=yvars, task_features=[0, 1],\n        fidelity_features=[], metric_names=['L2NormMetric'], state_dict=\n        None, refit_model=False)\nwith self.assertRaises(NotImplementedError):\n    get_and_fit_model(Xs=x, Ys=y, Yvars=yvars, task_features=[],\n        fidelity_features=[-1, -2], metric_names=['L2NormMetric'],\n        state_dict=None, refit_model=False)\nwith self.assertRaises(NotImplementedError):\n    get_and_fit_model(Xs=x, Ys=y, Yvars=yvars, task_features=[1],\n        fidelity_features=[-1], metric_names=['L2NormMetric'], state_dict=\n        None, refit_model=False)\nmock.patch('ax.models.torch.botorch_defaults._get_model', wraps=_get_model)"
}