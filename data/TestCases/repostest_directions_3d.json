{
    "functionName": "test_directions_3d",
    "className": "TestVariogramstructured",
    "fileName": "/GeoStat-Framework_&_GSTools/tests_&_test_variogram_structured.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "x = np.linspace(0.0, 10.0, 20)\ny = np.linspace(0.0, 15.0, 25)\nz = np.linspace(0.0, 20.0, 30)\nrng = np.random.RandomState(1479373475)\nx_rand = rng.rand(len(x))\ny_rand = rng.rand(len(y))\nz_rand = rng.rand(len(z))\nfield_x = np.tile(x_rand.reshape((len(x), 1, 1)), (1, len(y), len(z)))\nfield_y = np.tile(y_rand.reshape((1, len(y), 1)), (len(x), 1, len(z)))\nfield_z = np.tile(z_rand.reshape((1, 1, len(z))), (len(x), len(y), 1))\ngamma_x_x = variogram.vario_estimate_structured(field_x, direction='x')\ngamma_x_y = variogram.vario_estimate_structured(field_x, direction='y')\ngamma_x_z = variogram.vario_estimate_structured(field_x, direction='z')\ngamma_y_x = variogram.vario_estimate_structured(field_y, direction='x')\ngamma_y_y = variogram.vario_estimate_structured(field_y, direction='y')\ngamma_y_z = variogram.vario_estimate_structured(field_y, direction='z')\ngamma_z_x = variogram.vario_estimate_structured(field_z, direction='x')\ngamma_z_y = variogram.vario_estimate_structured(field_z, direction='y')\ngamma_z_z = variogram.vario_estimate_structured(field_z, direction='z')\nself.assertAlmostEqual(gamma_x_y[1], 0.0)\nself.assertAlmostEqual(gamma_x_y[len(gamma_x_y) // 2], 0.0)\nself.assertAlmostEqual(gamma_x_y[-1], 0.0)\nself.assertAlmostEqual(gamma_x_z[1], 0.0)\nself.assertAlmostEqual(gamma_x_z[len(gamma_x_y) // 2], 0.0)\nself.assertAlmostEqual(gamma_x_z[-1], 0.0)\nself.assertAlmostEqual(gamma_y_x[1], 0.0)\nself.assertAlmostEqual(gamma_y_x[len(gamma_x_y) // 2], 0.0)\nself.assertAlmostEqual(gamma_y_x[-1], 0.0)\nself.assertAlmostEqual(gamma_y_z[1], 0.0)\nself.assertAlmostEqual(gamma_y_z[len(gamma_x_y) // 2], 0.0)\nself.assertAlmostEqual(gamma_y_z[-1], 0.0)\nself.assertAlmostEqual(gamma_z_x[1], 0.0)\nself.assertAlmostEqual(gamma_z_x[len(gamma_x_y) // 2], 0.0)\nself.assertAlmostEqual(gamma_z_x[-1], 0.0)\nself.assertAlmostEqual(gamma_z_y[1], 0.0)\nself.assertAlmostEqual(gamma_z_y[len(gamma_x_y) // 2], 0.0)\nself.assertAlmostEqual(gamma_z_y[-1], 0.0)\n"
}