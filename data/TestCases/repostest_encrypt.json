{
    "functionName": "test_encrypt",
    "className": "TestProxyKmipClient",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_pie_&_test_client.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that the client can encrypt data.\n        \"\"\"\nresult = {'data':\n    b'kw\\xb4\\xd60\\x06\\xde\\xe6\\x05\\xb1V\\xe2t\\x03\\x97\\x93X\\xde\\xb9\\xe7\\x15F\\x16\\xd9t\\x9d\\xec\\xbe\\xc0]&K'\n    , 'iv_counter_nonce': None, 'result_status': enums.ResultStatus.SUCCESS}\nclient = ProxyKmipClient()\nclient.open()\nclient.proxy.encrypt.return_value = result\nencrypted_data, iv_counter_nonce = client.encrypt(\n    b'7654321 Now is the time for \\x00', uid='1', cryptographic_parameters=\n    {'block_cipher_mode': enums.BlockCipherMode.CBC, 'padding_method':\n    enums.PaddingMethod.PKCS5, 'cryptographic_algorithm': enums.\n    CryptographicAlgorithm.BLOWFISH}, iv_counter_nonce=\n    b'\\xfe\\xdc\\xba\\x98vT2\\x10')\nself.assertEqual(result.get('data'), encrypted_data)\nself.assertEqual(result.get('iv_counter_nonce'), iv_counter_nonce)\nmock.patch('kmip.pie.client.KMIPProxy', mock.MagicMock(spec_set=KMIPProxy))"
}