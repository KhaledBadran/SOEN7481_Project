{
    "functionName": "test__make_analysis__uses_parallel_and_serial_front_edge_or_trials_for_mask",
    "className": "TestPhase",
    "fileName": "/Jammy2211_&_PyAutoCTI/test_&_unit_&_pipeline_&_test_phase.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "phase.parallel_front_edge_mask_rows = 0, 1\nphase.parallel_trails_mask_rows = None\nphase.serial_front_edge_mask_columns = None\nphase.serial_trails_mask_columns = None\nanalysis = phase.make_analysis(ci_datas=[ci_data], cti_settings=cti_settings)\nassert (analysis.ci_datas_full[0].mask == np.array([[True, False, False], [\n    False, False, False], [False, False, False]])).all()\nphase.parallel_front_edge_mask_rows = None\nphase.parallel_trails_mask_rows = 0, 2\nphase.serial_front_edge_mask_columns = None\nphase.serial_trails_mask_columns = None\nanalysis = phase.make_analysis(ci_datas=[ci_data], cti_settings=cti_settings)\nassert (analysis.ci_datas_full[0].mask == np.array([[False, False, False],\n    [True, False, False], [True, False, False]])).all()\nphase.parallel_front_edge_mask_rows = None\nphase.parallel_trails_mask_rows = None\nphase.serial_front_edge_mask_columns = 0, 1\nphase.serial_trails_mask_columns = None\nanalysis = phase.make_analysis(ci_datas=[ci_data], cti_settings=cti_settings)\nassert (analysis.ci_datas_full[0].mask == np.array([[True, False, False], [\n    False, False, False], [False, False, False]])).all()\nphase.parallel_front_edge_mask_rows = None\nphase.parallel_trails_mask_rows = None\nphase.serial_front_edge_mask_columns = None\nphase.serial_trails_mask_columns = 0, 2\nanalysis = phase.make_analysis(ci_datas=[ci_data], cti_settings=cti_settings)\nassert (analysis.ci_datas_full[0].mask == np.array([[False, True, True], [\n    False, False, False], [False, False, False]])).all()\nphase.parallel_front_edge_mask_rows = 0, 1\nphase.parallel_trails_mask_rows = 1, 2\nphase.serial_front_edge_mask_columns = 0, 1\nphase.serial_trails_mask_columns = 0, 2\nanalysis = phase.make_analysis(ci_datas=[ci_data], cti_settings=cti_settings)\nassert (analysis.ci_datas_full[0].mask == np.array([[True, True, True], [\n    False, False, False], [True, False, False]])).all()\n"
}