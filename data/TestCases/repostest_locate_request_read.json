{
    "functionName": "test_locate_request_read",
    "className": "TestRequestMessage",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_core_&_messages_&_test_messages.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "self.stream = BytearrayStream(self.locate)\nrequest_message = messages.RequestMessage()\nrequest_message.read(self.stream)\nrequest_header = request_message.request_header\nmsg = 'Bad request header type: expected {0}, received{0}'\nself.assertIsInstance(request_header, messages.RequestHeader, msg.format(\n    messages.RequestHeader, type(request_header)))\nprotocol_version = request_header.protocol_version\nmsg = 'Bad protocol version type: expected {0}, received {1}'\nself.assertIsInstance(protocol_version, contents.ProtocolVersion, msg.\n    format(contents.ProtocolVersion, type(protocol_version)))\nprotocol_version_major = protocol_version.major\nmsg = 'Bad protocol version major type: expected {0}, received {1}'\nexp_type = int\nrcv_type = type(protocol_version_major)\nself.assertIsInstance(protocol_version_major, exp_type, msg.format(exp_type,\n    rcv_type))\nmsg = 'Bad protocol version major value: expected {0}, received {1}'\nself.assertEqual(1, protocol_version_major, msg.format(1,\n    protocol_version_major))\nprotocol_version_minor = protocol_version.minor\nmsg = 'Bad protocol version minor type: expected {0}, received {1}'\nexp_type = int\nrcv_type = type(protocol_version_minor)\nself.assertIsInstance(protocol_version_minor, exp_type, msg.format(exp_type,\n    rcv_type))\nmsg = 'Bad protocol version minor value: expected {0}, received {1}'\nself.assertEqual(1, protocol_version_minor, msg.format(1,\n    protocol_version_minor))\nbatch_count = request_header.batch_count\nmsg = 'Bad batch count type: expected {0}, received {1}'\nself.assertIsInstance(batch_count, contents.BatchCount, msg.format(contents\n    .BatchCount, type(batch_count)))\nmsg = 'Bad batch count value: expected {0}, received {1}'\nself.assertEqual(1, batch_count.value, msg.format(1, batch_count.value))\nbatch_items = request_message.batch_items\nmsg = 'Bad batch items type: expected {0}, received {1}'\nself.assertEquals(1, len(batch_items), self.msg.format('batch items',\n    'length', 1, len(batch_items)))\nbatch_item = batch_items[0]\nmsg = 'Bad batch item type: expected {0}, received {1}'\nself.assertIsInstance(batch_item, messages.RequestBatchItem, msg.format(\n    messages.RequestBatchItem, type(batch_item)))\noperation = batch_item.operation\nmsg = 'Bad operation type: expected {0}, received {1}'\nself.assertIsInstance(operation, contents.Operation, msg.format(contents.\n    Operation, type(operation)))\nmsg = 'Bad operation value: expected {0}, received {1}'\nexp_value = enums.Operation.LOCATE\nrcv_value = operation.value\nself.assertEqual(exp_value, rcv_value, msg.format(exp_value, rcv_value))\nrequest_payload = batch_item.request_payload\nmsg = 'Bad request payload type: expected {0}, received {1}'\nexp_type = payloads.LocateRequestPayload\nrcv_type = type(request_payload)\nself.assertIsInstance(request_payload, exp_type, msg.format(exp_type, rcv_type)\n    )\nattributes = request_payload.attributes\nmsg = 'Bad attributes type: expected {0}, received {1}'\nexp_type = list\nrcv_type = type(attributes)\nself.assertIsInstance(attributes, exp_type, msg.format(exp_type, rcv_type))\nself.assertEqual(2, len(attributes), self.msg.format('attribute', 'length',\n    2, len(attributes)))\nattribute_a = attributes[0]\nself.assertIsInstance(attribute_a, objects.Attribute, self.msg.format(\n    'attribute', 'type', objects.Attribute, type(attribute_a)))\nattribute_name = attribute_a.attribute_name\nself.assertIsInstance(attribute_name, objects.Attribute.AttributeName, self\n    .msg.format('attribute name', 'type', objects.Attribute.AttributeName,\n    type(attribute_name)))\nself.assertEquals('Object Type', attribute_name.value, self.msg.format(\n    'attribute name', 'value', 'Object Type', attribute_name.value))\nattribute_value = attribute_a.attribute_value\nexp_type = attr.Enumeration\nrcv_type = type(attribute_value)\nself.assertIsInstance(attribute_value, exp_type, self.msg.format(\n    'attribute value', 'type', exp_type, rcv_type))\nself.assertEquals(attribute_value.value, enums.ObjectType.SYMMETRIC_KEY,\n    self.msg.format('ObjectType', 'value', enums.ObjectType.SYMMETRIC_KEY,\n    attribute_value.value))\nattribute_b = attributes[1]\nself.assertIsInstance(attribute_b, objects.Attribute, self.msg.format(\n    'attribute', 'type', objects.Attribute, type(attribute_a)))\nattribute_name = attribute_b.attribute_name\nself.assertIsInstance(attribute_name, objects.Attribute.AttributeName, self\n    .msg.format('attribute name', 'type', objects.Attribute.AttributeName,\n    type(attribute_name)))\nself.assertEquals('Name', attribute_name.value, self.msg.format(\n    'attribute name', 'value', 'Name', attribute_name.value))\nattribute_value = attribute_b.attribute_value\nexp_type = Name\nrcv_type = type(attribute_value)\nself.assertIsInstance(attribute_value, exp_type, self.msg.format(\n    'attribute value', 'type', exp_type, rcv_type))\nself.assertEquals('Key1', attribute_value.name_value.value, self.msg.format\n    ('name value', 'value', 'Key1', attribute_value.name_value.value))\n"
}