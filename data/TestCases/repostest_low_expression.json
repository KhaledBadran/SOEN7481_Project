{
    "functionName": "test_low_expression",
    "className": "TestsTSSpredator",
    "fileName": "/Sung-Huan_&_ANNOgesic/tests_&_test_tsspredator.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "ts.filter_low_expression = self.mock.mock_filter_low_expression\ngen_file(os.path.join(self.wigs, 'test1_forward.wig'), 'test_f')\ngen_file(os.path.join(self.wigs, 'test1_reverse.wig'), 'test_r')\ngen_file(os.path.join(self.wigs, 'test1_TEX_forward.wig'), 'test_f')\ngen_file(os.path.join(self.wigs, 'test1_TEX_reverse.wig'), 'test_r')\ngen_file(os.path.join(self.gffs, 'test_TSS.gff'), self.example.tss_file)\nos.mkdir(os.path.join(self.out, 'statistics'))\nos.mkdir(os.path.join(self.out, 'statistics/test'))\nlibs = ['test1_TEX_forward.wig:tex:1:a:+',\n    'test1_TEX_reverse.wig:tex:1:a:-', 'test1_forward.wig:notex:1:a:+',\n    'test1_reverse.wig:notex:1:a:-']\nargs = self.mock_args.mock()\nargs.manual = 'manual'\nargs.libs = libs\nargs.wig_folder = self.wigs\nargs.program = 'TSS'\nargs.cluster = 3\nself.tss._low_expression(args, self.gffs)\nshutil.rmtree('tmp')\ndatas = import_data(os.path.join(self.out,\n    'statistics/test/stat_test_low_expression_cutoff.csv'))\nself.assertEqual('\\n'.join(datas), \"\"\"Genome\tCutoff_coverage\ntest\t100\"\"\")\n"
}