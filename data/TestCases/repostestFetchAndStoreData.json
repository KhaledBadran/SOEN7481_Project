{
    "functionName": "testFetchAndStoreData",
    "className": "ExperimentTest",
    "fileName": "/facebook_&_Ax/ax_&_core_&_tests_&_test_experiment.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "n = 10\nexp = self._setupBraninExperiment(n)\nbatch = exp.trials[0]\nbatch_data = batch.fetch_data()\nself.assertEqual(len(batch_data.df), n)\nexp_data = exp.fetch_data()\nexp_data2 = exp.metrics['b'].fetch_experiment_data(exp)\nself.assertEqual(len(exp_data2.df), 4 * n)\nself.assertEqual(len(exp_data.df), 4 * n)\nself.assertEqual(len(exp.arms_by_name), 4 * n)\nself.assertEqual(len(exp.lookup_data_for_trial(0)[0].df), 0)\nt1 = exp.attach_data(batch_data)\nt2 = exp.attach_data(exp_data)\nfull_dict = exp.data_by_trial\nself.assertEqual(len(full_dict), 2)\nself.assertEqual(len(full_dict[0]), 2)\nself.assertEqual(len(exp.lookup_data_for_ts(t1).df), n)\nself.assertEqual(len(exp.lookup_data_for_trial(0)[0].df), n)\nself.assertEqual(len(exp.lookup_data_for_ts(t2).df), 4 * n)\nwith self.assertRaisesRegex(ValueError, '.* for metric'):\n    exp.attach_data(batch_data, combine_with_last_data=True)\nnew_data = Data(df=pd.DataFrame.from_records([{'arm_name': '0_0',\n    'metric_name': 'z', 'mean': 3, 'trial_index': 0}]))\nt3 = exp.attach_data(new_data, combine_with_last_data=True)\nself.assertEqual(len(full_dict[0]), 3)\nself.assertIn('z', exp.lookup_data_for_ts(t3).df['metric_name'].tolist())\nbatch._status = TrialStatus.ABANDONED\nself.assertEqual(len(batch.fetch_data().df), 0)\nself.assertEqual(len(exp.fetch_data().df), 3 * n)\nbatch._status = TrialStatus.CANDIDATE\nself.assertEqual(len(batch.fetch_data().df), n + 1)\nself.assertEqual(len(exp.fetch_data().df), 4 * n + 1)\nmetrics_in_data = set(batch.fetch_data().df['metric_name'].values)\nself.assertEqual(metrics_in_data, {'b', 'z'})\ndel exp._data_by_trial[0][t3]\nexp.remove_tracking_metric(metric_name='b')\nexp.add_tracking_metric(Metric(name='dummy'))\nbatch._status = TrialStatus.RUNNING\nself.assertEqual(batch.fetch_data(), exp.lookup_data_for_ts(t1))\nself.assertEqual(exp.fetch_data(), exp.lookup_data_for_ts(t2))\nmetrics_in_data = set(batch.fetch_data().df['metric_name'].values)\nself.assertEqual(metrics_in_data, {'b'})\nwith self.assertRaisesRegex(ValueError, 'Unexpected combination'):\n    exp.fetch_data([BraninMetric(name='b', param_names=['x1', 'x2']),\n        Metric(name='m')])\n"
}