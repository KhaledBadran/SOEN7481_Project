{
    "functionName": "test_dump_data",
    "className": null,
    "fileName": "/viebboy_&_PyGOP/test_&_utility_&_test_misc.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "tmp_dir = tmpdir.dirname\nmodel_name = 'test_model'\nif os.path.exists(os.path.join(tmp_dir, model_name)):\n    shutil.rmtree(os.path.join(tmp_dir, model_name))\nos.mkdir(os.path.join(tmp_dir, model_name))\nparams = {'tmp_dir': tmp_dir, 'model_name': model_name, 'loss': 'mse',\n    'metrics': ['mse', utility.mean_absolute_error_keras],\n    'special_metrics': [utility.mean_absolute_error_numpy], 'nodal_set': [\n    'multiplication', utility.custom_nodal], 'pool_set': ['summation'],\n    'activation_set': ['relu']}\ntrain_states = {'name': 'state1'}\ntrain_func = utility.get_generator\ntrain_data = [INPUT_DIM, OUTPUT_DIM, BATCH_SIZE, STEPS]\nval_func = None\nval_data = None\ntest_func = utility.get_generator\ntest_data = [INPUT_DIM, OUTPUT_DIM, BATCH_SIZE, STEPS]\nmisc.dump_data(params, train_states, train_func, train_data, val_func,\n    val_data, test_func, test_data)\nassert os.path.exists(os.path.join(tmp_dir, model_name, 'params.pickle'))\nassert os.path.exists(os.path.join(tmp_dir, model_name,\n    'train_states_tmp.pickle'))\nassert os.path.exists(os.path.join(tmp_dir, model_name, 'data.pickle'))\nassert not os.path.exists(os.path.join(tmp_dir, model_name,\n    'custom_loss.pickle'))\nassert os.path.exists(os.path.join(tmp_dir, model_name,\n    'custom_metrics.pickle'))\nassert os.path.exists(os.path.join(tmp_dir, model_name,\n    'special_metrics.pickle'))\nassert os.path.exists(os.path.join(tmp_dir, model_name,\n    'custom_operators.pickle'))\nwith open(os.path.join(tmp_dir, model_name, 'train_states_tmp.pickle'), 'rb'\n    ) as fid:\n    train_states_recovered = pickle.load(fid)\nassert train_states_recovered['name'] == 'state1'\nwith open(os.path.join(tmp_dir, model_name, 'params.pickle'), 'rb') as fid:\n    params_recovered = pickle.load(fid)\nassert params_recovered['metrics'] == []\nassert params_recovered['special_metrics'] == []\nassert params_recovered['nodal_set'] == []\nassert params_recovered['pool_set'] == []\nassert params_recovered['activation_set'] == []\ntrain_states['name'] = 'state2'\nmisc.dump_data(params, train_states, train_func, train_data, val_func,\n    val_data, test_func, test_data)\nwith open(os.path.join(tmp_dir, model_name, 'train_states_tmp.pickle'), 'rb'\n    ) as fid:\n    train_states_recovered = pickle.load(fid)\nassert train_states_recovered['name'] == 'state2'\n"
}