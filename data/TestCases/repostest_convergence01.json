{
    "functionName": "test_convergence01",
    "className": "TestRK4",
    "fileName": "/Hoeppke_&_PyODESolver/pyodesolver_&_method_RK4_test.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "Narr = [(2 ** n) for n in range(3, 12)]\nerr = []\nfor N in Narr:\n    t = np.linspace(0, 1, num=N)\n    y0 = np.array([np.pi])\n    exactSol = ExampleFunc01_solution(y0, t).T\n    RK4_solver = RK4(N, y0, [0, 1], ExampleFunc01())\n    solution = RK4_solver.generate()\n    numericSol = np.zeros_like(exactSol)\n    idx = 0\n    for time, val in solution:\n        numericSol[idx] = val\n        idx += 1\n    err.append(np.max(np.abs(exactSol - numericSol)))\nisOkay = True\nratio = []\nfor i in range(1, len(err)):\n    ratio.append(err[i - 1] / err[i])\n    if ratio[i - 1] < 0.9 * 2 ** 4:\n        isOkay = False\n    print((ratio[i - 1], err[i]))\nself.assertTrue(isOkay)\n"
}