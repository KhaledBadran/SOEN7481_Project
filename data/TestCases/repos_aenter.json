{
    "functionName": "_aenter",
    "className": "AsyncClient",
    "fileName": "/PRIArobotics_&_HedgehogClient/hedgehog_&_client_&_async_client.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "async with AsyncExitStack() as enter_stack:\n    if daemon and self._open_count == 0:\n        raise RuntimeError(\n            'The client is not active, first use of the client must not be daemon'\n            )\n    if self._shutdown:\n        raise RuntimeError('Cannot reuse a client after it was once shut down')\n    logger.debug('Entering as %s', 'daemon' if daemon else 'regular')\n    self._open_count += 1\n\n    @enter_stack.callback\n    def decrement_open_count():\n        self._open_count -= 1\n    if daemon:\n        self._daemon_count += 1\n\n        @enter_stack.callback\n        def decrement_daemon_count():\n            self._daemon_count -= 1\n    if self._open_count == 1:\n        logger.debug('Activating client...')\n        async with AsyncExitStack() as stack:\n\n            @asynccontextmanager\n            async def start() ->Component[None]:\n                component = await start_component(self.workload)\n                try:\n                    yield component\n                finally:\n                    await component.stop()\n            await stack.enter_async_context(start())\n            if threading.current_thread() is threading.main_thread():\n                loop = asyncio.get_event_loop()\n\n                def sigint_handler():\n                    task = loop.create_task(self.shutdown())\n                    exit_stack = (self._exit_stack if self._exit_stack is not\n                        None else stack)\n\n                    @exit_stack.push_async_callback\n                    async def await_shutdown():\n                        await task\n                stack.enter_context(shutdown_handler.register_async(signal.\n                    SIGINT, sigint_handler))\n            self._exit_stack = stack.pop_all()\n    enter_stack.pop_all()\n    logger.debug('Open: %d (%d daemon)', self._open_count, self._daemon_count)\n    return self\n"
}