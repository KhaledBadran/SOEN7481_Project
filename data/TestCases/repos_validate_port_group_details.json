{
    "functionName": "_validate_port_group_details",
    "className": "CITestProvisioning",
    "fileName": "/MichaelMcAleer_&_PyU4V/PyU4V_&_tests_&_ci_tests_&_test_pyu4v_ci_provisioning.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"Validate the contents of port group return dictionary.\n\n        :param port_group_name: name to validate -- str\n        :param port_group_details: return details of port group -- dict\n        :param director_port_list: director and port ids to validate -- list\n        :param ref_port_count: reference port count to check for -- int\n        :param ref_view_count: reference view count to check for -- int\n        :param ref_type: reference connection type to check for -- str\n        \"\"\"\nport_group_list = self.provisioning.get_port_group_list()\nself.assertIn(port_group_name, port_group_list)\nself.assertIn(constants.PORT_GROUP_ID, port_group_details)\nport_group_id = port_group_details[constants.PORT_GROUP_ID]\nself.assertEqual(port_group_name, port_group_id)\nself.assertIsInstance(port_group_id, str)\nself.assertIn(constants.SYMMETRIX_PORT_KEY, port_group_details)\nsymmetrix_port_key = port_group_details[constants.SYMMETRIX_PORT_KEY]\nself.assertIsInstance(symmetrix_port_key, list)\nfor port_key in symmetrix_port_key:\n    self.assertIsInstance(port_key, dict)\n    self.assertIn(constants.DIRECTOR_ID, port_key)\n    director_id = port_key[constants.DIRECTOR_ID]\n    self.assertIsNotNone(re.match(constants.DIRECTOR_SEARCH_PATTERN,\n        director_id))\n    self.assertIsInstance(director_id, str)\n    self.assertIn(constants.PORT_ID, port_key)\n    port_id = port_key[constants.PORT_ID]\n    self.assertIsNotNone(re.match(constants.PORT_SEARCH_PATTERN, port_id))\n    self.assertIsInstance(port_id, str)\n    if director_port_list:\n        director_port = self.provisioning.format_director_port(director_id,\n            port_id)\n        self.assertIn(director_port, director_port_list)\nself.assertIn(constants.NUM_OF_PORTS, port_group_details)\nnum_of_ports = port_group_details[constants.NUM_OF_PORTS]\nself.assertIsInstance(num_of_ports, int)\nself.assertEqual(ref_port_count, num_of_ports)\nself.assertIn(constants.NUM_OF_MASKING_VIEWS, port_group_details)\nnum_of_masking_views = port_group_details[constants.NUM_OF_MASKING_VIEWS]\nself.assertIsInstance(num_of_masking_views, int)\nself.assertEqual(ref_view_count, num_of_masking_views)\nself.assertIn(constants.TYPE, port_group_details)\nconnection_type = port_group_details[constants.TYPE]\nself.assertIsInstance(connection_type, str)\nself.assertEqual(ref_type, connection_type)\n"
}