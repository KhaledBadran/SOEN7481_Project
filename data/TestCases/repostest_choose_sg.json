{
    "functionName": "test_choose_sg",
    "className": "TestMigrate",
    "fileName": "/MichaelMcAleer_&_PyU4V/PyU4V_&_tests_&_unit_tests_&_test_migrate.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"Test for choose_sg.\"\"\"\nelement_dict, child_storage_group = self.utils.choose_storage_group(self.\n    data.rest_mv_1, [self.data.rest_sg_6, self.data.rest_sg_3], self.data.\n    m_portgroup, self.data.m_initiatorgroup, True)\nself.assertEqual('OS-myhost-SRP_1-Diamond-OLTP-I-CD-MV', element_dict[\n    'new_mv_name'])\nself.assertEqual('OS-myhost-SRP_1-Diamond-OLTP-I-CD-SG', element_dict[\n    'new_sg_name'])\nself.assertEqual('SRP_1', element_dict['srp'])\nself.assertEqual('Diamond', element_dict['service_level'])\nself.assertEqual('OLTP', element_dict['workload'])\nself.assertEqual('myportgroup', element_dict['port_group'])\nself.assertEqual('myinitiatorgroup', element_dict['initiator_group'])\nself.assertEqual('OS-myhost-SRP_1-DiamodOLTP-myportgroup-CD',\n    child_storage_group)\nmock.patch.object(migrate_utils.MigrateUtils, 'get_storage_group',\n    return_value=pcd.CommonData.m_storagegroup)mock.patch.object(migrate_utils.MigrateUtils, 'input', return_value='Y')"
}