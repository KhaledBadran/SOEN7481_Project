{
    "functionName": "test_quantized_uniform",
    "className": null,
    "fileName": "/Neuraxio_&_Neuraxle/testing_&_hyperparams_&_test_distributions.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "low = -10\nhigh = 10\nhd = Quantized(Uniform(low, high))\nsamples = get_many_samples_for(hd)\nfor s in samples:\n    assert type(s) == int\nsamples_mean = np.abs(np.mean(samples))\nassert samples_mean < 1.0\nassert min(samples) >= -10.0\nassert max(samples) <= 10.0\nassert abs(hd.pdf(-10) - 1 / 40) < 1e-06\nassert abs(hd.pdf(-9) - 1 / 20) < 1e-06\nassert abs(hd.pdf(0) - 1 / 20) < 1e-06\nassert abs(hd.pdf(9) - 1 / 20) < 1e-06\nassert abs(hd.pdf(10) - 1 / 40) < 1e-06\nassert abs(hd.cdf(-10) - 1 / 40) < 1e-06\nassert abs(hd.cdf(-9) - 1.5 / 20) < 1e-06\nassert abs(hd.cdf(0) - 10.5 / 20) < 1e-06\nassert abs(hd.cdf(9) - 19.5 / 20) < 1e-06\nassert abs(hd.cdf(9.2) - 19.5 / 20) < 1e-06\nassert hd.cdf(10) == 1.0\nassert hd.min() == low\nassert hd.max() == high\nassert abs(hd.mean() - 0.0) < 1e-06\nassert abs(hd.var() - 33.50000000000001) < 1e-06\nassert abs(hd.std() - 5.787918451395114) < 1e-06\nassert abs(hd.mean() - np.mean(samples)) < 0.1\nassert abs((hd.var() - np.var(samples)) / hd.var()) < 0.1\n"
}