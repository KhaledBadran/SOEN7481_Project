{
    "functionName": "test_sample_with_masks",
    "className": null,
    "fileName": "/mdbloice_&_Augmentor/tests_&_test_datapipeline.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "width = 80\nheight = 80\ntmpdir = tempfile.mkdtemp()\ntmps = []\nnum_of_images = 10\nfor i in range(num_of_images):\n    tmps.append(tempfile.NamedTemporaryFile(dir=tmpdir, prefix=str(i),\n        suffix='.JPEG'))\n    bytestream = io.BytesIO()\n    im = Image.new('RGB', (width, height))\n    im.save(bytestream, 'JPEG')\n    tmps[i].file.write(bytestream.getvalue())\n    tmps[i].flush()\nmask_tmpdir = tempfile.mkdtemp()\nmask_tmps = []\nfor i in range(num_of_images):\n    mask_tmps.append(tempfile.NamedTemporaryFile(dir=mask_tmpdir, prefix=\n        str(i), suffix='.JPEG'))\n    bytestream = io.BytesIO()\n    im = Image.new('RGB', (width, height))\n    im.save(bytestream, 'JPEG')\n    mask_tmps[i].file.write(bytestream.getvalue())\n    mask_tmps[i].flush()\noriginal_image_list = glob.glob(os.path.join(tmpdir, '*.JPEG'))\nmask_image_list = glob.glob(os.path.join(mask_tmpdir, '*.JPEG'))\nassert len(original_image_list) == len(mask_image_list)\nassert len(original_image_list) == num_of_images\nassert len(mask_image_list) == num_of_images\ncollated_paths = list(zip(original_image_list, mask_image_list))\nassert len(collated_paths) == num_of_images\nimage_class = 0 if random.random() <= 0.5 else 1\ny = [image_class] * num_of_images\nassert len(y) == num_of_images\nimages = [[np.asarray(Image.open(im)) for im in im_list] for im_list in\n    collated_paths]\nassert len(images) == num_of_images\np = Augmentor.DataPipeline(images, y)\np.rotate(probability=1, max_left_rotation=5, max_right_rotation=5)\nsample_size = 10\naugmented_images, augmented_labels = p.sample(sample_size)\nassert len(augmented_images) == sample_size\nassert len(augmented_labels) == sample_size\nprint(augmented_labels)\nfor i in range(0, len(augmented_labels)):\n    assert augmented_labels[i] == image_class\nfor im_list in augmented_images:\n    for im in im_list:\n        pil_image_from_array = Image.fromarray(im)\n        assert pil_image_from_array is not None\np = Augmentor.DataPipeline(images)\np.zoom_random(probability=1, percentage_area=0.5)\naugmented_images_no_labels = p.sample(sample_size)\nassert len(augmented_images_no_labels) == sample_size\nfor im_list_no_labels in augmented_images_no_labels:\n    for im in im_list_no_labels:\n        pil_image_from_array_no_lbl = Image.fromarray(im)\n        assert pil_image_from_array_no_lbl is not None\nfor i in range(len(tmps)):\n    tmps[i].close()\nfor i in range(len(tmps)):\n    mask_tmps[i].close()\nshutil.rmtree(tmpdir)\nshutil.rmtree(mask_tmpdir)\n"
}