{
    "functionName": "test_pipeline_preparation",
    "className": "TestsPipelineRunner",
    "fileName": "/MarniTausen_&_Greenotyper/test_sample.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "self.mainwindow.openPipeline('sample_data/sample.pipeline')\nself.mainwindow.openInputDirectory('sample_data/Cam41')\nself.assertEqual(self.mainwindow.inputdir, 'sample_data/Cam41')\nself.assertEqual(self.mainwindow.inputdir_label.text(), './sample_data/Cam41')\nself.mainwindow.openMaskDirectory('test_outputs')\nself.assertEqual(self.mainwindow.maskdir, 'test_outputs')\nself.assertEqual(self.mainwindow.maskout_label.text(), './test_outputs')\nself.assertTrue(self.mainwindow.mask_check.isChecked())\nself.mainwindow.openCropDirectory('test_outputs')\nself.assertEqual(self.mainwindow.cropdir, 'test_outputs')\nself.assertEqual(self.mainwindow.cropout_label.text(), './test_outputs')\nself.assertTrue(self.mainwindow.crop_check.isChecked())\nself.mainwindow.openSizeDirectory('test_outputs')\nself.assertEqual(self.mainwindow.sizedir, 'test_outputs')\nself.assertEqual(self.mainwindow.sizeout_label.text(), './test_outputs')\nself.assertTrue(self.mainwindow.size_check.isChecked())\nself.mainwindow.openGreennessDirectory('test_outputs')\nself.assertEqual(self.mainwindow.greennessdir, 'test_outputs')\nself.assertEqual(self.mainwindow.greennessout_label.text(), './test_outputs')\nself.assertTrue(self.mainwindow.greenness_check.isChecked())\nself.mainwindow.divide_by_day.setChecked(True)\nself.mainwindow.setOutputSettings(self.mainwindow.PL)\nself.mainwindow.updateCommandline()\nself.mainwindow.divide_by_individual.setChecked(True)\nself.mainwindow.relative_paths.setChecked(True)\nself.mainwindow.setOutputSettings(self.mainwindow.PL)\nself.mainwindow.updateCommandline()\nself.mainwindow.divide_by_day.setChecked(False)\nself.mainwindow.divide_by_individual.setChecked(False)\nself.mainwindow.no_subfolders.setChecked(True)\nself.mainwindow.generateWorkflowFile()\nself.mainwindow.use_bash.setChecked(False)\nself.mainwindow.use_gwf.setChecked(True)\nself.mainwindow.generateWorkflowFile()\n"
}