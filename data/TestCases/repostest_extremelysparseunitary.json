{
    "functionName": "test_extremelysparseunitary",
    "className": "Test_conjugated_kernel",
    "fileName": "/QE-Lab_&_OpenQL/tests_&_test_unitary.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "self.setUpClass()\nnum_qubits = 4\np = ql.Program('test_usingqx_extremelysparseunitary_newname', platform,\n    num_qubits)\nk = ql.Kernel('akernel', platform, num_qubits)\nmatrix = [-0.59111943 + 0.15726005j, -0.0 + 0.0j, -0.15509793 + 0.32339668j,\n    -0.0 + 0.0j, -0.33317562 + 0.00860528j, -0.0 + 0.0j, -0.5566068 + \n    0.27625195j, -0.0 + 0.0j, -0.0 + 0.0j, -0.0 + 0.0j, -0.0 + 0.0j, -0.0 +\n    0.0j, -0.0 + 0.0j, -0.0 + 0.0j, -0.0 + 0.0j, -0.0 + 0.0j, -0.0 + 0.0j, \n    -0.59111943 + 0.15726005j, -0.0 + 0.0j, -0.15509793 + 0.32339668j, -0.0 +\n    0.0j, -0.33317562 + 0.00860528j, -0.0 + 0.0j, -0.5566068 + 0.27625195j,\n    -0.0 + 0.0j, -0.0 + 0.0j, -0.0 + 0.0j, -0.0 + 0.0j, -0.0 + 0.0j, -0.0 +\n    0.0j, -0.0 + 0.0j, -0.0 + 0.0j, -0.00563624 - 0.59423429j, 0.0 - 0.0j, \n    0.46013302 + 0.40732351j, 0.0 + 0.0j, -0.30528142 - 0.21246605j, 0.0 - \n    0.0j, 0.25389832 + 0.25771317j, 0.0 + 0.0j, 0.0 + 0.0j, 0.0 + 0.0j, 0.0 +\n    0.0j, 0.0 + 0.0j, 0.0 + 0.0j, 0.0 + 0.0j, 0.0 + 0.0j, 0.0 + 0.0j, 0.0 -\n    0.0j, -0.00563624 - 0.59423429j, 0.0 + 0.0j, 0.46013302 + 0.40732351j, \n    0.0 - 0.0j, -0.30528142 - 0.21246605j, 0.0 + 0.0j, 0.25389832 + \n    0.25771317j, 0.0 + 0.0j, 0.0 + 0.0j, 0.0 + 0.0j, 0.0 + 0.0j, 0.0 + 0.0j,\n    0.0 + 0.0j, 0.0 + 0.0j, 0.0 + 0.0j, 0.01676811 - 0.33500121j, 0.0 + \n    0.0j, -0.46028079 - 0.49188018j, 0.0 - 0.0j, -0.18833511 + 0.15673318j,\n    -0.0 + 0.0j, 0.14043556 + 0.59492096j, 0.0 + 0.0j, 0.0 + 0.0j, 0.0 + \n    0.0j, 0.0 + 0.0j, 0.0 + 0.0j, -0.0 + 0.0j, -0.0 + 0.0j, 0.0 + 0.0j, 0.0 +\n    0.0j, 0.0 + 0.0j, 0.01676811 - 0.33500121j, 0.0 - 0.0j, -0.46028079 - \n    0.49188018j, -0.0 + 0.0j, -0.18833511 + 0.15673318j, 0.0 + 0.0j, \n    0.14043556 + 0.59492096j, 0.0 + 0.0j, 0.0 + 0.0j, 0.0 + 0.0j, 0.0 + \n    0.0j, -0.0 + 0.0j, -0.0 + 0.0j, 0.0 + 0.0j, 0.0 + 0.0j, 0.3733514 + \n    0.14423137j, 0.0 + 0.0j, -0.18039476 + 0.08589294j, -0.0 + 0.0j, -\n    0.80479128 + 0.20701926j, -0.0 + 0.0j, 0.06883732 - 0.32342174j, 0.0 + \n    0.0j, 0.0 + 0.0j, 0.0 + 0.0j, -0.0 + 0.0j, -0.0 + 0.0j, -0.0 + 0.0j, -\n    0.0 + 0.0j, 0.0 + 0.0j, 0.0 + 0.0j, 0.0 + 0.0j, 0.3733514 + 0.14423137j,\n    -0.0 + 0.0j, -0.18039476 + 0.08589294j, -0.0 + 0.0j, -0.80479128 + \n    0.20701926j, 0.0 + 0.0j, 0.06883732 - 0.32342174j, 0.0 + 0.0j, 0.0 + \n    0.0j, -0.0 + 0.0j, -0.0 + 0.0j, -0.0 + 0.0j, -0.0 + 0.0j, 0.0 + 0.0j, \n    0.0 + 0.0j, -0.0 + 0.0j, -0.0 + 0.0j, -0.0 + 0.0j, -0.0 + 0.0j, -0.0 + \n    0.0j, -0.0 + 0.0j, -0.0 + 0.0j, -0.0 + 0.0j, -0.59111943 + 0.15726005j,\n    -0.0 + 0.0j, -0.15509793 + 0.32339668j, -0.0 + 0.0j, -0.33317562 + \n    0.00860528j, -0.0 + 0.0j, -0.5566068 + 0.27625195j, -0.0 + 0.0j, -0.0 +\n    0.0j, -0.0 + 0.0j, -0.0 + 0.0j, -0.0 + 0.0j, -0.0 + 0.0j, -0.0 + 0.0j, \n    -0.0 + 0.0j, -0.0 + 0.0j, -0.0 + 0.0j, -0.59111943 + 0.15726005j, -0.0 +\n    0.0j, -0.15509793 + 0.32339668j, -0.0 + 0.0j, -0.33317562 + 0.00860528j,\n    -0.0 + 0.0j, -0.5566068 + 0.27625195j, 0.0 + 0.0j, 0.0 + 0.0j, 0.0 + \n    0.0j, 0.0 + 0.0j, 0.0 + 0.0j, 0.0 + 0.0j, 0.0 + 0.0j, 0.0 + 0.0j, -\n    0.00563624 - 0.59423429j, 0.0 - 0.0j, 0.46013302 + 0.40732351j, 0.0 + \n    0.0j, -0.30528142 - 0.21246605j, 0.0 - 0.0j, 0.25389832 + 0.25771317j, \n    0.0 + 0.0j, 0.0 + 0.0j, 0.0 + 0.0j, 0.0 + 0.0j, 0.0 + 0.0j, 0.0 + 0.0j,\n    0.0 + 0.0j, 0.0 + 0.0j, 0.0 + 0.0j, 0.0 - 0.0j, -0.00563624 - \n    0.59423429j, 0.0 + 0.0j, 0.46013302 + 0.40732351j, 0.0 - 0.0j, -\n    0.30528142 - 0.21246605j, 0.0 + 0.0j, 0.25389832 + 0.25771317j, 0.0 + \n    0.0j, 0.0 + 0.0j, 0.0 + 0.0j, 0.0 + 0.0j, -0.0 + 0.0j, -0.0 + 0.0j, 0.0 +\n    0.0j, 0.0 + 0.0j, 0.01676811 - 0.33500121j, 0.0 + 0.0j, -0.46028079 - \n    0.49188018j, 0.0 - 0.0j, -0.18833511 + 0.15673318j, -0.0 + 0.0j, \n    0.14043556 + 0.59492096j, 0.0 + 0.0j, 0.0 + 0.0j, 0.0 + 0.0j, 0.0 + \n    0.0j, 0.0 + 0.0j, -0.0 + 0.0j, -0.0 + 0.0j, 0.0 + 0.0j, 0.0 + 0.0j, 0.0 +\n    0.0j, 0.01676811 - 0.33500121j, 0.0 - 0.0j, -0.46028079 - 0.49188018j, \n    -0.0 + 0.0j, -0.18833511 + 0.15673318j, 0.0 + 0.0j, 0.14043556 + \n    0.59492096j, 0.0 + 0.0j, 0.0 + 0.0j, -0.0 + 0.0j, -0.0 + 0.0j, -0.0 + \n    0.0j, -0.0 + 0.0j, 0.0 + 0.0j, 0.0 + 0.0j, 0.3733514 + 0.14423137j, 0.0 +\n    0.0j, -0.18039476 + 0.08589294j, -0.0 + 0.0j, -0.80479128 + 0.20701926j,\n    -0.0 + 0.0j, 0.06883732 - 0.32342174j, 0.0 + 0.0j, 0.0 + 0.0j, 0.0 + \n    0.0j, -0.0 + 0.0j, -0.0 + 0.0j, -0.0 + 0.0j, -0.0 + 0.0j, 0.0 + 0.0j, \n    0.0 + 0.0j, 0.0 + 0.0j, 0.3733514 + 0.14423137j, -0.0 + 0.0j, -\n    0.18039476 + 0.08589294j, -0.0 + 0.0j, -0.80479128 + 0.20701926j, 0.0 +\n    0.0j, 0.06883732 - 0.32342174j]\nu1 = ql.Unitary('testname', matrix)\nu1.decompose()\nk.hadamard(0)\nk.hadamard(1)\nk.hadamard(2)\nk.hadamard(3)\nk.cnot(0, 1)\nk.cnot(0, 2)\nk.cnot(0, 3)\nk.cnot(1, 2)\nk.cnot(1, 3)\nk.cnot(2, 3)\nk.gate(u1, [0, 1, 2, 3])\np.add_kernel(k)\np.compile()\nqx.set(os.path.join(output_dir, p.name + '_initialqasmwriter_out.qasm'))\nqx.execute()\nc0 = qx.get_state()\nself.assertAlmostEqual(0.0625 * helper_prob(matrix[0] + matrix[1] + matrix[\n    2] + matrix[3] + matrix[4] + matrix[5] + matrix[6] + matrix[7] + matrix\n    [8] + matrix[9] + matrix[10] + matrix[11] + matrix[12] + matrix[13] +\n    matrix[14] + matrix[15]), helper_regex(c0)[0], 5)\nself.assertAlmostEqual(0.0625 * helper_prob(matrix[16] + matrix[17] +\n    matrix[18] + matrix[19] + matrix[20] + matrix[21] + matrix[22] + matrix\n    [23] + matrix[24] + matrix[25] + matrix[26] + matrix[27] + matrix[28] +\n    matrix[29] + matrix[30] + matrix[31]), helper_regex(c0)[1], 5)\nself.assertAlmostEqual(0.0625 * helper_prob(matrix[32] + matrix[33] +\n    matrix[34] + matrix[35] + matrix[36] + matrix[37] + matrix[38] + matrix\n    [39] + matrix[40] + matrix[41] + matrix[42] + matrix[43] + matrix[44] +\n    matrix[45] + matrix[46] + matrix[47]), helper_regex(c0)[2], 5)\nself.assertAlmostEqual(0.0625 * helper_prob(matrix[48] + matrix[49] +\n    matrix[50] + matrix[51] + matrix[52] + matrix[53] + matrix[54] + matrix\n    [55] + matrix[56] + matrix[57] + matrix[58] + matrix[59] + matrix[60] +\n    matrix[61] + matrix[62] + matrix[63]), helper_regex(c0)[3], 5)\nself.assertAlmostEqual(0.0625 * helper_prob(matrix[64] + matrix[65] +\n    matrix[66] + matrix[67] + matrix[68] + matrix[69] + matrix[70] + matrix\n    [71] + matrix[72] + matrix[73] + matrix[74] + matrix[75] + matrix[76] +\n    matrix[77] + matrix[78] + matrix[79]), helper_regex(c0)[4], 5)\nself.assertAlmostEqual(0.0625 * helper_prob(matrix[80] + matrix[81] +\n    matrix[82] + matrix[83] + matrix[84] + matrix[85] + matrix[86] + matrix\n    [87] + matrix[88] + matrix[89] + matrix[90] + matrix[91] + matrix[92] +\n    matrix[93] + matrix[94] + matrix[95]), helper_regex(c0)[5], 5)\nself.assertAlmostEqual(0.0625 * helper_prob(matrix[96] + matrix[97] +\n    matrix[98] + matrix[99] + matrix[100] + matrix[101] + matrix[102] +\n    matrix[103] + matrix[104] + matrix[105] + matrix[106] + matrix[107] +\n    matrix[108] + matrix[109] + matrix[110] + matrix[111]), helper_regex(c0\n    )[6], 5)\nself.assertAlmostEqual(0.0625 * helper_prob(matrix[112] + matrix[113] +\n    matrix[114] + matrix[115] + matrix[116] + matrix[117] + matrix[118] +\n    matrix[119] + matrix[120] + matrix[121] + matrix[122] + matrix[123] +\n    matrix[124] + matrix[125] + matrix[126] + matrix[127]), helper_regex(c0\n    )[7], 5)\nself.assertAlmostEqual(0.0625 * helper_prob(matrix[128] + matrix[129] +\n    matrix[130] + matrix[131] + matrix[132] + matrix[133] + matrix[134] +\n    matrix[135] + matrix[136] + matrix[137] + matrix[138] + matrix[139] +\n    matrix[140] + matrix[141] + matrix[142] + matrix[143]), helper_regex(c0\n    )[8], 5)\nself.assertAlmostEqual(0.0625 * helper_prob(matrix[144] + matrix[145] +\n    matrix[146] + matrix[147] + matrix[148] + matrix[149] + matrix[150] +\n    matrix[151] + matrix[152] + matrix[153] + matrix[154] + matrix[155] +\n    matrix[156] + matrix[157] + matrix[158] + matrix[159]), helper_regex(c0\n    )[9], 5)\nself.assertAlmostEqual(0.0625 * helper_prob(matrix[160] + matrix[161] +\n    matrix[162] + matrix[163] + matrix[164] + matrix[165] + matrix[166] +\n    matrix[167] + matrix[168] + matrix[169] + matrix[170] + matrix[171] +\n    matrix[172] + matrix[173] + matrix[174] + matrix[175]), helper_regex(c0\n    )[10], 5)\nself.assertAlmostEqual(0.0625 * helper_prob(matrix[176] + matrix[177] +\n    matrix[178] + matrix[179] + matrix[180] + matrix[181] + matrix[182] +\n    matrix[183] + matrix[184] + matrix[185] + matrix[186] + matrix[187] +\n    matrix[188] + matrix[189] + matrix[190] + matrix[191]), helper_regex(c0\n    )[11], 5)\nself.assertAlmostEqual(0.0625 * helper_prob(matrix[192] + matrix[193] +\n    matrix[194] + matrix[195] + matrix[196] + matrix[197] + matrix[198] +\n    matrix[199] + matrix[200] + matrix[201] + matrix[202] + matrix[203] +\n    matrix[204] + matrix[205] + matrix[206] + matrix[207]), helper_regex(c0\n    )[12], 5)\nself.assertAlmostEqual(0.0625 * helper_prob(matrix[208] + matrix[209] +\n    matrix[210] + matrix[211] + matrix[212] + matrix[213] + matrix[214] +\n    matrix[215] + matrix[216] + matrix[217] + matrix[218] + matrix[219] +\n    matrix[220] + matrix[221] + matrix[222] + matrix[223]), helper_regex(c0\n    )[13], 5)\nself.assertAlmostEqual(0.0625 * helper_prob(matrix[224] + matrix[225] +\n    matrix[226] + matrix[227] + matrix[228] + matrix[229] + matrix[230] +\n    matrix[231] + matrix[232] + matrix[233] + matrix[234] + matrix[235] +\n    matrix[236] + matrix[237] + matrix[238] + matrix[239]), helper_regex(c0\n    )[14], 5)\nself.assertAlmostEqual(0.0625 * helper_prob(matrix[240] + matrix[241] +\n    matrix[242] + matrix[243] + matrix[244] + matrix[245] + matrix[246] +\n    matrix[247] + matrix[248] + matrix[249] + matrix[250] + matrix[251] +\n    matrix[252] + matrix[253] + matrix[254] + matrix[255]), helper_regex(c0\n    )[15], 5)\n"
}