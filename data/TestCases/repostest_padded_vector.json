{
    "functionName": "test_padded_vector",
    "className": "TestWordVectors",
    "fileName": "/apmoore1_&_Bella/tests_&_test_word_vectors.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "hello_vec = np.asarray([0.5, 0.3, 0.4], dtype=np.float32)\nanother_vec = np.asarray([0.3333, 0.2222, 0.1111])\ntest_vectors = {'hello': hello_vec, 'another': another_vec}\npad_vec = np.asarray([-1, -1, -1], dtype=np.float32)\nword_vector = WordVectors(test_vectors, padding_value=-1)\nself.assertEqual('<pad>', word_vector.index2word[0])\nself.assertEqual('<unk>', word_vector.index2word[3])\nanno_unk_vec = np.array_equal(np.zeros(3), word_vector.lookup_vector('anno'))\nself.assertEqual(3, word_vector.word2index['anno'])\nself.assertEqual(True, anno_unk_vec)\nembedding_matrix = word_vector.embedding_matrix\npad_emb_vec = np.array_equal(pad_vec, embedding_matrix[0])\nunk_emb_vec = np.array_equal(np.zeros(3), embedding_matrix[3])\nhello_emb_vec = np.array_equal(hello_vec, embedding_matrix[1])\nself.assertEqual(True, pad_emb_vec)\nself.assertEqual(True, unk_emb_vec)\nself.assertEqual(True, hello_emb_vec)\nself.assertEqual('<pad>', word_vector.index2word[0])\nself.assertEqual('<unk>', word_vector.index2word[3])\nself.assertEqual(3, word_vector.unknown_index)\npad_vec = np.asarray([-1] * 100, dtype=np.float32)\nvo_zhang = VoVectors(skip_conf=True, padding_value=-1)\nvo_zhang_unk_index = vo_zhang.unknown_index\nembedding_matrix = vo_zhang.embedding_matrix\npad_emb_vec = np.array_equal(pad_vec, embedding_matrix[0])\nunk_emb_vec = np.array_equal(vo_zhang.unknown_vector, embedding_matrix[\n    vo_zhang_unk_index])\nunk_not_equal_pad = np.array_equal(embedding_matrix[0], vo_zhang.unknown_vector\n    )\nself.assertEqual(True, pad_emb_vec, msg='{} {}'.format(pad_vec,\n    embedding_matrix[0]))\nself.assertEqual(True, unk_emb_vec)\nself.assertEqual(True, hello_emb_vec)\nself.assertEqual(True, vo_zhang_unk_index != 0)\nself.assertEqual(True, vo_zhang_unk_index != 0)\nself.assertEqual(False, unk_not_equal_pad)\nself.assertEqual('<pad>', vo_zhang.index2word[0])\nself.assertEqual('<unk>', vo_zhang.index2word[vo_zhang_unk_index])\nword_vector = WordVectors(test_vectors)\nself.assertEqual('<unk>', word_vector.index2word[0])\nself.assertEqual('<unk>', word_vector.index2word[word_vector.unknown_index])\nself.assertEqual('<unk>', word_vector.padding_word)\npytest.mark.skip(reason='Takes a long time to test only add on large tests')"
}