{
    "functionName": "test_train_no_covariates",
    "className": "SemiSupervisedIOHMMTests",
    "fileName": "/Mogeng_&_IOHMM/tests_&_test_SemiSupervisedIOHMM.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "np.random.seed(0)\nself.model = SemiSupervisedIOHMM(num_states=4, max_EM_iter=100, EM_tol=1e-10)\nself.model.set_models(model_initial=CrossEntropyMNL(solver='newton-cg',\n    reg_method='l2'), model_transition=CrossEntropyMNL(solver='newton-cg',\n    reg_method='l2'), model_emissions=[OLS()])\nself.model.set_inputs(covariates_initial=[], covariates_transition=[],\n    covariates_emissions=[[]])\nself.model.set_outputs([['rt']])\nself.model.set_data([[self.data_speed, self.states]])\nself.model.train()\nnp.testing.assert_array_almost_equal(self.model.model_emissions[0][0].coef,\n    np.array([[0]]), decimal=1)\nnp.testing.assert_array_almost_equal(self.model.model_emissions[1][0].coef,\n    np.array([[1]]), decimal=1)\nnp.testing.assert_array_almost_equal(self.model.model_emissions[2][0].coef,\n    np.array([[6.4]]), decimal=1)\nnp.testing.assert_array_almost_equal(self.model.model_emissions[3][0].coef,\n    np.array([[5.5]]), decimal=1)\nnp.testing.assert_array_almost_equal(self.model.model_emissions[0][0].\n    dispersion, np.array([[0]]), decimal=2)\nnp.testing.assert_array_almost_equal(self.model.model_emissions[1][0].\n    dispersion, np.array([[0]]), decimal=2)\nnp.testing.assert_array_almost_equal(self.model.model_emissions[2][0].\n    dispersion, np.array([[0.051]]), decimal=2)\nnp.testing.assert_array_almost_equal(self.model.model_emissions[3][0].\n    dispersion, np.array([[0.032]]), decimal=2)\nnp.testing.assert_array_almost_equal(np.exp(self.model.model_transition[0].\n    predict_log_proba(np.array([[]]))), np.array([[0.4, 0.6, 0, 0]]), decimal=1\n    )\nnp.testing.assert_array_almost_equal(np.exp(self.model.model_transition[1].\n    predict_log_proba(np.array([[]]))), np.array([[0.19, 0.81, 0, 0]]),\n    decimal=2)\nnp.testing.assert_array_almost_equal(np.exp(self.model.model_transition[2].\n    predict_log_proba(np.array([[]]))), np.array([[0, 0, 0.93, 0.07]]),\n    decimal=2)\nnp.testing.assert_array_almost_equal(np.exp(self.model.model_transition[3].\n    predict_log_proba(np.array([[]]))), np.array([[0, 0, 0.11, 0.89]]),\n    decimal=2)\njson_dict = self.model.to_json('tests/IOHMM_models/SemiSupervisedIOHMM/')\nself.assertEqual(json_dict['data_type'], 'SemiSupervisedIOHMM')\nself.assertSetEqual(set(json_dict['properties'].keys()), set(['num_states',\n    'EM_tol', 'max_EM_iter', 'covariates_initial', 'covariates_transition',\n    'covariates_emissions', 'responses_emissions', 'model_initial',\n    'model_transition', 'model_emissions']))\nwith open('tests/IOHMM_models/SemiSupervisedIOHMM/model.json', 'w') as outfile:\n    json.dump(json_dict, outfile, indent=4, sort_keys=True)\n"
}