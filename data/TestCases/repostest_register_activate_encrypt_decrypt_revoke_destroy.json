{
    "functionName": "test_register_activate_encrypt_decrypt_revoke_destroy",
    "className": "TestKmipEngine",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_services_&_server_&_test_engine.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that a symmetric key can be registered with the server,\n        activated, used for encryption and decryption, revoked, and finally\n        destroyed without error.\n        \"\"\"\ne = engine.KmipEngine()\ne._data_store = self.engine\ne._data_store_session_factory = self.session_factory\ne._data_session = e._data_store_session_factory()\ne._is_allowed_by_operation_policy = mock.Mock(return_value=True)\ne._logger = mock.MagicMock()\nattribute_factory = factory.AttributeFactory()\nobject_type = enums.ObjectType.SYMMETRIC_KEY\ntemplate_attribute = objects.TemplateAttribute(attributes=[\n    attribute_factory.create_attribute(enums.AttributeType.NAME, attributes\n    .Name.create('Test Symmetric Key', enums.NameType.\n    UNINTERPRETED_TEXT_STRING)), attribute_factory.create_attribute(enums.\n    AttributeType.CRYPTOGRAPHIC_ALGORITHM, enums.CryptographicAlgorithm.\n    BLOWFISH), attribute_factory.create_attribute(enums.AttributeType.\n    CRYPTOGRAPHIC_LENGTH, 128), attribute_factory.create_attribute(enums.\n    AttributeType.CRYPTOGRAPHIC_USAGE_MASK, [enums.CryptographicUsageMask.\n    ENCRYPT, enums.CryptographicUsageMask.DECRYPT])])\nkey_bytes = b'\\x01#Eg\\x89\\xab\\xcd\\xef\\xf0\\xe1\\xd2\\xc3\\xb4\\xa5\\x96\\x87'\nsecret = secrets.SymmetricKey(key_block=objects.KeyBlock(key_format_type=\n    misc.KeyFormatType(enums.KeyFormatType.RAW), key_value=objects.KeyValue\n    (key_material=objects.KeyMaterial(key_bytes)), cryptographic_algorithm=\n    attributes.CryptographicAlgorithm(enums.CryptographicAlgorithm.BLOWFISH\n    ), cryptographic_length=attributes.CryptographicLength(128)))\npayload = payloads.RegisterRequestPayload(object_type=object_type,\n    template_attribute=template_attribute, managed_object=secret)\nresponse_payload = e._process_register(payload)\ne._data_session.commit()\ne._data_session = e._data_store_session_factory()\ne._logger.info.assert_any_call('Processing operation: Register')\nuuid = response_payload.unique_identifier\nself.assertEqual('1', uuid)\ne._logger.reset_mock()\npayload = payloads.ActivateRequestPayload(attributes.UniqueIdentifier(uuid))\nresponse_payload = e._process_activate(payload)\ne._data_session.commit()\ne._data_session = e._data_store_session_factory()\ne._logger.info.assert_any_call('Processing operation: Activate')\nactivated_uuid = response_payload.unique_identifier.value\nself.assertEqual(uuid, activated_uuid)\npayload = payloads.EncryptRequestPayload(unique_identifier=uuid,\n    cryptographic_parameters=attributes.CryptographicParameters(\n    block_cipher_mode=enums.BlockCipherMode.CBC, padding_method=enums.\n    PaddingMethod.PKCS5, cryptographic_algorithm=enums.\n    CryptographicAlgorithm.BLOWFISH), data=\n    b'7654321 Now is the time for \\x00', iv_counter_nonce=\n    b'\\xfe\\xdc\\xba\\x98vT2\\x10')\nresponse_payload = e._process_encrypt(payload)\ne._data_session.commit()\ne._data_session = e._data_store_session_factory()\ne._logger.info.assert_any_call('Processing operation: Encrypt')\nself.assertEqual(uuid, response_payload.unique_identifier)\nself.assertEqual(\n    b'kw\\xb4\\xd60\\x06\\xde\\xe6\\x05\\xb1V\\xe2t\\x03\\x97\\x93X\\xde\\xb9\\xe7\\x15F\\x16\\xd9t\\x9d\\xec\\xbe\\xc0]&K'\n    , response_payload.data)\npayload = payloads.DecryptRequestPayload(unique_identifier=uuid,\n    cryptographic_parameters=attributes.CryptographicParameters(\n    block_cipher_mode=enums.BlockCipherMode.CBC, padding_method=enums.\n    PaddingMethod.PKCS5, cryptographic_algorithm=enums.\n    CryptographicAlgorithm.BLOWFISH), data=response_payload.data,\n    iv_counter_nonce=b'\\xfe\\xdc\\xba\\x98vT2\\x10')\nresponse_payload = e._process_decrypt(payload)\ne._data_session.commit()\ne._data_session = e._data_store_session_factory()\ne._logger.info.assert_any_call('Processing operation: Decrypt')\nself.assertEqual(uuid, response_payload.unique_identifier)\nself.assertEqual(b'7654321 Now is the time for \\x00', response_payload.data)\npayload = payloads.RevokeRequestPayload(unique_identifier=attributes.\n    UniqueIdentifier(uuid))\nresponse_payload = e._process_revoke(payload)\ne._data_session.commit()\ne._data_session = e._data_store_session_factory()\ne._logger.info.assert_any_call('Processing operation: Revoke')\nself.assertEqual(uuid, response_payload.unique_identifier.value)\npayload = payloads.DestroyRequestPayload(unique_identifier=attributes.\n    UniqueIdentifier(uuid))\nresponse_payload = e._process_destroy(payload)\ne._data_session.commit()\ne._data_session = e._data_store_session_factory()\ne._logger.info.assert_any_call('Processing operation: Destroy')\nself.assertEqual(str(uuid), response_payload.unique_identifier.value)\nargs = payload,\nregex = 'Could not locate object: {0}'.format(uuid)\nsix.assertRaisesRegex(self, exceptions.ItemNotFound, regex, e.\n    _process_destroy, *args)\ne._data_session.commit()\ne._data_store_session_factory()\n"
}