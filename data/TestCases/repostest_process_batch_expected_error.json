{
    "functionName": "test_process_batch_expected_error",
    "className": "TestKmipEngine",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_services_&_server_&_test_engine.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test than an expected KMIP error is handled appropriately while\n        processing a batch of operations.\n        \"\"\"\ne = engine.KmipEngine()\ne._logger = mock.MagicMock()\ne._protocol_version = contents.ProtocolVersion(1, 0)\nbatch = list([messages.RequestBatchItem(operation=contents.Operation(enums.\n    Operation.DISCOVER_VERSIONS))])\nresults = e._process_batch(batch, enums.BatchErrorContinuationOption.STOP, True\n    )\nself.assertIsNotNone(results)\nself.assertEqual(1, len(results))\nresult = results[0]\nself.assertIsInstance(result, messages.ResponseBatchItem)\nself.assertIsNotNone(result.operation)\nself.assertEqual(enums.Operation.DISCOVER_VERSIONS, result.operation.value)\nself.assertIsNone(result.unique_batch_item_id)\nself.assertIsNotNone(result.result_status)\nself.assertEqual(enums.ResultStatus.OPERATION_FAILED, result.result_status.\n    value)\nself.assertIsNotNone(result.result_reason)\nself.assertEqual(enums.ResultReason.OPERATION_NOT_SUPPORTED, result.\n    result_reason.value)\nself.assertIsNotNone(result.result_message)\nerror_message = 'DiscoverVersions is not supported by KMIP {0}'.format(e.\n    _protocol_version)\nself.assertEqual(error_message, result.result_message.value)\nself.assertIsNone(result.async_correlation_value)\nself.assertIsNone(result.response_payload)\nself.assertIsNone(result.message_extension)\n"
}