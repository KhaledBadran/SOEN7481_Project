{
    "functionName": "test_locate_on_invalid_inputs",
    "className": "TestProxyKmipClient",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_pie_&_test_client.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that a TypeError exception is raised when wrong type\n        of arguments are given to locate operation.\n        \"\"\"\nmaximum_items = 10\nmaximum_items_invalid = '10'\nstorage_status_mask = 1\nstorage_status_mask_invalid = '1'\nobject_group_member = enums.ObjectGroupMember.GROUP_MEMBER_FRESH\nobject_group_member_invalid = enums.CryptographicUsageMask.MAC_GENERATE\nattributes = [obj.Attribute(attribute_name=obj.Attribute.AttributeName(\n    'Name'), attribute_index=obj.Attribute.AttributeIndex(0),\n    attribute_value=attr.Name(name_value=attr.Name.NameValue('Test Name'),\n    name_type=attr.Name.NameType(enums.NameType.UNINTERPRETED_TEXT_STRING))\n    ), obj.Attribute(attribute_name=obj.Attribute.AttributeName(\n    'Object Type'), attribute_value=attr.ObjectType(enums.ObjectType.\n    SYMMETRIC_KEY))]\nattributes_invalid0 = 123\nattributes_invalid1 = [obj.Attribute(attribute_name=obj.Attribute.\n    AttributeName('Name'), attribute_index=obj.Attribute.AttributeIndex(0),\n    attribute_value=attr.Name(name_value=attr.Name.NameValue('Test Name'),\n    name_type=attr.Name.NameType(enums.NameType.UNINTERPRETED_TEXT_STRING))\n    ), 123]\nuuid0 = 'aaaaaaaa-1111-2222-3333-ffffffffffff'\nuuid1 = 'bbbbbbbb-4444-5555-6666-gggggggggggg'\nunique_identifiers = [attr.UniqueIdentifier(uuid0), attr.UniqueIdentifier(\n    uuid1)]\nresult = results.LocateResult(contents.ResultStatus(enums.ResultStatus.\n    SUCCESS), uuids=unique_identifiers)\nargs = [maximum_items_invalid, storage_status_mask, object_group_member,\n    attributes]\nwith ProxyKmipClient() as client:\n    client.proxy.locate.return_value = result\n    self.assertRaises(TypeError, client.locate, *args)\nargs = [maximum_items, storage_status_mask_invalid, object_group_member,\n    attributes]\nwith ProxyKmipClient() as client:\n    client.proxy.locate.return_value = result\n    self.assertRaises(TypeError, client.locate, *args)\nargs = [maximum_items, storage_status_mask, object_group_member_invalid,\n    attributes]\nwith ProxyKmipClient() as client:\n    client.proxy.locate.return_value = result\n    self.assertRaises(TypeError, client.locate, *args)\nargs = [maximum_items, storage_status_mask, object_group_member,\n    attributes_invalid0]\nwith ProxyKmipClient() as client:\n    client.proxy.locate.return_value = result\n    self.assertRaises(TypeError, client.locate, *args)\nargs = [maximum_items, storage_status_mask, object_group_member,\n    attributes_invalid1]\nwith ProxyKmipClient() as client:\n    client.proxy.locate.return_value = result\n    self.assertRaises(TypeError, client.locate, *args)\nmock.patch('kmip.pie.client.KMIPProxy', mock.MagicMock(spec_set=KMIPProxy))"
}