{
    "functionName": "test_derive_key_using_nist_800_108c",
    "className": "TestProxyKmipClientIntegration",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_integration_&_services_&_test_proxykmipclient.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that the ProxyKmipClient can derive a new key using\n        NIST 800 108-C.\n        \"\"\"\nbase_id = self.client.register(objects.SymmetricKey(enums.\n    CryptographicAlgorithm.AES, 512,\n    b'\\xdd]\\xbdEY>\\xe2\\xac\\x13\\x97H\\xe7d[E\\x0f\"=/\\xf2\\x97\\xb7?\\xd7\\x1c\\xbc\\xeb\\xe7\\x1dAe<\\x95\\x0b\\x88P\\r\\xe52-\\x99\\xef\\x18\\xdf\\xdd0B\\x82\\x94\\xc4\\xb3\\tOL\\x95C4\\xe5\\x93\\xbd\\x98.\\xc6\\x14'\n    , masks=[enums.CryptographicUsageMask.DERIVE_KEY]))\nkey_id = self.client.derive_key(enums.ObjectType.SYMMETRIC_KEY, [base_id],\n    enums.DerivationMethod.NIST800_108_C, {'cryptographic_parameters': {\n    'hashing_algorithm': enums.HashingAlgorithm.SHA_512}, 'derivation_data':\n    b'\\xb5\\x0b\\x0c\\x96<k04\\xb8\\xcf\\x19\\xcd?\\\\N\\xbeOI\\x85\\xaf\\x0c\\x03\\xe5u\\xdbb\\xe6\\xfd\\xf1\\xec\\xfeO(\\xb9]|\\xe1m\\xf8XC$n\\x15W\\xce\\x95\\xbb&\\xcc\\x9a!\\x97K\\xbd.\\xb6\\x9e\\x83U'\n    }, cryptographic_length=128, cryptographic_algorithm=enums.\n    CryptographicAlgorithm.AES)\nkey = self.client.get(key_id)\nself.assertEqual(b'\\xe5\\x99;\\xf9\\xbd*\\xa1\\xc4WF\\x04.\\x12Y\\x81U', key.value)\nattribute_list = self.client.get_attribute_list(key_id)\nself.assertIn('Cryptographic Algorithm', attribute_list)\nself.assertIn('Cryptographic Length', attribute_list)\nresult_id, attribute_list = self.client.get_attributes(uid=key_id,\n    attribute_names=['Cryptographic Algorithm', 'Cryptographic Length'])\nself.assertEqual(key_id, result_id)\nself.assertEqual(2, len(attribute_list))\nattribute = attribute_list[0]\nself.assertEqual('Cryptographic Algorithm', attribute.attribute_name.value)\nself.assertEqual(enums.CryptographicAlgorithm.AES, attribute.\n    attribute_value.value)\nattribute = attribute_list[1]\nself.assertEqual('Cryptographic Length', attribute.attribute_name.value)\nself.assertEqual(128, attribute.attribute_value.value)\n"
}