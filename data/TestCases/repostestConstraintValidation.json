{
    "functionName": "testConstraintValidation",
    "className": "OptimizationConfigTest",
    "fileName": "/facebook_&_Ax/ax_&_core_&_tests_&_test_optimization_config.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "objective_constraint = OutcomeConstraint(metric=self.objective.metric, op=\n    ComparisonOp.GEQ, bound=0)\nwith self.assertRaises(ValueError):\n    OptimizationConfig(objective=self.objective, outcome_constraints=[\n        objective_constraint])\nduplicate_constraint = OutcomeConstraint(metric=self.outcome_constraint.\n    metric, op=self.outcome_constraint.op, bound=self.outcome_constraint.\n    bound + 1)\nwith self.assertRaises(ValueError):\n    OptimizationConfig(objective=self.objective, outcome_constraints=[self.\n        outcome_constraint, duplicate_constraint])\nopposing_constraint = OutcomeConstraint(metric=self.outcome_constraint.\n    metric, op=not self.outcome_constraint.op, bound=self.\n    outcome_constraint.bound)\nwith self.assertRaises(ValueError):\n    OptimizationConfig(objective=self.objective, outcome_constraints=self.\n        outcome_constraints + [opposing_constraint])\nadd_bound = 1 if self.outcome_constraint.op == ComparisonOp.LEQ else -1\nopposing_constraint = OutcomeConstraint(metric=self.outcome_constraint.\n    metric, op=not self.outcome_constraint.op, bound=self.\n    outcome_constraint.bound + add_bound)\nwith self.assertRaises(ValueError):\n    OptimizationConfig(objective=self.objective, outcome_constraints=[self.\n        outcome_constraint, opposing_constraint])\nopposing_constraint = OutcomeConstraint(metric=self.outcome_constraint.\n    metric, op=not self.outcome_constraint.op, bound=self.\n    outcome_constraint.bound + 1)\nconfig = OptimizationConfig(objective=self.objective, outcome_constraints=[\n    self.outcome_constraint, opposing_constraint])\nself.assertEqual(config.outcome_constraints, [self.outcome_constraint,\n    opposing_constraint])\n"
}