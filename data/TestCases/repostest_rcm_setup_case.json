{
    "functionName": "test_rcm_setup_case",
    "className": "TestSimulation",
    "fileName": "/kyleniemeyer_&_PyTeCK/pyteck_&_tests_&_test_simulation.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"Test that RCM case is set up properly.\n        \"\"\"\nfile_path = os.path.join('testfile_rcm.yaml')\nfilename = pkg_resources.resource_filename(__name__, file_path)\nproperties = ChemKED(filename, skip_validation=True)\nsimulations = create_simulations(filename, properties)\nassert len(simulations) == 1\nmechanism_filename = 'gri30.xml'\nSPEC_KEY = {'H2': 'H2', 'O2': 'O2', 'N2': 'N2', 'Ar': 'AR'}\ngas = ct.Solution(mechanism_filename)\nsim = simulations[0]\nsim.setup_case(mechanism_filename, SPEC_KEY)\nassert sim.apparatus == 'rapid compression machine'\nassert np.allclose(sim.time_end, 0.1)\nassert np.allclose(sim.gas.T, 297.4)\nassert np.allclose(sim.gas.P, 127722.83)\nmass_fracs = np.zeros(sim.gas.n_species)\nmass_fracs[sim.gas.species_index(SPEC_KEY['H2'])] = 0.125\nmass_fracs[sim.gas.species_index(SPEC_KEY['O2'])] = 0.0625\nmass_fracs[sim.gas.species_index(SPEC_KEY['N2'])] = 0.18125\nmass_fracs[sim.gas.species_index(SPEC_KEY['Ar'])] = 0.63125\nassert np.allclose(sim.gas.X, mass_fracs)\ntimes = np.arange(0, 0.097, 0.001)\nvolumes = np.array([547.669375, 546.608789894, 543.427034574, 538.124109043,\n    530.700013298, 521.15474734, 509.48831117, 495.700704787, 479.791928191,\n    461.761981383, 441.610864362, 420.399162234, 399.187460106, \n    377.975757979, 356.764055851, 335.552353723, 314.340651596, \n    293.128949468, 271.91724734, 250.705545213, 229.493843085, \n    208.282140957, 187.07043883, 165.858736702, 144.647034574, \n    123.435332447, 102.223630319, 81.0119281915, 63.3355097518, \n    52.7296586879, 49.194375, 49.7137623933, 50.2063762048, 50.6454851923, \n    51.0218564529, 51.3374097598, 51.6004693977, 51.8223244382, \n    52.0148449242, 52.1889350372, 52.3536351113, 52.5157124459, \n    52.679606373, 52.847616061, 53.0202402028, 53.1965961563, 53.3748623839,\n    53.5527022996, 53.7276399831, 53.8973687732, 54.0599826225, \n    54.2141273988, 54.3590751578, 54.4947289126, 54.6215686913, \n    54.7405518236, 54.8529815402, 54.960358219, 55.0642270863, \n    55.1660349836, 55.2670070646, 55.3680520985, 55.4697025392, \n    55.5720927915, 55.6749762728, 55.7777790517, 55.8796851466, \n    55.9797461155, 56.0770054561, 56.1706266985, 56.2600130036, \n    56.3449057053, 56.4254496625, 56.5022146282, 56.576164215, \n    56.6485675508, 56.7208534842, 56.7944133373, 56.8703658198, \n    56.9493069272, 57.0310785669, 57.1146023893, 57.1978399741, \n    57.2779572372, 57.3517897984, 57.416727196, 57.4721573687, 57.521638852,\n    57.5759967785, 57.6575701358, 57.8058719368, 58.0849611077, \n    58.5928651155, 59.4734357453, 60.9310671165, 63.2487551103, 66.8100309742])\nvolumes = volumes / volumes[0]\ndVdt = simulation.first_derivative(times, volumes)\nvelocities = np.zeros(times.size)\nfor i, time in enumerate(times):\n    velocities[i] = sim.reac.walls[0].vdot(time)\nassert np.allclose(dVdt, velocities)\nassert sim.n_vars == gas.n_species + 3\n"
}