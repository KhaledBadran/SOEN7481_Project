{
    "functionName": "test_broadcast_channel_buffer_full",
    "className": null,
    "fileName": "/PRIArobotics_&_HedgehogServer/tests_&_test_subscription.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "with assertPassed(3):\n    async with BroadcastChannel() as broadcast, trio.open_nursery() as nursery:\n        receive_a = broadcast.add_receiver(1)\n        receive_b = broadcast.add_receiver(1)\n        receive_c = broadcast.add_receiver(2)\n\n        @nursery.start_soon\n        async def sender():\n            with assertPassed(0):\n                await broadcast.send(1)\n            with assertPassed(2):\n                await broadcast.send(2)\n            with assertPassed(0):\n                await broadcast.send(3)\n            with assertPassed(1):\n                await broadcast.send(4)\n            await broadcast.aclose()\n\n        @nursery.start_soon\n        async def receiver_a():\n            async with Stream(receive_a) as s:\n                await trio.sleep(1)\n                await s.expect_after(0, 1)\n                await s.expect_after(0, 2)\n                await s.expect_after(1, 3)\n                await s.expect_after(0, 4)\n                await s.expect_exit_after(1)\n\n        @nursery.start_soon\n        async def receiver_b():\n            async with Stream(receive_b) as s:\n                await trio.sleep(2)\n                await s.expect_after(0, 1)\n                await s.expect_after(0, 2)\n                await s.expect_after(0, 3)\n                await s.expect_after(0, 4)\n                await s.expect_exit_after(1)\n\n        @nursery.start_soon\n        async def receiver_c():\n            async with Stream(receive_c) as s:\n                await s.expect_after(0, 1)\n                await trio.sleep(3)\n                await s.expect_after(0, 2)\n                await s.expect_after(0, 3)\n                await s.expect_after(0, 4)\n                await s.expect_exit_after(0)\npytest.mark.trio"
}