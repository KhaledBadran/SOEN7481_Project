{
    "functionName": "test_signature_verify_on_invalid_inputs",
    "className": "TestProxyKmipClient",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_pie_&_test_client.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that TypeError exception are raised when trying to verify\n        signatures with invalid parameters.\n        \"\"\"\nclient = ProxyKmipClient()\nclient.open()\nclient.proxy.signature_verify.return_value = {}\nargs = [[], b'']\nkwargs = {'uid': '1', 'cryptographic_parameters': {}}\nself.assertRaisesRegex(TypeError, 'Message must be bytes.', client.\n    signature_verify, *args, **kwargs)\nargs = [b'\\x01\\x02\\x03\\x04', []]\nkwargs = {'uid': '1', 'cryptographic_parameters': {}}\nself.assertRaisesRegex(TypeError, 'Signature must be bytes.', client.\n    signature_verify, *args, **kwargs)\nargs = [b'\\x01\\x02\\x03\\x04', b'\\xff\\xff\\xff\\xff']\nkwargs = {'uid': 0, 'cryptographic_parameters': {}}\nself.assertRaisesRegex(TypeError, 'Unique identifier must be a string.',\n    client.signature_verify, *args, **kwargs)\nargs = [b'\\x01\\x02\\x03\\x04', b'\\xff\\xff\\xff\\xff']\nkwargs = {'uid': '1', 'cryptographic_parameters': 'invalid'}\nself.assertRaisesRegex(TypeError,\n    'Cryptographic parameters must be a dictionary.', client.\n    signature_verify, *args, **kwargs)\nmock.patch('kmip.pie.client.KMIPProxy', mock.MagicMock(spec_set=KMIPProxy))"
}