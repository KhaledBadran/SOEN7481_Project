{
    "functionName": "test_ParamQuantEstimation_2",
    "className": null,
    "fileName": "/NSLS-II_&_PyXRF/pyxrf_&_core_&_tests_&_test_quant_analysis.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "standard_data = _standard_data_sample\nhome_dir = tmp_path\nconfig_dir = '.pyxrf'\nstandards_fln = 'quantitative_standards.yaml'\nfile_path = os.path.join(home_dir, config_dir, standards_fln)\nsave_xrf_standard_yaml_file(file_path, standard_data)\npqe = ParamQuantEstimation(home_dir=home_dir)\npqe.load_standards()\nassert pqe.standards_built_in is not None, 'Failed to load built-in standards'\nassert len(pqe.standards_built_in\n    ) > 0, 'The number of loaded built-in standards is ZERO'\nassert pqe.standards_custom is not None, 'Failed to load user-defined standards'\nassert len(pqe.standards_custom\n    ) > 0, 'The number of loaded user-defined standards is ZERO'\nfor st in pqe.standards_custom:\n    serial = st['serial']\n    assert pqe._find_standard_custom(st\n        ), f'Standard {serial} was not found in user-defined list'\n    assert not pqe._find_standard_built_in(st\n        ), f'Standard {serial} was found in built-in list'\n    assert pqe.find_standard(st), f'Standard {serial} was not found'\n    assert pqe.find_standard(st['name'], key='name'\n        ), f'Failed to find standard {serial} by name'\n    assert pqe.find_standard(st['serial'], key='serial'\n        ), f'Failed to find standard {serial} by serial number'\n    assert pqe.is_standard_custom(st\n        ), f'Standard {serial} was not identified as user-defined'\n    pqe.set_selected_standard(st)\n    assert pqe.standard_selected == st, f\"Can't select standard {serial}\"\nfor st in pqe.standards_built_in:\n    serial = st['serial']\n    assert not pqe._find_standard_custom(st\n        ), f'Standard {serial} was found in user-defined list'\n    assert pqe._find_standard_built_in(st\n        ), f'Standard {serial} was not found in built-in list'\n    assert pqe.find_standard(st), f'Standard {serial} was not found'\n    assert pqe.find_standard(st['name'], key='name'\n        ), f'Failed to find standard {serial} by name'\n    assert pqe.find_standard(st['serial'], key='serial'\n        ), f'Failed to find standard {serial} by serial number'\n    assert not pqe.is_standard_custom(st\n        ), f'Standard {serial} was identified as user-defined'\n    pqe.set_selected_standard(st)\n    assert pqe.standard_selected == st, f\"Can't select standard {serial}\"\nst = {'serial': '09876', 'name': 'Some name'}\nst_selected = pqe.set_selected_standard(st)\nassert st_selected == pqe.standard_selected, \"Return value of 'set_selected_standard' is incorrect\"\nassert st_selected == pqe.standards_custom[0], 'Incorrect standard is selected'\npqe.set_selected_standard()\nassert st_selected == pqe.standards_custom[0], 'Incorrect standard is selected'\npqe.standards_custom = None\npqe.set_selected_standard(st)\nassert pqe.standard_selected == pqe.standards_built_in[0\n    ], 'Incorrect standard is selected'\npqe.standards_built_in = None\npqe.set_selected_standard(st)\nassert pqe.standard_selected is None, 'Incorrect standard is selected'\n"
}