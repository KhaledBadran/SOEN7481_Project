{
    "functionName": "test_user_api",
    "className": null,
    "fileName": "/AO-StreetArt_&_PyAesel/test_&_test_transaction.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "print('Testing Users API')\nprint('Create User')\nuser = AeselApplicationUser()\nuser.username = 'test'\nuser.password = 'password'\nuser.email = 'test@test.com'\nuser.isAdmin = False\nuser.isActive = True\nuser.favoriteProjects = ['1']\nuser.favoriteScenes = ['2']\nuser_crt_resp = None\ntry:\n    user_crt_resp = transaction_client.create_user(user)\nexcept Exception as e:\n    print(e)\n    assert False\nprint(user_crt_resp)\nnew_key = user_crt_resp['id']\nprint('Get User')\nuser_get_resp = None\ntry:\n    user_get_resp = transaction_client.get_user(new_key)\nexcept Exception as e:\n    print(e)\n    assert False\nprint(user_get_resp)\nprint('Update User')\nuser_upd = AeselProject()\nuser_upd.email = 'cat3@test.com'\nuser_upd_resp = None\ntry:\n    user_upd_resp = transaction_client.update_user(new_key, user_upd)\nexcept Exception as e:\n    print(e)\n    assert False\nprint(user_upd_resp)\nprint('Query Users')\ntry:\n    user_query_resp = transaction_client.user_query(email='cat3@test.com')\nexcept Exception as e:\n    print(e)\n    assert False\nprint(user_query_resp)\nassert len(user_query_resp) > 0\nprint('Add a favorite project')\ntry:\n    transaction_client.add_favorite_project(new_key, '123')\nexcept Exception as e:\n    print(e)\n    assert False\nprint('Add a favorite scene')\ntry:\n    transaction_client.add_favorite_scene(new_key, 'abc')\nexcept Exception as e:\n    print(e)\n    assert False\nprint('Removing a favorite project')\ntry:\n    transaction_client.remove_favorite_project(new_key, '123')\nexcept Exception as e:\n    print(e)\n    assert False\nprint('Removing a favorite scene')\ntry:\n    transaction_client.remove_favorite_scene(new_key, 'abc')\nexcept Exception as e:\n    print(e)\n    assert False\nprint('Making user an administrator')\ntry:\n    transaction_client.make_user_admin(new_key)\nexcept Exception as e:\n    print(e)\n    assert False\nprint('Making user a non-administrator')\ntry:\n    transaction_client.remove_admin_rights(new_key)\nexcept Exception as e:\n    print(e)\n    assert False\nprint('Deactivating User')\ntry:\n    transaction_client.deactivate_user(new_key)\nexcept Exception as e:\n    print(e)\n    assert False\nprint('Activating User')\ntry:\n    transaction_client.activate_user(new_key)\nexcept Exception as e:\n    print(e)\n    assert False\nprint('Delete User')\nuser_del_resp = None\ntry:\n    user_del_resp = transaction_client.delete_user(new_key)\nexcept Exception as e:\n    print(e)\n    assert False\nprint(user_del_resp)\n"
}