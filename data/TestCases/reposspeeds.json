{
    "functionName": "speeds",
    "className": null,
    "fileName": "/tommyod_&_Efficient-Apriori/efficient_apriori_&_tests_&_test_rules.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"\n    Test the naive rule finder vs. the simple one from the paper.\n    \"\"\"\nimport random\nrandom.seed(123456)\ntransactions = generate_transactions(num_transactions=random.randint(250, \n    500), unique_items=random.randint(8, 9), items_row=(10, 50))\nitemsets, num_transactions = itemsets_from_transactions(transactions, 0.1)\nimport time\nmin_conf = 0.5\nprint(itemsets)\nst = time.perf_counter()\nrules_apri = generate_rules_apriori(itemsets, min_conf, num_transactions)\nrules_apri = list(rules_apri)\ntime_formatted = round(time.perf_counter() - st, 40)\nprint('Fast apriori ran in {} s'.format(time_formatted))\nst = time.perf_counter()\nrules_simple = generate_rules_simple(itemsets, min_conf, num_transactions)\nrules_simple = list(rules_simple)\ntime_formatted = round(time.perf_counter() - st, 40)\nprint('Simple apriori ran in {} s'.format(time_formatted))\nst = time.perf_counter()\nrules_naive = generate_rules_naively(itemsets, min_conf, num_transactions)\nrules_naive = list(rules_naive)\ntime_formatted = round(time.perf_counter() - st, 40)\nprint('Naive apriori ran in {} s'.format(time_formatted))\n"
}