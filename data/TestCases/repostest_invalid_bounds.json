{
    "functionName": "test_invalid_bounds",
    "className": null,
    "fileName": "/GIlunga_&_JSON-Configparser/tests_&_test_validations.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "value, typedef = value_typedef\nwith pytest.raises(ValueError):\n    validations.validate_argument(value, typedef)\npytest.mark.parametrize('value_typedef', [(5, type_defaults.\n    TypeDefaultBounds('a', int, bound_obj=invalid_bounds_obj)), (5.5,\n    type_defaults.TypeDefaultBounds('a', float, bound_obj=\n    invalid_bounds_obj)), ([5, 5], type_defaults.TypeDefaultBounds('a',\n    List[int], bound_obj=invalid_bounds_obj)), ([[5, 5], [5, 5]],\n    type_defaults.TypeDefaultBounds('a', List[List[int]], bound_obj=\n    invalid_bounds_obj)), ([5.5, 5.5], type_defaults.TypeDefaultBounds('a',\n    List[float], bound_obj=invalid_bounds_obj)), ({'a': 5, 'b': 5},\n    type_defaults.TypeDefaultBounds('a', Dict[str, int], bound_obj=\n    invalid_bounds_obj)), ([{'a': 5, 'b': 5}, {'a': 5, 'b': 5}],\n    type_defaults.TypeDefaultBounds('a', List[Dict[str, int]], bound_obj=\n    invalid_bounds_obj)), ({'a': 5.5, 'b': 5.5}, type_defaults.\n    TypeDefaultBounds('a', Dict[str, float], bound_obj=invalid_bounds_obj))])"
}