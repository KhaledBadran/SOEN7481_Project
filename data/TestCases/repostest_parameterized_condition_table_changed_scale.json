{
    "functionName": "test_parameterized_condition_table_changed_scale",
    "className": "TestGetSimulationToOptimizationParameterMapping",
    "fileName": "/PEtab-dev_&_PEtab/tests_&_test_parameter_mapping.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"Test overriding a dynamic parameter `overridee` with\n        - a log10 parameter to be estimated (condition 1)\n        - lin parameter not estimated (condition2)\n        - log10 parameter not estimated (condition 3)\n        - constant override (condition 4)\"\"\"\noverridee_id = 'overridee'\ndocument, model = minimal_sbml_model\np = model.createParameter()\np.setId(overridee_id)\np.setValue(2.0)\nassert petab.get_model_parameters(model) == [overridee_id]\nassert petab.get_model_parameters(model, with_values=True) == {overridee_id:\n    2.0}\ncondition_df = pd.DataFrame(data={CONDITION_ID: ['condition1', 'condition2',\n    'condition3', 'condition4'], overridee_id: ['dynamicOverrideLog10',\n    'fixedOverrideLin', 'fixedOverrideLog10', 10.0]})\ncondition_df.set_index('conditionId', inplace=True)\nmeasurement_df = pd.DataFrame(data={SIMULATION_CONDITION_ID: ['condition1',\n    'condition2', 'condition3', 'condition4'], OBSERVABLE_ID: ['obs1',\n    'obs2', 'obs1', 'obs2'], OBSERVABLE_PARAMETERS: '', NOISE_PARAMETERS: ''})\nparameter_df = pd.DataFrame(data={PARAMETER_ID: ['dynamicOverrideLog10',\n    'fixedOverrideLin', 'fixedOverrideLog10'], ESTIMATE: [1, 0, 0],\n    NOMINAL_VALUE: [np.nan, -2, 1000], PARAMETER_SCALE: [LOG10, LIN, LOG10]})\nparameter_df.set_index(PARAMETER_ID, inplace=True)\nactual = petab.get_optimization_to_simulation_parameter_mapping(measurement_df\n    =measurement_df, condition_df=condition_df, parameter_df=parameter_df,\n    sbml_model=model)\nexpected = [({}, {overridee_id: 'dynamicOverrideLog10'}, {}, {overridee_id:\n    LOG10}), ({}, {overridee_id: -2.0}, {}, {overridee_id: LIN}), ({}, {\n    overridee_id: 1000.0}, {}, {overridee_id: LIN}), ({}, {overridee_id: \n    10.0}, {}, {overridee_id: LIN})]\nassert actual == expected\nactual = petab.get_optimization_to_simulation_parameter_mapping(measurement_df\n    =measurement_df, condition_df=condition_df, parameter_df=parameter_df,\n    sbml_model=model, scaled_parameters=True)\nexpected = [({}, {overridee_id: 'dynamicOverrideLog10'}, {}, {overridee_id:\n    LOG10}), ({}, {overridee_id: -2.0}, {}, {overridee_id: LIN}), ({}, {\n    overridee_id: 3.0}, {}, {overridee_id: LOG10}), ({}, {overridee_id: \n    10.0}, {}, {overridee_id: LIN})]\nassert actual == expected\nmeasurement_df[PREEQUILIBRATION_CONDITION_ID] = ['condition1', 'condition1',\n    'condition3', 'condition3']\nactual = petab.get_optimization_to_simulation_parameter_mapping(measurement_df\n    =measurement_df, condition_df=condition_df, parameter_df=parameter_df,\n    sbml_model=model)\nexpected = [({overridee_id: 'dynamicOverrideLog10'}, {overridee_id:\n    'dynamicOverrideLog10'}, {overridee_id: LOG10}, {overridee_id: LOG10}),\n    ({overridee_id: 'dynamicOverrideLog10'}, {overridee_id: -2.0}, {\n    overridee_id: LOG10}, {overridee_id: LIN}), ({overridee_id: 1000.0}, {\n    overridee_id: 1000.0}, {overridee_id: LIN}, {overridee_id: LIN}), ({\n    overridee_id: 1000.0}, {overridee_id: 10.0}, {overridee_id: LIN}, {\n    overridee_id: LIN})]\nassert actual == expected\nstaticmethod"
}