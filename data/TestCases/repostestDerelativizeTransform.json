{
    "functionName": "testDerelativizeTransform",
    "className": "DerelativizeTransformTest",
    "fileName": "/facebook_&_Ax/ax_&_modelbridge_&_tests_&_test_derelativize_transform.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "t = Derelativize(search_space=None, observation_features=None,\n    observation_data=None)\nsearch_space = SearchSpace(parameters=[RangeParameter('x', ParameterType.\n    FLOAT, 0, 20), RangeParameter('y', ParameterType.FLOAT, 0, 20)])\ng = ModelBridge(search_space=search_space, model=None, transforms=[],\n    experiment=Experiment(search_space, 'test'), data=Data(),\n    status_quo_name='1_1')\nobjective = Objective(Metric('c'))\noc = OptimizationConfig(objective=objective, outcome_constraints=[\n    OutcomeConstraint(Metric('a'), ComparisonOp.LEQ, bound=2, relative=False)])\noc2 = t.transform_optimization_config(oc, g, None)\nself.assertTrue(oc == oc2)\noc = OptimizationConfig(objective=objective, outcome_constraints=[\n    OutcomeConstraint(Metric('a'), ComparisonOp.LEQ, bound=2, relative=\n    False), OutcomeConstraint(Metric('b'), ComparisonOp.LEQ, bound=-10,\n    relative=True)])\noc = t.transform_optimization_config(oc, g, None)\nself.assertTrue(oc.outcome_constraints == [OutcomeConstraint(Metric('a'),\n    ComparisonOp.LEQ, bound=2, relative=False), OutcomeConstraint(Metric(\n    'b'), ComparisonOp.LEQ, bound=4.5, relative=False)])\nobsf = mock_predict.mock_calls[0][1][1][0]\nobsf2 = ObservationFeatures(parameters={'x': 2.0, 'y': 10.0})\nself.assertTrue(obsf == obsf2)\nmock_predict.side_effect = Exception()\ng = ModelBridge(search_space=search_space, model=None, transforms=[],\n    experiment=Experiment(search_space, 'test'), data=Data(),\n    status_quo_name='1_2')\noc = OptimizationConfig(objective=objective, outcome_constraints=[\n    OutcomeConstraint(Metric('a'), ComparisonOp.LEQ, bound=2, relative=\n    False), OutcomeConstraint(Metric('b'), ComparisonOp.LEQ, bound=-10,\n    relative=True)])\noc = t.transform_optimization_config(oc, g, None)\nself.assertTrue(oc.outcome_constraints == [OutcomeConstraint(Metric('a'),\n    ComparisonOp.LEQ, bound=2, relative=False), OutcomeConstraint(Metric(\n    'b'), ComparisonOp.LEQ, bound=3.6, relative=False)])\nself.assertEqual(mock_predict.call_count, 2)\ng = ModelBridge(search_space, None, [], status_quo_name='1_1')\noc = OptimizationConfig(objective=objective, outcome_constraints=[\n    OutcomeConstraint(Metric('a'), ComparisonOp.LEQ, bound=2, relative=\n    False), OutcomeConstraint(Metric('b'), ComparisonOp.LEQ, bound=-10,\n    relative=True)])\nwith self.assertRaises(Exception):\n    oc = t.transform_optimization_config(oc, g, None)\nexp = Experiment(search_space, 'name')\ng = ModelBridge(search_space, None, [], exp)\nwith self.assertRaises(ValueError):\n    oc = t.transform_optimization_config(oc, g, None)\nwith self.assertRaises(ValueError):\n    oc = t.transform_optimization_config(oc, None, None)\nmock.patch('ax.modelbridge.base.observations_from_data', autospec=True,\n    return_value=[Observation(features=ObservationFeatures(parameters={'x':\n    2.0, 'y': 10.0}), data=ObservationData(means=np.array([1.0, 2.0, 6.0]),\n    covariance=np.array([[1.0, 2.0, 0.0], [3.0, 4.0, 0.0], [0.0, 0.0, 4.0]]\n    ), metric_names=['a', 'b', 'b']), arm_name='1_1'), Observation(features\n    =ObservationFeatures(parameters={'x': None, 'y': None}), data=\n    ObservationData(means=np.array([1.0, 2.0, 6.0]), covariance=np.array([[\n    1.0, 2.0, 0.0], [3.0, 4.0, 0.0], [0.0, 0.0, 4.0]]), metric_names=['a',\n    'b', 'b']), arm_name='1_2')])mock.patch('ax.modelbridge.base.ModelBridge._fit', autospec=True)mock.patch('ax.modelbridge.base.ModelBridge._predict', autospec=True,\n    return_value=[ObservationData(means=np.array([3.0, 5.0]), covariance=np\n    .array([[1.0, 0.0], [0.0, 1.0]]), metric_names=['a', 'b'])])"
}