{
    "functionName": "plot_pore",
    "className": "DelaunayGeometry",
    "fileName": "/pmeal_&_OpenPNM/openpnm_&_materials_&_VoronoiFibers.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"\n        Plot all throats around a given pore or list of pores in 3D\n\n        Parameters\n        ----------\n        pores : list or array containing pore indices tp include in figure\n\n        fig : matplotlib figure object to place plot in\n\n        axis_bounds : list of [xmin, xmax, ymin, ymax, zmin, zmax] values\n            to limit axes to\n\n        include_points : bool\n            Determines whether to scatter pore and throat centroids\n        \"\"\"\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d.art3d import Poly3DCollection\nif len(pores) > 0:\n    net = self.network\n    net_pores = net.map_pores(pores=pores, origin=self)\n    centroids = self['pore.centroid'][pores]\n    coords = net['pore.coords'][net_pores]\n    net_throats = net.find_neighbor_throats(pores=net_pores)\n    throats = self.map_throats(throats=net_throats, origin=net)\n    tcentroids = self['throat.centroid'][throats]\n    if 1 <= len(throats):\n        verts = self['throat.vertices'][throats]\n        normals = self['throat.normal'][throats]\n        ordered_verts = []\n        for i in range(len(verts)):\n            vert_2D = self._rotate_and_chop(verts[i], normals[i], [0, 0, 1])\n            hull = ConvexHull(vert_2D, qhull_options='QJ Pp')\n            ordered_verts.append(verts[i][hull.vertices])\n        offsets = self['throat.offset_vertices'][throats]\n        ordered_offs = []\n        for i in range(len(offsets)):\n            offs_2D = self._rotate_and_chop(offsets[i], normals[i], [0, 0, 1])\n            offs_hull = ConvexHull(offs_2D, qhull_options='QJ Pp')\n            ordered_offs.append(offsets[i][offs_hull.vertices])\n        if axis_bounds is None:\n            [xmin, xmax, ymin, ymax, zmin, zmax] = self.vertex_dimension(\n                net_pores, parm='minmax')\n        else:\n            [xmin, xmax, ymin, ymax, zmin, zmax] = axis_bounds\n        if fig is None:\n            fig = plt.figure()\n        ax = fig.gca(projection='3d')\n        outer_items = Poly3DCollection(ordered_verts, linewidths=1, alpha=\n            0.2, zsort='min')\n        outer_face_colours = [(1, 0, 0, 0.01)]\n        outer_items.set_facecolor(outer_face_colours)\n        ax.add_collection(outer_items)\n        inner_items = Poly3DCollection(ordered_offs, linewidths=1, alpha=\n            0.2, zsort='min')\n        inner_face_colours = [(0, 0, 1, 0.01)]\n        inner_items.set_facecolor(inner_face_colours)\n        ax.add_collection(inner_items)\n        ax.set_xlim(xmin, xmax)\n        ax.set_ylim(ymin, ymax)\n        ax.set_zlim(zmin, zmax)\n        if include_points:\n            ax.scatter(centroids[:, (0)], centroids[:, (1)], centroids[:, (\n                2)], c='y')\n            ax.scatter(tcentroids[:, (0)], tcentroids[:, (1)], tcentroids[:,\n                (2)], c='r')\n            ax.scatter(coords[:, (0)], coords[:, (1)], coords[:, (2)], c='b')\n        ax.ticklabel_format(style='sci', scilimits=(0, 0))\n    else:\n        self.plot_throat(throats, fig)\nelse:\n    logger.error('Please provide pore indices')\nreturn fig\n"
}