{
    "functionName": "function_setup_teardown",
    "className": null,
    "fileName": "/mworion_&_MountWizzard4/mw4_&_test_&_unit_tests_&_gui_&_mainWindow_&_test_mainW.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "global app\nclass Test1(QObject):\n    threadPool = QThreadPool()\n    mount = Mount(host='localhost', MAC='00:00:00:00:00:00', verbose=False,\n        pathToData='mw4/test/data')\n    update10s = pyqtSignal()\n    update1s = pyqtSignal()\n    mwGlob = {'imageDir': 'mw4/test/image', 'dataDir': 'mw4/test/data',\n        'modelDir': 'mw4/test/model', 'tempDir': 'mw4/test/temp',\n        'configDir': 'mw4/test/config'}\n@staticmethod\ndef testShowWindows():\n    return\n@staticmethod\ndef testSave(name=None):\n    return\n@staticmethod\ndef testStore():\n    return\n@staticmethod\ndef testQuit():\n    return\n@staticmethod\ndef testInitConfig():\n    return\nclass Test(QObject):\n    __version__ = 'test'\n    config = {'mainW': {}, 'showImageW': True}\n    update1s = pyqtSignal()\n    redrawSimulator = pyqtSignal()\n    drawHorizonPoints = pyqtSignal()\n    drawBuildPoints = pyqtSignal()\n    updateDomeSettings = pyqtSignal()\n    showImage = pyqtSignal(str)\n    update3s = pyqtSignal()\n    update30m = pyqtSignal()\n    remoteCommand = pyqtSignal(str)\n    threadPool = QThreadPool()\n    message = pyqtSignal(str, int)\n    mount = Mount(host='localhost', MAC='00:00:00:00:00:00', verbose=False,\n        pathToData='mw4/test/data')\n    mount.obsSite.location = Topos(latitude_degrees=20, longitude_degrees=\n        10, elevation_m=500)\n    camera = Camera(app=Test1())\n    filter = Filter(app=Test1())\n    focuser = Focuser(app=Test1())\n    sensorWeather = SensorWeather(app=Test1())\n    onlineWeather = OnlineWeather(app=Test1())\n    directWeather = DirectWeather(app=Test1())\n    skymeter = Skymeter(app=Test1())\n    dome = Dome(app=Test1())\n    cover = FlipFlat(app=Test1())\n    telescope = Telescope(app=Test1())\n    relay = KMRelay()\n    remote = Remote()\n    data = DataPoint(app=Test1())\n    ephemeris = eph\n    measure = MeasureData(app=Test1())\n    power = PegasusUPB(app=Test1())\n    astrometry = Astrometry(app=Test1())\n    timer0_1s = QTimer()\n    uiWindows = {'showImageW': {'classObj': None}}\n    mwGlob = {'imageDir': 'mw4/test/image', 'dataDir': 'mw4/test/data',\n        'modelDir': 'mw4/test/model', 'configDir': 'mw4/test/config'}\n    deviceStat = {'camera': True, 'astrometry': True, 'mount': True}\n    quit = testQuit\n    quitSave = testQuit\n    loadConfig = testQuit\n    saveConfig = testSave\n    storeConfig = testStore\n    showWindows = testShowWindows\n    initConfig = testInitConfig\nshutil.copy2('mw4/test/testData/active.txt', 'mw4/test/data/active.txt')\nwith mock.patch.object(MainWindow, 'show'):\n    with mock.patch.object(ImageWindow, 'show'):\n        app = MainWindow(app=Test())\n        yield\nfiles = glob.glob('mw4/test/config/*.cfg')\nfor f in files:\n    os.remove(f)\npytest.fixture(autouse=True, scope='function')"
}