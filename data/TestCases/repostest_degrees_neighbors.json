{
    "functionName": "test_degrees_neighbors",
    "className": null,
    "fileName": "/Silmathoron_&_NNGT/testing_&_test_basics.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n    Check ``Graph.get_degrees`` method.\n    \"\"\"\nedge_list = [(0, 1), (0, 2), (0, 3), (1, 3), (3, 2), (3, 4), (4, 2)]\nweights = [0.54881, 0.71518, 0.60276, 0.54488, 0.42365, 0.64589, 0.43758]\nout_degrees = np.array([3, 1, 0, 2, 1])\nin_degrees = np.array([0, 1, 3, 2, 1])\ntot_degrees = in_degrees + out_degrees\nout_strengths = np.array([1.86675, 0.54488, 0, 1.06954, 0.43758])\nin_strengths = np.array([0, 0.54881, 1.57641, 1.14764, 0.64589])\ntot_strengths = in_strengths + out_strengths\ng = nngt.Graph(5, directed=True)\ng.new_edges(edge_list, attributes={'weight': weights})\nassert np.all(g.get_degrees(mode='in') == in_degrees)\nassert np.all(g.get_degrees(mode='out') == out_degrees)\nassert np.all(g.get_degrees() == tot_degrees)\nassert np.all(np.isclose(g.get_degrees(mode='in', weights=True), in_strengths))\nassert np.all(np.isclose(g.get_degrees(mode='out', weights=True),\n    out_strengths))\nassert np.all(np.isclose(g.get_degrees(weights='weight'), tot_strengths))\nassert g.neighbours(3, 'in') == {0, 1}\nassert g.neighbours(3, 'out') == {2, 4}\nassert g.neighbours(3, 'all') == {0, 1, 2, 4}\ng = nngt.Graph(5, directed=False)\ng.new_edges(edge_list, attributes={'weight': weights})\nassert np.all(g.get_degrees(mode='in') == tot_degrees)\nassert np.all(g.get_degrees(mode='out') == tot_degrees)\nassert np.all(g.get_degrees() == tot_degrees)\nassert np.all(np.isclose(g.get_degrees(mode='in', weights=True), tot_strengths)\n    )\nassert np.all(np.isclose(g.get_degrees(mode='out', weights=True),\n    tot_strengths))\nassert np.all(np.isclose(g.get_degrees(weights='weight'), tot_strengths))\nassert g.neighbours(3, 'in') == {0, 1, 2, 4}\nassert g.neighbours(3, 'out') == {0, 1, 2, 4}\nassert g.neighbours(3, 'all') == {0, 1, 2, 4}\n"
}