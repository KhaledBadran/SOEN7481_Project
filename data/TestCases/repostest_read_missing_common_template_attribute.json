{
    "functionName": "test_read_missing_common_template_attribute",
    "className": "TestCreateKeyPairRequestPayload",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_core_&_messages_&_payloads_&_test_create_key_pair.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that a CreateKeyPair request payload can be read from a data\n        stream even when missing the common template attribute.\n        \"\"\"\npayload = payloads.CreateKeyPairRequestPayload()\nself.assertIsNone(payload.common_template_attribute)\nself.assertIsNone(payload.private_key_template_attribute)\nself.assertIsNone(payload.public_key_template_attribute)\npayload.read(self.no_common_template_attribute_encoding)\nself.assertIsNone(payload.common_template_attribute)\nself.assertEqual(objects.TemplateAttribute(attributes=[objects.Attribute(\n    attribute_name=objects.Attribute.AttributeName('Name'), attribute_value\n    =attributes.Name(name_value=attributes.Name.NameValue('PrivateKey1'),\n    name_type=attributes.Name.NameType(enums.NameType.\n    UNINTERPRETED_TEXT_STRING))), objects.Attribute(attribute_name=objects.\n    Attribute.AttributeName('Cryptographic Usage Mask'), attribute_value=\n    primitives.Integer(value=enums.CryptographicUsageMask.SIGN.value, tag=\n    enums.Tags.CRYPTOGRAPHIC_USAGE_MASK))], tag=enums.Tags.\n    PRIVATE_KEY_TEMPLATE_ATTRIBUTE), payload.private_key_template_attribute)\nself.assertEqual(objects.TemplateAttribute(attributes=[objects.Attribute(\n    attribute_name=objects.Attribute.AttributeName('Name'), attribute_value\n    =attributes.Name(name_value=attributes.Name.NameValue('PublicKey1'),\n    name_type=attributes.Name.NameType(enums.NameType.\n    UNINTERPRETED_TEXT_STRING))), objects.Attribute(attribute_name=objects.\n    Attribute.AttributeName('Cryptographic Usage Mask'), attribute_value=\n    primitives.Integer(value=enums.CryptographicUsageMask.VERIFY.value, tag\n    =enums.Tags.CRYPTOGRAPHIC_USAGE_MASK))], tag=enums.Tags.\n    PUBLIC_KEY_TEMPLATE_ATTRIBUTE), payload.public_key_template_attribute)\n"
}