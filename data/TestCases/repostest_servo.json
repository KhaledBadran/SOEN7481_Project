{
    "functionName": "test_servo",
    "className": null,
    "fileName": "/PRIArobotics_&_HedgehogServer/tests_&_test_server.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "async with conn_dealer() as socket:\n    await assertReplyDealer(socket, servo.CommandRequest(0), ack.FAILED_COMMAND\n        )\n    await assertReplyDealer(socket, servo.Action(0, 0), ack.OK)\n    await assertReplyDealer(socket, servo.CommandRequest(0), servo.\n        CommandReply(0, 0))\n    sub = Subscription()\n    sub.subscribe = False\n    sub.timeout = 10\n    await assertReplyDealer(socket, servo.CommandSubscribe(0, sub), ack.\n        FAILED_COMMAND)\n    with assertImmediate():\n        sub = Subscription()\n        sub.subscribe = True\n        await assertReplyDealer(socket, servo.CommandSubscribe(0, sub), ack.OK)\n        _, update = await socket.recv_msg()\n        assert update == servo.CommandUpdate(0, 0, sub)\n    with assertTimeoutTrio(1):\n        await socket.recv_multipart()\n    with assertImmediate():\n        await assertReplyDealer(socket, servo.Action(0, 0), ack.OK)\n    with assertTimeoutTrio(1):\n        await socket.recv_multipart()\n    with assertImmediate():\n        await assertReplyDealer(socket, servo.Action(0, 1000), ack.OK)\n        _, update = await socket.recv_msg()\n        assert update == servo.CommandUpdate(0, 1000, sub)\n    sub.subscribe = False\n    await assertReplyDealer(socket, servo.CommandSubscribe(0, sub), ack.OK)\n    with assertTimeoutTrio(1):\n        await socket.recv_multipart()\n    sub = Subscription()\n    sub.subscribe = True\n    await assertReplyDealer(socket, servo.CommandSubscribe(1, sub), ack.OK)\n    with assertTimeoutTrio(1):\n        await socket.recv_multipart()\n    with assertImmediate():\n        await assertReplyDealer(socket, servo.Action(1, 1000), ack.OK)\n        _, update = await socket.recv_msg()\n        assert update == servo.CommandUpdate(1, 1000, sub)\n    sub.subscribe = False\n    await assertReplyDealer(socket, servo.CommandSubscribe(1, sub), ack.OK)\n    with assertTimeoutTrio(1):\n        await socket.recv_multipart()\npytest.mark.trio"
}