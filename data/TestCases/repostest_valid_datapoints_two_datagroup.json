{
    "functionName": "test_valid_datapoints_two_datagroup",
    "className": "TestGetDatapoints",
    "fileName": "/pr-omethe-us_&_PyKED/pyked_&_tests_&_test_converters.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"Test valid parsing of datapoints when in a two dataGroups.\n        \"\"\"\nroot = etree.Element('experiment')\napparatus = etree.SubElement(root, 'apparatus')\nkind = etree.SubElement(apparatus, 'kind')\nkind.text = 'rapid compression machine'\ndatagroup = etree.SubElement(root, 'dataGroup')\nprop = etree.SubElement(datagroup, 'property')\nprop.set('id', 'x1')\nprop.set('name', 'temperature')\nprop.set('units', 'K')\nprop = etree.SubElement(datagroup, 'property')\nprop.set('id', 'x2')\nprop.set('name', 'ignition delay')\nprop.set('units', 'us')\ntemp = numpy.random.uniform(low=300.0, high=1000.0)\nignition_delay = numpy.random.uniform(low=100.0, high=700.0)\ndatapoint = etree.SubElement(datagroup, 'dataPoint')\nx1 = etree.SubElement(datapoint, 'x1')\nx1.text = str(temp)\nx2 = etree.SubElement(datapoint, 'x2')\nx2.text = str(ignition_delay)\ndatagroup = etree.SubElement(root, 'dataGroup')\nprop = etree.SubElement(datagroup, 'property')\nprop.set('id', 'x4')\nprop.set('name', 'time')\nprop.set('units', 's')\nprop = etree.SubElement(datagroup, 'property')\nprop.set('id', 'x5')\nprop.set('name', 'volume')\nprop.set('units', 'cm3')\nnum_points = 100\ntimes = numpy.linspace(0.0, 0.1, num_points)\nvolumes = numpy.cos(times * 20.0 * numpy.pi)\nfor time, volume in zip(times, volumes):\n    datapoint = etree.SubElement(datagroup, 'dataPoint')\n    x1 = etree.SubElement(datapoint, 'x4')\n    x1.text = str(time)\n    x2 = etree.SubElement(datapoint, 'x5')\n    x2.text = str(volume)\ndatapoints = get_datapoints(root)\nassert len(datapoints) == 1\ndatapoint = datapoints[0]\nassert datapoint['temperature'] == [str(temp) + ' K']\nassert datapoint['ignition-delay'] == [str(ignition_delay) + ' us']\nvolume_history = datapoint['time-histories'][0]\nassert len(volume_history['values']) == num_points\nassert volume_history['time']['units'] == 's'\nassert volume_history['time']['column'] == 0\nassert volume_history['quantity']['units'] == 'cm3'\nassert volume_history['quantity']['column'] == 1\nfor datapoint, time, volume in zip(volume_history['values'], times, volumes):\n    assert datapoint == [float(str(time)), float(str(volume))]\n"
}