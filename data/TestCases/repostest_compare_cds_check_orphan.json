{
    "functionName": "test_compare_cds_check_orphan",
    "className": "TestCheckOrphan",
    "fileName": "/Sung-Huan_&_ANNOgesic/tests_&_test_check_orphan.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "tss_dict = [{'start': 517, 'end': 517, 'phase': '.', 'strand': '+',\n    'seq_id': 'aaa', 'score': '.', 'source': 'Refseq', 'feature': 'TSS'}, {\n    'start': 1234, 'end': 1234, 'phase': '.', 'strand': '+', 'seq_id':\n    'aaa', 'score': '.', 'source': 'Refseq', 'feature': 'TSS'}, {'start': \n    3444, 'end': 3444, 'phase': '.', 'strand': '-', 'seq_id': 'aaa',\n    'score': '.', 'source': 'Refseq', 'feature': 'TSS'}]\ngff_dict = [{'start': 600, 'end': 1517, 'phase': '.', 'strand': '+',\n    'seq_id': 'aaa', 'score': '.', 'source': 'Refseq', 'feature': 'CDS'}, {\n    'start': 1258, 'end': 2234, 'phase': '.', 'strand': '+', 'seq_id':\n    'aaa', 'score': '.', 'source': 'Refseq', 'feature': 'tRNA'}, {'start': \n    3544, 'end': 6517, 'phase': '.', 'strand': '-', 'seq_id': 'aaa',\n    'score': '.', 'source': 'Refseq', 'feature': 'CDS'}]\nattributes_tss = [{'type': 'Orphan', 'ID': 'tss0', 'Name': 'TSS:517_+',\n    'UTR_length': 'Orphan_NA', 'associated_gene': 'orphan'}, {'type':\n    'Orphan', 'ID': 'tss1', 'Name': 'TSS:1234_+', 'UTR_length': 'Orphan_NA',\n    'associated_gene': 'orphan'}, {'type': 'Secondary', 'ID': 'tss2',\n    'Name': 'TSS:3444_-', 'UTR_length': 'Secondary_220', 'associated_gene':\n    'AAA_00003'}]\nattributes_gff = [{'ID': 'cds0', 'Name': 'CDS_0', 'locus_tag': 'AAA_00001'},\n    {'ID': 'rna0', 'Name': 'tRNA_0', 'locus_tag': 'AAA_00002'}, {'ID':\n    'cds1', 'Name': 'CDS_1', 'locus_tag': 'AAA_00003'}]\nout_tss = [{'Name': 'TSS:517_+', 'ID': 'tss0', 'associated_gene':\n    'AAA_00001', 'type': 'Primary', 'UTR_length': 'Primary_83'}, {'Name':\n    'TSS:1234_+', 'ID': 'tss1', 'associated_gene': 'AAA_00001&AAA_00002',\n    'type': 'Internal&Primary', 'UTR_length': 'Internal_NA&Primary_24'}, {\n    'Name': 'TSS:3444_-', 'ID': 'tss2', 'associated_gene': 'AAA_00003',\n    'type': 'Secondary', 'UTR_length': 'Secondary_220'}]\ntsss = []\ncdss = []\nfor index in range(0, 3):\n    tsss.append(Create_generator(tss_dict[index], attributes_tss[index], 'gff')\n        )\n    cdss.append(Create_generator(gff_dict[index], attributes_gff[index], 'gff')\n        )\nco.compare_cds_check_orphan(tsss, cdss)\nfor index in range(0, 3):\n    self.assertDictEqual(tsss[index].attributes, out_tss[index])\n"
}