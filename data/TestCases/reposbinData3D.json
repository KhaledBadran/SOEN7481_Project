{
    "functionName": "binData3D",
    "className": null,
    "fileName": "/jakob-lass_&_MJOLNIR/MJOLNIR_&_Data_&_DataSet.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\" 3D binning of data.\n\n    Args:\n\n        - dx (float): Step size in x (required).\n\n        - dy (float): Step size in x (required).\n\n        - dz (float): Step size in x (required).\n\n        - pos (2D array): Position of data points as flattened lists (X,Y,Z) (required).\n\n        - data (array): Flattened data array (required).\n\n    Kwargs:\n\n        - norm (array): Flattened normalization array.\n\n        - mon (array): Flattened monitor array.\n\n        - bins (list of arrays): Bins locating edges in the x, y, and z directions.\n\n    returns:\n\n        Re-binned intensity (and if provided Normalization, Monitor, and Normalization Count) and X, Y, and Z bins in 3 3D arrays.\n\n\n    Example:\n\n    >>> pos = [Qx,Qy,E]\n    >>> Data,bins = DataSet.binData3D(0.05,0.05,0.2,pos,I,norm=Norm,mon=Monitor)\n\n    \"\"\"\nif bins is None:\n    bins = calculateBins(dx=dx, dy=dy, dz=dz, pos=pos)\nif len(pos[0].shape) > 1:\n    pos = np.array([x.flatten() for x in pos])\nHistBins = [bins[0][:, (0), (0)], bins[1][(0), :, (0)], bins[2][(0), (0), :]]\nintensity = np.histogramdd(np.array(pos).T, bins=HistBins, weights=data.\n    flatten())[0].astype(data.dtype)\nreturndata = [intensity]\nif mon is not None:\n    MonitorCount = np.histogramdd(np.array(pos).T, bins=HistBins, weights=\n        mon.flatten())[0].astype(mon.dtype)\n    returndata.append(MonitorCount)\nif norm is not None:\n    Normalization = np.histogramdd(np.array(pos).T, bins=HistBins, weights=\n        norm.flatten())[0].astype(norm.dtype)\n    returndata.append(Normalization)\nNormCount = np.histogramdd(np.array(pos).T, bins=HistBins, weights=np.\n    ones_like(data).flatten())[0].astype(int)\nreturndata.append(NormCount)\nreturn returndata, bins\n_tools.KwargChecker()"
}