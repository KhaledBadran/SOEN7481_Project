{
    "functionName": "test_delete_attribute_from_managed_object",
    "className": "TestKmipEngine",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_services_&_server_&_test_engine.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that various attributes can be deleted correctly from a given\n        managed object.\n        \"\"\"\ne = engine.KmipEngine()\ne._data_store = self.engine\ne._data_store_session_factory = self.session_factory\ne._data_session = e._data_store_session_factory()\ne._logger = mock.MagicMock()\nattribute_factory = factory.AttributeFactory()\nname_1 = attribute_factory.create_attribute(enums.AttributeType.NAME,\n    attributes.Name.create('Name 1', enums.NameType.UNINTERPRETED_TEXT_STRING))\nname_2 = attribute_factory.create_attribute(enums.AttributeType.NAME,\n    attributes.Name.create('Name 2', enums.NameType.UNINTERPRETED_TEXT_STRING))\napp_specific_info_1 = attribute_factory.create_attribute(enums.\n    AttributeType.APPLICATION_SPECIFIC_INFORMATION, {\n    'application_namespace': 'Namespace 1', 'application_data': 'Data 1'})\napp_specific_info_2 = attribute_factory.create_attribute(enums.\n    AttributeType.APPLICATION_SPECIFIC_INFORMATION, {\n    'application_namespace': 'Namespace 2', 'application_data': 'Data 2'})\nobject_group_1 = attribute_factory.create_attribute(enums.AttributeType.\n    OBJECT_GROUP, 'Object Group 1')\nobject_group_2 = attribute_factory.create_attribute(enums.AttributeType.\n    OBJECT_GROUP, 'Object Group 2')\nmanaged_object = pie_objects.SymmetricKey(enums.CryptographicAlgorithm.AES,\n    0, b'')\nmanaged_object.names.clear()\nself.assertEqual(0, len(managed_object.names))\nself.assertEqual(0, len(managed_object.app_specific_info))\nself.assertEqual(0, len(managed_object.object_groups))\ne._set_attribute_on_managed_object(managed_object, ('Name', [name_1.\n    attribute_value, name_2.attribute_value]))\ne._set_attribute_on_managed_object(managed_object, (\n    'Application Specific Information', [app_specific_info_1.\n    attribute_value, app_specific_info_2.attribute_value]))\ne._set_attribute_on_managed_object(managed_object, ('Object Group', [\n    object_group_1.attribute_value, object_group_2.attribute_value]))\nself.assertEqual(2, len(managed_object.names))\nself.assertEqual(2, len(managed_object.app_specific_info))\nself.assertEqual(2, len(managed_object.object_groups))\ne._delete_attribute_from_managed_object(managed_object, (\n    'Application Specific Information', 0, None))\nself.assertEqual(1, len(managed_object.app_specific_info))\ne._delete_attribute_from_managed_object(managed_object, (\n    'Application Specific Information', 0, app_specific_info_2.attribute_value)\n    )\nself.assertEqual(0, len(managed_object.app_specific_info))\ne._delete_attribute_from_managed_object(managed_object, ('Name', None,\n    primitives.TextString(value='Name 2', tag=enums.Tags.NAME)))\nself.assertEqual(1, len(managed_object.names))\nself.assertEqual('Name 1', managed_object.names[0])\ne._delete_attribute_from_managed_object(managed_object, ('Object Group',\n    None, None))\nself.assertEqual(0, len(managed_object.object_groups))\ne._set_attribute_on_managed_object(managed_object, ('Object Group', [\n    object_group_1.attribute_value]))\nself.assertEqual(1, len(managed_object.object_groups))\ne._delete_attribute_from_managed_object(managed_object, ('Object Group',\n    None, primitives.TextString(value='Object Group 1', tag=enums.Tags.\n    OBJECT_GROUP)))\nself.assertEqual(0, len(managed_object.object_groups))\n"
}