{
    "functionName": "plot_vpython",
    "className": null,
    "fileName": "/pmeal_&_OpenPNM/openpnm_&_topotools_&_plottools.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"\n    Quickly visualize a network in 3D using VPython.\n\n    Parameters\n    ----------\n    network : OpenPNM Network Object\n        The network to visualize\n    Psize : string (default = 'pore.diameter')\n        The dictionary key pointing to the pore property by which sphere\n        diameters should be scaled\n    Tsize : string (default = 'throat.diameter')\n        The dictionary key pointing to the throat property by which cylinder\n        diameters should be scaled\n    Pcolor : string\n        The dictionary key pointing to the pore property which will control\n        the sphere colors.  The default is None, which results in a bright\n        red for all pores.\n    Tcolor : string\n        The dictionary key pointing to the throat property which will control\n        the cylinder colors.  The default is None, which results in a unform\n        pale blue for all throats.\n    cmap : string or Matplotlib colormap object (default is 'jet')\n        The color map to use when converting pore and throat properties to\n        RGB colors.  Can either be a string indicating which color map to\n        fetch from matplotlib.cmap, or an actual cmap object.\n    kwargs : dict\n        Any additional kwargs that are received are passed to the VPython\n        ``canvas`` object.  Default options are:\n\n        *'height' = 500* - Height of canvas\n\n        *'width' = 800* - Width of canvas\n\n        *'background' = [0, 0, 0]* - Sets the background color of canvas\n\n        *'ambient' = [0.2, 0.2, 0.3]* - Sets the brightness of lighting\n\n    Returns\n    -------\n    canvas : VPython Canvas object\n        The canvas object containing the generated scene. The object has\n        several useful methods.\n\n    Notes\n    -----\n    **Important**\n\n    a) This does not work in Spyder.  It should only be called from a Jupyter\n    Notebook.\n\n    b) This is only meant for relatively small networks.  For proper\n    visualization use Paraview.\n\n    \"\"\"\nimport matplotlib.pyplot as plt\ntry:\n    from vpython import canvas, vec, sphere, cylinder\nexcept ModuleNotFoundError:\n    raise Exception('VPython must be installed to use this function')\nif type(cmap) == str:\n    cmap = getattr(plt.cm, cmap)\nif Pcolor is None:\n    Pcolor = [vec(230 / 255, 57 / 255, 0 / 255)] * network.Np\nelse:\n    a = cmap(network[Pcolor] / network[Pcolor].max())\n    Pcolor = [vec(row[0], row[1], row[2]) for row in a]\nif Tcolor is None:\n    Tcolor = [vec(51 / 255, 153 / 255, 255 / 255)] * network.Nt\nelse:\n    a = cmap(network[Tcolor] / network[Tcolor].max())\n    Tcolor = [vec(row[0], row[1], row[2]) for row in a]\nif 'background' not in kwargs.keys():\n    kwargs['background'] = vec(1.0, 1.0, 1.0)\nif 'height' not in kwargs.keys():\n    kwargs['height'] = 500\nif 'width' not in kwargs.keys():\n    kwargs['width'] = 800\nfor item in kwargs.keys():\n    try:\n        kwargs[item] = vec(*kwargs[item])\n    except TypeError:\n        pass\nscene = canvas(title=network.name, **kwargs)\nfor p in network.Ps:\n    r = network[Psize][p] / 2\n    xyz = network['pore.coords'][p]\n    c = Pcolor[p]\n    sphere(pos=vec(*xyz), radius=r, color=c, shininess=0.5)\nfor t in network.Ts:\n    head = network['throat.endpoints.head'][t]\n    tail = network['throat.endpoints.tail'][t]\n    v = tail - head\n    r = network[Tsize][t]\n    L = np.sqrt(np.sum((head - tail) ** 2))\n    c = Tcolor[t]\n    cylinder(pos=vec(*head), axis=vec(*v), opacity=1, size=vec(L, r, r),\n        color=c)\nreturn scene\n"
}