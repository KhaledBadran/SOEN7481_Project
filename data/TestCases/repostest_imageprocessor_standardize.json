{
    "functionName": "test_imageprocessor_standardize",
    "className": null,
    "fileName": "/IBM_&_MAX-Framework/maxfw_&_tests_&_test_image_utils.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"Test the Imageprocessor's standardize function.\"\"\"\ntransform_sequence = [ToPILImage('RGBA'), Standardize()]\nwith nose.tools.assert_raises_regexp(ValueError,\n    '.*must be converted to an image with 3 or fewer channels*'):\n    ImageProcessor(transform_sequence).apply_transforms(test_input)\ntransform_sequence = [ToPILImage('RGB'), Standardize()]\np = ImageProcessor(transform_sequence)\nimg_out = np.array(p.apply_transforms(test_input))\nnose.tools.assert_almost_equal(np.std(img_out), 1)\nnose.tools.assert_almost_equal(np.mean(img_out), 0)\ntransform_sequence = [ToPILImage('RGB'), Standardize(std=0)]\np = ImageProcessor(transform_sequence)\nimg_out = np.array(p.apply_transforms(test_input))\nnose.tools.assert_almost_equal(np.mean(img_out), 0)\ntransform_sequence = [ToPILImage('RGB'), Standardize(mean=0)]\np = ImageProcessor(transform_sequence)\nimg_out = np.array(p.apply_transforms(test_input))\nnose.tools.assert_almost_equal(np.std(img_out[..., 0]), 1)\nnose.tools.assert_almost_equal(np.std(img_out[..., 1]), 1)\nnose.tools.assert_almost_equal(np.std(img_out[..., 2]), 1)\npil_img = ImageProcessor([ToPILImage('RGB'), PILtoarray()]).apply_transforms(\n    test_input)\ntransform_sequence = [ToPILImage('RGB'), Standardize(mean=[x for x in np.\n    mean(pil_img, axis=(0, 1))], std=[x for x in np.std(pil_img, axis=(0, 1))])\n    ]\nImageProcessor(transform_sequence).apply_transforms(test_input)\ntransform_sequence = [ToPILImage('RGB'), Standardize(mean=[x for x in np.\n    mean(pil_img, axis=(0, 1))])]\nImageProcessor(transform_sequence).apply_transforms(test_input)\ntransform_sequence = [ToPILImage('RGB'), Standardize(std=[x for x in np.std\n    (pil_img, axis=(0, 1))])]\nImageProcessor(transform_sequence).apply_transforms(test_input)\ntransform_sequence = [ToPILImage('RGB'), Standardize(mean=np.mean(pil_img))]\nImageProcessor(transform_sequence).apply_transforms(test_input)\ntransform_sequence = [ToPILImage('RGB'), Standardize(mean=np.mean(pil_img),\n    std=np.std(pil_img))]\nImageProcessor(transform_sequence).apply_transforms(test_input)\ntransform_sequence = [ToPILImage('RGB'), Standardize(std=np.std(pil_img))]\nImageProcessor(transform_sequence).apply_transforms(test_input)\ntransform_sequence = [ToPILImage('RGB'), Standardize(mean=127, std=5)]\nImageProcessor(transform_sequence).apply_transforms(test_input)\ntransform_sequence = [ToPILImage('RGB'), Standardize(mean=[127, 127], std=5)]\nwith nose.tools.assert_raises_regexp(ValueError,\n    '.*must correspond to the number of channels.*'):\n    ImageProcessor(transform_sequence).apply_transforms(test_input)\ntransform_sequence = [ToPILImage('RGB'), Standardize(std=[5, 5, 5, 5])]\nwith nose.tools.assert_raises_regexp(ValueError,\n    '.*must correspond to the number of channels.*'):\n    ImageProcessor(transform_sequence).apply_transforms(test_input)\ntransform_sequence = [ToPILImage('L'), Standardize()]\np = ImageProcessor(transform_sequence)\nimg_out = p.apply_transforms(test_input)\nnose.tools.assert_almost_equal(np.std(img_out), 1)\ntransform_sequence = [ToPILImage('L'), Standardize(mean=np.mean(pil_img))]\nImageProcessor(transform_sequence).apply_transforms(test_input)\ntransform_sequence = [ToPILImage('L'), Standardize(mean=np.mean(pil_img),\n    std=np.std(pil_img))]\nImageProcessor(transform_sequence).apply_transforms(test_input)\ntransform_sequence = [ToPILImage('L'), Standardize(std=np.std(pil_img))]\nImageProcessor(transform_sequence).apply_transforms(test_input)\ntransform_sequence = [ToPILImage('L'), Standardize(mean=127, std=5)]\nImageProcessor(transform_sequence).apply_transforms(test_input)\ntransform_sequence = [ToPILImage('L'), Standardize(std=0)]\np = ImageProcessor(transform_sequence)\nimg_out = np.array(p.apply_transforms(test_input))\nnose.tools.assert_almost_equal(np.mean(img_out), 0)\ntransform_sequence = [ToPILImage('L'), Standardize(mean=0)]\np = ImageProcessor(transform_sequence)\nimg_out = np.array(p.apply_transforms(test_input))\nnose.tools.assert_almost_equal(np.std(img_out), 1)\ntransform_sequence = [ToPILImage('L'), Standardize(mean=[127, 127], std=5)]\nwith nose.tools.assert_raises(ValueError):\n    ImageProcessor(transform_sequence).apply_transforms(test_input)\ntransform_sequence = [ToPILImage('L'), Standardize(std=[5, 5, 5, 5])]\nwith nose.tools.assert_raises(ValueError):\n    ImageProcessor(transform_sequence).apply_transforms(test_input)\ntransform_sequence = [ToPILImage('L'), Standardize(), Resize(size=(200, 200))]\np = ImageProcessor(transform_sequence)\nwith nose.tools.assert_raises(Exception):\n    p.apply_transforms(test_input)\ntransform_sequence = [ToPILImage('RGBA'), Standardize(), Standardize()]\np = ImageProcessor(transform_sequence)\nwith nose.tools.assert_raises(Exception):\n    p.apply_transforms(test_input)\n"
}