{
    "functionName": "test_replace_in_fort3_sort_new_replace_args_angles",
    "className": null,
    "fileName": "/mortele_&_OccamTools/test_&_test_replace_in_fort3.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "tol = 1e-14\natom_names, _, _, angles, _, _, _, _, _ = _parse_fort_3_file(file_name)\nrepl = Fort3Replacement('angle', replace=True, content=['O', 'O', 'O', 4, 2]\n    ), Fort3Replacement('angle', replace=True, content=['O', 'H', 'O', 7, 6]\n    ), Fort3Replacement('angle', replace=True, content=['H', 'O', 'O', 3, 1]\n    ), Fort3Replacement('angle', new=True, content=['Be', 'H', 'H', 9, 3]\n    ), Fort3Replacement('angle', new=True, content=['H', 'O', 'H', 9.4, 3.3])\nangles_new = _sort_new_replace_args_angles(atom_names, angles, *repl)\nassert len(angles_new) == 7\nnames = [('O', 'O', 'O'), ('O', 'H', 'O'), ('Be', 'H', 'H'), ('H', 'O', 'H'\n    ), ('O', 'O', 'H')]\nlengths = [4.0, 7.0, 9.0, 9.4, 3.0]\nepsilons = [2.0, 6.0, 3.0, 3.3, 1.0]\nfor name, length, eps in zip(names, lengths, epsilons):\n    found = False\n    n1, n2, n3 = name\n    for angle in angles_new:\n        name_1, name_2, name_3 = angle._content[:3]\n        if name_2 == n2:\n            if name_1 == n1 and name_3 == n3:\n                found = True\n                assert angle._content[3] == pytest.approx(length, abs=tol)\n                assert angle._content[4] == pytest.approx(eps, abs=tol)\n                break\n            elif name_3 == n1 and name_1 == n3:\n                found = True\n                assert angle._content[3] == pytest.approx(length, abs=tol)\n                assert angle._content[4] == pytest.approx(eps, abs=tol)\n                break\n    assert found\nfor n1, n2, n3 in zip(['not', 'H', 'O'], ['H', 'not', 'O'], ['H', 'O', 'not']):\n    caught = False\n    repl = Fort3Replacement('angle', new=True, content=[n1, n2, n3, 0, 0]),\n    try:\n        _sort_new_replace_args_angles(atom_names, angles, *repl)\n    except ValueError:\n        caught = True\n    assert caught is True\nrepl = Fort3Replacement('angle', new=True, content=['O', 'H', 0, 0]\n    ), Fort3Replacement('angle', new=True, content=['O', 'O', 'O', 0, 0]\n    ), Fort3Replacement('angle', replace=True, content=['.', 'H', 'A', 0, 0]\n    ), Fort3Replacement('angle', new=True, content=['not', 'O', 0, 0]\n    ), Fort3Replacement('angle', replace=True, content=['O', 'O', 'H+', 0, 0])\nfor r in repl:\n    caught = False\n    try:\n        _sort_new_replace_args_angles(atom_names, angles, r)\n    except ValueError:\n        caught = True\n    assert caught is True\n"
}