{
    "functionName": "test_complement",
    "className": "TestCells",
    "fileName": "/mit-crpg_&_OpenMOC/tests_&_unit_tests_&_test_regions.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "complement = openmoc.Complement()\nintersection = openmoc.Intersection()\np1x = openmoc.XPlane(x=3)\np2x = openmoc.XPlane(x=-2)\np1y = openmoc.YPlane(y=1)\np2y = openmoc.YPlane(y=-0.5)\np1z = openmoc.ZPlane(z=8)\np2z = openmoc.ZPlane(z=-4)\np1x.setBoundaryType(openmoc.VACUUM)\np2x.setBoundaryType(openmoc.REFLECTIVE)\np1y.setBoundaryType(openmoc.PERIODIC)\np2y.setBoundaryType(openmoc.REFLECTIVE)\np1z.setBoundaryType(openmoc.PERIODIC)\np2z.setBoundaryType(openmoc.VACUUM)\nh1x = openmoc.Halfspace(-1, p1x)\nh2x = openmoc.Halfspace(+1, p2x)\nh1y = openmoc.Halfspace(-1, p1y)\nh2y = openmoc.Halfspace(+1, p2y)\nh1z = openmoc.Halfspace(-1, p1z)\nh2z = openmoc.Halfspace(+1, p2z)\nintersection.addNode(h1x)\nintersection.addNode(h2x)\nintersection.addNode(h1y)\nintersection.addNode(h2y)\nintersection.addNode(h1z)\nintersection.addNode(h2z)\ncomplement.addNode(intersection)\nself.assertEqual(complement.getMaxX(), 3)\nwith self.assertRaises(Exception):\n    self.assertEqual(complement.getMaxXBoundaryType(), openmoc.VACUUM)\nself.assertEqual(complement.getMaxY(), 1)\nwith self.assertRaises(Exception):\n    self.assertEqual(complement.getMaxYBoundaryType(), openmoc.PERIODIC)\nself.assertEqual(complement.getMaxZ(), 8)\nwith self.assertRaises(Exception):\n    self.assertEqual(complement.getMaxZBoundaryType(), openmoc.PERIODIC)\nself.assertEqual(complement.getMinX(), -2)\nwith self.assertRaises(Exception):\n    self.assertEqual(complement.getMinXBoundaryType(), openmoc.REFLECTIVE)\nself.assertEqual(complement.getMinY(), -0.5)\nwith self.assertRaises(Exception):\n    self.assertEqual(complement.getMinYBoundaryType(), openmoc.REFLECTIVE)\nself.assertEqual(complement.getMinZ(), -4)\nwith self.assertRaises(Exception):\n    self.assertEqual(complement.getMinZBoundaryType(), openmoc.VACUUM)\n"
}