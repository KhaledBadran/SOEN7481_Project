{
    "functionName": "test_content_key_request",
    "className": "TestProducer",
    "fileName": "/named-data_&_PyNDN2/tests_&_integration_tests_&_test_producer.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "prefix = Name('/prefix')\nsuffix = Name('/a/b/c')\nexpectedInterest = Name(prefix)\nexpectedInterest.append(Encryptor.NAME_COMPONENT_READ)\nexpectedInterest.append(suffix)\nexpectedInterest.append(Encryptor.NAME_COMPONENT_E_KEY)\ncKeyName = Name(prefix)\ncKeyName.append(Encryptor.NAME_COMPONENT_SAMPLE)\ncKeyName.append(suffix)\ncKeyName.append(Encryptor.NAME_COMPONENT_C_KEY)\ntimeMarker = Name('20150101T100000/20150101T120000')\ntestTime1 = Schedule.fromIsoString('20150101T100001')\ntestTime2 = Schedule.fromIsoString('20150101T110001')\ntestTimeRounded1 = Name.Component('20150101T100000')\ntestTimeRounded2 = Name.Component('20150101T110000')\ntestTimeComponent2 = Name.Component('20150101T110001')\nfor i in range(suffix.size()):\n    self.createEncryptionKey(expectedInterest, timeMarker)\n    expectedInterest = expectedInterest.getPrefix(-2).append(Encryptor.\n        NAME_COMPONENT_E_KEY)\nexpressInterestCallCount = [0]\nclass TestFace(object):\n\n    def __init__(self, handleExpressInterest):\n        self.handleExpressInterest = handleExpressInterest\n\n    def expressInterest(self, interest, onData, onTimeout, onNetworkNack):\n        return self.handleExpressInterest(interest, onData, onTimeout,\n            onNetworkNack)\ndef handleExpressInterest(interest, onData, onTimeout, onNetworkNack):\n    expressInterestCallCount[0] += 1\n    interestName = Name(interest.getName())\n    interestName.append(timeMarker)\n    self.assertTrue(interestName in self.encryptionKeys)\n    onData(interest, self.encryptionKeys[interestName])\n    return 0\nface = TestFace(handleExpressInterest)\ntestDb = Sqlite3ProducerDb(self.databaseFilePath)\nproducer = Producer(prefix, suffix, face, self.keyChain, testDb)\ncontentKey = [None]\ndef checkEncryptionKeys(result, testTime, roundedTime,\n    expectedExpressInterestCallCount):\n    self.assertEqual(expectedExpressInterestCallCount,\n        expressInterestCallCount[0])\n    self.assertEqual(True, testDb.hasContentKey(testTime))\n    contentKey[0] = testDb.getContentKey(testTime)\n    params = EncryptParams(EncryptAlgorithmType.RsaOaep)\n    for i in range(len(result)):\n        key = result[i]\n        keyName = key.getName()\n        self.assertEqual(cKeyName, keyName.getSubName(0, 6))\n        self.assertEqual(keyName.get(6), roundedTime)\n        self.assertEqual(keyName.get(7), Encryptor.NAME_COMPONENT_FOR)\n        self.assertEqual(True, keyName.getSubName(8) in self.decryptionKeys)\n        decryptionKey = self.decryptionKeys[keyName.getSubName(8)]\n        self.assertEqual(True, decryptionKey.size() != 0)\n        encryptedKeyEncoding = key.getContent()\n        content = EncryptedContent()\n        content.wireDecode(encryptedKeyEncoding)\n        encryptedKey = content.getPayload()\n        retrievedKey = RsaAlgorithm.decrypt(decryptionKey, encryptedKey, params\n            )\n        self.assertTrue(contentKey[0].equals(retrievedKey))\n    self.assertEqual(3, len(result))\ncontentKeyName1 = producer.createContentKey(testTime1, lambda keys:\n    checkEncryptionKeys(keys, testTime1, testTimeRounded1, 3))\ncontentKeyName2 = producer.createContentKey(testTime2, lambda keys:\n    checkEncryptionKeys(keys, testTime2, testTimeRounded2, 3))\nself.assertEqual(cKeyName, contentKeyName1.getPrefix(-1))\nself.assertEqual(testTimeRounded1, contentKeyName1.get(6))\nself.assertEqual(cKeyName, contentKeyName2.getPrefix(-1))\nself.assertEqual(testTimeRounded2, contentKeyName2.get(6))\ntestData = Data()\nproducer.produce(testData, testTime2, Blob(DATA_CONTENT, False))\nproducedName = testData.getName()\nself.assertEqual(cKeyName.getPrefix(-1), producedName.getSubName(0, 5))\nself.assertEqual(testTimeComponent2, producedName.get(5))\nself.assertEqual(Encryptor.NAME_COMPONENT_FOR, producedName.get(6))\nself.assertEqual(cKeyName, producedName.getSubName(7, 6))\nself.assertEqual(testTimeRounded2, producedName.get(13))\ndataBlob = testData.getContent()\ndataContent = EncryptedContent()\ndataContent.wireDecode(dataBlob)\nencryptedData = dataContent.getPayload()\ninitialVector = dataContent.getInitialVector()\nparams = EncryptParams(EncryptAlgorithmType.AesCbc, 16)\nparams.setInitialVector(initialVector)\ndecryptTest = AesAlgorithm.decrypt(contentKey[0], encryptedData, params)\nself.assertTrue(decryptTest.equals(Blob(DATA_CONTENT, False)))\n"
}