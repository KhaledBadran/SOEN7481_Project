{
    "functionName": "test_gromov",
    "className": null,
    "fileName": "/PythonOT_&_POT/test_&_test_gromov.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "n_samples = 50\nmu_s = np.array([0, 0])\ncov_s = np.array([[1, 0], [0, 1]])\nxs = ot.datasets.make_2D_samples_gauss(n_samples, mu_s, cov_s, random_state=4)\nxt = xs[::-1].copy()\np = ot.unif(n_samples)\nq = ot.unif(n_samples)\nC1 = ot.dist(xs, xs)\nC2 = ot.dist(xt, xt)\nC1 /= C1.max()\nC2 /= C2.max()\nG = ot.gromov.gromov_wasserstein(C1, C2, p, q, 'square_loss', verbose=True)\nnp.testing.assert_allclose(p, G.sum(1), atol=0.0001)\nnp.testing.assert_allclose(q, G.sum(0), atol=0.0001)\nId = 1 / (1.0 * n_samples) * np.eye(n_samples, n_samples)\nnp.testing.assert_allclose(G, np.flipud(Id), atol=0.0001)\ngw, log = ot.gromov.gromov_wasserstein2(C1, C2, p, q, 'kl_loss', log=True)\ngw_val = ot.gromov.gromov_wasserstein2(C1, C2, p, q, 'kl_loss', log=False)\nG = log['T']\nnp.testing.assert_allclose(gw, 0, atol=0.1, rtol=0.1)\nnp.testing.assert_allclose(gw, gw_val, atol=0.1, rtol=0.1)\nnp.testing.assert_allclose(p, G.sum(1), atol=0.0001)\nnp.testing.assert_allclose(q, G.sum(0), atol=0.0001)\n"
}