{
    "functionName": "test_outputs_for_small_sample_sizes",
    "className": null,
    "fileName": "/NASA_&_MLMCPy/tests_&_mlmc_&_test_MLMCSimulator.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n    Test various combinations of small sample sizes to ensure stability of\n    simulator under these conditions as well as accuracy of estimate and\n    variances.\n    \"\"\"\noutput1_filepath = os.path.join(data_path, 'spring_mass_1D_outputs_1.0.txt')\noutput2_filepath = os.path.join(data_path, 'spring_mass_1D_outputs_0.1.txt')\noutput3_filepath = os.path.join(data_path, 'spring_mass_1D_outputs_0.01.txt')\noutputs = list()\noutputs.append(np.genfromtxt(output1_filepath)[comm.rank::comm.size])\noutputs.append(np.genfromtxt(output2_filepath)[comm.rank::comm.size])\noutputs.append(np.genfromtxt(output3_filepath)[comm.rank::comm.size])\nall_sample_sizes = np.array(cpu_sample_sizes) * comm.size\nsim = MLMCSimulator(models=models_from_data, data=data_input)\nsim._caching_enabled = False\nsim._cpu_sample_sizes = np.array(cpu_sample_sizes)\nsim._sample_sizes = np.copy(all_sample_sizes)\nsim._determine_input_output_size()\nsim_estimate, ss, sim_variance = sim._run_simulation()\nsamples = []\nsample_index = 0\nfor i, s in enumerate(cpu_sample_sizes):\n    output = outputs[i][sample_index:sample_index + s]\n    if i > 0:\n        lower_output = outputs[i - 1][sample_index:sample_index + s]\n    else:\n        lower_output = np.zeros_like(output)\n    diff = output - lower_output\n    all_diff = np.concatenate(comm.allgather(diff))\n    samples.append(all_diff)\n    sample_index += s\nsample_mean = 0.0\nsample_variance = 0.0\nfor i, sample in enumerate(samples):\n    if all_sample_sizes[i] > 0:\n        sample_mean += np.sum(sample, axis=0) / all_sample_sizes[i]\n        sample_variance += np.var(sample, axis=0) / all_sample_sizes[i]\nassert np.isclose(sim_estimate, sample_mean, atol=1e-14)\nassert np.isclose(sim_variance, sample_variance, atol=1e-14)\npytest.mark.parametrize('cpu_sample_sizes', [[1, 0, 0], [1, 0, 1], [1, 1, 0\n    ], [1, 1, 1], [1, 2, 1], [10, 5, 2]])"
}