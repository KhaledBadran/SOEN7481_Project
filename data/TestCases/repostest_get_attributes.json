{
    "functionName": "test_get_attributes",
    "className": "TestProxyKmipClient",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_pie_&_test_client.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that a secret's attributes can be retrieved with proper input.\n        \"\"\"\nresult = results.GetAttributesResult(contents.ResultStatus(enums.\n    ResultStatus.SUCCESS), uuid='aaaaaaaa-1111-2222-3333-ffffffffffff',\n    attributes=[obj.Attribute(attribute_name=obj.Attribute.AttributeName(\n    'Name'), attribute_index=obj.Attribute.AttributeIndex(0),\n    attribute_value=attr.Name(name_value=attr.Name.NameValue('Test Name'),\n    name_type=attr.Name.NameType(enums.NameType.UNINTERPRETED_TEXT_STRING))\n    ), obj.Attribute(attribute_name=obj.Attribute.AttributeName(\n    'Object Type'), attribute_value=attr.ObjectType(enums.ObjectType.\n    SYMMETRIC_KEY))])\nwith ProxyKmipClient() as client:\n    client.proxy.get_attributes.return_value = result\n    result = client.get_attributes('aaaaaaaa-1111-2222-3333-ffffffffffff',\n        ['Name', 'Object Type'])\n    client.proxy.get_attributes.assert_called_with(\n        'aaaaaaaa-1111-2222-3333-ffffffffffff', ['Name', 'Object Type'])\n    self.assertIsInstance(result[0], six.string_types)\n    self.assertIsInstance(result[1], list)\n    for r in result[1]:\n        self.assertIsInstance(r, obj.Attribute)\nmock.patch('kmip.pie.client.KMIPProxy', mock.MagicMock(spec_set=KMIPProxy))"
}