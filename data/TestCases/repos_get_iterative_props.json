{
    "functionName": "_get_iterative_props",
    "className": "ReactiveTransport",
    "fileName": "/pmeal_&_OpenPNM/openpnm_&_algorithms_&_ReactiveTransport.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"\n        Find and return properties that need to be iterated while running the\n        algorithm\n\n        Notes\n        -----\n        This method was moved from ReactiveTransport class to GenericTransport\n        because source terms are not necessarily the only properties that need\n        iteration during an algorithm (ex. concentration-dependent conductance)\n        \"\"\"\nimport networkx as nx\nphase = self.project.phases(self.settings['phase'])\nphysics = self.project.find_physics(phase=phase)\ngeometries = self.project.geometries().values()\ndg = phase.models.dependency_graph(deep=True)\nfor g in geometries:\n    dg = nx.compose(dg, g.models.dependency_graph(deep=True))\nfor p in physics:\n    dg = nx.compose(dg, p.models.dependency_graph(deep=True))\nbase_props = [self.settings['quantity']] + self.settings['variable_props']\nif base_props is None:\n    return []\ndg = nx.DiGraph(nx.edge_dfs(dg, source=base_props))\nif len(dg.nodes) == 0:\n    return []\niterative_props = list(nx.dag.lexicographical_topological_sort(dg))\niterative_props.remove(self.settings['quantity'])\nreturn iterative_props\n"
}