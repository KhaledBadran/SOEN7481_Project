{
    "functionName": "test_with_nodata",
    "className": "TestConstStrideTiles",
    "fileName": "/vfdev-5_&_ImageTilingUtils/tests_&_test_const_stride.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "def _test(im_size, ts, scale, stride, origin):\n    debug_msg = 'im_size={} ts={} scale={} stride={} origin={}\\n'.format(\n        im_size, ts, scale, stride, origin)\n    tiles = ConstStrideTiles((im_size, im_size), (ts, ts), stride=(stride,\n        stride), scale=scale, origin=(origin, origin), include_nodata=True)\n    debug_msg += 'n={}\\n'.format(len(tiles))\n    self.assertGreater(len(tiles), 0, debug_msg)\n    self.assertLess(math.sqrt(len(tiles)), 1 + (im_size - origin) * 1.0 /\n        tiles.stride[0], debug_msg)\n    extent0, out_size0 = tiles[0]\n    debug_msg += 'extent0={}, out_size0={}\\n'.format(extent0, out_size0)\n    self.assertEqual((extent0[0], extent0[1]), (origin, origin), debug_msg)\n    self.assertEqual((out_size0[0], out_size0[1]), (ts, ts), debug_msg)\n    d = extent0[2], extent0[3]\n    for i in range(1, len(tiles)):\n        extent, out_size = tiles[i]\n        prev_extent, _ = tiles[i - 1]\n        self.assertEqual(d, (extent[2], extent[3]), debug_msg)\n        if extent[0] - prev_extent[0] > 0:\n            self.assertEqual(tiles.stride[0], extent[0] - prev_extent[0],\n                debug_msg)\n        if extent[1] - prev_extent[1] > 0:\n            self.assertEqual(tiles.stride[1], extent[1] - prev_extent[1],\n                debug_msg)\n        else:\n            self.assertEqual(0, extent[1] - prev_extent[1], debug_msg)\n        self.assertEqual(out_size, out_size0)\n    extent, _ = tiles[-1]\n    debug_msg += 'extent={}, out_size={}\\n'.format(extent, _)\n    self.assertLess(extent[0], im_size, debug_msg)\n    self.assertLess(extent[1], im_size, debug_msg)\n    self.assertGreaterEqual(extent[0] + max(extent[2], tiles.stride[0]),\n        im_size, debug_msg)\n    self.assertGreaterEqual(extent[1] + max(extent[3], tiles.stride[1]),\n        im_size, debug_msg)\nfor scale in [0.7, 0.89, 0.99, 1.0, 1.78, 2.12]:\n    for im_size in range(100, 120):\n        for ext in range(32, int(im_size * scale) - 1, 3):\n            for stride in range(int(ext * scale) // 2, int(ext * scale) + 10, 5\n                ):\n                for origin in range(-5, 5):\n                    _test(im_size, ext, scale, stride, origin)\n"
}