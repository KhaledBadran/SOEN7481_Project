{
    "functionName": "test_curve_on_surface_3d",
    "className": "TestNurbsCurveGeometry",
    "fileName": "/oberbichler_&_ANurbs/tests_&_TestCurveOnSurface.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "curve = an.NurbsCurveGeometry2D(degree=2, nb_poles=3, is_rational=False)\ncurve.knots = [7, 7, 9, 9]\ncurve.poles = [[3, 2], [1, 4], [2, 5]]\nsurface = an.NurbsSurfaceGeometry3D(degree_u=2, degree_v=2, nb_poles_u=3,\n    nb_poles_v=3, is_rational=False)\nsurface.knots_u = [1, 1, 3, 3]\nsurface.knots_v = [2, 2, 6, 6]\nsurface.poles = [[0, 0, 3], [0, 5, 0], [0, 10, 2], [5, 0, 5], [5, 5, 0], [5,\n    10, 3], [10, 0, 1], [10, 5, -1], [10, 10, 0]]\ncurve_on_surface = an.CurveOnSurface3D(curve, surface, curve.domain)\nassert_almost_equal(curve_on_surface.point_at(t=8), [3.75, 4.375, 1.5063476563]\n    )\nassert_almost_equal(curve_on_surface.derivatives_at(t=8, order=2), [[3.75, \n    4.375, 1.5063476563], [-2.5, 3.75, -0.658203125], [7.5, -1.25, 1.1621094]])\nspans = curve_on_surface.spans\nself.assertEqual(len(spans), 1)\nself.assertEqual(spans[0].t0, 7)\nself.assertEqual(spans[0].t1, 9)\n"
}