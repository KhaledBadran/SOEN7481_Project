{
    "functionName": "proxy",
    "className": null,
    "fileName": "/FaradayRF_&_Faraday-Software/faraday_&_proxy.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"\n    Provides a RESTful interface to the USB UART on localhost '/'\n\n    Starts a flask server on port 8000 (default) which serves data from the\n    requested Faraday port on localhost URL \"/\". This simple server is the\n    intermediary between the USB UART of a Faraday radio and software\n    applications. All data is transferred to the localhost as BASE64 packets in\n    JSON dictionaries while all data tranferred over USB UART is converted to\n    raw bytes.\n    \"\"\"\nif request.method == 'POST':\n    try:\n        data = request.get_json(force=False)\n        port = request.args.get('port', None)\n        callsign = request.args.get('callsign', None)\n        nodeid = request.args.get('nodeid', None)\n        if callsign:\n            callsign = callsign.upper()\n        if port is None:\n            raise StandardError(\"Missing 'port' parameter\")\n        else:\n            port = int(port)\n            if port > 255 or port < 0:\n                raise ValueError('Faraday Ports valid integer between 0-255')\n        if callsign is None:\n            raise StandardError(\"Missing 'callsign' parameter\")\n        else:\n            callsign = str(callsign)\n        if nodeid is None:\n            raise StandardError(\"Missing 'nodeid' parameter\")\n        else:\n            nodeid = int(nodeid)\n            if nodeid > 255 or nodeid < 0:\n                raise ValueError(\n                    \"Faraday Node ID's valid integer between 0-255\")\n    except ValueError as e:\n        logger.error('ValueError: ' + str(e))\n        return json.dumps({'error': str(e)}), 400\n    except IndexError as e:\n        logger.error('IndexError: ' + str(e))\n        return json.dumps({'error': str(e)}), 400\n    except KeyError as e:\n        logger.error('KeyError: ' + str(e))\n        return json.dumps({'error': str(e)}), 400\n    except StandardError as e:\n        logger.error('StandardError: ' + str(e))\n        return json.dumps({'error': str(e)}), 400\n    station = callsign + '-' + str(nodeid)\n    try:\n        postDicts[station]\n    except KeyError as e:\n        logger.error('KeyError: ' + str(e))\n        return json.dumps({'error': str(e)}), 400\n    try:\n        data['data']\n    except KeyError:\n        logger.error(\"Error: No 'data' key in dictionary\")\n        return json.dumps({'error': \"Error: No 'data' key in dictionary\"}), 400\n    except TypeError:\n        logger.error('Error: No data provided in POST')\n        return json.dumps({'error': 'Error: No data provided in POST'}), 400\n    else:\n        total = len(data['data'])\n        sent = 0\n        for item in data['data']:\n            try:\n                postDicts[station][port].append(item)\n            except:\n                postDicts[station][port] = deque([], maxlen=100)\n                postDicts[station][port].append(item)\n            sent += 1\n        return json.dumps({'status': 'Posted {0} of {1} Packet(s)'.format(\n            sent, total)}), 200\nelse:\n    try:\n        port = request.args.get('port', None)\n        limit = request.args.get('limit', 100)\n        callsign = request.args.get('callsign', None)\n        nodeid = request.args.get('nodeid', None)\n    except ValueError as e:\n        logger.error('ValueError: ' + str(e))\n        return json.dumps({'error': str(e)}), 400\n    except IndexError as e:\n        logger.error('IndexError: ' + str(e))\n        return json.dumps({'error': str(e)}), 400\n    except KeyError as e:\n        logger.error('KeyError: ' + str(e))\n        return json.dumps({'error': str(e)}), 400\n    if callsign:\n        callsign = callsign.upper()\n    try:\n        if port is None:\n            raise StandardError(\"Missing 'port' parameter\")\n        else:\n            port = int(port)\n            if port > 255 or port < 0:\n                raise ValueError('Faraday Ports valid integer between 0-255')\n        if callsign is None:\n            raise StandardError(\"Missing 'callsign' parameter\")\n        else:\n            callsign = str(callsign)\n        if nodeid is None:\n            raise StandardError(\"Missing 'nodeid' parameter\")\n        else:\n            nodeid = int(nodeid)\n            if nodeid > 255 or nodeid < 0:\n                raise ValueError(\n                    \"Faraday Node ID's valid integer between 0-255\")\n        station = callsign + '-' + str(nodeid)\n        try:\n            getDicts[station][port]\n        except KeyError as e:\n            getDicts[station][port] = deque([])\n        if limit is None:\n            limit = len(getDicts[station][port])\n        else:\n            limit = int(limit)\n            if limit <= 0:\n                message = \"Error: Limit '{0}' is invalid\".format(limit)\n                return json.dumps({'error': message}), 400\n    except ValueError as e:\n        logger.error('ValueError: ' + str(e))\n        return json.dumps({'error': str(e)}), 400\n    except IndexError as e:\n        logger.error('IndexError: ' + str(e))\n        return json.dumps({'error': str(e)}), 400\n    except KeyError as e:\n        logger.error('KeyError: ' + str(e))\n        return json.dumps({'error': str(e)}), 400\n    except StandardError as e:\n        logger.error('StandardError: ' + str(e))\n        return json.dumps({'error': str(e)}), 400\n    try:\n        if len(getDicts[callsign + '-' + str(nodeid)][port]) > 0:\n            data = []\n            while getDicts[callsign + '-' + str(nodeid)][port]:\n                packet = getDicts[callsign + '-' + str(nodeid)][port].popleft()\n                data.append(packet)\n                if len(data) >= limit:\n                    break\n            return json.dumps(data, indent=1), 200, {'Content-Type':\n                'application/json'}\n        else:\n            logger.debug('Empty buffer for port {0}'.format(port))\n            return '', 204\n    except ValueError as e:\n        logger.error('ValueError: ' + str(e))\n        return json.dumps({'error': str(e)}), 400\n    except IndexError as e:\n        logger.error('IndexError: ' + str(e))\n        return json.dumps({'error': str(e)}), 400\n    except KeyError as e:\n        logger.error('KeyError: ' + str(e))\n        return json.dumps({'error': str(e)}), 400\n    except StandardError as e:\n        logger.error('StandardError: ' + str(e))\n        return json.dumps({'error': str(e)}), 400\napp.route('/', methods=['GET', 'POST'])"
}