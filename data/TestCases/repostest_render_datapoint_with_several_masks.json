{
    "functionName": "test_render_datapoint_with_several_masks",
    "className": "TestDatasetExporter",
    "fileName": "/vfdev-5_&_ImageDatasetViz/tests_&_test_dataset_exporter.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "img = ((123, 234, 220) * np.ones((256, 256, 3))).astype(np.uint8)\nmask1 = np.zeros((256, 256, 3), dtype=np.uint8)\nmask1[34:145, 56:123, :] = 255, 0, 0\nmask2 = np.zeros((256, 256, 3), dtype=np.uint8)\nmask2[134:245, 156:223, :] = 255, 255, 0\nalpha1 = 0.7\nalpha2 = 0.7\ntargets = (mask1, {'blend_alpha': alpha1}), (mask2, {'blend_alpha': alpha2}), (\n    (bbox_to_points((10, 12, 145, 156)), 'A'), (bbox_to_points((109, 120, \n    215, 236)), 'B'), {'geom_color': (255, 255, 0)}), (bbox_to_points((129,\n    140, 175, 186)), 'C')\nres = render_datapoint(img, targets, blend_alpha=0.5)\nassert isinstance(res, Image.Image)\nnp_res = np.asarray(res)\nunique_pixels = np_res.reshape(-1, 3).tolist()\nunique_pixels = set([tuple(p) for p in unique_pixels])\nassert (123, 234, 220) in unique_pixels\nassert (int(123 * (1.0 - alpha1) + alpha1 * 255), int(234 * (1.0 - alpha1) +\n    alpha1 * 0), int(220 * (1.0 - alpha1) + alpha1 * 0)) in unique_pixels\nassert (int(123 * (1.0 - alpha2) + alpha2 * 255), int(234 * (1.0 - alpha2) +\n    alpha2 * 255), int(220 * (1.0 - alpha2) + alpha2 * 0)) in unique_pixels\nassert (255, 255, 0) in unique_pixels\nassert (0, 255, 0) in unique_pixels\nassert (255, 255, 255) in unique_pixels\nassert (0, 0, 0) in unique_pixels\n"
}