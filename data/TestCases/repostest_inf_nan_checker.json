{
    "functionName": "test_inf_nan_checker",
    "className": "TestNeuralPooling",
    "fileName": "/apmoore1_&_Bella/tests_&_test_neural_pooling.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Tests the decorator `inf_nan_check`.\n        \"\"\"\nvalid_zero_matrix = np.zeros((3, 3), dtype=np.float32)\ntest_zero_matrix = matrix_inf_nan_check(valid_zero_matrix)\nthe_same = np.array_equal(valid_zero_matrix, test_zero_matrix)\nself.assertEqual(True, the_same, msg=\n    'These two matrices should be the same {} {}'.format(valid_zero_matrix,\n    test_zero_matrix))\nvalid_zero_matrix = np.zeros((3, 3), dtype=np.float64)\ntest_zero_matrix = matrix_inf_nan_check(valid_zero_matrix)\nthe_same = np.array_equal(valid_zero_matrix, test_zero_matrix)\nself.assertEqual(True, the_same, msg=\n    'These two matrices should be the same {} {}'.format(valid_zero_matrix,\n    test_zero_matrix))\nwith self.assertRaises(TypeError, msg=\n    'Should not accept any numpy type that is not float type'):\n    error_zero_matrix = np.zeros((3, 3), dtype=np.int32)\n    matrix_inf_nan_check(error_zero_matrix)\nfloat_32_info = np.finfo(np.float32)\nlower_than_values = np.asarray([-np.inf, 0], dtype=np.float32)\nvalid_values = np.asarray([float_32_info.min / 2, 0], dtype=np.float32)\ntest_result = np.array_equal(valid_values, matrix_inf_nan_check(\n    lower_than_values))\nself.assertEqual(True, test_result, msg=\n    'Should changed the lower than inf value to the lowest possible value for 32 bit float'\n    )\nhigher_than_values = np.asarray([np.inf, 0], dtype=np.float32)\nvalid_values = np.asarray([float_32_info.max / 2, 0], dtype=np.float32)\ntest_result = np.array_equal(valid_values, matrix_inf_nan_check(\n    higher_than_values))\nself.assertEqual(True, test_result, msg=\n    'Should changed the higher than inf value to the highest possible value for 32 bit float'\n    )\nhigher_and_lower = np.asarray([np.inf, -np.inf], dtype=np.float32)\nvalid_values = np.asarray([float_32_info.max / 2, float_32_info.min / 2],\n    dtype=np.float32)\ntest_result = np.array_equal(valid_values, matrix_inf_nan_check(\n    higher_and_lower))\nself.assertEqual(True, test_result, msg=\n    'Should be able to handle both lower and higher than inf for float 32')\nfloat_64_info = np.finfo(np.float64)\nlower_than_values = np.asarray([-np.inf, 0], dtype=np.float64)\nvalid_values = np.asarray([float_64_info.min / 2, 0], dtype=np.float64)\ntest_result = np.array_equal(valid_values, matrix_inf_nan_check(\n    lower_than_values))\nself.assertEqual(True, test_result, msg=\n    'Should changed the lower than inf value to the lowest possible value for 64 bit float'\n    )\nhigher_than_values = np.asarray([np.inf, 0], dtype=np.float64)\nvalid_values = np.asarray([float_64_info.max / 2, 0], dtype=np.float64)\ntest_result = np.array_equal(valid_values, matrix_inf_nan_check(\n    higher_than_values))\nself.assertEqual(True, test_result, msg=\n    'Should changed the higher than inf value to the highest possible value for 64 bit float'\n    )\nhigher_and_lower = np.asarray([np.inf, -np.inf], dtype=np.float64)\nvalid_values = np.asarray([float_64_info.max / 2, float_64_info.min / 2],\n    dtype=np.float64)\ntest_result = np.array_equal(valid_values, matrix_inf_nan_check(\n    higher_and_lower))\nself.assertEqual(True, test_result, msg=\n    'Should be able to handle both lower and higher than inf for float 64')\nnan_values = np.asarray([np.inf, -np.inf, 3.0, np.nan], dtype=np.float32)\nvalid_values = np.asarray([float_32_info.max / 2, float_32_info.min / 2, \n    3.0, 0], dtype=np.float32)\ntest_result = np.array_equal(valid_values, matrix_inf_nan_check(valid_values))\nself.assertEqual(True, test_result, msg=\n    'Cannot convert NAN values to 0 for float 32')\nnan_values = np.asarray([np.inf, -np.inf, 3.0, np.nan], dtype=np.float64)\nvalid_values = np.asarray([float_64_info.max / 2, float_64_info.min / 2, \n    3.0, 0], dtype=np.float64)\ntest_result = np.array_equal(valid_values, matrix_inf_nan_check(valid_values))\nself.assertEqual(True, test_result, msg=\n    'Cannot convert NAN values to 0 for float 64')\n"
}