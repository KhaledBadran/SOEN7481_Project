{
    "functionName": "test_inputFunctionsMustBeEmpty",
    "className": "MethodicalTests",
    "fileName": "/glyph_&_Automat/automat_&__test_&_test_methodical.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        The wrapped input function must have an empty body.\n        \"\"\"\n_methodical._empty()\n_methodical._docstring()\nclass Mechanism(object):\n    m = MethodicalMachine()\n    with self.assertRaises(ValueError) as cm:\n\n        @m.input()\n        def input(self):\n            \"\"\"an input\"\"\"\n            list()\n    self.assertEqual(str(cm.exception), 'function body must be empty')\nclass MechanismWithDocstring(object):\n    m = MethodicalMachine()\n\n    @m.input()\n    def input(self):\n        \"\"\"an input\"\"\"\n\n    @m.state(initial=True)\n    def start(self):\n        \"\"\"starting state\"\"\"\n    start.upon(input, enter=start, outputs=[])\nMechanismWithDocstring().input()\nclass MechanismWithPass(object):\n    m = MethodicalMachine()\n\n    @m.input()\n    def input(self):\n        pass\n\n    @m.state(initial=True)\n    def start(self):\n        \"\"\"starting state\"\"\"\n    start.upon(input, enter=start, outputs=[])\nMechanismWithPass().input()\nclass MechanismWithDocstringAndPass(object):\n    m = MethodicalMachine()\n\n    @m.input()\n    def input(self):\n        \"\"\"an input\"\"\"\n        pass\n\n    @m.state(initial=True)\n    def start(self):\n        \"\"\"starting state\"\"\"\n    start.upon(input, enter=start, outputs=[])\nMechanismWithDocstringAndPass().input()\nclass MechanismReturnsNone(object):\n    m = MethodicalMachine()\n\n    @m.input()\n    def input(self):\n        return None\n\n    @m.state(initial=True)\n    def start(self):\n        \"\"\"starting state\"\"\"\n    start.upon(input, enter=start, outputs=[])\nMechanismReturnsNone().input()\nclass MechanismWithDocstringAndReturnsNone(object):\n    m = MethodicalMachine()\n\n    @m.input()\n    def input(self):\n        \"\"\"an input\"\"\"\n        return None\n\n    @m.state(initial=True)\n    def start(self):\n        \"\"\"starting state\"\"\"\n    start.upon(input, enter=start, outputs=[])\nMechanismWithDocstringAndReturnsNone().input()\n"
}