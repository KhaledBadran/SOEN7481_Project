{
    "functionName": "test_unsupported",
    "className": null,
    "fileName": "/PRIArobotics_&_HedgehogServer/tests_&_test_server.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "async with conn_req() as socket:\n    await assertReplyReq(socket, emergency.Action(True), ack.\n        UNSUPPORTED_COMMAND)\n    await assertReplyReq(socket, emergency.Request(), ack.UNSUPPORTED_COMMAND)\n    await assertReplyReq(socket, io.Action(0, io.INPUT_PULLDOWN), ack.\n        UNSUPPORTED_COMMAND)\n    await assertReplyReq(socket, analog.Request(0), ack.UNSUPPORTED_COMMAND)\n    await assertReplyReq(socket, digital.Request(0), ack.UNSUPPORTED_COMMAND)\n    await assertReplyReq(socket, imu.RateRequest(), ack.UNSUPPORTED_COMMAND)\n    await assertReplyReq(socket, imu.AccelerationRequest(), ack.\n        UNSUPPORTED_COMMAND)\n    await assertReplyReq(socket, imu.PoseRequest(), ack.UNSUPPORTED_COMMAND)\n    await assertReplyReq(socket, motor.ConfigAction(0, motor.DcConfig()),\n        ack.UNSUPPORTED_COMMAND)\n    await assertReplyReq(socket, motor.Action(0, motor.POWER), ack.\n        UNSUPPORTED_COMMAND)\n    await assertReplyReq(socket, motor.StateRequest(0), ack.UNSUPPORTED_COMMAND\n        )\n    await assertReplyReq(socket, motor.SetPositionAction(0, 0), ack.\n        UNSUPPORTED_COMMAND)\n    await assertReplyReq(socket, servo.Action(0, 0), ack.UNSUPPORTED_COMMAND)\n    await assertReplyReq(socket, speaker.Action(440), ack.UNSUPPORTED_COMMAND)\npytest.mark.triopytest.mark.parametrize('hardware_adapter', [HardwareAdapter()])"
}