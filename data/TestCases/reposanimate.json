{
    "functionName": "animate",
    "className": "Brain",
    "fileName": "/nipy_&_PySurfer/surfer_&_viz.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"Animate a rotation.\n\n        Currently only rotations through the axial plane are allowed.\n\n        Parameters\n        ----------\n        views: sequence\n            views to animate through\n        n_steps: float\n            number of steps to take in between\n        fname: string\n            If not None, it saves the animation as a movie.\n            fname should end in '.avi' as only the AVI format is supported\n        use_cache: bool\n            Use previously generated images in ``./.tmp/``\n        row : int\n            Row index of the brain to use\n        col : int\n            Column index of the brain to use\n        \"\"\"\nbrain = self.brain_matrix[row, col]\ngviews = list(map(brain._xfm_view, views))\nallowed = 'lateral', 'caudal', 'medial', 'rostral'\nif not len([v for v in gviews if v in allowed]) == len(gviews):\n    raise ValueError('Animate through %s views.' % ' '.join(allowed))\nif fname is not None:\n    if not fname.endswith('.avi'):\n        raise ValueError('Can only output to AVI currently.')\n    tmp_dir = './.tmp'\n    tmp_fname = pjoin(tmp_dir, '%05d.png')\n    if not os.path.isdir(tmp_dir):\n        os.mkdir(tmp_dir)\nfor i, beg in enumerate(gviews):\n    try:\n        end = gviews[i + 1]\n        dv, dr = brain._min_diff(beg, end)\n        dv /= np.array(n_steps)\n        dr /= np.array(n_steps)\n        brain.show_view(beg)\n        for i in range(int(n_steps)):\n            brain._f.scene.camera.orthogonalize_view_up()\n            brain._f.scene.camera.azimuth(dv[0])\n            brain._f.scene.camera.elevation(dv[1])\n            brain._f.scene.renderer.reset_camera_clipping_range()\n            _force_render([[brain._f]])\n            if fname is not None:\n                if not (os.path.isfile(tmp_fname % i) and use_cache):\n                    self.save_single_image(tmp_fname % i, row, col)\n    except IndexError:\n        pass\nif fname is not None:\n    fps = 10\n    enc_cmd = ' '.join(['mencoder', '-ovc lavc', '-mf fps=%d' % fps, \n        'mf://%s' % tmp_fname, '-of avi', '-lavcopts vcodec=mjpeg', \n        '-ofps %d' % fps, '-noskip', '-o %s' % fname])\n    ret = os.system(enc_cmd)\n    if ret:\n        print('\\n\\nError occured when exporting movie\\n\\n')\n"
}