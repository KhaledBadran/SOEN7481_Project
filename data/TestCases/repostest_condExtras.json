{
    "functionName": "test_condExtras",
    "className": "TestDatabase",
    "fileName": "/corydodt_&_Hypy/src_&_hypy_&_test_lib.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Tests for search skip, search options, cond on attributes\n        \"\"\"\nwith self.freshenDatabase(extras=10) as db:\n    self.assertEqual(len(db), 13)\n    cond4_8 = HCondition(u'filler', max=5)\n    cond4_8.setOrder(u'@id NUMA')\n    cond9_11 = HCondition(u'filler', max=3, skip=5)\n    cond9_11.setOrder(u'@id NUMA')\n    res1 = db.search(cond4_8)\n    self.assertEqual(res1.pluck(u'@uri'), [u'4', u'5', u'6', u'7', u'8'])\n    res2 = db.search(cond9_11)\n    self.assertEqual(res2.pluck(u'@uri'), [u'9', u'10', u'11'])\n    result = db.search(HCondition(u'ipsum score', matching='simple'))\n    self.assertEqual(len(result), 0)\n    result = db.search(HCondition(u'ipsum score', matching='union'))\n    self.assertEqual(len(result), 2)\n    result = db.search(HCondition(u'lorem* ipsum*', matching='simple'))\n    self.assertEqual(len(result), 1)\n    result = db.search(HCondition(u'lorem* ipsum*', matching='isect'))\n    self.assertEqual(len(result), 0)\n    result = db.search(HCondition(u'lorem ipsum', matching='isect'))\n    self.assertEqual(len(result), 1)\n    result = db.search(HCondition(u'lorem* ipsum*', matching='simple'))\n    self.assertEqual(len(result), 1)\n    result = db.search(HCondition(u'lorem* ipsum*', matching='rough'))\n    self.assertEqual(len(result), 0)\n    result = db.search(HCondition(u'lorem ipsum', matching='rough'))\n    self.assertEqual(len(result), 1)\n    result = db.search(HCondition(u'7*', matching='simple', max=2))\n    self.assertEqual(len(result), 1)\n    self.assertEqual(result[0][u'@uri'], u'3')\n    cc = HCondition(u'*.**')\n    self.assertRaises(TypeError, cc.addAttr, b'xxx')\n    HCondition(phrase=None)\n\n    def attrSearch(expr, order=None, phrase=None):\n        if phrase:\n            cond = HCondition(phrase)\n        else:\n            cond = HCondition()\n        cond.addAttr(expr)\n        if order:\n            self.assertRaises(TypeError, cond.setOrder, b'*.**')\n            cond.setOrder(order)\n        return db.search(cond)\n    result = attrSearch(u'description STREQ 4444')\n    self.assertEqual(result.pluck(u'@uri'), [u'4'])\n    result = attrSearch(u'specialId NUMGE 10')\n    self.assertEqual(result.pluck(u'@uri'), [u'10', u'11', u'12', u'13'])\n    result = attrSearch(u'date NUMGE 2008-12-09')\n    self.assertEqual(sorted(map(int, result.pluck(u'@uri'))), [9, 10, 11, \n        12, 13])\n    result = attrSearch(u'description STRRX .{10,14}')\n    self.assertEqual(result.pluck(u'@uri'), [u'10', u'11', u'12', u'13'])\n    result = attrSearch(u'description !STRRX .{10,14}', u'@uri NUMA')\n    self.assertEqual(result.pluck(u'@uri'), list(u'123456789'))\n    result = attrSearch(u'description STRRX .{10,14}', u'@uri NUMD')\n    self.assertEqual(result.pluck(u'@uri'), [u'13', u'12', u'11', u'10'])\n    result = attrSearch(u'description STRRX .{10,14}', u'@uri NUMD', u'*.**')\n    self.assertEqual(result.pluck(u'@uri'), [u'13', u'12', u'11', u'10'])\n"
}