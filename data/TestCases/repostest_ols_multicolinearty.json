{
    "functionName": "test_ols_multicolinearty",
    "className": "NegativeBinomialTests",
    "fileName": "/Mogeng_&_IOHMM/tests_&_test_GLM.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "self.model_col = GLM(solver='irls', family=NegativeBinomialWrapper(),\n    fit_intercept=False, est_stderr=True, reg_method=None, alpha=0,\n    l1_ratio=0, tol=0.0001, max_iter=100, coef=None, stderr=None,\n    dispersion=None)\nX = np.hstack([self.X[:, 0:1], self.X[:, 0:1]])\nself.model_col.fit(X, self.Y, sample_weight=0.5)\nself.model = GLM(solver='IRLS', family=NegativeBinomialWrapper(),\n    fit_intercept=False, est_stderr=True, reg_method=None, alpha=0,\n    l1_ratio=0, tol=0.0001, max_iter=100, coef=None, stderr=None,\n    dispersion=None)\nself.model.fit(self.X[:, 0:1], self.Y, sample_weight=0.5)\nnp.testing.assert_array_almost_equal(self.model_col.coef, np.array([0.059, \n    0.059]), decimal=3)\nnp.testing.assert_array_almost_equal(self.model_col.dispersion, self.model.\n    dispersion, decimal=3)\nnp.testing.assert_array_almost_equal(self.model_col.loglike_per_sample(X,\n    self.Y), self.model.loglike_per_sample(self.X[:, 0:1], self.Y), decimal=3)\nnp.testing.assert_array_almost_equal(self.model_col.predict(X), self.model.\n    predict(self.X[:, 0:1]), decimal=3)\n"
}