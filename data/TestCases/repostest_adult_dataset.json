{
    "functionName": "test_adult_dataset",
    "className": null,
    "fileName": "/tommyod_&_Efficient-Apriori/efficient_apriori_&_tests_&_test_on_real_data.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n    Test on the Adult dataset, which may be found here:\n        https://archive.ics.uci.edu/ml/datasets/adult\n        \n    Some numeric columns were removed. The age was discretized.\n    The purpose of this test is to assure that the algorithm can deal with a\n    small 2.2 MB (30k rows) data set reasonably efficiently.\n    \n    Test against R, from the following code\n    > library(arules)\n    > df <- read.csv(\"adult_data_cleaned.txt\", header = FALSE)\n    > df <- data.frame(sapply(df, as.factor))\n    > rules <- apriori(df, parameter = list(supp = 0.4, conf = 0.4))\n    > inspect(head(rules, by = \"confidence\"m = 10))\n\n    \"\"\"\ndef data_generator(filename):\n    \"\"\"\n        Data generator, needs to return a generator to be called several times.\n        \"\"\"\n\n    def data_gen():\n        with open(filename) as file:\n            for line in file:\n                yield tuple(k.strip() for k in line.split(','))\n    return data_gen\ntry:\n    base, _ = os.path.split(__file__)\n    filename = os.path.join(base, 'adult_data_cleaned.txt')\nexcept NameError:\n    filename = 'adult_data_cleaned.txt'\ntransactions = data_generator(filename)\nitemsets, rules = apriori(transactions, min_support=0.2, min_confidence=0.2)\nrules_set = set(rules)\nassert Rule(('Married-civ-spouse', 'Husband', 'middle-aged'), ('Male',)\n    ) in rules_set\nassert Rule(('Married-civ-spouse', 'White', 'middle-aged', 'Male'), (\n    'Husband',)) in rules_set\nassert Rule(('<=50K', 'young'), ('Never-married',)) in rules_set\nassert Rule(('Husband', 'White', 'Male', 'middle-aged'), (\n    'Married-civ-spouse',)) in rules_set\nassert Rule(('young',), ('Never-married',)) in rules_set\nfor rule in rules:\n    if rule == Rule(('Married-civ-spouse', 'Husband', 'middle-aged'), ('Male',)\n        ):\n        assert abs(rule.support - 0.2356193) < 1e-06\n        assert abs(rule.confidence - 0.9998697) < 1e-06\n        assert abs(rule.lift - 1.494115) < 1e-06\n    if rule == Rule(('Married-civ-spouse', 'White', 'middle-aged', 'Male'),\n        ('Husband',)):\n        assert abs(rule.support - 0.2123399) < 1e-06\n        assert abs(rule.confidence - 0.9938192) < 1e-06\n        assert abs(rule.lift - 2.452797) < 1e-06\n    if rule == Rule(('<=50K', 'young'), ('Never-married',)):\n        assert abs(rule.support - 0.2170081) < 1e-06\n        assert abs(rule.confidence - 0.7680435) < 1e-06\n        assert abs(rule.lift - 2.34094) < 1e-06\n    if rule == Rule(('Husband', 'White', 'Male', 'middle-aged'), (\n        'Married-civ-spouse',)):\n        assert abs(rule.support - 0.2123399) < 1e-06\n        assert abs(rule.confidence - 0.9995663) < 1e-06\n        assert abs(rule.lift - 2.173269) < 1e-06\n    if rule == Rule(('young',), ('Never-married',)):\n        assert abs(rule.support - 0.2200792) < 1e-06\n        assert abs(rule.confidence - 0.7379261) < 1e-06\n        assert abs(rule.lift - 2.249144) < 1e-06\n"
}