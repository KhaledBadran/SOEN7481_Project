{
    "functionName": "test_process_template_attribute_unsupported_features",
    "className": "TestKmipEngine",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_services_&_server_&_test_engine.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that the right errors are generated when unsupported features\n        are referenced while processing a template attribute.\n        \"\"\"\ne = engine.KmipEngine()\ne._data_store = self.engine\ne._data_store_session_factory = self.session_factory\ne._data_session = e._data_store_session_factory()\ne._logger = mock.MagicMock()\nattribute_factory = factory.AttributeFactory()\ntemplate_attribute = objects.TemplateAttribute(names=[attributes.Name.\n    create('invalid', enums.NameType.UNINTERPRETED_TEXT_STRING)])\nargs = template_attribute,\nregex = 'Attribute templates are not supported.'\nsix.assertRaisesRegex(self, exceptions.ItemNotFound, regex, e.\n    _process_template_attribute, *args)\nname = attribute_factory.create_attribute(enums.AttributeType.NAME,\n    attributes.Name.create('Test Symmetric Key', enums.NameType.\n    UNINTERPRETED_TEXT_STRING))\nname.attribute_name.value = 'invalid'\ntemplate_attribute = objects.TemplateAttribute(attributes=[name])\nargs = template_attribute,\nregex = 'The invalid attribute is unsupported.'\nsix.assertRaisesRegex(self, exceptions.InvalidField, regex, e.\n    _process_template_attribute, *args)\nname_a = attribute_factory.create_attribute(enums.AttributeType.NAME,\n    attributes.Name.create('Test Symmetric Key', enums.NameType.\n    UNINTERPRETED_TEXT_STRING))\nname_b = attribute_factory.create_attribute(enums.AttributeType.NAME,\n    attributes.Name.create('Test Symmetric Key', enums.NameType.\n    UNINTERPRETED_TEXT_STRING))\ntemplate_attribute = objects.TemplateAttribute(attributes=[name_a, name_b])\nargs = template_attribute,\nregex = 'Attribute index missing from multivalued attribute.'\nsix.assertRaisesRegex(self, exceptions.InvalidField, regex, e.\n    _process_template_attribute, *args)\nalgorithm = attribute_factory.create_attribute(enums.AttributeType.\n    CRYPTOGRAPHIC_ALGORITHM, enums.CryptographicAlgorithm.AES, 1)\ntemplate_attribute = objects.TemplateAttribute(attributes=[algorithm])\nargs = template_attribute,\nregex = 'Non-zero attribute index found for single-valued attribute.'\nsix.assertRaisesRegex(self, exceptions.InvalidField, regex, e.\n    _process_template_attribute, *args)\nalgorithm_a = attribute_factory.create_attribute(enums.AttributeType.\n    CRYPTOGRAPHIC_ALGORITHM, enums.CryptographicAlgorithm.AES)\nalgorithm_b = attribute_factory.create_attribute(enums.AttributeType.\n    CRYPTOGRAPHIC_ALGORITHM, enums.CryptographicAlgorithm.TRIPLE_DES)\ntemplate_attribute = objects.TemplateAttribute(attributes=[algorithm_a,\n    algorithm_b])\nargs = template_attribute,\nregex = (\n    'Cannot set multiple instances of the Cryptographic Algorithm attribute.')\nsix.assertRaisesRegex(self, exceptions.IndexOutOfBounds, regex, e.\n    _process_template_attribute, *args)\n"
}