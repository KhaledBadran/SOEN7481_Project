{
    "functionName": "get_all_params",
    "className": null,
    "fileName": "/Lasagne_&_Lasagne/lasagne_&_layers_&_helper.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"\n    Returns a list of Theano shared variables or expressions that\n    parameterize the layer.\n\n    This function gathers all parameters of all layers below one or more given\n    :class:`Layer` instances, including the layer(s) itself. Its main use is to\n    collect all parameters of a network just given the output layer(s).\n\n    By default, all shared variables that participate in the forward pass will\n    be returned. The list can optionally be filtered by specifying tags as\n    keyword arguments. For example, ``trainable=True`` will only return\n    trainable parameters, and ``regularizable=True`` will only return\n    parameters that can be regularized (e.g., by L2 decay).\n\n    Parameters\n    ----------\n    layer : Layer or list\n        The :class:`Layer` instance for which to gather all parameters, or a\n        list of :class:`Layer` instances.\n\n    unwrap_shared : bool (default: True)\n        Affects only parameters that were set to a Theano expression. If\n        ``True`` the function returns the shared variables contained in\n        the expression, otherwise the Theano expression itself.\n\n    **tags (optional)\n        tags can be specified to filter the list. Specifying ``tag1=True``\n        will limit the list to parameters that are tagged with ``tag1``.\n        Specifying ``tag1=False`` will limit the list to parameters that\n        are not tagged with ``tag1``. Commonly used tags are\n        ``regularizable`` and ``trainable``.\n\n    Returns\n    -------\n    params : list\n        A list of Theano shared variables or expressions representing\n        the parameters.\n\n    Notes\n    -----\n    If any of the layers' parameters was set to a Theano expression instead\n    of a shared variable, `unwrap_shared` controls whether to return the\n    shared variables involved in that expression (``unwrap_shared=True``,\n    the default), or the expression itself (``unwrap_shared=False``). In\n    either case, tag filtering applies to the expressions, considering all\n    variables within an expression to be tagged the same.\n\n    Examples\n    --------\n    Collecting all parameters from a two-layer network:\n\n    >>> from lasagne.layers import InputLayer, DenseLayer\n    >>> l_in = InputLayer((100, 20))\n    >>> l1 = DenseLayer(l_in, num_units=50)\n    >>> l2 = DenseLayer(l1, num_units=30)\n    >>> all_params = get_all_params(l2)\n    >>> all_params == [l1.W, l1.b, l2.W, l2.b]\n    True\n\n    Parameters can be filtered by tags, and parameter expressions are\n    unwrapped to return involved shared variables by default:\n\n    >>> from lasagne.utils import floatX\n    >>> w1 = theano.shared(floatX(.01 * np.random.randn(50, 30)))\n    >>> w2 = theano.shared(floatX(1))\n    >>> l2 = DenseLayer(l1, num_units=30, W=theano.tensor.exp(w1) - w2, b=None)\n    >>> all_params = get_all_params(l2, regularizable=True)\n    >>> all_params == [l1.W, w1, w2]\n    True\n\n    When disabling unwrapping, the expression for ``l2.W`` is returned instead:\n\n    >>> all_params = get_all_params(l2, regularizable=True,\n    ...                             unwrap_shared=False)\n    >>> all_params == [l1.W, l2.W]\n    True\n    \"\"\"\nlayers = get_all_layers(layer)\nparams = chain.from_iterable(l.get_params(unwrap_shared=unwrap_shared, **\n    tags) for l in layers)\nreturn utils.unique(params)\n"
}