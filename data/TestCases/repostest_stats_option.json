{
    "functionName": "test_stats_option",
    "className": "TestFieldCount",
    "fileName": "/kenfar_&_DataGristle/scripts_&_tests_&_test_gristle_validator_cmd.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\" The stats option will create a report to stdout\n            The stats should look like this:\n                input_cnt        | 7\n                invalid_cnt      | 7\n                valid_cnt        | 0\n        \"\"\"\nself.cmd = (\n    \"%(pgm)s %(in_fqfn)s                                   -d ','                                             --fieldcnt 70                                      --quoting 'quote_none'                             --outgood %(outgood)s                              --outerr  %(outerr)s                               --stats                                      \"\n     % {'pgm': self.pgm, 'outgood': self.outgood_fqfn, 'outerr': self.\n    outerr_fqfn, 'in_fqfn': self.std_7x7_fqfn})\nprint(self.cmd)\nrunner = envoy.run(self.cmd)\nself.get_outputs(runner)\nprint(self.std_out)\nprint(self.std_err)\nassert self.status_code == errno.EBADMSG\nassert self.err_output\nassert not self.good_output\nassert self.std_out\nassert self.std_out\nassert not self.std_err or len(self.std_err\n    ) < 50 and 'Coverage.py' in self.std_err\nstd_out_recs = self.std_out.split('\\n')\ninput_cnt_found = False\ninvalid_cnt_found = False\nvalid_cnt_found = False\nfor rec in std_out_recs:\n    if not rec:\n        continue\n    fields = rec.split('|')\n    assert len(fields) == 2\n    if fields[0].strip() == 'input_cnt':\n        assert fields[1].strip() == '7'\n        input_cnt_found = True\n    elif fields[0].strip() == 'invalid_cnt':\n        assert fields[1].strip() == '7'\n        invalid_cnt_found = True\n    elif fields[0].strip() == 'valid_cnt':\n        assert fields[1].strip() == '0'\n        valid_cnt_found = True\nassert input_cnt_found\nassert invalid_cnt_found\nassert valid_cnt_found\n"
}