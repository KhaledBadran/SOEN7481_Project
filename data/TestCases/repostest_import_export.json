{
    "functionName": "test_import_export",
    "className": "TestTpmBackEnds",
    "fileName": "/named-data_&_PyNDN2/tests_&_integration_tests_&_test_tpm_back_ends.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "privateKeyPkcs1Base64 = \"\"\"MIIEpAIBAAKCAQEAw0WM1/WhAxyLtEqsiAJgWDZWuzkYpeYVdeeZcqRZzzfRgBQT\n\"\"\" + 'sNozS5t4HnwTZhwwXbH7k3QN0kRTV826Xobws3iigohnM9yTK+KKiayPhIAm/+5H\\n' + \"\"\"GT6SgFJhYhqo1/upWdueojil6RP4/AgavHhopxlAVbk6G9VdVnlQcQ5Zv0OcGi73\n\"\"\" + 'c+EnYD/YgURYGSngUi/Ynsh779p2U69/te9gZwIL5PuE9BiO6I39cL9z7EK1SfZh\\n' + \"\"\"OWvDe/qH7YhD/BHwcWit8FjRww1glwRVTJsA9rH58ynaAix0tcR/nBMRLUX+e3rU\n\"\"\" + 'RHg6UbSjJbdb9qmKM1fTGHKUzL/5pMG6uBU0ywIDAQABAoIBADQkckOIl4IZMUTn\\n' + \"\"\"W8LFv6xOdkJwMKC8G6bsPRFbyY+HvC2TLt7epSvfS+f4AcYWaOPcDu2E49vt2sNr\n\"\"\" + 'cASly8hgwiRRAB3dHH9vcsboiTo8bi2RFvMqvjv9w3tK2yMxVDtmZamzrrnaV3YV\\n' + \"\"\"Q+5nyKo2F/PMDjQ4eUAKDOzjhBuKHsZBTFnA1MFNI+UKj5X4Yp64DFmKlxTX/U2b\n\"\"\" + 'wzVywo5hzx2Uhw51jmoLls4YUvMJXD0wW5ZtYRuPogXvXb/of9ef/20/wU11WFKg\\n' + \"\"\"Xb4gfR8zUXaXS1sXcnVm3+24vIs9dApUwykuoyjOqxWqcHRec2QT2FxVGkFEraze\n\"\"\" + 'CPa4rMECgYEA5Y8CywomIcTgerFGFCeMHJr8nQGqY2V/owFb3k9maczPnC9p4a9R\\n' + \"\"\"c5szLxA9FMYFxurQZMBWSEG2JS1HR2mnjigx8UKjYML/A+rvvjZOMe4M6Sy2ggh4\n\"\"\" + 'SkLZKpWTzjTe07ByM/j5v/SjNZhWAG7sw4/LmPGRQkwJv+KZhGojuOkCgYEA2cOF\\n' + \"\"\"T6cJRv6kvzTz9S0COZOVm+euJh/BXp7oAsAmbNfOpckPMzqHXy8/wpdKl6AAcB57\n\"\"\" + 'OuztlNfV1D7qvbz7JuRlYwQ0cEfBgbZPcz1p18HHDXhwn57ZPb8G33Yh9Omg0HNA\\n' + \"\"\"Imb4LsVuSqxA6NwSj7cpRekgTedrhLFPJ+Ydb5MCgYEAsM3Q7OjILcIg0t6uht9e\n\"\"\" + 'vrlwTsz1mtCV2co2I6crzdj9HeI2vqf1KAElDt6G7PUHhglcr/yjd8uEqmWRPKNX\\n' + \"\"\"ddnnfVZB10jYeP/93pac6z/Zmc3iU4yKeUe7U10ZFf0KkiiYDQd59CpLef/2XScS\n\"\"\" + 'HB0oRofnxRQjfjLc4muNT+ECgYEAlcDk06MOOTly+F8lCc1bA1dgAmgwFd2usDBd\\n' + \"\"\"Y07a3e0HGnGLN3Kfl7C5i0tZq64HvxLnMd2vgLVxQlXGPpdQrC1TH+XLXg+qnlZO\n\"\"\" + 'ivSH7i0/gx75bHvj75eH1XK65V8pDVDEoSPottllAIs21CxLw3N1ObOZWJm2EfmR\\n' + \"\"\"cuHICmsCgYAtFJ1idqMoHxES3mlRpf2JxyQudP3SCm2WpGmqVzhRYInqeatY5sUd\n\"\"\" + 'lPLHm/p77RT7EyxQHTlwn8FJPuM/4ZH1rQd/vB+Y8qAtYJCexDMsbvLW+Js+VOvk\\n' + \"\"\"jweEC0nrcL31j9mF0vz5E6tfRu4hhJ6L4yfWs0gSejskeVB/w8QY4g==\n\"\"\"\nfor tpm in self.backEndList:\n    if tpm is self.backEndOsx:\n        continue\n    keyName = Name('/Test/KeyName/KEY/1')\n    tpm.deleteKey(keyName)\n    self.assertEqual(False, tpm.hasKey(keyName))\n    privateKey = TpmPrivateKey()\n    privateKeyPkcs1Encoding = Blob(base64.b64decode(privateKeyPkcs1Base64))\n    privateKey.loadPkcs1(privateKeyPkcs1Encoding.buf())\n    password = Blob('password').toBytes()\n    encryptedPkcs8 = privateKey.toEncryptedPkcs8(password)\n    tpm.importKey(keyName, encryptedPkcs8.buf(), password)\n    self.assertEqual(True, tpm.hasKey(keyName))\n    try:\n        tpm.importKey(keyName, encryptedPkcs8.buf(), password)\n        self.fail('Did not throw the expected exception')\n    except TpmBackEnd.Error:\n        pass\n    else:\n        self.fail('Did not throw the expected exception')\n    exportedKey = tpm.exportKey(keyName, password)\n    self.assertEqual(True, tpm.hasKey(keyName))\n    privateKey2 = TpmPrivateKey()\n    privateKey2.loadEncryptedPkcs8(exportedKey.buf(), password)\n    privateKey2Pkcs1Encoding = privateKey2.toPkcs1()\n    self.assertTrue(privateKeyPkcs1Encoding.equals(privateKey2Pkcs1Encoding))\n    tpm.deleteKey(keyName)\n    self.assertEqual(False, tpm.hasKey(keyName))\n    try:\n        tpm.exportKey(keyName, password)\n        self.fail('Did not throw the expected exception')\n    except TpmBackEnd.Error:\n        pass\n    else:\n        self.fail('Did not throw the expected exception')\n"
}