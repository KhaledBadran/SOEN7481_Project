{
    "functionName": "test_derive_key_alternate_derivation_data",
    "className": "TestKmipEngine",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_services_&_server_&_test_engine.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that a DeriveKey request can be processed correctly by\n        specifying multiple base objects and no derivation data.\n        \"\"\"\ne = engine.KmipEngine()\ne._data_store = self.engine\ne._data_store_session_factory = self.session_factory\ne._data_session = e._data_store_session_factory()\ne._is_allowed_by_operation_policy = mock.Mock(return_value=True)\ne._logger = mock.MagicMock()\ne._cryptography_engine.logger = mock.MagicMock()\nbase_key = pie_objects.SymmetricKey(algorithm=enums.CryptographicAlgorithm.\n    HMAC_SHA256, length=176, value=\n    b'\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b'\n    , masks=[enums.CryptographicUsageMask.DERIVE_KEY])\ne._data_session.add(base_key)\ne._data_session.commit()\ne._data_session = e._data_store_session_factory()\nbase_data = pie_objects.SecretData(value=\n    b'\\xf0\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9', data_type=enums.\n    SecretDataType.SEED, masks=[enums.CryptographicUsageMask.DERIVE_KEY])\ne._data_session.add(base_data)\ne._data_session.commit()\ne._data_session = e._data_store_session_factory()\nattribute_factory = factory.AttributeFactory()\npayload = payloads.DeriveKeyRequestPayload(object_type=enums.ObjectType.\n    SYMMETRIC_KEY, unique_identifiers=[str(base_key.unique_identifier), str\n    (base_data.unique_identifier)], derivation_method=enums.\n    DerivationMethod.HMAC, derivation_parameters=attributes.\n    DerivationParameters(cryptographic_parameters=attributes.\n    CryptographicParameters(hashing_algorithm=enums.HashingAlgorithm.\n    SHA_256), salt=b'\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\t\\n\\x0b\\x0c'),\n    template_attribute=objects.TemplateAttribute(attributes=[\n    attribute_factory.create_attribute(enums.AttributeType.\n    CRYPTOGRAPHIC_LENGTH, 336), attribute_factory.create_attribute(enums.\n    AttributeType.CRYPTOGRAPHIC_ALGORITHM, enums.CryptographicAlgorithm.AES)]))\nresponse_payload = e._process_derive_key(payload)\ne._logger.info.assert_any_call('Processing operation: DeriveKey')\ne._logger.info.assert_any_call(\n    '2 derivation objects specified with the DeriveKey request.')\ne._logger.info.assert_any_call(\n    'Object 1 will be used as the keying material for the derivation process.')\ne._logger.info.assert_any_call(\n    'Object 2 will be used as the derivation data for the derivation process.')\ne._logger.info.assert_any_call('Created a SymmetricKey with ID: 3')\nself.assertEqual('3', response_payload.unique_identifier)\nmanaged_object = e._data_session.query(pie_objects.SymmetricKey).filter(\n    pie_objects.SymmetricKey.unique_identifier == 3).one()\nself.assertEqual(\n    b'<\\xb2_%\\xfa\\xac\\xd5z\\x90COd\\xd06/*--\\n\\x90\\xcf\\x1aZL]\\xb0-V\\xec\\xc4\\xc5\\xbf4\\x00r\\x08\\xd5\\xb8\\x87\\x18Xe'\n    , managed_object.value)\nself.assertEqual(enums.CryptographicAlgorithm.AES, managed_object.\n    cryptographic_algorithm)\nself.assertEqual(336, managed_object.cryptographic_length)\nself.assertIsNotNone(managed_object.initial_date)\n"
}