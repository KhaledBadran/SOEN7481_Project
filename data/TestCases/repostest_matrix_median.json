{
    "functionName": "test_matrix_median",
    "className": "TestNeuralPooling",
    "fileName": "/apmoore1_&_Bella/tests_&_test_neural_pooling.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Tests :py:func:`bella.neural_pooling.matrix_median`\n        \"\"\"\nnum_cor = np.asarray([5, 6, 7, 8], dtype=np.float32).reshape(1, 4)\nminus_cor = np.asarray([5, 2, 7, 8], dtype=np.float32).reshape(1, 4)\nfloat_med_cor = np.asarray([-0.4999975, -0.24400002, 0.75], dtype=np.float32\n    ).reshape(1, 3)\nnum_out = matrix_median(self.num_array)\nminus_out = matrix_median(self.minus_num_array)\nfloat_out = matrix_median(self.float_med_array)\nself.assertEqual(True, np.array_equal(num_cor, num_out), msg=\n    'Cannot handle basic numbers: real out {} correct values {}'.format(\n    num_out, num_cor))\nself.assertEqual(True, np.array_equal(minus_cor, minus_out), msg=\n    'Cannot handle negatives: real out {} correct values {}'.format(\n    minus_out, minus_cor))\nself.assertEqual(True, np.array_equal(float_med_cor, float_out), msg=\n    'Cannot handle float or odd number values: real out {} correct values {}'\n    .format(float_out, float_med_cor))\n"
}