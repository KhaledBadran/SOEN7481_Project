{
    "functionName": "rbasex_bs_resize",
    "className": null,
    "fileName": "/PyAbel_&_PyAbel/abel_&_tests_&_test_rbasex.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"\n    Compare basis set loaded and modified to cleanly computed.\n    old, new: basis parameters (rmax, order, odd, inv)\n    new_saved: check that new basis is (True) or is not (False) saved\n    \"\"\"\nfile_name_old = get_basis_file_name(*old)\nfile_name_new = get_basis_file_name(*new)\ndef remove_files():\n    if os.path.exists(file_name_old):\n        os.remove(file_name_old)\n    if os.path.exists(file_name_new):\n        os.remove(file_name_new)\ndef arg(prm):\n    return prm[:-1] + ('inverse' if prm[3] else 'forward',)\nremove_files()\ncache_cleanup()\nget_bs_cached(*arg(old), basis_dir=DATA_DIR, verbose=False)\ncache_cleanup()\nbs_new = get_bs_cached(*arg(new), basis_dir=None, verbose=False)\ncache_cleanup()\nbs = get_bs_cached(*arg(new), basis_dir=DATA_DIR, verbose=True)\nif new_saved:\n    assert os.path.exists(file_name_new), 'New basis set was not saved!'\nelse:\n    assert not os.path.exists(file_name_new), 'New basis set was saved!'\ncache_cleanup()\nremove_files()\nassert_allclose(bs, bs_new)\n"
}