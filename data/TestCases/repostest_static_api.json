{
    "functionName": "test_static_api",
    "className": null,
    "fileName": "/datamllab_&_PyODDS/test_&_pyodds_&_function_api_test.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "host = '127.0.0.1'\nuser = 'user'\npassword = '0906'\nalgorithm = ['iforest', 'ocsvm', 'lof', 'robustcovariance', 'cblof', 'knn',\n    'hbos', 'sod', 'pca', 'dagmm', 'autoencoder', 'lstm_ad', 'lstm_ed',\n    'staticautoencoder']\nrng = np.random.RandomState(42)\nnp.random.seed(42)\nconn, cursor = connect_server(host, user, password)\nground_truth_whole = insert_demo_data(conn, cursor, 'db', 't',\n    ground_truth_flag=True)\ndata, ground_truth = query_data(conn, cursor, 'db', 't', time_serie_name=\n    'ts', ground_truth=ground_truth_whole, start_time='2019-07-20 00:00:00',\n    end_time='2019-08-20 00:00:00', time_serie=False, ground_truth_flag=True)\nfor alg in algorithm:\n    clf = algorithm_selection(alg, random_state=rng, contamination=0.1)\n    print('Start processing:')\n    start_time = time.clock()\n    clf.fit(data)\n    prediction_result = clf.predict(data)\n    outlierness = clf.decision_function(data)\n    output_performance(alg, ground_truth, prediction_result, time.clock() -\n        start_time, outlierness)\ndata, ground_truth = query_data(conn, cursor, 'db', 't', time_serie_name=\n    'ts', ground_truth=ground_truth_whole, start_time=None, end_time=None,\n    time_serie=False, ground_truth_flag=True)\ndata, ground_truth = query_data(conn, cursor, 'db', 't', time_serie_name=\n    'ts', ground_truth=ground_truth_whole, start_time=None, end_time=None,\n    time_serie=False, ground_truth_flag=False)\nconn.close()\n"
}