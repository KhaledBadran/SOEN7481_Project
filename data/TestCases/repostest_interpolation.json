{
    "functionName": "test_interpolation",
    "className": null,
    "fileName": "/apetri_&_LensTools/lenstools_&_tests_&_test_constraints.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "root_path = os.path.join(dataExtern(), 'all')\nparameters = list()\nfeatures = list()\nmodels = CFHTemu1.getModels()[:17]\nassert len(models) == 17\nnp.random.seed(1)\nnp.random.shuffle(models)\ntraining_models = models[:-1]\ntesting_model = models[-1]\nell = np.load(os.path.join(root_path, 'ell.npy'))\nfor model in training_models:\n    ens = Ensemble(np.load(os.path.join(root_path, model._cosmo_id_string,\n        'subfield1', 'sigma05', 'power_spectrum.npy')))\n    parameters.append(model.squeeze(with_ns=True))\n    features.append(ens.mean(0).values)\nfeature_index = EmulatorSeries.make_index(pd.Index(ell, name='ell'))\nanalysis = Emulator.from_features(np.array(features), parameters=np.array(\n    parameters), parameter_index=['Om', 'w', 'si8', 'ns'], feature_index=\n    feature_index)\nens = Ensemble(np.load(os.path.join(root_path, testing_model.\n    _cosmo_id_string, 'subfield1', 'sigma05', 'power_spectrum.npy')))\ntesting_Pl = ens.mean(0).values\nens = Ensemble(np.load(os.path.join(root_path, 'observations', 'subfield1',\n    'sigma05', 'power_spectrum.npy')))\nobserved_Pl = ens.mean(0)\nnp.savetxt('16_parameter_points.txt', analysis.parameter_set)\nfor n in range(len(training_models)):\n    plt.plot(ell, ell * (ell + 1) * analysis.feature_set[n] / (2 * np.pi))\nplt.plot(ell, ell * (ell + 1) * observed_Pl / (2 * np.pi), linestyle='--',\n    label='Observation')\nplt.xlabel('$l$')\nplt.ylabel('$l(l+1)P_l/2\\\\pi$')\nplt.yscale('log')\nplt.legend(loc='upper left')\nplt.savefig('16_power_spectra.png')\nplt.clf()\nanalysis.train(use_parameters=[0, 1, 2])\nassert hasattr(analysis, '_interpolator')\nassert hasattr(analysis, '_num_bins')\nanalysis.save('analysis.pkl')\nemulator = Emulator.read('analysis.pkl')\nemulator.train(use_parameters=[0, 1, 2])\npredicted_Pl = emulator.predict(testing_model.squeeze())\nfig, ax = plt.subplots(2, 1, figsize=(16, 8))\nax[0].plot(ell, ell * (ell + 1) * testing_Pl / (2 * np.pi), label='measured')\nax[0].plot(ell, ell * (ell + 1) * predicted_Pl / (2 * np.pi), label=\n    'interpolated')\nax[1].plot(ell, (predicted_Pl - testing_Pl) / testing_Pl)\nax[1].set_xlabel('$l$')\nax[0].set_ylabel('$l(l+1)P_l/2\\\\pi$')\nax[1].set_ylabel('$P_l^I-P_l^M/P_l^M$')\nax[0].set_yscale('log')\nax[0].legend(loc='upper left')\nplt.savefig('power_interpolator_test.png')\nplt.clf()\ntwo_parameter_points = np.array((training_models[0].squeeze(),\n    testing_model.squeeze()))\ntwo_predicted_Pl = emulator.predict(two_parameter_points).values\nfig, ax = plt.subplots(2, 1, figsize=(16, 8))\nax[0].plot(ell, ell * (ell + 1) * two_predicted_Pl[0] / (2 * np.pi), color=\n    'red', linestyle='--')\nax[0].plot(ell, ell * (ell + 1) * two_predicted_Pl[1] / (2 * np.pi), color=\n    'green', linestyle='--')\nax[0].plot(ell, ell * (ell + 1) * emulator.feature_set[0] / (2 * np.pi),\n    color='red', linestyle='-')\nax[0].plot(ell, ell * (ell + 1) * testing_Pl / (2 * np.pi), color='green',\n    linestyle='-')\nax[1].plot(ell, (two_predicted_Pl[0] - emulator.feature_set[0]) / emulator.\n    feature_set[0], color='red')\nax[1].plot(ell, (two_predicted_Pl[1] - testing_Pl) / testing_Pl, color='green')\nax[1].set_xlabel('$l$')\nax[0].set_ylabel('$l(l+1)P_l/2\\\\pi$')\nax[1].set_ylabel('$P_l^I-P_l^M/P_l^M$')\nax[0].set_yscale('log')\nplt.savefig('power_interpolator_test_2.png')\nplt.clf()\ncovariance = np.diag(testing_Pl ** 2 / (0.5 + ell))\nobservation = testing_Pl + np.random.uniform(low=-testing_Pl * 0.1, high=\n    testing_Pl * 0.1)\npoints = emulator.parameter_set[:, :-1]\nchi2_values_1 = emulator.chi2(points, observation, covariance)\nchi2_values_2 = emulator.chi2(points, observation, covariance, split_chunks=4)\nassert chi2_values_1.shape == chi2_values_2.shape\nchi2_contributions = emulator.chi2Contributions(points[0], observation,\n    covariance)\nplt.imshow(chi2_contributions, interpolation='nearest')\nplt.colorbar()\nplt.xlabel('$j$')\nplt.ylabel('$i$')\nplt.savefig('chi2_contributions.png')\nplt.clf()\nreturn chi2_values_1, chi2_values_2\n"
}