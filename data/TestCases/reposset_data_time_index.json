{
    "functionName": "set_data_time_index",
    "className": "Brain",
    "fileName": "/nipy_&_PySurfer/surfer_&_viz.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"Set the data time index to show\n\n        Parameters\n        ----------\n        time_idx : int | float\n            Time index. Non-integer values will be displayed using\n            interpolation between samples.\n        interpolation : str\n            Interpolation method (``scipy.interpolate.interp1d`` parameter,\n            one of 'linear' | 'nearest' | 'zero' | 'slinear' | 'quadratic' |\n            'cubic', default 'quadratic'). Interpolation is only used for\n            non-integer indexes.\n        \"\"\"\nfrom scipy.interpolate import interp1d\nif self.n_times is None:\n    raise RuntimeError('cannot set time index with no time data')\nif time_idx < 0 or time_idx >= self.n_times:\n    raise ValueError('time index out of range')\nviews = self._toggle_render(False)\nfor hemi in ['lh', 'rh']:\n    for data in self._data_dicts[hemi]:\n        if data['array'].ndim == 1:\n            continue\n        if data['array'].ndim == 2:\n            scalar_data = data['array']\n            vectors = None\n        else:\n            scalar_data = data['magnitude']\n            vectors = data['array']\n        if isinstance(time_idx, float):\n            times = np.arange(self.n_times)\n            scalar_data = interp1d(times, scalar_data, interpolation, axis=\n                1, assume_sorted=True)(time_idx)\n            if vectors is not None:\n                vectors = interp1d(times, vectors, interpolation, axis=2,\n                    assume_sorted=True)(time_idx)\n        else:\n            scalar_data = scalar_data[:, (time_idx)]\n            if vectors is not None:\n                vectors = vectors[:, :, (time_idx)]\n        if data['smooth_mat'] is not None:\n            scalar_data = data['smooth_mat'] * scalar_data\n        for brain in self.brains:\n            if brain.hemi == hemi:\n                brain.set_data(data['layer_id'], scalar_data, vectors)\n        del brain\n        data['time_idx'] = time_idx\n        if data['time_label']:\n            if isinstance(time_idx, float):\n                ifunc = interp1d(times, data['time'])\n                time = ifunc(time_idx)\n            else:\n                time = data['time'][time_idx]\n            self.update_text(data['time_label'](time), 'time_label')\nself._toggle_render(True, views)\n"
}