{
    "functionName": "testObservationsFromDataWithFidelities",
    "className": "ObservationsTest",
    "fileName": "/facebook_&_Ax/ax_&_core_&_tests_&_test_observation.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "truth = {(0.5): {'arm_name': '0_0', 'parameters': {'x': 0, 'y': 'a', 'z': 1\n    }, 'mean': 2.0, 'sem': 2.0, 'trial_index': 1, 'metric_name': 'a',\n    'fidelities': json.dumps({'z': 0.5}), 'updated_parameters': {'x': 0,\n    'y': 'a', 'z': 0.5}, 'mean_t': np.array([2.0]), 'covariance_t': np.\n    array([[4.0]])}, (0.25): {'arm_name': '0_1', 'parameters': {'x': 1, 'y':\n    'b', 'z': 0.5}, 'mean': 3.0, 'sem': 3.0, 'trial_index': 2,\n    'metric_name': 'a', 'fidelities': json.dumps({'z': 0.25}),\n    'updated_parameters': {'x': 1, 'y': 'b', 'z': 0.25}, 'mean_t': np.array\n    ([3.0]), 'covariance_t': np.array([[9.0]])}, (1): {'arm_name': '0_0',\n    'parameters': {'x': 0, 'y': 'a', 'z': 1}, 'mean': 4.0, 'sem': 4.0,\n    'trial_index': 1, 'metric_name': 'b', 'fidelities': json.dumps({'z': 1}\n    ), 'updated_parameters': {'x': 0, 'y': 'a', 'z': 1}, 'mean_t': np.array\n    ([4.0]), 'covariance_t': np.array([[16.0]])}}\narms = {obs['arm_name']: Arm(name=obs['arm_name'], parameters=obs[\n    'parameters']) for _, obs in truth.items()}\nexperiment = Mock()\nexperiment._trial_indices_by_status = {status: set() for status in TrialStatus}\ntrials = {obs['trial_index']: Trial(experiment, GeneratorRun(arms=[arms[obs\n    ['arm_name']]])) for _, obs in truth.items()}\ntype(experiment).arms_by_name = PropertyMock(return_value=arms)\ntype(experiment).trials = PropertyMock(return_value=trials)\ndf = pd.DataFrame(list(truth.values()))[['arm_name', 'trial_index', 'mean',\n    'sem', 'metric_name', 'fidelities']]\ndata = Data(df=df)\nobservations = observations_from_data(experiment, data)\nself.assertEqual(len(observations), 3)\nfor obs in observations:\n    t = truth[obs.features.parameters['z']]\n    self.assertEqual(obs.features.parameters, t['updated_parameters'])\n    self.assertEqual(obs.features.trial_index, t['trial_index'])\n    self.assertEqual(obs.data.metric_names, [t['metric_name']])\n    self.assertTrue(np.array_equal(obs.data.means, t['mean_t']))\n    self.assertTrue(np.array_equal(obs.data.covariance, t['covariance_t']))\n    self.assertEqual(obs.arm_name, t['arm_name'])\n"
}