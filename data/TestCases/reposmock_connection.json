{
    "functionName": "mock_connection",
    "className": null,
    "fileName": "/VinayGValsaraj_&_PyAPNs23/test_&_test_client.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "mock_connection = MagicMock()\nmock_connection.__max_open_streams = 0\nmock_connection.__open_streams = 0\nmock_connection.__mock_results = None\nmock_connection.__next_stream_id = 0\n@contextlib.contextmanager\ndef mock_get_response(stream_id):\n    mock_connection.__open_streams -= 1\n    if mock_connection.__mock_results:\n        reason = mock_connection.__mock_results[stream_id]\n        response = Mock(status=200 if reason == 'Success' else 400)\n        response.read.return_value = ('{\"reason\": \"%s\"}' % reason).encode(\n            'utf-8')\n        yield response\n    else:\n        yield Mock(status=200)\ndef mock_request(*_args):\n    mock_connection.__open_streams += 1\n    mock_connection.__max_open_streams = max(mock_connection.__open_streams,\n        mock_connection.__max_open_streams)\n    stream_id = mock_connection.__next_stream_id\n    mock_connection.__next_stream_id += 1\n    return stream_id\nmock_connection.get_response.side_effect = mock_get_response\nmock_connection.request.side_effect = mock_request\nmock_connection._conn.__enter__.return_value = mock_connection._conn\nmock_connection._conn.remote_settings.max_concurrent_streams = 500\nreturn mock_connection\npytest.fixture"
}