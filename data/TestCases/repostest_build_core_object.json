{
    "functionName": "test_build_core_object",
    "className": "TestKmipEngine",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_services_&_server_&_test_engine.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that kmip.core objects can be built from simpler kmip.pie\n        objects.\n        \"\"\"\ne = engine.KmipEngine()\ne._logger = mock.MagicMock()\nmanaged_object = pie_objects.X509Certificate(value=b'')\ncore_object = e._build_core_object(managed_object)\nself.assertIsInstance(core_object, secrets.Certificate)\nself.assertEqual(b'', core_object.certificate_value.value)\nself.assertEqual(enums.CertificateType.X_509, core_object.certificate_type.\n    value)\nmanaged_object = pie_objects.SymmetricKey(enums.CryptographicAlgorithm.AES,\n    0, b'')\ncore_object = e._build_core_object(managed_object)\nself.assertIsInstance(core_object, secrets.SymmetricKey)\nself.assertEqual(enums.CryptographicAlgorithm.AES, core_object.key_block.\n    cryptographic_algorithm.value)\nself.assertEqual(0, core_object.key_block.cryptographic_length.value)\nself.assertEqual(b'', core_object.key_block.key_value.key_material.value)\nmanaged_object = pie_objects.PublicKey(enums.CryptographicAlgorithm.RSA, 0, b''\n    )\ncore_object = e._build_core_object(managed_object)\nself.assertIsInstance(core_object, secrets.PublicKey)\nself.assertEqual(enums.CryptographicAlgorithm.RSA, core_object.key_block.\n    cryptographic_algorithm.value)\nself.assertEqual(0, core_object.key_block.cryptographic_length.value)\nself.assertEqual(b'', core_object.key_block.key_value.key_material.value)\nmanaged_object = pie_objects.PrivateKey(enums.CryptographicAlgorithm.RSA, 0,\n    b'', enums.KeyFormatType.PKCS_8)\ncore_object = e._build_core_object(managed_object)\nself.assertIsInstance(core_object, secrets.PrivateKey)\nself.assertEqual(enums.CryptographicAlgorithm.RSA, core_object.key_block.\n    cryptographic_algorithm.value)\nself.assertEqual(0, core_object.key_block.cryptographic_length.value)\nself.assertEqual(b'', core_object.key_block.key_value.key_material.value)\nself.assertEqual(enums.KeyFormatType.PKCS_8, core_object.key_block.\n    key_format_type.value)\nmanaged_object = pie_objects.SecretData(b'', enums.SecretDataType.PASSWORD)\ncore_object = e._build_core_object(managed_object)\nself.assertIsInstance(core_object, secrets.SecretData)\nself.assertEqual(enums.SecretDataType.PASSWORD, core_object.\n    secret_data_type.value)\nself.assertEqual(b'', core_object.key_block.key_value.key_material.value)\nmanaged_object = pie_objects.OpaqueObject(b'', enums.OpaqueDataType.NONE)\ncore_object = e._build_core_object(managed_object)\nself.assertIsInstance(core_object, secrets.OpaqueObject)\nself.assertEqual(enums.OpaqueDataType.NONE, core_object.opaque_data_type.value)\nself.assertEqual(b'', core_object.opaque_data_value.value)\n"
}