{
    "functionName": "series_resistors",
    "className": null,
    "fileName": "/pmeal_&_OpenPNM/openpnm_&_models_&_physics_&_thermal_conductance.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"\n    Calculate the thermal conductance of conduits in network, where a\n    conduit is ( 1/2 pore - full throat - 1/2 pore ). See the notes section.\n\n    Parameters\n    ----------\n    target : OpenPNM Object\n        The object which this model is associated with. This controls the\n        length of the calculated array, and also provides access to other\n        necessary properties.\n\n    pore_area : string\n        Dictionary key of the pore area values\n\n    throat_area : string\n        Dictionary key of the throat area values\n\n    pore_thermal_conductivity : string\n        Dictionary key of the pore thermal conductivity values\n\n    throat_thermal_conductivity : string\n        Dictionary key of the throat thermal conductivity values\n\n    conduit_lengths : string\n        Dictionary key of the conduit length values\n\n    conduit_shape_factors : string\n        Dictionary key of the conduit DIFFUSION shape factor values\n\n    Returns\n    -------\n    g : ndarray\n        Array containing thermal conductance values for conduits in the\n        geometry attached to the given physics object.\n\n    Notes\n    -----\n    (1) This function requires that all the necessary phase properties already\n    be calculated.\n\n    (2) This function calculates the specified property for the *entire*\n    network then extracts the values for the appropriate throats at the end.\n\n    (3) This function assumes cylindrical throats with constant cross-section\n    area. Corrections for different shapes and variable cross-section area can\n    be imposed by passing the proper conduit_shape_factors argument.\n\n    (4) shape_factor depends on the physics of the problem, i.e. diffusion-like\n    processes and fluid flow need different shape factors.\n\n    \"\"\"\nnetwork = target.project.network\nthroats = network.map_throats(throats=target.Ts, origin=target)\nphase = target.project.find_phase(target)\ncn = network['throat.conns'][throats]\nA1 = network[pore_area][cn[:, (0)]]\nAt = network[throat_area][throats]\nA2 = network[pore_area][cn[:, (1)]]\nL1 = network[conduit_lengths + '.pore1'][throats]\nLt = network[conduit_lengths + '.throat'][throats]\nL2 = network[conduit_lengths + '.pore2'][throats]\ng1, g2, gt = _np.zeros((3, len(Lt)))\nm1, m2, mt = [(Li != 0) for Li in [L1, L2, Lt]]\ng1[~m1] = g2[~m2] = gt[~mt] = _np.inf\ntry:\n    SF1 = phase[conduit_shape_factors + '.pore1'][throats]\n    SFt = phase[conduit_shape_factors + '.throat'][throats]\n    SF2 = phase[conduit_shape_factors + '.pore2'][throats]\nexcept KeyError:\n    SF1 = SF2 = SFt = 1.0\ntry:\n    Dt = phase[throat_thermal_conductivity][throats]\nexcept KeyError:\n    Dt = phase.interpolate_data(propname=pore_thermal_conductivity)[throats]\ntry:\n    D1 = phase[pore_thermal_conductivity][cn[:, (0)]]\n    D2 = phase[pore_thermal_conductivity][cn[:, (1)]]\nexcept KeyError:\n    D1 = phase.interpolate_data(propname=throat_thermal_conductivity)[cn[:,\n        (0)]]\n    D2 = phase.interpolate_data(propname=throat_thermal_conductivity)[cn[:,\n        (1)]]\ng1[m1] = (D1 * A1)[m1] / L1[m1]\ng2[m2] = (D2 * A2)[m2] / L2[m2]\ngt[mt] = (Dt * At)[mt] / Lt[mt]\nreturn (1 / gt / SFt + 1 / g1 / SF1 + 1 / g2 / SF2) ** -1\n"
}