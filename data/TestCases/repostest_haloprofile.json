{
    "functionName": "test_haloprofile",
    "className": null,
    "fileName": "/LSSTDESC_&_CCL/benchmarks_&_test_haloprofile.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "data = np.loadtxt('./benchmarks/data/haloprofile_%s_colossus.txt' % model)\na = 1.0\nconcentration = 5\nhalomass = 60000000000000.0\nhalomassdef = 200\nrmin = 0.01\nrmax = 100\nr = np.exp(np.log(rmin) + np.log(rmax / rmin) * np.arange(data.shape[0]) /\n    (data.shape[0] - 1))\nmdef = ccl.halos.MassDef(halomassdef, 'matter')\nc = ccl.halos.ConcentrationConstant(c=concentration, mdef=mdef)\nif model == 'nfw':\n    p = ccl.halos.HaloProfileNFW(c, truncated=False)\n    prof = p.real(COSMO, r, halomass, a, mdef)\nelif model == 'projected_nfw':\n    p = ccl.halos.HaloProfileNFW(c, truncated=False, projected_analytic=True)\n    prof = p.projected(COSMO, r, halomass, a, mdef)\nelif model == 'einasto':\n    mdef = ccl.halos.MassDef(halomassdef, 'matter', c_m_relation=c)\n    p = ccl.halos.HaloProfileEinasto(c, truncated=False)\n    prof = p.real(COSMO, r, halomass, a, mdef)\nelif model == 'hernquist':\n    p = ccl.halos.HaloProfileHernquist(c, truncated=False)\n    prof = p.real(COSMO, r, halomass, a, mdef)\ntol = np.clip(np.abs(HALOPROFILE_TOLERANCE * data[:, (1)]), 1e-12, np.inf)\nerr = np.abs(prof - data[:, (1)])\nassert np.all(err <= tol)\npytest.mark.parametrize('model', ['nfw', 'projected_nfw', 'einasto',\n    'hernquist'])"
}