{
    "functionName": "test_list_type_errors",
    "className": "TestValidationMessages",
    "fileName": "/hdoupe_&_ParamTools/paramtools_&_tests_&_test_parameters.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "params = TestParams()\nadj = {'float_list_param': [{'value': ['abc', 0, 'def', 1], 'label0':\n    'zero', 'label1': 1}, {'value': [-1, 'ijk'], 'label0': 'one', 'label1': 2}]\n    }\nwith pytest.raises(ValidationError) as excinfo:\n    params.adjust(adj)\nexp_user_message = {'float_list_param': ['Not a valid number: abc.',\n    'Not a valid number: def.', 'Not a valid number: ijk.']}\nassert json.loads(excinfo.value.args[0]) == {'errors': exp_user_message}\nexp_internal_message = {'float_list_param': [['Not a valid number: abc.',\n    'Not a valid number: def.'], ['Not a valid number: ijk.']]}\nassert excinfo.value.messages['errors'] == exp_internal_message\nexp_labels = {'float_list_param': [{'label0': 'zero', 'label1': 1}, {\n    'label0': 'one', 'label1': 2}]}\nassert excinfo.value.labels['errors'] == exp_labels\nparams = TestParams()\nadjustment = {'float_param': [2.5]}\nparams.adjust(adjustment, raise_errors=False)\nexp = {'float_param': ['Not a valid number: [2.5].']}\nassert params.errors == exp\nparams = TestParams()\nadjustment = {'bool_param': [False]}\nparams.adjust(adjustment, raise_errors=False)\nexp = {'bool_param': ['Not a valid boolean: [False].']}\nassert params.errors == exp\n"
}