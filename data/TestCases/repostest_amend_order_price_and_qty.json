{
    "functionName": "test_amend_order_price_and_qty",
    "className": "TestBasicOrders",
    "fileName": "/gavincyi_&_LightMatchingEngine/tests_&_unit_&_test_basic_orders.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"Test the amend order price and qty.\n\n        1. Place two buy orders on the same price (id = 1 and id = 2)\n        2. Place two sell orders of which one is 0.1 higher than another\n           (id = 3 and id = 4).\n        3. Amend on buy order (id = 2 => 5) price and the qty from the back\n           to execute on the best ask (id = 3).\n        4. Amend the buy order (id = 1 => 6) to the best bid price.\n        5. Amend the front best bid order (id = 5 => 7) quantity up. The\n           original order quantity is 2 * lot_size and the leaves qty is\n           lot_size. Amending the volume up from 2 to 3 creates a new order\n           with order quantity = 3.\n        6. Amend the sell order (id = 4) to execute the best bid orders,\n           the first matched buy order should be with id = 6 and then id = 7.\n        \"\"\"\nme = lme.LightMatchingEngine()\norder, trades = me.add_order(instmt=TestBasicOrders.instmt, price=\n    TestBasicOrders.price, qty=TestBasicOrders.lot_size, side=lme.Side.BUY)\norder2, trades2 = me.add_order(instmt=TestBasicOrders.instmt, price=\n    TestBasicOrders.price, qty=TestBasicOrders.lot_size, side=lme.Side.BUY)\nself.assertEqual(0, len(trades))\nself.assertEqual(0, len(trades2))\norder3, trades3 = me.add_order(instmt=TestBasicOrders.instmt, price=\n    TestBasicOrders.price + 0.1, qty=TestBasicOrders.lot_size, side=lme.\n    Side.SELL)\norder4, trades4 = me.add_order(instmt=TestBasicOrders.instmt, price=\n    TestBasicOrders.price + 0.2, qty=TestBasicOrders.lot_size, side=lme.\n    Side.SELL)\nself.assertEqual(0, len(trades3))\nself.assertEqual(0, len(trades4))\norder5, trades5 = me.amend_order(instmt=TestBasicOrders.instmt, order_id=\n    order2.order_id, amended_price=TestBasicOrders.price + 0.1, amended_qty\n    =TestBasicOrders.lot_size * 2)\nself.assertEqual(2, len(trades5))\nself.check_order(order=order5, order_id=5, instmt=TestBasicOrders.instmt,\n    price=TestBasicOrders.price + 0.1, qty=TestBasicOrders.lot_size * 2,\n    side=lme.Side.BUY, cum_qty=TestBasicOrders.lot_size, leaves_qty=\n    TestBasicOrders.lot_size)\nself.check_trade(trade=trades5[0], order_id=5, instmt=TestBasicOrders.\n    instmt, trade_price=TestBasicOrders.price + 0.1, trade_qty=\n    TestBasicOrders.lot_size, trade_side=lme.Side.BUY, trade_id=1)\nself.check_trade(trade=trades5[1], order_id=3, instmt=TestBasicOrders.\n    instmt, trade_price=TestBasicOrders.price + 0.1, trade_qty=\n    TestBasicOrders.lot_size, trade_side=lme.Side.SELL, trade_id=2)\norder6, trades6 = me.amend_order(instmt=TestBasicOrders.instmt, order_id=\n    order.order_id, amended_price=TestBasicOrders.price + 0.1, amended_qty=\n    TestBasicOrders.lot_size)\nself.assertEqual(0, len(trades6))\nself.check_order(order=order6, order_id=6, instmt=TestBasicOrders.instmt,\n    price=TestBasicOrders.price + 0.1, qty=TestBasicOrders.lot_size, side=\n    lme.Side.BUY, cum_qty=0.0, leaves_qty=TestBasicOrders.lot_size)\norder7, trades7 = me.amend_order(instmt=TestBasicOrders.instmt, order_id=\n    order5.order_id, amended_price=TestBasicOrders.price + 0.1, amended_qty\n    =TestBasicOrders.lot_size * 3)\nself.assertEqual(0, len(trades7))\nself.check_order(order=order7, order_id=7, instmt=TestBasicOrders.instmt,\n    price=TestBasicOrders.price + 0.1, qty=TestBasicOrders.lot_size * 3,\n    side=lme.Side.BUY, cum_qty=0.0, leaves_qty=TestBasicOrders.lot_size * 3)\norder8, trades8 = me.amend_order(instmt=TestBasicOrders.instmt, order_id=\n    order4.order_id, amended_price=TestBasicOrders.price + 0.1, amended_qty\n    =TestBasicOrders.lot_size * 4)\nself.assertEqual(3, len(trades8))\nself.check_order(order=order8, order_id=8, instmt=TestBasicOrders.instmt,\n    price=TestBasicOrders.price + 0.1, qty=TestBasicOrders.lot_size * 4,\n    side=lme.Side.SELL, cum_qty=TestBasicOrders.lot_size * 4, leaves_qty=0.0)\nself.check_trade(trade=trades8[0], order_id=8, instmt=TestBasicOrders.\n    instmt, trade_price=TestBasicOrders.price + 0.1, trade_qty=\n    TestBasicOrders.lot_size * 4, trade_side=lme.Side.SELL, trade_id=3)\nself.check_trade(trade=trades8[1], order_id=6, instmt=TestBasicOrders.\n    instmt, trade_price=TestBasicOrders.price + 0.1, trade_qty=\n    TestBasicOrders.lot_size, trade_side=lme.Side.BUY, trade_id=4)\nself.check_trade(trade=trades8[2], order_id=7, instmt=TestBasicOrders.\n    instmt, trade_price=TestBasicOrders.price + 0.1, trade_qty=\n    TestBasicOrders.lot_size * 3, trade_side=lme.Side.BUY, trade_id=5)\n"
}