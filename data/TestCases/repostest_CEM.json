{
    "functionName": "test_CEM",
    "className": "TestCEMExplainer",
    "fileName": "/IBM_&_AIX360/tests_&_contrastive_&_test_CEM.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "_PATH = os.path.dirname(os.path.realpath(__file__))\nfp = os.path.join(_PATH, 'cem_tests_results')\nif not os.path.exists(fp):\n    os.makedirs(fp)\ndata = MNISTDataset()\nae_js = os.path.join(_PATH, '../../aix360/models/CEM/mnist_AE_1_decoder.json')\nae_wt = os.path.join(_PATH, '../../aix360/models/CEM/mnist_AE_1_decoder.h5')\nae_model = self.load_model(ae_js, ae_wt)\nmodel_js = os.path.join(_PATH, '../../aix360/models/CEM/mnist.json')\nmodel_wt = os.path.join(_PATH, '../../aix360/models/CEM/mnist')\nmnist_model = self.load_model(model_js, model_wt)\nmymodel = KerasClassifier(mnist_model)\nexplainer = CEMExplainer(mymodel)\nimage_id = 340\ninput_image = data.test_data[image_id]\nplt.imshow(input_image[:, :, (0)], cmap='gray')\nplt.savefig(os.path.join(fp, 'input_image_340_d3.png'))\nself.assertEqual(mymodel.predict_classes(np.expand_dims(input_image, axis=0\n    )), 3)\narg_max_iter = 1000\narg_b = 9\narg_init_const = 10.0\narg_mode = 'PN'\narg_kappa = 10\narg_beta = 0.1\narg_gamma = 100\nadv_pn, delta_pn, _ = explainer.explain_instance(np.expand_dims(input_image,\n    axis=0), arg_mode, ae_model, arg_kappa, arg_b, arg_max_iter,\n    arg_init_const, arg_beta, arg_gamma)\narg_mode = 'PP'\nadv_pp, delta_pp, _ = explainer.explain_instance(np.expand_dims(input_image,\n    axis=0), arg_mode, ae_model, arg_kappa, arg_b, arg_max_iter,\n    arg_init_const, arg_beta, arg_gamma)\nfig0 = (input_image[:, :, (0)] + 0.5) * 255\nfig1 = (adv_pn[(0), :, :, (0)] + 0.5) * 255\nfig2 = fig1 - fig0\nfig3 = (adv_pp[(0), :, :, (0)] + 0.5) * 255\nfig4 = fig0 - fig3\n_, axarr = plt.subplots(1, 5)\naxarr[0].set_title('Orig' + '(' + str(mymodel.predict_classes(np.\n    expand_dims(input_image, axis=0))[0]) + ')')\naxarr[1].set_title('Orig + PN' + '(' + str(mymodel.predict_classes(adv_pn)[\n    0]) + ')')\naxarr[2].set_title('PN')\naxarr[3].set_title('Orig + PP')\naxarr[4].set_title('PP' + '(' + str(mymodel.predict_classes(delta_pp)[0]) + ')'\n    )\naxarr[0].imshow(fig0, cmap='gray')\naxarr[1].imshow(fig1, cmap='gray')\naxarr[2].imshow(fig2, cmap='gray')\naxarr[3].imshow(fig3, cmap='gray')\naxarr[4].imshow(fig4, cmap='gray')\nplt.savefig(os.path.join(fp, 'predict_classes_4.png'))\nif os.path.exists(fp):\n    shutil.rmtree(fp)\n"
}