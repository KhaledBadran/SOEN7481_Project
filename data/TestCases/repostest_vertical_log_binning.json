{
    "functionName": "test_vertical_log_binning",
    "className": "TestVerticalLogBinning",
    "fileName": "/dkaslovsky_&_GraphRole/tests_&_test_features_&_test_prune.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "table = {'empty': {'input': np.array([]), 'expected': np.array([])},\n    'single 0': {'input': np.array([0]), 'expected': np.array([0])},\n    'single nonzero': {'input': np.array([1]), 'expected': np.array([0])},\n    'repeated': {'input': np.array([1, 1]), 'expected': np.array([0, 0])},\n    '2 bins': {'input': np.array([1, 2]), 'expected': np.array([0, 1])},\n    '2 bins with repeated lower bin': {'input': np.array([1, 2, 1]),\n    'expected': np.array([0, 1, 0])}, '2 bins with repeated upper bin': {\n    'input': np.array([1, 2, 2]), 'expected': np.array([0, 1, 1])},\n    'negative and zeros': {'input': np.array([-1, 0, 0]), 'expected': np.\n    array([0, 1, 1])}, '1 through 4': {'input': np.array([1, 2, 3, 4]),\n    'expected': np.array([0, 0, 1, 2])}, '1 through 5': {'input': np.array(\n    [1, 2, 3, 4, 5]), 'expected': np.array([0, 0, 1, 2, 3])}, '1 through 6':\n    {'input': np.array([1, 2, 3, 4, 5, 6]), 'expected': np.array([0, 0, 0, \n    1, 2, 3])}, 'range(10)': {'input': np.array(range(10)), 'expected': np.\n    array([0, 0, 0, 0, 0, 1, 1, 2, 3, 4])}, '-range(10)': {'input': -1 * np\n    .array(range(10)), 'expected': np.array([0, 0, 0, 0, 0, 1, 1, 2, 3, 4][\n    ::-1])}, 'non-integer': {'input': -0.1 * np.array(range(10)),\n    'expected': np.array([0, 0, 0, 0, 0, 1, 1, 2, 3, 4][::-1])}, 'frac=0.1':\n    {'input': np.array(range(10)), 'frac': 0.1, 'expected': np.array(range(\n    10))}, 'frac=0.25': {'input': np.array(range(10)), 'frac': 0.25,\n    'expected': np.array([0, 0, 1, 1, 2, 3, 4, 5, 6, 7])}}\nfor test_name, test in table.items():\n    frac = test.get('frac', 0.5)\n    numpy_array_result = vertical_log_binning(test['input'], frac=frac)\n    numpy_msg = f'{test_name} numpy array'\n    np.testing.assert_array_equal(numpy_array_result, test['expected'],\n        err_msg=numpy_msg)\n    pandas_series_result = vertical_log_binning(pd.Series(test['input']),\n        frac=frac)\n    pandas_msg = f'{test_name} pandas series'\n    np.testing.assert_array_almost_equal(pandas_series_result, test[\n        'expected'], err_msg=pandas_msg)\n"
}