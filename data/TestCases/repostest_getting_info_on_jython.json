{
    "functionName": "test_getting_info_on_jython",
    "className": "TestCompl",
    "fileName": "/fabioz_&_PyDev.Debugger/tests_&_test_jysimpleTipper.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "dbg(\"\"\"\n\n--------------------------- java\"\"\")\nassert not ismethod(java)[0]\nassert not isclass(java)\nassert _pydev_jy_imports_tipper.ismodule(java)\ndbg(\"\"\"\n\n--------------------------- java.lang\"\"\")\nassert not ismethod(java.lang)[0]\nassert not isclass(java.lang)\nassert _pydev_jy_imports_tipper.ismodule(java.lang)\ndbg(\"\"\"\n\n--------------------------- Method\"\"\")\nassert not ismethod(Method)[0]\nassert isclass(Method)\ndbg(\"\"\"\n\n--------------------------- System\"\"\")\nassert not ismethod(System)[0]\nassert isclass(System)\ndbg(\"\"\"\n\n--------------------------- String\"\"\")\nassert not ismethod(System)[0]\nassert isclass(String)\nassert len(dir_obj(String)) > 10\ndbg(\"\"\"\n\n--------------------------- arraycopy\"\"\")\nisMet = ismethod(arraycopy)\nassert isMet[0]\nassert isMet[1][0].basic_as_str(\n    ) == \"function:arraycopy args=['java.lang.Object', 'int', 'java.lang.Object', 'int', 'int'], varargs=None, kwargs=None, docs:None\"\nassert not isclass(arraycopy)\ndbg(\"\"\"\n\n--------------------------- out\"\"\")\nisMet = ismethod(out)\nassert not isMet[0]\nassert not isclass(out)\ndbg(\"\"\"\n\n--------------------------- out.println\"\"\")\nisMet = ismethod(out.println)\nassert isMet[0]\nassert len(isMet[1]) == 10\nself.assertEqual(isMet[1][0].basic_as_str(),\n    'function:println args=[], varargs=None, kwargs=None, docs:None')\nassert isMet[1][1].basic_as_str(\n    ) == \"function:println args=['long'], varargs=None, kwargs=None, docs:None\"\nassert not isclass(out.println)\ndbg(\"\"\"\n\n--------------------------- str\"\"\")\nisMet = ismethod(str)\nassert not isclass(str)\ndef met1():\n    a = 3\n    return a\ndbg(\"\"\"\n\n--------------------------- met1\"\"\")\nisMet = ismethod(met1)\nassert isMet[0]\nassert isMet[1][0].basic_as_str(\n    ) == 'function:met1 args=[], varargs=None, kwargs=None, docs:None'\nassert not isclass(met1)\ndef met2(arg1, arg2, *vararg, **kwarg):\n    \"\"\"docmet2\"\"\"\n    a = 1\n    return a\ndbg(\"\"\"\n\n--------------------------- met2\"\"\")\nisMet = ismethod(met2)\nassert isMet[0]\nassert isMet[1][0].basic_as_str(\n    ) == \"function:met2 args=['arg1', 'arg2'], varargs=vararg, kwargs=kwarg, docs:docmet2\"\nassert not isclass(met2)\n"
}