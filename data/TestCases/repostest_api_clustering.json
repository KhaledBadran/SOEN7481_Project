{
    "functionName": "test_api_clustering",
    "className": null,
    "fileName": "/FreeDiscovery_&_FreeDiscovery/freediscovery_&_server_&_tests_&_test_cluster.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "dsid, lsi_id, _, _ = get_features_lsi_cached(app)\nif use_lsi:\n    parent_id = lsi_id\nelse:\n    lsi_id = None\n    parent_id = dsid\npars = {'parent_id': parent_id}\nif model == 'birch' and n_clusters <= 0:\n    is_hierarchical = True\nelse:\n    is_hierarchical = False\nmethod = V01 + '/feature-extraction/{}'.format(dsid)\ndata = app.get_check(method)\nurl = V01 + '/clustering/' + model\nif model != 'dbscan':\n    pars['n_clusters'] = n_clusters\nif model == 'dbscan':\n    pars.update({'eps': 0.1, 'min_samples': 2})\nelif model == 'birch':\n    pars['min_similarity'] = 0.7\ndata = app.post_check(url, json=pars)\nassert sorted(data.keys()) == sorted(['id'])\nmid = data['id']\nurl += '/{}'.format(mid)\nn_top_words = 2\npars = {'n_top_words': n_top_words}\nif optimal_sampling:\n    pars['return_optimal_sampling'] = True\ndata = app.get_check(url, query_string=pars)\nassert dict2type(data, max_depth=1) == {'data': 'list'}\nfor row in data['data']:\n    ref_res = {'cluster_id': 'int', 'cluster_similarity': 'float',\n        'documents': 'list', 'cluster_size': 'int'}\n    if is_hierarchical and not optimal_sampling:\n        ref_res['children'] = 'list'\n        ref_res['cluster_depth'] = 'int'\n    if not optimal_sampling:\n        ref_res['cluster_label'] = 'str'\n        assert re.match('[^\\\\[]+', row['cluster_label'])\n    assert dict2type(row, max_depth=1) == ref_res\n    for irow in row['documents']:\n        assert dict2type(irow) == {'document_id': 'int', 'similarity': 'float'}\nif model != 'dbscan' and not is_hierarchical:\n    assert len(data['data']) == 13\napp.delete_check(url)\npytest.mark.parametrize('model, use_lsi, n_clusters, optimal_sampling', [(\n    'k-mean', False, 13, False), ('birch', True, -1, False), ('birch', True,\n    -1, True), ('birch', True, 13, False), ('dbscan', True, None, False)])"
}