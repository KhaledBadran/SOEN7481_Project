{
    "functionName": "get_unreachable_ops",
    "className": "BertModelTest",
    "fileName": "/kpi6research_&_Bert-as-a-Library/BertLibrary_&_bert_&_modeling_test.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"Finds all of the tensors in graph that are unreachable from outputs.\"\"\"\noutputs = cls.flatten_recursive(outputs)\noutput_to_op = collections.defaultdict(list)\nop_to_all = collections.defaultdict(list)\nassign_out_to_in = collections.defaultdict(list)\nfor op in graph.get_operations():\n    for x in op.inputs:\n        op_to_all[op.name].append(x.name)\n    for y in op.outputs:\n        output_to_op[y.name].append(op.name)\n        op_to_all[op.name].append(y.name)\n    if str(op.type) == 'Assign':\n        for y in op.outputs:\n            for x in op.inputs:\n                assign_out_to_in[y.name].append(x.name)\nassign_groups = collections.defaultdict(list)\nfor out_name in assign_out_to_in.keys():\n    name_group = assign_out_to_in[out_name]\n    for n1 in name_group:\n        assign_groups[n1].append(out_name)\n        for n2 in name_group:\n            if n1 != n2:\n                assign_groups[n1].append(n2)\nseen_tensors = {}\nstack = [x.name for x in outputs]\nwhile stack:\n    name = stack.pop()\n    if name in seen_tensors:\n        continue\n    seen_tensors[name] = True\n    if name in output_to_op:\n        for op_name in output_to_op[name]:\n            if op_name in op_to_all:\n                for input_name in op_to_all[op_name]:\n                    if input_name not in stack:\n                        stack.append(input_name)\n    expanded_names = []\n    if name in assign_groups:\n        for assign_name in assign_groups[name]:\n            expanded_names.append(assign_name)\n    for expanded_name in expanded_names:\n        if expanded_name not in stack:\n            stack.append(expanded_name)\nunreachable_ops = []\nfor op in graph.get_operations():\n    is_unreachable = False\n    all_names = [x.name for x in op.inputs] + [x.name for x in op.outputs]\n    for name in all_names:\n        if name not in seen_tensors:\n            is_unreachable = True\n    if is_unreachable:\n        unreachable_ops.append(op)\nreturn unreachable_ops\nclassmethod"
}