{
    "functionName": "_create_key_pair",
    "className": "TestIntegration",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_integration_&_services_&_test_integration.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"\n        Helper function for creating private and public keys. Used any time\n        a key pair needs to be created.\n        :param key_name: name of the key to be created\n        :return: returns the result of the \"create key\" operation as\n        provided by the KMIP appliance\n        \"\"\"\nattribute_type = AttributeType.CRYPTOGRAPHIC_ALGORITHM\nalgorithm = self.attr_factory.create_attribute(attribute_type,\n    CryptoAlgorithmEnum.RSA)\nmask_flags = [CryptographicUsageMask.ENCRYPT, CryptographicUsageMask.DECRYPT]\nattribute_type = AttributeType.CRYPTOGRAPHIC_USAGE_MASK\nusage_mask = self.attr_factory.create_attribute(attribute_type, mask_flags)\nkey_length = 2048\nattribute_type = AttributeType.CRYPTOGRAPHIC_LENGTH\nkey_length_obj = self.attr_factory.create_attribute(attribute_type, key_length)\nname = Attribute.AttributeName('Name')\nif key_name is None:\n    key_name = 'Integration Test - Key'\npriv_name_value = Name.NameValue(key_name + ' Private')\npub_name_value = Name.NameValue(key_name + ' Public')\nname_type = Name.NameType(NameType.UNINTERPRETED_TEXT_STRING)\npriv_value = Name(name_value=priv_name_value, name_type=name_type)\npub_value = Name(name_value=pub_name_value, name_type=name_type)\npriv_name = Attribute(attribute_name=name, attribute_value=priv_value)\npub_name = Attribute(attribute_name=name, attribute_value=pub_value)\ncommon_attributes = [algorithm, usage_mask, key_length_obj]\nprivate_key_attributes = [priv_name]\npublic_key_attributes = [pub_name]\ncommon = TemplateAttribute(attributes=common_attributes, tag=enums.Tags.\n    COMMON_TEMPLATE_ATTRIBUTE)\npriv_templ_attr = TemplateAttribute(attributes=private_key_attributes, tag=\n    enums.Tags.PRIVATE_KEY_TEMPLATE_ATTRIBUTE)\npub_templ_attr = TemplateAttribute(attributes=public_key_attributes, tag=\n    enums.Tags.PUBLIC_KEY_TEMPLATE_ATTRIBUTE)\nreturn self.client.create_key_pair(common_template_attribute=common,\n    private_key_template_attribute=priv_templ_attr,\n    public_key_template_attribute=pub_templ_attr)\n"
}