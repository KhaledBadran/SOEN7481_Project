{
    "functionName": "test_empirical_sinkhorn_divergence",
    "className": null,
    "fileName": "/PythonOT_&_POT/test_&_test_bregman.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "n = 10\na = ot.unif(n)\nb = ot.unif(n)\nX_s = np.reshape(np.arange(n), (n, 1))\nX_t = np.reshape(np.arange(0, n * 2, 2), (n, 1))\nM = ot.dist(X_s, X_t)\nM_s = ot.dist(X_s, X_s)\nM_t = ot.dist(X_t, X_t)\nemp_sinkhorn_div = ot.bregman.empirical_sinkhorn_divergence(X_s, X_t, 1)\nsinkhorn_div = ot.sinkhorn2(a, b, M, 1) - 1 / 2 * ot.sinkhorn2(a, a, M_s, 1\n    ) - 1 / 2 * ot.sinkhorn2(b, b, M_t, 1)\nemp_sinkhorn_div_log, log_es = ot.bregman.empirical_sinkhorn_divergence(X_s,\n    X_t, 1, log=True)\nsink_div_log_ab, log_s_ab = ot.sinkhorn2(a, b, M, 1, log=True)\nsink_div_log_a, log_s_a = ot.sinkhorn2(a, a, M_s, 1, log=True)\nsink_div_log_b, log_s_b = ot.sinkhorn2(b, b, M_t, 1, log=True)\nsink_div_log = sink_div_log_ab - 1 / 2 * (sink_div_log_a + sink_div_log_b)\nnp.testing.assert_allclose(emp_sinkhorn_div, sinkhorn_div, atol=1e-05)\nnp.testing.assert_allclose(emp_sinkhorn_div_log, sink_div_log, atol=1e-05)\n"
}