{
    "functionName": "test_get_feature_extraction",
    "className": null,
    "fileName": "/FreeDiscovery_&_FreeDiscovery/freediscovery_&_server_&_tests_&_test_ingestion.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "norm_alpha = 0.5\ndsid, _, _ = get_features_cached(app, hashed=hashed, weighting=weighting,\n    norm_alpha=norm_alpha)\nmethod = V01 + '/feature-extraction/{}'.format(dsid)\ndata = app.get_check(method)\nassert dict2type(data, collapse_lists=True) == {'analyzer': 'str',\n    'ngram_range': ['int'], 'stop_words': 'str', 'n_jobs': 'int',\n    'chunk_size': 'int', 'data_dir': 'str', 'n_samples': 'int',\n    'n_features': 'int', 'weighting': 'str', 'norm_alpha': 'float',\n    'use_hashing': 'bool', 'filenames': ['str'], 'max_df': 'float',\n    'min_df': 'float', 'parse_email_headers': 'bool', 'n_samples_processed':\n    'int', 'preprocess': [], 'column_ids': 'NoneType', 'column_separator':\n    'str'}\nassert data['use_hashing'] == hashed\nassert data['weighting'] == weighting\nassert data['norm_alpha'] == norm_alpha\nvect = joblib.load(os.path.join(CACHE_DIR, 'ediscovery_cache', dsid,\n    'vectorizer'))\nassert (data['use_hashing'] is True) == ('hashing' in type(vect).__name__.\n    lower())\npytest.mark.parametrize('hashed, weighting', [(True, 'nnc'), (False, 'nsc'),\n    (False, 'nnc'), (True, 'nsc'), (False, 'lncp'), (False, 'lnup')])"
}