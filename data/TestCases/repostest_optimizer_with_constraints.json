{
    "functionName": "test_optimizer_with_constraints",
    "className": null,
    "fileName": "/bytesandbrains_&_ProcessOptimizer/ProcessOptimizer_&_tests_&_test_constraints.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "base_estimator = 'GP'\nspace = Space([Real(1, 10), Real(1, 10), Real(1, 10), Integer(0, 10),\n    Integer(0, 10), Integer(0, 10), Categorical(list('abcdefg')),\n    Categorical(list('abcdefg')), Categorical(list('abcdefg'))])\ncons_list = [Single(0, 5.0, 'real'), Single(3, 5, 'integer')]\ncons_list_2 = [Single(0, 4.0, 'real'), Single(3, 4, 'integer')]\ncons = Constraints(cons_list, space)\ncons_2 = Constraints(cons_list_2, space)\nopt = Optimizer(space, base_estimator, acq_optimizer=acq_optimizer,\n    n_initial_points=5)\nassert_equal(opt._constraints, None)\nfor _ in range(6):\n    next_x = opt.ask()\n    f_val = np.random.random() * 100\n    opt.tell(next_x, f_val)\nassert_equal(opt._constraints, None)\nopt.remove_constraints()\nassert_equal(opt._constraints, None)\nopt = Optimizer(space, base_estimator, acq_optimizer=acq_optimizer,\n    n_initial_points=3)\nopt.set_constraints(cons)\nassert_equal(opt._constraints, cons)\nnext_x = opt.ask()\nassert_equal(next_x[0], 5.0)\nassert_equal(next_x[3], 5)\nf_val = np.random.random() * 100\nopt.tell(next_x, f_val)\nassert_equal(opt._constraints, cons)\nopt.set_constraints(cons_2)\nnext_x = opt.ask()\nassert_equal(opt._constraints, cons_2)\nassert_equal(next_x[0], 4.0)\nassert_equal(next_x[3], 4)\nf_val = np.random.random() * 100\nopt.tell(next_x, f_val)\nassert_equal(opt._constraints, cons_2)\nopt.remove_constraints()\nassert_equal(opt._constraints, None)\nnext_x = opt.ask()\nassert_not_equal(next_x[0], 4.0)\nassert_not_equal(next_x[0], 5.0)\nf_val = np.random.random() * 100\nopt.tell(next_x, f_val)\nassert_equal(opt._constraints, None)\nopt = Optimizer(space, base_estimator, acq_optimizer=acq_optimizer,\n    n_initial_points=3)\nassert_false(hasattr(opt, '_next_x'))\nfor _ in range(4):\n    next_x = opt.ask()\n    f_val = np.random.random() * 100\n    opt.tell(next_x, f_val)\nassert_true(hasattr(opt, '_next_x'))\nassert_not_equal(next_x[0], 4.0)\nassert_not_equal(next_x[0], 5.0)\nnext_x = opt._next_x\nopt.set_constraints(cons)\nassert_not_equal(opt._next_x, next_x)\nassert_equal(opt._next_x[0], 5.0)\nassert_equal(opt._next_x[3], 5)\nnext_x = opt._next_x\nopt.set_constraints(cons_2)\nassert_not_equal(opt._next_x, next_x)\nassert_equal(opt._next_x[0], 4.0)\nassert_equal(opt._next_x[3], 4)\nopt = Optimizer(space, base_estimator, acq_optimizer=acq_optimizer,\n    n_initial_points=3)\nopt.set_constraints(cons_list)\nopt2 = Optimizer(space, base_estimator, acq_optimizer=acq_optimizer,\n    n_initial_points=3)\nopt2.set_constraints(cons)\nassert_equal(opt._constraints, opt2._constraints)\nopt = Optimizer(space, base_estimator, acq_optimizer=acq_optimizer,\n    n_initial_points=2)\nopt.set_constraints(cons)\nnext_x = opt.ask()\nassert_equal(next_x[0], 5.0)\nopt = Optimizer(space, base_estimator, acq_optimizer=acq_optimizer,\n    n_initial_points=2)\nnext_x = opt.ask()\nassert_not_equal(next_x[0], 5.0)\nf_val = np.random.random() * 100\nopt.tell(next_x, f_val)\nopt.set_constraints(cons)\nnext_x = opt.ask()\nassert_equal(next_x[0], 5.0)\nassert_equal(next_x[3], 5)\nopt.set_constraints(cons)\nnext_x = opt.ask()\nf_val = np.random.random() * 100\nopt.tell(next_x, f_val)\nopt.set_constraints(cons_2)\nnext_x = opt.ask()\nassert_equal(next_x[0], 4.0)\nassert_equal(next_x[3], 4)\nf_val = np.random.random() * 100\nopt.tell(next_x, f_val)\nassert_equal(next_x[0], 4.0)\nassert_equal(next_x[3], 4)\npytest.mark.slow_testpytest.mark.parametrize('acq_optimizer', ACQ_OPTIMIZERS)"
}