{
    "functionName": "test_run_terminator",
    "className": "TestTerminator",
    "fileName": "/Sung-Huan_&_ANNOgesic/tests_&_test_terminator.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "te.stat_term = self.mock.mock_stat_term\nte.intergenic_seq = self.mock.mock_intergenic_seq\nte.poly_t = self.mock.mock_poly_t\nself.term._re_table = self.mock.mock_re_table\nte.detect_coverage = self.mock.mock_detect_coverage\nself.term.multiparser = self.mock_parser\nself.term._run_rnafold = self.mock.mock_run_rnafold\nself.term._TransTermHP = self.mock.mock_TransTermHP\nself.term._compare_term_tran = self.mock.mock_compare_term_tran\nself.term._remove_tmp_file = self.mock.mock_remove_tmp_file\nos.mkdir(os.path.join(self.srnas, 'tmp'))\nos.mkdir(os.path.join(self.trans, 'tmp'))\ngen_file(os.path.join(self.gffs, 'tmp/aaa.gff'), self.example.gff_file)\ngen_file(os.path.join(self.fastas, 'tmp/aaa.fa'), self.example.fasta_file)\ngen_file(os.path.join(self.srnas, 'tmp/aaa_sRNA.gff'), self.example.srna_file)\ngen_file(os.path.join(self.trans, 'tmp/aaa_transcript.gff'), self.example.\n    tran_file)\ntex_wigs = os.path.join(self.test_folder, 'tex')\nfrag_wigs = os.path.join(self.test_folder, 'frag')\nos.mkdir(tex_wigs)\nos.mkdir(frag_wigs)\ngen_file(os.path.join(frag_wigs, 'frag.wig'), 'text')\ngen_file(os.path.join(tex_wigs, 'tex.wig'), 'text')\nargs = self.mock_args.mock()\nargs.out_folder = self.out\nargs.fastas = self.fastas\nargs.gffs = self.gffs\nargs.trans = self.trans\nargs.srnas = self.srnas\nargs.tex_wigs = tex_wigs\nargs.frag_wigs = frag_wigs\nargs.hp_folder = self.test_folder\nargs.tex_notex = 'tex_notex'\nargs.wig_path = self.test_folder\nargs.merge_wigs = self.test_folder\nargs.RNAfold_path = 'RNAfold_path'\nargs.stat = True\nargs.fuzzy_up_ta = 2\nargs.fuzzy_up_gene = 2\nargs.fuzzy_down_ta = 2\nargs.fuzzy_down_gene = 2\nlog = open(os.path.join(self.test_folder, 'test.log'), 'w')\nself.term.run_terminator(args, log)\nself.assertTrue(os.path.exists(os.path.join(self.out, 'tables/all_candidates'))\n    )\nself.assertTrue(os.path.exists(os.path.join(self.out,\n    'tables/expressed_candidates')))\nself.assertTrue(os.path.exists(os.path.join(self.out,\n    'tables/best_candidates')))\nself.assertTrue(os.path.exists(os.path.join(self.out, 'gffs/all_candidates')))\nself.assertTrue(os.path.exists(os.path.join(self.out,\n    'gffs/expressed_candidates')))\nself.assertTrue(os.path.exists(os.path.join(self.out, 'gffs/best_candidates')))\n"
}