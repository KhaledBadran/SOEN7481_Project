{
    "functionName": "saveNXsqom",
    "className": "DataFile",
    "fileName": "/jakob-lass_&_MJOLNIR/MJOLNIR_&_Data_&_DataFile.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"Save converted file into an NXsqom.\n\n        Args:\n\n            - saveFileName (string): File name to be saved into.\n\n        \"\"\"\nif not self.__hasattr__('original_file'):\n    raise AttributeError(\n        'Data file does not have link to the original file. This is needed to make a complete copy when creating nxs-files'\n        )\nif not self.type == 'nxs':\n    raise AttributeError('Only nxs typed files can be saved as nxs-files.')\ndatafile = self.original_file\nIntensity = self.I\nMonitor = self.Monitor\nQX = self.qx\nQY = self.qy\nDeltaE = self.energy\nbinning = self.binning\nNormalization = self.Norm\nH = self.h\nK = self.k\nL = self.l\nif os.path.exists(saveFileName):\n    warnings.warn('The file {} exists alread. Old file will be renamed to {}.'\n        .format(saveFileName, saveFileName + '_old'))\n    os.rename(saveFileName, saveFileName + '_old')\nfd = hdf.File(saveFileName, 'w')\nfs = hdf.File(datafile.fileLocation, 'r')\ngroup_path = fs['/entry'].parent.name\ngroup_id = fd.require_group(group_path)\nfs.copy('/entry', group_id, name='/entry')\ndefinition = fd.create_dataset('entry/definition', (1,), dtype='S70', data=\n    np.string_('NXsqom'))\ndefinition.attrs['NX_class'] = 'NX_CHAR'\nprocess = fd.create_group('entry/reduction')\nprocess.attrs['NX_class'] = b'NXprocess'\nproc = process.create_group('MJOLNIR_algorithm_convert')\nproc.attrs['NX_class'] = b'NXprocess'\nauthor = proc.create_dataset('author', shape=(1,), dtype='S70', data=np.\n    string_('Jakob Lass'))\nauthor.attrs['NX_class'] = b'NX_CHAR'\ndate = proc.create_dataset('date', shape=(1,), dtype='S70', data=np.string_\n    (datetime.datetime.now()))\ndate.attrs['NX_class'] = b'NX_CHAR'\ndescription = proc.create_dataset('description', shape=(1,), dtype='S70',\n    data=np.string_(\n    'Conversion from pixel to Qx,Qy,E in reference system of instrument.'))\ndescription.attrs['NX_class'] = b'NX_CHAR'\nrawdata = proc.create_dataset('rawdata', shape=(1,), dtype='S200', data=np.\n    string_(os.path.realpath(datafile.fileLocation)))\nrawdata.attrs['NX_class'] = b'NX_CHAR'\nnormalizationString = proc.create_dataset('binning', shape=(1,), dtype=\n    'int32', data=binning)\nnormalizationString.attrs['NX_class'] = b'NX_INT'\ndata = fd.get('entry/data')\nfileLength = Intensity.shape\nInt = data.create_dataset('intensity', shape=fileLength, dtype='int32',\n    data=Intensity)\nInt.attrs['NX_class'] = 'NX_INT'\nmonitor = data.create_dataset('monitor', shape=fileLength, dtype='int32',\n    data=Monitor)\nmonitor.attrs['NX_class'] = b'NX_INT'\nnormalization = data.create_dataset('normalization', shape=fileLength,\n    dtype='float32', data=Normalization)\nnormalization.attrs['NX_class'] = b'NX_FLOAT'\nqx = data.create_dataset('qx', shape=fileLength, dtype='float32', data=QX)\nqx.attrs['NX_class'] = b'NX_FLOAT'\nqx.attrs['units'] = b'1/angstrom'\nqy = data.create_dataset('qy', shape=fileLength, dtype='float32', data=QY)\nqy.attrs['NX_class'] = b'NX_FLOAT'\nqy.attrs['units'] = b'1/angstrom'\nen = data.create_dataset('en', shape=fileLength, dtype='float32', data=DeltaE)\nen.attrs['NX_class'] = b'NX_FLOAT'\nen.attrs['units'] = b'mev'\nh = data.create_dataset('h', shape=fileLength, dtype='float32', data=H)\nk = data.create_dataset('k', shape=fileLength, dtype='float32', data=K)\nl = data.create_dataset('l', shape=fileLength, dtype='float32', data=L)\nfor x in [h, k, l]:\n    x.attrs['NX_class'] = b'NX_FLOAT'\n    x.attrs['units'] = b'rlu'\nfd.close()\n"
}