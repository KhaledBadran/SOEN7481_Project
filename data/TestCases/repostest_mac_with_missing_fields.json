{
    "functionName": "test_mac_with_missing_fields",
    "className": "TestKmipEngine",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_services_&_server_&_test_engine.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that the right errors are generated when required fields\n        are missing.\n        \"\"\"\ne = engine.KmipEngine()\ne._data_store = self.engine\ne._data_store_session_factory = self.session_factory\ne._data_session = e._data_store_session_factory()\ne._is_allowed_by_operation_policy = mock.Mock(return_value=True)\ne._logger = mock.MagicMock()\nkey = b'\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\ndata = b'\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\t\\n\\x0b\\x0c\\r\\x0e\\x0f'\nalgorithm = enums.CryptographicAlgorithm.AES\nobj_no_key = pie_objects.OpaqueObject(b'', enums.OpaqueDataType.NONE)\nobj_no_algorithm = pie_objects.OpaqueObject(key, enums.OpaqueDataType.NONE)\ne._data_session.add(obj_no_key)\ne._data_session.add(obj_no_algorithm)\ne._data_session.commit()\ne._data_session = e._data_store_session_factory()\nuuid_no_key = str(obj_no_key.unique_identifier)\nuuid_no_algorithm = str(obj_no_algorithm.unique_identifier)\ncryptographic_parameters = attributes.CryptographicParameters(\n    cryptographic_algorithm=algorithm)\npayload_no_key = payloads.MACRequestPayload(unique_identifier=attributes.\n    UniqueIdentifier(uuid_no_key), cryptographic_parameters=\n    cryptographic_parameters, data=objects.Data(data))\nargs = payload_no_key,\nregex = 'A secret key value must be specified'\nself.assertRaisesRegex(exceptions.PermissionDenied, regex, e._process_mac,\n    *args)\npayload_no_algorithm = payloads.MACRequestPayload(unique_identifier=\n    attributes.UniqueIdentifier(uuid_no_algorithm),\n    cryptographic_parameters=None, data=objects.Data(data))\nargs = payload_no_algorithm,\nregex = 'The cryptographic algorithm must be specified'\nself.assertRaisesRegex(exceptions.PermissionDenied, regex, e._process_mac,\n    *args)\npayload_no_data = payloads.MACRequestPayload(unique_identifier=attributes.\n    UniqueIdentifier(uuid_no_algorithm), cryptographic_parameters=\n    cryptographic_parameters, data=None)\nargs = payload_no_data,\nregex = 'No data to be MACed'\nself.assertRaisesRegex(exceptions.PermissionDenied, regex, e._process_mac,\n    *args)\n"
}