{
    "functionName": "create_param",
    "className": null,
    "fileName": "/Lasagne_&_Lasagne/lasagne_&_utils.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"\n    Helper method to create Theano shared variables for layer parameters\n    and to initialize them.\n\n    Parameters\n    ----------\n    spec : scalar number, numpy array, Theano expression, or callable\n        Either of the following:\n\n        * a scalar or a numpy array with the initial parameter values\n        * a Theano expression or shared variable representing the parameters\n        * a function or callable that takes the desired shape of\n          the parameter array as its single argument and returns\n          a numpy array, a Theano expression, or a shared variable\n          representing the parameters.\n\n    shape : iterable of int\n        a tuple or other iterable of integers representing the desired\n        shape of the parameter array.\n\n    name : string, optional\n        The name to give to the parameter variable. Ignored if `spec`\n        is or returns a Theano expression or shared variable that\n        already has a name.\n\n\n    Returns\n    -------\n    Theano shared variable or Theano expression\n        A Theano shared variable or expression representing layer parameters.\n        If a scalar or a numpy array was provided, a shared variable is\n        initialized to contain this array. If a shared variable or expression\n        was provided, it is simply returned. If a callable was provided, it is\n        called, and its output is used to initialize a shared variable.\n\n    Notes\n    -----\n    This function is called by :meth:`Layer.add_param()` in the constructor\n    of most :class:`Layer` subclasses. This enables those layers to\n    support initialization with scalars, numpy arrays, existing Theano shared\n    variables or expressions, and callables for generating initial parameter\n    values, Theano expressions, or shared variables.\n    \"\"\"\nimport numbers\nshape = tuple(shape)\nif any(d <= 0 for d in shape):\n    raise ValueError(\n        'Cannot create param with a non-positive shape dimension. Tried to create param with shape=%r, name=%r'\n         % (shape, name))\nerr_prefix = 'cannot initialize parameter %s: ' % name\nif callable(spec):\n    spec = spec(shape)\n    err_prefix += 'the %s returned by the provided callable'\nelse:\n    err_prefix += 'the provided %s'\nif isinstance(spec, numbers.Number) or isinstance(spec, np.generic\n    ) and spec.dtype.kind in 'biufc':\n    spec = np.asarray(spec)\nif isinstance(spec, np.ndarray):\n    if spec.shape != shape:\n        raise ValueError('%s has shape %s, should be %s' % (err_prefix %\n            'numpy array', spec.shape, shape))\n    bcast = tuple(s == 1 for s in shape)\n    spec = theano.shared(spec, broadcastable=bcast)\nif isinstance(spec, theano.Variable):\n    if spec.ndim != len(shape):\n        raise ValueError('%s has %d dimensions, should be %d' % (err_prefix %\n            'Theano variable', spec.ndim, len(shape)))\n    if not spec.name:\n        spec.name = name\n    return spec\nelif 'callable' in err_prefix:\n    raise TypeError('%s is not a numpy array or a Theano expression' % (\n        err_prefix % 'value'))\nelse:\n    raise TypeError(\n        '%s is not a numpy array, a Theano expression, or a callable' % (\n        err_prefix % 'spec'))\n"
}