{
    "functionName": "create_lattice",
    "className": "SimplerLatticeInput",
    "fileName": "/mit-crpg_&_OpenMOC/tests_&_test_subdividing_lattice_&_test_subdividing_lattice.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "large_zcylinder = openmoc.ZCylinder(x=0.0, y=0.0, radius=0.4, name='large pin')\nmedium_zcylinder = openmoc.ZCylinder(x=0.0, y=0.0, radius=0.3, name=\n    'medium pin')\nsmall_zcylinder = openmoc.ZCylinder(x=0.0, y=0.0, radius=0.2, name='small pin')\nx0_plane = openmoc.XPlane(x=0)\ny0_plane = openmoc.YPlane(y=0)\nlarge_fuel = openmoc.Cell(name='large pin fuel')\nlarge_fuel.setFill(self.materials['UO2'])\nlarge_fuel.addSurface(halfspace=-1, surface=large_zcylinder)\nlarge_moderator = openmoc.Cell(name='large pin moderator')\nlarge_moderator.setFill(self.materials['Water'])\nlarge_moderator.addSurface(halfspace=+1, surface=large_zcylinder)\nfuel_quads = [None] * 4\nmod_quads = [None] * 4\nfor i in range(4):\n    qname = ' (quadrant {})'.format(i + 1)\n    fcell = openmoc.Cell(name='large fuel' + qname)\n    fcell.setFill(self.materials['UO2'])\n    fcell.addSurface(halfspace=-1, surface=large_zcylinder)\n    mcell = openmoc.Cell(name='large mod' + qname)\n    mcell.setFill(self.materials['Water'])\n    mcell.addSurface(halfspace=+1, surface=large_zcylinder)\n    xspace = 1 if i in (0, 3) else -1\n    yspace = 1 if i in (0, 1) else -1\n    fcell.addSurface(halfspace=xspace, surface=x0_plane)\n    fcell.addSurface(halfspace=yspace, surface=y0_plane)\n    mcell.addSurface(halfspace=xspace, surface=x0_plane)\n    mcell.addSurface(halfspace=yspace, surface=y0_plane)\n    fuel_quads[i] = fcell\n    mod_quads[i] = mcell\nmedium_fuel = openmoc.Cell(name='medium pin fuel')\nmedium_fuel.setFill(self.materials['UO2'])\nmedium_fuel.addSurface(halfspace=-1, surface=medium_zcylinder)\nmedium_moderator = openmoc.Cell(name='medium pin moderator')\nmedium_moderator.setFill(self.materials['Water'])\nmedium_moderator.addSurface(halfspace=+1, surface=medium_zcylinder)\nsmall_fuel = openmoc.Cell(name='small pin fuel')\nsmall_fuel.setFill(self.materials['UO2'])\nsmall_fuel.addSurface(halfspace=-1, surface=small_zcylinder)\nsmall_moderator = openmoc.Cell(name='small pin moderator')\nsmall_moderator.setFill(self.materials['Water'])\nsmall_moderator.addSurface(halfspace=+1, surface=small_zcylinder)\npin1 = openmoc.Universe(name='large pin cell')\npin2 = openmoc.Universe(name='medium pin cell')\npin3 = openmoc.Universe(name='small pin cell')\npin4 = openmoc.Universe(name='large pin cell (quadrants)')\npin1.addCell(large_fuel)\npin1.addCell(large_moderator)\npin2.addCell(medium_fuel)\npin2.addCell(medium_moderator)\npin3.addCell(small_fuel)\npin3.addCell(small_moderator)\nfor c in (fuel_quads + mod_quads):\n    pin4.addCell(c)\nlleft = [-0.5] * 2\nuright = [0.5] * 2\nDIV = 2, 2\ndiv1 = openmoc.Subdivider(DIV, lleft, uright)\npin1_div = div1.get_subdivided_universe(pin1)\ndiv4 = openmoc.Subdivider(DIV, lleft, uright)\npin4_div = div4.get_subdivided_universe(pin4)\nlattice = openmoc.Lattice(name='2x2 lattice')\nlattice.setWidth(width_x=1.0, width_y=1.0)\nlattice.setUniverses([[[pin4_div, pin3], [pin1, pin1_div]]])\nreturn lattice\n"
}