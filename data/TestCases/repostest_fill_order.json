{
    "functionName": "test_fill_order",
    "className": "TestBasicOrders",
    "fileName": "/gavincyi_&_LightMatchingEngine/tests_&_unit_&_test_basic_orders.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "me = lme.LightMatchingEngine()\nbuy_order, trades = me.add_order(TestBasicOrders.instmt, TestBasicOrders.\n    price, TestBasicOrders.lot_size, lme.Side.BUY)\nself.assertEqual(0, len(trades))\nself.check_order_book(me, TestBasicOrders.instmt, 1, 0)\nself.check_order(buy_order, 1, TestBasicOrders.instmt, TestBasicOrders.\n    price, TestBasicOrders.lot_size, lme.Side.BUY, 0, TestBasicOrders.lot_size)\nsell_order, trades = me.add_order(TestBasicOrders.instmt, TestBasicOrders.\n    price, TestBasicOrders.lot_size, lme.Side.SELL)\nself.check_order_book(me, TestBasicOrders.instmt, 0, 0)\nself.assertEqual(2, len(trades))\nself.check_order(buy_order, 1, TestBasicOrders.instmt, TestBasicOrders.\n    price, TestBasicOrders.lot_size, lme.Side.BUY, TestBasicOrders.lot_size, 0)\nself.check_order(sell_order, 2, TestBasicOrders.instmt, TestBasicOrders.\n    price, TestBasicOrders.lot_size, lme.Side.SELL, TestBasicOrders.lot_size, 0\n    )\nself.check_trade(trades[0], sell_order.order_id, sell_order.instmt,\n    sell_order.price, sell_order.qty, sell_order.side, 1)\nself.check_trade(trades[1], buy_order.order_id, buy_order.instmt, buy_order\n    .price, buy_order.qty, buy_order.side, 2)\n"
}