{
    "functionName": "entropy_app_samp_entropy",
    "className": null,
    "fileName": "/neuropsychology_&_NeuroKit/tests_&_tests_complexity.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "_all_metrics = KDTree.valid_metrics\nif metric not in _all_metrics:\n    raise ValueError(\n        'The given metric (%s) is not valid. The valid metric names are: %s' %\n        (metric, _all_metrics))\nphi = np.zeros(2)\nr = 0.2 * np.std(x, axis=-1, ddof=1)\n_emb_data1 = entropy_embed(x, order, 1)\nif approximate:\n    emb_data1 = _emb_data1\nelse:\n    emb_data1 = _emb_data1[:-1]\ncount1 = KDTree(emb_data1, metric=metric).query_radius(emb_data1, r,\n    count_only=True).astype(np.float64)\nemb_data2 = entropy_embed(x, order + 1, 1)\ncount2 = KDTree(emb_data2, metric=metric).query_radius(emb_data2, r,\n    count_only=True).astype(np.float64)\nif approximate:\n    phi[0] = np.mean(np.log(count1 / emb_data1.shape[0]))\n    phi[1] = np.mean(np.log(count2 / emb_data2.shape[0]))\nelse:\n    phi[0] = np.mean((count1 - 1) / (emb_data1.shape[0] - 1))\n    phi[1] = np.mean((count2 - 1) / (emb_data2.shape[0] - 1))\nreturn phi\n"
}