{
    "functionName": "test_python_and_cpp_return_same_1d_analytic_ei_and_gradient",
    "className": "TestExpectedImprovement",
    "fileName": "/Yelp_&_MOE/moe_&_tests_&_optimal_learning_&_python_&_cpp_wrappers_&_expected_improvement_test.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"Compare the 1D analytic EI/grad EI results from Python & C++, checking several random points per test case.\"\"\"\nnum_tests_per_case = 10\nei_tolerance = 6e-14\ngrad_ei_tolerance = 6e-13\nfor test_case in self.gp_test_environments:\n    domain, python_gp = test_case\n    python_cov, historical_data = python_gp.get_core_data_copy()\n    points_to_sample = domain.generate_random_point_in_domain()\n    python_ei_eval = (moe.optimal_learning.python.python_version.\n        expected_improvement.ExpectedImprovement(python_gp, points_to_sample))\n    cpp_cov = (moe.optimal_learning.python.cpp_wrappers.covariance.\n        SquareExponential(python_cov.hyperparameters))\n    cpp_gp = (moe.optimal_learning.python.cpp_wrappers.gaussian_process.\n        GaussianProcess(cpp_cov, historical_data))\n    cpp_ei_eval = (moe.optimal_learning.python.cpp_wrappers.\n        expected_improvement.ExpectedImprovement(cpp_gp, points_to_sample))\n    for _ in xrange(num_tests_per_case):\n        points_to_sample = domain.generate_random_point_in_domain()\n        cpp_ei_eval.current_point = points_to_sample\n        python_ei_eval.current_point = points_to_sample\n        cpp_ei = cpp_ei_eval.compute_expected_improvement()\n        python_ei = python_ei_eval.compute_expected_improvement(force_1d_ei\n            =True)\n        self.assert_scalar_within_relative(python_ei, cpp_ei, ei_tolerance)\n        cpp_grad_ei = cpp_ei_eval.compute_grad_expected_improvement()\n        python_grad_ei = python_ei_eval.compute_grad_expected_improvement()\n        self.assert_vector_within_relative(python_grad_ei, cpp_grad_ei,\n            grad_ei_tolerance)\n"
}