{
    "functionName": "test_repeat_matcher",
    "className": "TestRegex",
    "fileName": "/named-data_&_PyNDN2/tests_&_unit_tests_&_test_regex.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "backRef = NdnRegexBackrefManager()\ncm = NdnRegexRepeatMatcher('[<a><b>]*', backRef, 8)\nres = cm.match(Name('/a/b/c'), 0, 0)\nself.assertEqual(True, res)\nself.assertEqual(0, len(cm.getMatchResult()))\nres = cm.match(Name('/a/b/c'), 0, 2)\nself.assertEqual(True, res)\nself.assertEqual(2, len(cm.getMatchResult()))\nself.assertEqual('a', cm.getMatchResult()[0].toEscapedString())\nself.assertEqual('b', cm.getMatchResult()[1].toEscapedString())\nbackRef = NdnRegexBackrefManager()\ncm = NdnRegexRepeatMatcher('[<a><b>]+', backRef, 8)\nres = cm.match(Name('/a/b/c'), 0, 0)\nself.assertEqual(False, res)\nself.assertEqual(0, len(cm.getMatchResult()))\nres = cm.match(Name('/a/b/c'), 0, 2)\nself.assertEqual(True, res)\nself.assertEqual(2, len(cm.getMatchResult()))\nself.assertEqual('a', cm.getMatchResult()[0].toEscapedString())\nself.assertEqual('b', cm.getMatchResult()[1].toEscapedString())\nbackRef = NdnRegexBackrefManager()\ncm = NdnRegexRepeatMatcher('<.*>*', backRef, 4)\nres = cm.match(Name('/a/b/c/d/e/f/'), 0, 6)\nself.assertEqual(True, res)\nself.assertEqual(6, len(cm.getMatchResult()))\nself.assertEqual('a', cm.getMatchResult()[0].toEscapedString())\nself.assertEqual('b', cm.getMatchResult()[1].toEscapedString())\nself.assertEqual('c', cm.getMatchResult()[2].toEscapedString())\nself.assertEqual('d', cm.getMatchResult()[3].toEscapedString())\nself.assertEqual('e', cm.getMatchResult()[4].toEscapedString())\nself.assertEqual('f', cm.getMatchResult()[5].toEscapedString())\nbackRef = NdnRegexBackrefManager()\ncm = NdnRegexRepeatMatcher('<>*', backRef, 2)\nres = cm.match(Name('/a/b/c/d/e/f/'), 0, 6)\nself.assertEqual(True, res)\nself.assertEqual(6, len(cm.getMatchResult()))\nself.assertEqual('a', cm.getMatchResult()[0].toEscapedString())\nself.assertEqual('b', cm.getMatchResult()[1].toEscapedString())\nself.assertEqual('c', cm.getMatchResult()[2].toEscapedString())\nself.assertEqual('d', cm.getMatchResult()[3].toEscapedString())\nself.assertEqual('e', cm.getMatchResult()[4].toEscapedString())\nself.assertEqual('f', cm.getMatchResult()[5].toEscapedString())\nbackRef = NdnRegexBackrefManager()\ncm = NdnRegexRepeatMatcher('<a>?', backRef, 3)\nres = cm.match(Name('/a/b/c'), 0, 0)\nself.assertEqual(True, res)\nself.assertEqual(0, len(cm.getMatchResult()))\ncm = NdnRegexRepeatMatcher('<a>?', backRef, 3)\nres = cm.match(Name('/a/b/c'), 0, 1)\nself.assertEqual(True, res)\nself.assertEqual(1, len(cm.getMatchResult()))\nself.assertEqual('a', cm.getMatchResult()[0].toEscapedString())\ncm = NdnRegexRepeatMatcher('<a>?', backRef, 3)\nres = cm.match(Name('/a/b/c'), 0, 2)\nself.assertEqual(False, res)\nself.assertEqual(0, len(cm.getMatchResult()))\nbackRef = NdnRegexBackrefManager()\ncm = NdnRegexRepeatMatcher('[<a><b>]{3}', backRef, 8)\nres = cm.match(Name('/a/b/a/d/'), 0, 2)\nself.assertEqual(False, res)\nself.assertEqual(0, len(cm.getMatchResult()))\nres = cm.match(Name('/a/b/a/d/'), 0, 3)\nself.assertEqual(True, res)\nself.assertEqual(3, len(cm.getMatchResult()))\nself.assertEqual('a', cm.getMatchResult()[0].toEscapedString())\nself.assertEqual('b', cm.getMatchResult()[1].toEscapedString())\nself.assertEqual('a', cm.getMatchResult()[2].toEscapedString())\nres = cm.match(Name('/a/b/a/d/'), 0, 4)\nself.assertEqual(False, res)\nself.assertEqual(0, len(cm.getMatchResult()))\nbackRef = NdnRegexBackrefManager()\ncm = NdnRegexRepeatMatcher('[<a><b>]{2,3}', backRef, 8)\nres = cm.match(Name('/a/b/a/d/e/'), 0, 2)\nself.assertEqual(True, res)\nself.assertEqual(2, len(cm.getMatchResult()))\nself.assertEqual('a', cm.getMatchResult()[0].toEscapedString())\nself.assertEqual('b', cm.getMatchResult()[1].toEscapedString())\nres = cm.match(Name('/a/b/a/d/e/'), 0, 3)\nself.assertEqual(True, res)\nself.assertEqual(3, len(cm.getMatchResult()))\nself.assertEqual('a', cm.getMatchResult()[0].toEscapedString())\nself.assertEqual('b', cm.getMatchResult()[1].toEscapedString())\nself.assertEqual('a', cm.getMatchResult()[2].toEscapedString())\nres = cm.match(Name('/a/b/a/b/e/'), 0, 4)\nself.assertEqual(False, res)\nself.assertEqual(0, len(cm.getMatchResult()))\nres = cm.match(Name('/a/b/a/d/e/'), 0, 1)\nself.assertEqual(False, res)\nself.assertEqual(0, len(cm.getMatchResult()))\nbackRef = NdnRegexBackrefManager()\ncm = NdnRegexRepeatMatcher('[<a><b>]{2,}', backRef, 8)\nres = cm.match(Name('/a/b/a/d/e/'), 0, 2)\nself.assertEqual(True, res)\nself.assertEqual(2, len(cm.getMatchResult()))\nself.assertEqual('a', cm.getMatchResult()[0].toEscapedString())\nself.assertEqual('b', cm.getMatchResult()[1].toEscapedString())\nres = cm.match(Name('/a/b/a/b/e/'), 0, 4)\nself.assertEqual(True, res)\nself.assertEqual(4, len(cm.getMatchResult()))\nself.assertEqual('a', cm.getMatchResult()[0].toEscapedString())\nself.assertEqual('b', cm.getMatchResult()[1].toEscapedString())\nself.assertEqual('a', cm.getMatchResult()[2].toEscapedString())\nself.assertEqual('b', cm.getMatchResult()[3].toEscapedString())\nres = cm.match(Name('/a/b/a/d/e/'), 0, 1)\nself.assertEqual(False, res)\nself.assertEqual(0, len(cm.getMatchResult()))\nbackRef = NdnRegexBackrefManager()\ncm = NdnRegexRepeatMatcher('[<a><b>]{,2}', backRef, 8)\nres = cm.match(Name('/a/b/a/b/e/'), 0, 3)\nself.assertEqual(False, res)\nself.assertEqual(0, len(cm.getMatchResult()))\nres = cm.match(Name('/a/b/a/b/e/'), 0, 2)\nself.assertEqual(True, res)\nself.assertEqual(2, len(cm.getMatchResult()))\nself.assertEqual('a', cm.getMatchResult()[0].toEscapedString())\nself.assertEqual('b', cm.getMatchResult()[1].toEscapedString())\nres = cm.match(Name('/a/b/a/d/e/'), 0, 1)\nself.assertEqual(True, res)\nself.assertEqual(1, len(cm.getMatchResult()))\nself.assertEqual('a', cm.getMatchResult()[0].toEscapedString())\nres = cm.match(Name('/a/b/a/d/e/'), 0, 0)\nself.assertEqual(True, res)\nself.assertEqual(0, len(cm.getMatchResult()))\n"
}