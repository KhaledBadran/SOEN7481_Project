{
    "functionName": "_validate_storage_group_details",
    "className": "CITestProvisioning",
    "fileName": "/MichaelMcAleer_&_PyU4V/PyU4V_&_tests_&_ci_tests_&_test_pyu4v_ci_provisioning.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"Validate the return contents of storage group requests.\n\n        :param storage_group_id: reference id to check for -- str\n        :param storage_group_details: content of storage group -- dict\n        \"\"\"\nself.assertIsNotNone(storage_group_details)\nself.assertIn(constants.STORAGE_GROUP_ID_CAMEL, storage_group_details)\nself.assertIn(constants.SLO, storage_group_details)\nself.assertIn(constants.SERVICE_LEVEL, storage_group_details)\nself.assertIn(constants.BASE_SLO_NAME, storage_group_details)\nself.assertIn(constants.SRP, storage_group_details)\nself.assertIn(constants.SLO_COMPLIANCE, storage_group_details)\nself.assertIn(constants.NUM_OF_VOLS, storage_group_details)\nself.assertIn(constants.NUM_OF_CHILD_SGS, storage_group_details)\nself.assertIn(constants.NUM_OF_PARENT_SGS, storage_group_details)\nself.assertIn(constants.NUM_OF_MASKING_VIEWS, storage_group_details)\nself.assertIn(constants.NUM_OF_SNAPSHOTS, storage_group_details)\nself.assertIn(constants.CAP_GB, storage_group_details)\nself.assertIn(constants.DEVICE_EMULATION, storage_group_details)\nself.assertIn(constants.TYPE, storage_group_details)\nself.assertIn(constants.UNPROTECTED, storage_group_details)\nself.assertIsInstance(storage_group_details[constants.\n    STORAGE_GROUP_ID_CAMEL], str)\nself.assertIsInstance(storage_group_details[constants.SLO], str)\nself.assertIsInstance(storage_group_details[constants.SERVICE_LEVEL], str)\nself.assertIsInstance(storage_group_details[constants.BASE_SLO_NAME], str)\nself.assertIsInstance(storage_group_details[constants.SRP], str)\nself.assertIsInstance(storage_group_details[constants.SLO_COMPLIANCE], str)\nself.assertIsInstance(storage_group_details[constants.NUM_OF_VOLS], int)\nself.assertIsInstance(storage_group_details[constants.NUM_OF_CHILD_SGS], int)\nself.assertIsInstance(storage_group_details[constants.NUM_OF_PARENT_SGS], int)\nself.assertIs(int, type(storage_group_details[constants.NUM_OF_MASKING_VIEWS]))\nself.assertIsInstance(storage_group_details[constants.NUM_OF_SNAPSHOTS], int)\nself.assertIsInstance(storage_group_details[constants.CAP_GB], float)\nself.assertIsInstance(storage_group_details[constants.DEVICE_EMULATION], str)\nself.assertIsInstance(storage_group_details[constants.TYPE], str)\nself.assertIsInstance(storage_group_details[constants.UNPROTECTED], bool)\nself.assertIsInstance(storage_group_details[constants.COMPRESSION], bool)\nself.assertEqual(storage_group_id, storage_group_details[constants.\n    STORAGE_GROUP_ID_CAMEL])\nif constants.COMPRESSION in storage_group_details:\n    self.assertIsInstance(storage_group_details[constants.COMPRESSION], bool)\n"
}