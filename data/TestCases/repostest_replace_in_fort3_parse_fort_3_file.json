{
    "functionName": "test_replace_in_fort3_parse_fort_3_file",
    "className": null,
    "fileName": "/mortele_&_OccamTools/test_&_test_replace_in_fort3.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "tol = 1e-14\natom_names, atoms, bonds, angles, torsions, non_bonds, scf, kappa, chi = (\n    _parse_fort_3_file(file_name))\nexpected_names = ['O', 'H', 'Be', 'H+']\nfor name in expected_names:\n    assert name in atom_names.values()\nexpected_masses = [15.999, 1.008, 9.012, 1.007]\nexpected_charges = [0.0, 0.0, 0.0, 1.0]\nfor name, mass, charge, atom in zip(expected_names, expected_masses,\n    expected_charges, atoms):\n    assert name == atom._content[0]\n    assert mass == pytest.approx(atom._content[1], abs=tol)\n    assert charge == pytest.approx(atom._content[2], abs=tol)\nexpected_bonds = [(1, 1), (1, 2), (2, 4)]\nexpected_bond_lengths = [3.21, 2.01, 5.98]\nexpected_bond_eps = [2.4, 1.7, 8.8]\nfor ind, length, eps, bond in zip(expected_bonds, expected_bond_lengths,\n    expected_bond_eps, bonds):\n    for a, b in zip(ind, bond._content[:2]):\n        assert atom_names[a] == b\n    assert bond._content[2] == pytest.approx(length, abs=tol)\n    assert bond._content[3] == pytest.approx(eps, abs=tol)\nexpected_bond_angles = [(1, 1, 1), (1, 2, 1), (3, 4, 3), (4, 4, 4)]\nexpected_bond_theta = [75.0, 64.1, 90.9, 71.0]\nexpected_bond_eps = [7.1, 4.0, 1.6, 17.2]\nfor ind, theta, eps, angle in zip(expected_bond_angles, expected_bond_theta,\n    expected_bond_eps, angles):\n    for a, b in zip(ind, angle._content[:3]):\n        assert atom_names[a] == b\n    assert angle._content[3] == pytest.approx(theta, abs=tol)\n    assert angle._content[4] == pytest.approx(eps, abs=tol)\nexpected_torsions = [(1, 2, 3, 4), (2, 2, 2, 2)]\nexpected_torsion_phi = [75.0, 12.5]\nexpected_torsion_eps = [27.78, 0.24]\nfor ind, theta, eps, torsion in zip(expected_torsions, expected_torsion_phi,\n    expected_torsion_eps, torsions):\n    for a, b in zip(ind, torsion._content[:4]):\n        assert atom_names[a] == b\n    assert torsion._content[4] == pytest.approx(theta, abs=tol)\n    assert torsion._content[5] == pytest.approx(eps, abs=tol)\nexpected_non_bonds = [(1, 1), (2, 2)]\nexpected_non_bond_sigma = [1.8, 3.2]\nexpected_non_bond_eps = [29.14, 2.349]\nfor ind, sigma, eps, bond in zip(expected_non_bonds,\n    expected_non_bond_sigma, expected_non_bond_eps, non_bonds):\n    for a, b in zip(ind, bond._content[:2]):\n        assert atom_names[a] == b\n    assert bond._content[2] == pytest.approx(sigma, abs=tol)\n    assert bond._content[3] == pytest.approx(eps, abs=tol)\nfor m, expected in zip(scf, [5, 5, 10]):\n    assert m == expected\nassert kappa == pytest.approx(1.204, abs=tol)\nexpected_chi = [[0, 1, 0, -4], [1, 0, 2, 0], [0, 2, 0, 3], [-4, 0, 3, 0]]\nassert np.allclose(expected_chi, chi)\n"
}