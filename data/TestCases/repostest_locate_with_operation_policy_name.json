{
    "functionName": "test_locate_with_operation_policy_name",
    "className": "TestKmipEngine",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_services_&_server_&_test_engine.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test the Locate operation when the 'Operation Policy Name' attribute\n        is given.\n        \"\"\"\ne = engine.KmipEngine()\ne._data_store = self.engine\ne._data_store_session_factory = self.session_factory\ne._data_session = e._data_store_session_factory()\ne._is_allowed_by_operation_policy = mock.Mock(return_value=True)\ne._logger = mock.MagicMock()\nkey = b'\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\nobj_a = pie_objects.SymmetricKey(enums.CryptographicAlgorithm.AES, 128, key,\n    name='name1')\nobj_a.operation_policy_name = 'default'\nobj_b = pie_objects.SecretData(key, enums.SecretDataType.PASSWORD)\nobj_b.operation_policy_name = 'custom'\ne._data_session.add(obj_a)\ne._data_session.add(obj_b)\ne._data_session.commit()\ne._data_session = e._data_store_session_factory()\nid_a = str(obj_a.unique_identifier)\nid_b = str(obj_b.unique_identifier)\nattribute_factory = factory.AttributeFactory()\nattrs = [attribute_factory.create_attribute(enums.AttributeType.\n    OPERATION_POLICY_NAME, 'default')]\npayload = payloads.LocateRequestPayload(attributes=attrs)\ne._logger.reset_mock()\nresponse_payload = e._process_locate(payload)\ne._data_session.commit()\ne._data_session = e._data_store_session_factory()\ne._logger.info.assert_any_call('Processing operation: Locate')\ne._logger.debug.assert_any_call('Locate filter matched object: {}'.format(id_a)\n    )\ne._logger.debug.assert_any_call(\n    \"Failed match: the specified operation policy name (default) does not match the object's operation policy name (custom).\"\n    )\nself.assertEqual(1, len(response_payload.unique_identifiers))\nself.assertIn(id_a, response_payload.unique_identifiers)\nattrs = [attribute_factory.create_attribute(enums.AttributeType.\n    OPERATION_POLICY_NAME, 'custom')]\npayload = payloads.LocateRequestPayload(attributes=attrs)\ne._logger.reset_mock()\nresponse_payload = e._process_locate(payload)\ne._data_session.commit()\ne._data_session = e._data_store_session_factory()\ne._logger.info.assert_any_call('Processing operation: Locate')\ne._logger.debug.assert_any_call('Locate filter matched object: {}'.format(id_b)\n    )\ne._logger.debug.assert_any_call(\n    \"Failed match: the specified operation policy name (custom) does not match the object's operation policy name (default).\"\n    )\nself.assertEqual(1, len(response_payload.unique_identifiers))\nself.assertIn(id_b, response_payload.unique_identifiers)\nattrs = [attribute_factory.create_attribute(enums.AttributeType.\n    OPERATION_POLICY_NAME, 'unknown')]\npayload = payloads.LocateRequestPayload(attributes=attrs)\ne._logger.reset_mock()\nresponse_payload = e._process_locate(payload)\ne._data_session.commit()\ne._data_session = e._data_store_session_factory()\ne._logger.info.assert_any_call('Processing operation: Locate')\ne._logger.debug.assert_any_call(\n    \"Failed match: the specified operation policy name (unknown) does not match the object's operation policy name (default).\"\n    )\ne._logger.debug.assert_any_call(\n    \"Failed match: the specified operation policy name (unknown) does not match the object's operation policy name (custom).\"\n    )\nself.assertEqual(0, len(response_payload.unique_identifiers))\n"
}