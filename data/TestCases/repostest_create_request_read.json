{
    "functionName": "test_create_request_read",
    "className": "TestRequestMessage",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_core_&_messages_&_test_messages.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "self.stream = BytearrayStream(self.create)\nrequest_message = messages.RequestMessage()\nrequest_message.read(self.stream)\nrequest_header = request_message.request_header\nmsg = 'Bad request header type: expected {0}, received{1}'\nself.assertIsInstance(request_header, messages.RequestHeader, msg.format(\n    messages.RequestHeader, type(request_header)))\nprotocol_version = request_header.protocol_version\nmsg = 'Bad protocol version type: expected {0}, received {1}'\nself.assertIsInstance(protocol_version, contents.ProtocolVersion, msg.\n    format(contents.ProtocolVersion, type(protocol_version)))\nprotocol_version_major = protocol_version.major\nmsg = 'Bad protocol version major type: expected {0}, received {1}'\nexp_type = int\nrcv_type = type(protocol_version_major)\nself.assertIsInstance(protocol_version_major, exp_type, msg.format(exp_type,\n    rcv_type))\nmsg = 'Bad protocol version major value: expected {0}, received {1}'\nself.assertEqual(1, protocol_version_major, msg.format(1,\n    protocol_version_major))\nprotocol_version_minor = protocol_version.minor\nmsg = 'Bad protocol version minor type: expected {0}, received {1}'\nexp_type = int\nrcv_type = type(protocol_version_minor)\nself.assertIsInstance(protocol_version_minor, exp_type, msg.format(exp_type,\n    rcv_type))\nmsg = 'Bad protocol version minor value: expected {0}, received {1}'\nself.assertEqual(1, protocol_version_minor, msg.format(1,\n    protocol_version_minor))\nbatch_count = request_header.batch_count\nmsg = 'Bad batch count type: expected {0}, received {1}'\nself.assertIsInstance(batch_count, contents.BatchCount, msg.format(contents\n    .BatchCount, type(batch_count)))\nmsg = 'Bad batch count value: expected {0}, received {1}'\nself.assertEqual(1, batch_count.value, msg.format(1, batch_count.value))\nbatch_items = request_message.batch_items\nmsg = 'Bad batch items type: expected {0}, received {1}'\nself.assertIsInstance(batch_items, list, msg.format(list, type(batch_items)))\nself.assertEquals(1, len(batch_items), self.msg.format('batch items',\n    'length', 1, len(batch_items)))\nbatch_item = batch_items[0]\nmsg = 'Bad batch item type: expected {0}, received {1}'\nself.assertIsInstance(batch_item, messages.RequestBatchItem, msg.format(\n    messages.RequestBatchItem, type(batch_item)))\noperation = batch_item.operation\nmsg = 'Bad operation type: expected {0}, received {1}'\nself.assertIsInstance(operation, contents.Operation, msg.format(contents.\n    Operation, type(operation)))\nmsg = 'Bad operation value: expected {0}, received {1}'\nself.assertEqual(enums.Operation.CREATE, operation.value, msg.format(enums.\n    Operation.CREATE, operation.value))\nrequest_payload = batch_item.request_payload\nmsg = 'Bad request payload type: expected {0}, received {1}'\nself.assertIsInstance(request_payload, payloads.CreateRequestPayload, msg.\n    format(payloads.CreateRequestPayload, type(request_payload)))\nobject_type = request_payload.object_type\nmsg = 'Bad object type type: expected {0}, received {1}'\nself.assertIsInstance(object_type, enums.ObjectType, msg.format(enums.\n    ObjectType, type(object_type)))\nmsg = 'Bad object type value: expected {0}, received {1}'\nself.assertEqual(enums.ObjectType.SYMMETRIC_KEY, object_type, msg.format(\n    enums.ObjectType.SYMMETRIC_KEY, object_type))\ntemplate_attribute = request_payload.template_attribute\nmsg = 'Bad template attribute type: expected {0}, received {1}'\nself.assertIsInstance(template_attribute, objects.TemplateAttribute, msg.\n    format(objects.TemplateAttribute, type(template_attribute)))\nattributes = template_attribute.attributes\nself.assertIsInstance(attributes, list, self.msg.format('attributes',\n    'type', list, type(attributes)))\nself.assertEquals(3, len(attributes), self.msg.format('attributes',\n    'length', 3, len(attributes)))\nattribute_a = attributes[0]\nself.assertIsInstance(attribute_a, objects.Attribute, self.msg.format(\n    'attribute', 'type', objects.Attribute, type(attribute_a)))\nattribute_name = attribute_a.attribute_name\nself.assertIsInstance(attribute_name, objects.Attribute.AttributeName, self\n    .msg.format('attribute name', 'type', objects.Attribute.AttributeName,\n    type(attribute_name)))\nself.assertEquals('Cryptographic Algorithm', attribute_name.value, self.msg\n    .format('attribute name', 'value', 'Cryptographic Algorithm',\n    attribute_name.value))\nattribute_value = attribute_a.attribute_value\nexp_type = attr.CryptographicAlgorithm\nrcv_type = type(attribute_value)\nself.assertIsInstance(attribute_value, exp_type, self.msg.format(\n    'attribute value', 'type', exp_type, rcv_type))\nself.assertEquals(attribute_value.value, enums.CryptographicAlgorithm.AES,\n    self.msg.format('cryptographic algorithm', 'value', enums.\n    CryptographicAlgorithm.AES, attribute_value.value))\nattribute_b = attributes[1]\nself.assertIsInstance(attribute_b, objects.Attribute, self.msg.format(\n    'attribute', 'type', objects.Attribute, type(attribute_b)))\nattribute_name = attribute_b.attribute_name\nself.assertIsInstance(attribute_name, objects.Attribute.AttributeName, self\n    .msg.format('attribute name', 'type', objects.Attribute.AttributeName,\n    type(attribute_name)))\nself.assertEquals('Cryptographic Length', attribute_name.value, self.msg.\n    format('attribute name', 'value', 'Cryptographic Length',\n    attribute_name.value))\nattribute_value = attribute_b.attribute_value\nexp_type = attr.CryptographicLength\nrcv_type = type(attribute_value)\nself.assertIsInstance(attribute_value, exp_type, self.msg.format(\n    'attribute value', 'type', exp_type, rcv_type))\nself.assertEquals(attribute_value.value, 128, self.msg.format(\n    'cryptographic length', 'value', 128, attribute_value.value))\nattribute_c = attributes[2]\nself.assertIsInstance(attribute_c, objects.Attribute, self.msg.format(\n    'attribute', 'type', objects.Attribute, type(attribute_b)))\nattribute_name = attribute_c.attribute_name\nself.assertIsInstance(attribute_name, objects.Attribute.AttributeName, self\n    .msg.format('attribute name', 'type', objects.Attribute.AttributeName,\n    type(attribute_name)))\nself.assertEquals('Cryptographic Usage Mask', attribute_name.value, self.\n    msg.format('attribute name', 'value', 'Cryptographic Usage Mask',\n    attribute_name.value))\nattribute_value = attribute_c.attribute_value\nexp_type = attr.CryptographicUsageMask\nrcv_type = type(attribute_value)\nself.assertIsInstance(attribute_value, exp_type, self.msg.format(\n    'attribute value', 'type', exp_type, rcv_type))\nflag_encrypt = CryptographicUsageMask.ENCRYPT\nflag_decrypt = CryptographicUsageMask.DECRYPT\nexp_value = flag_encrypt.value | flag_decrypt.value\nself.assertEquals(attribute_value.value, exp_value, self.msg.format(\n    'cryptographic usage mask', 'value', exp_value, attribute_value.value))\n"
}