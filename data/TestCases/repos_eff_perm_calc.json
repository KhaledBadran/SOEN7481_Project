{
    "functionName": "_eff_perm_calc",
    "className": "RelativePermeability",
    "fileName": "/pmeal_&_OpenPNM/openpnm_&_algorithms_&_metrics_&_RelativePermeability.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"\n        Calculates effective permeability of each phase using StokesFlow\n        algorithm with updated multiphase physics models to account for the\n        multiphase flow.\n        The direction of the flow is defined by flow_pores.\n        All variables except for the rate in darcy's law will be the same in\n        relative permeability ratio. The effective rate represents the\n        effective permeability in the nominator of relative permeability\n        ratio.\n\n        Parameters\n        ----------\n        flow_pores: numpy array\n        Boundary pores that will have constant value boundary condition in\n        StokesFlow algorithm. First element is the inlet face (pores) for flow\n        of invading phase through porous media. Second element is the outlet\n        face (pores).\n\n        Output: array [Kewp, Kenwp]\n        The value of effective permeability of defending (if there is any) and\n        invading phase in the direction that is defined by flow_pores.\n\n        Note: To account for multiphase flow, multiphase physics model is added\n        and updated in each saturation (saturation is related to\n        the presence of another phase). Here, the conduit_hydraulic conductance\n        is used as the conductance required by stokes flow algorithm.\n\n        \"\"\"\nnetwork = self.project.network\nself._regenerate_models()\nif self.settings['wp'] is not None:\n    wp = self.project[self.settings['wp']]\n    St_mp_wp = StokesFlow(network=network, phase=wp)\n    St_mp_wp.setup(conductance='throat.conduit_hydraulic_conductance')\n    St_mp_wp.set_value_BC(pores=flow_pores[0], values=1)\n    St_mp_wp.set_value_BC(pores=flow_pores[1], values=0)\n    St_mp_wp.run()\n    Kewp = np.sum(abs(St_mp_wp.rate(pores=flow_pores[1])))\n    self.project.purge_object(obj=St_mp_wp)\nelse:\n    Kewp = None\n    pass\nnwp = self.project[self.settings['nwp']]\nSt_mp_nwp = StokesFlow(network=network, phase=nwp)\nSt_mp_nwp.set_value_BC(pores=flow_pores[0], values=1)\nSt_mp_nwp.set_value_BC(pores=flow_pores[1], values=0)\nSt_mp_nwp.setup(conductance='throat.conduit_hydraulic_conductance')\nSt_mp_nwp.run()\nKenwp = np.sum(abs(St_mp_nwp.rate(pores=flow_pores[1])))\nKenwp = Kenwp\nself.project.purge_object(obj=St_mp_nwp)\nreturn [Kewp, Kenwp]\n"
}