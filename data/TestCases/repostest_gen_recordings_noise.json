{
    "functionName": "test_gen_recordings_noise",
    "className": "TestGenerators",
    "fileName": "/alejoe91_&_MEArec/MEArec_&_tests_&_test_generators.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "print('Test recording generation - noise')\nne = 0\nni = 0\nnum_chan = self.num_chan\nn_neurons = ne + ni\nrec_params = mr.get_default_recordings_params()\nrec_params['spiketrains']['n_exc'] = ne\nrec_params['spiketrains']['n_inh'] = ni\nrec_params['spiketrains']['duration'] = 3\nn_jitter = 3\nrec_params['templates']['n_jitters'] = n_jitter\nrec_params['templates']['min_dist'] = 1\nrec_params['recordings']['modulation'] = 'none'\nnoise_modes = ['uncorrelated', 'distance-correlated']\nchunk_noise = [0, 2]\nnoise_color = [True, False]\nnoise_level = 10\nrec_params['recordings']['noise_level'] = noise_level\nrec_params['recordings']['filter'] = False\nfor mode in noise_modes:\n    for ch in chunk_noise:\n        for color in noise_color:\n            print('Noise: mode', mode, 'chunks', ch, 'color', color)\n            rec_params['recordings']['noise_mode'] = mode\n            rec_params['recordings']['chunk_duration'] = ch\n            rec_params['recordings']['noise_color'] = color\n            recgen_noise = mr.gen_recordings(params=rec_params, tempgen=\n                self.tempgen, verbose=False)\n            if mode == 'uncorrelated' and ch == 0 and not noise_color:\n                rec_params['recordings']['fs'] = 30000\n                rec_params['recordings']['chunk_duration'] = 1\n            if noise_color:\n                rec_params['recordings']['filter_cutoff'] = 500\n            assert recgen_noise.recordings.shape[0] == num_chan\n            assert len(recgen_noise.spiketrains) == n_neurons\n            assert recgen_noise.channel_positions.shape == (num_chan, 3)\n            assert len(recgen_noise.spike_traces) == n_neurons\n            assert np.isclose(np.std(recgen_noise.recordings), noise_level,\n                atol=1)\n            del recgen_noise\n"
}