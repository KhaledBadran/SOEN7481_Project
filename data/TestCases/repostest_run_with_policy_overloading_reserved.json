{
    "functionName": "test_run_with_policy_overloading_reserved",
    "className": "TestPolicyDirectoryMonitor",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_services_&_server_&_test_monitor.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that the PolicyDirectoryMonitor can load policy files and track\n        them properly, even when one policy can't be loaded properly.\n        \"\"\"\nm = monitor.PolicyDirectoryMonitor(self.tmp_dir, multiprocessing.Manager().\n    dict())\nm.logger = mock.MagicMock(logging.Logger)\nm.halt_trigger = mock.MagicMock(multiprocessing.synchronize.Event)\nm.halt_trigger.is_set.side_effect = [False, True]\nwrite_file(self.tmp_dir, 'policy_3.json', POLICY_3)\nwrite_file(self.tmp_dir, 'policy_4.json', POLICY_4)\nself.assertEqual({}, m.file_timestamps)\nself.assertEqual({}, m.policy_cache)\nself.assertEqual([], m.policy_files)\nself.assertEqual({}, m.policy_map)\nself.assertEqual([], m.policy_store.keys())\nm.run()\nm.logger.info.assert_any_call('Starting up the operation policy file monitor.')\nm.logger.info.assert_any_call('Loading policies for file: {}'.format(os.\n    path.join(self.tmp_dir, 'policy_3.json')))\nm.logger.info.assert_any_call('Loading policy: policy_B')\nm.logger.info.assert_any_call('Loading policies for file: {}'.format(os.\n    path.join(self.tmp_dir, 'policy_4.json')))\nm.logger.info.assert_any_call('Loading policy: default')\nm.logger.warning.assert_any_call(\n    \"Policy 'default' overwrites a reserved policy and will be thrown out.\")\nm.logger.info.assert_any_call('Stopping the operation policy file monitor.')\nself.assertEqual(2, len(m.policy_files))\npath = os.path.join(self.tmp_dir, 'policy_3.json')\nself.assertEqual(os.path.getmtime(path), m.file_timestamps.get(path, None))\nself.assertIn(path, m.policy_files)\nself.assertEqual(path, m.policy_map.get('policy_B', None))\npath = os.path.join(self.tmp_dir, 'policy_4.json')\nself.assertEqual(os.path.getmtime(path), m.file_timestamps.get(path, None))\nself.assertIn(path, m.policy_files)\nself.assertEqual({'policy_B': []}, m.policy_cache)\nself.assertEqual(1, len(m.policy_store.keys()))\nself.assertEqual({'groups': {'group_B': {enums.ObjectType.SYMMETRIC_KEY: {\n    enums.Operation.GET: enums.Policy.DISALLOW_ALL, enums.Operation.LOCATE:\n    enums.Policy.DISALLOW_ALL, enums.Operation.DESTROY: enums.Policy.\n    DISALLOW_ALL}}}}, m.policy_store.get('policy_B', None))\n"
}