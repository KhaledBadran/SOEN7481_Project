{
    "functionName": "_validate_volume_details",
    "className": "CITestProvisioning",
    "fileName": "/MichaelMcAleer_&_PyU4V/PyU4V_&_tests_&_ci_tests_&_test_pyu4v_ci_provisioning.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"Validate the return contents of volume requests.\n\n        :param volume_details: content of volume -- dict\n        \"\"\"\nself.assertIn(constants.VOLUME_ID_CAMEL, volume_details)\nself.assertIn(constants.TYPE, volume_details)\nself.assertIn(constants.EMULATION, volume_details)\nself.assertIn(constants.SSID, volume_details)\nself.assertIn(constants.ALLOCATED_PERCENT, volume_details)\nself.assertIn(constants.CAP_GB, volume_details)\nself.assertIn(constants.CAP_MB, volume_details)\nself.assertIn(constants.CAP_CYL, volume_details)\nself.assertIn(constants.STATUS, volume_details)\nself.assertIn(constants.RESERVED, volume_details)\nself.assertIn(constants.PINNED, volume_details)\nself.assertIn(constants.ENCAPSULATED, volume_details)\nself.assertIn(constants.NUM_OF_STORAGE_GROUPS, volume_details)\nself.assertIn(constants.NUM_OF_FRONT_END_PATHS, volume_details)\nself.assertIn(constants.SNAPVX_SOURCE, volume_details)\nself.assertIn(constants.SNAPVX_TARGET, volume_details)\nself.assertIn(constants.HAS_EFFECTIVE_WWN, volume_details)\nself.assertIn(constants.MOBILITY_ID_ENABLED, volume_details)\nself.assertIsInstance(volume_details[constants.VOLUME_ID_CAMEL], str)\nself.assertIsInstance(volume_details[constants.TYPE], str)\nself.assertIsInstance(volume_details[constants.EMULATION], str)\nself.assertIsInstance(volume_details[constants.SSID], str)\nself.assertIsInstance(volume_details[constants.ALLOCATED_PERCENT], int)\nself.assertIsInstance(volume_details[constants.CAP_GB], float)\nself.assertIsInstance(volume_details[constants.CAP_MB], float)\nself.assertIsInstance(volume_details[constants.CAP_CYL], int)\nself.assertIsInstance(volume_details[constants.STATUS], str)\nself.assertIsInstance(volume_details[constants.RESERVED], bool)\nself.assertIsInstance(volume_details[constants.PINNED], bool)\nself.assertIsInstance(volume_details[constants.ENCAPSULATED], bool)\nself.assertIsInstance(volume_details[constants.NUM_OF_STORAGE_GROUPS], int)\nself.assertIsInstance(volume_details[constants.NUM_OF_FRONT_END_PATHS], int)\nself.assertIsInstance(volume_details[constants.SNAPVX_SOURCE], bool)\nself.assertIsInstance(volume_details[constants.SNAPVX_TARGET], bool)\nself.assertIsInstance(volume_details[constants.HAS_EFFECTIVE_WWN], bool)\nself.assertIsInstance(volume_details[constants.MOBILITY_ID_ENABLED], bool)\nif constants.VOLUME_IDENTIFIER in volume_details:\n    self.assertIsInstance(volume_details[constants.VOLUME_IDENTIFIER], str)\nif constants.STORAGE_GROUP_ID_CAMEL in volume_details:\n    self.assertIsInstance(volume_details[constants.STORAGE_GROUP_ID_CAMEL],\n        list)\nif volume_details[constants.HAS_EFFECTIVE_WWN]:\n    self.assertIn(constants.EFFECTIVE_WWN, volume_details)\n    self.assertIsInstance(volume_details[constants.EFFECTIVE_WWN], str)\nif constants.WWN in volume_details:\n    self.assertIsInstance(volume_details[constants.WWN], str)\n    self.assertIsNotNone(re.match(constants.WWN_SEARCH_PATTERN_32,\n        volume_details[constants.WWN]))\n    self.assertIsNotNone(re.match(constants.WWN_SEARCH_PATTERN_32,\n        volume_details[constants.EFFECTIVE_WWN]))\n"
}