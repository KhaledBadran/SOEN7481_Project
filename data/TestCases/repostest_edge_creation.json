{
    "functionName": "test_edge_creation",
    "className": null,
    "fileName": "/Silmathoron_&_NNGT/testing_&_test_basics.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\" Check edge checks \"\"\"\nnum_nodes = 10\nedges = [(0, 1), (2, 4)]\ng = nngt.Graph(num_nodes)\ng.new_edges(edges)\nerror_raised = False\nfor e in [(11, 10), (4, 4), (0, 1)]:\n    error_raised = False\n    try:\n        g.new_edge(*e)\n    except InvalidArgument:\n        error_raised = True\n    assert error_raised\nlst_edges = [[(1, 1), (0, 2), (3, 4)], [(9, 4), (5, 6), (9, 4)], [(2, 4), (\n    3, 4), (7, 2)], [(20, 1), (4, 8), (3, 2)]]\nfor elist in lst_edges:\n    error_raised = False\n    try:\n        g.new_edges(elist)\n    except InvalidArgument:\n        error_raised = True\n    assert error_raised\nerror_raised = False\ntry:\n    g.new_edges(lst_edges[0], check_duplicates=False, check_existing=False)\nexcept InvalidArgument:\n    error_raised = True\nassert error_raised\nerror_raised = False\ntry:\n    g.new_edges(lst_edges[1], check_duplicates=True, check_self_loops=False,\n        check_existing=False)\nexcept InvalidArgument:\n    error_raised = True\nassert error_raised\nerror_raised = False\ntry:\n    g.new_edges(lst_edges[2], check_self_loops=False)\nexcept InvalidArgument:\n    error_raised = True\nassert error_raised\nerror_raised = False\ntry:\n    g.new_edges(lst_edges[3], check_self_loops=False, check_existing=False)\nexcept InvalidArgument:\n    error_raised = True\nassert error_raised\ng.new_edge(0, 1, ignore=True)\nassert g.edge_id((0, 1)) == 0\ng.set_weights(5.0)\ng.new_edge(0, 1, attributes={'weight': 3.0}, ignore=True)\nassert g.get_weights(edges=(0, 1)) == 5\ng.new_edges(lst_edges[0], check_self_loops=False)\nassert g.edge_nb() == 5\nfor elist in lst_edges[:-1]:\n    g.new_edges(elist, ignore_invalid=True)\nassert g.edge_nb() == 8\ng = nngt.Graph(num_nodes, directed=False)\ng.new_edges(edges)\nfor e in [(1, 0), (0, 1)]:\n    error_raised = False\n    try:\n        g.new_edge(*e)\n    except InvalidArgument:\n        error_raised = True\n    assert error_raised\nlst_edges = [[(1, 1), (0, 2), (3, 4)], [(9, 4), (5, 6), (9, 4)], [(2, 4), (\n    3, 4), (7, 2)], [(4, 2), (4, 8), (3, 2)]]\nfor elist in lst_edges:\n    error_raised = False\n    try:\n        g.new_edges(elist)\n    except InvalidArgument:\n        error_raised = True\n    assert error_raised\ng.new_edge(0, 1, ignore=True)\nassert g.edge_id((0, 1)) == 0\ng.set_weights(5.0)\ng.new_edge(1, 0, attributes={'weight': 3.0}, ignore=True)\nassert g.get_weights(edges=(0, 1)) == 5\ng.new_edges(lst_edges[0], check_self_loops=False)\nassert g.edge_nb() == 5\nfor elist in lst_edges:\n    g.new_edges(elist, ignore_invalid=True)\nassert g.edge_nb() == 10\npytest.mark.mpi_skip"
}