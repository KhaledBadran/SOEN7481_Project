{
    "functionName": "test_build_key_wrapping_specification",
    "className": "TestProxyKmipClient",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_pie_&_test_client.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that a KeyWrappingSpecification can be built from a dictionary.\n        \"\"\"\nclient = ProxyKmipClient()\nresult = client._build_key_wrapping_specification(None)\nself.assertEqual(None, result)\nresult = client._build_key_wrapping_specification({'wrapping_method': enums\n    .WrappingMethod.ENCRYPT, 'encryption_key_information': {\n    'unique_identifier': '1', 'cryptographic_parameters': {\n    'cryptographic_algorithm': enums.CryptographicAlgorithm.AES}},\n    'mac_signature_key_information': {'unique_identifier': '2',\n    'cryptographic_parameters': {'padding_method': enums.PaddingMethod.\n    PKCS5}}, 'attribute_names': ['Cryptographic Algorithm',\n    'Cryptographic Length'], 'encoding_option': enums.EncodingOption.\n    NO_ENCODING})\nself.assertIsInstance(result, obj.KeyWrappingSpecification)\nself.assertIsInstance(result.encryption_key_information, obj.\n    EncryptionKeyInformation)\ninfo = result.encryption_key_information\nself.assertEqual('1', info.unique_identifier)\nself.assertIsInstance(info.cryptographic_parameters, obj.\n    CryptographicParameters)\nself.assertEqual(enums.CryptographicAlgorithm.AES, info.\n    cryptographic_parameters.cryptographic_algorithm)\nself.assertIsInstance(result.mac_signature_key_information, obj.\n    MACSignatureKeyInformation)\ninfo = result.mac_signature_key_information\nself.assertEqual('2', info.unique_identifier)\nself.assertIsInstance(info.cryptographic_parameters, obj.\n    CryptographicParameters)\nself.assertEqual(enums.PaddingMethod.PKCS5, info.cryptographic_parameters.\n    padding_method)\nself.assertIsInstance(result.attribute_names, list)\nself.assertEqual(2, len(result.attribute_names))\nself.assertIn('Cryptographic Algorithm', result.attribute_names)\nself.assertIn('Cryptographic Length', result.attribute_names)\nself.assertEqual(enums.EncodingOption.NO_ENCODING, result.encoding_option)\n"
}