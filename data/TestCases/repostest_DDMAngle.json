{
    "functionName": "test_DDMAngle",
    "className": "TestConvert",
    "fileName": "/GeoscienceAustralia_&_GeodePy/geodepy_&_tests_&_test_convert.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "self.assertEqual(dec_ex, ddm_ex.dec())\nself.assertEqual(hp_ex, ddm_ex.hp())\nself.assertEqual(dms_ex, ddm_ex.dms())\nself.assertEqual(hp_ex3, ddm_ex3.hp())\nself.assertEqual(-dec_ex, DDMAngle(-dms_ex.degree, ddm_ex.minute).dec())\nself.assertEqual(dec_ex, DDMAngle(dms_ex.degree, -ddm_ex.minute).dec())\nself.assertAlmostEqual(-dec_ex4, DDMAngle(0, -ddm_ex4.minute).dec(), 9)\nself.assertAlmostEqual(dec_ex4, DDMAngle(0, ddm_ex4.minute).dec(), 9)\nself.assertEqual(-ddm_ex3, DDMAngle(12, 34.5))\nself.assertEqual(ddm_ex.sign, 1)\nself.assertEqual(-ddm_ex.sign, -1)\nself.assertEqual(ddm_ex4.sign, 1)\nself.assertEqual(-ddm_ex4.sign, -1)\nself.assertEqual(ddm_ex5.sign, 1)\nself.assertEqual(-ddm_ex5.sign, -1)\nself.assertEqual(DDMAngle(-1, 2).sign, -1)\nself.assertEqual(DDMAngle(1, -2).sign, 1)\nself.assertEqual(DDMAngle(1, 2).sign, 1)\nself.assertEqual(DDMAngle(0, -1).sign, -1)\nself.assertEqual(DDMAngle(-0, 1).sign, 1)\nself.assertEqual(DDMAngle(-0.0, 1).sign, -1)\nself.assertEqual(repr(ddm_ex), '{DDMAngle: +123d 44.925m}')\nself.assertEqual(repr(ddm_ex3), '{DDMAngle: -12d 34.5m}')\nself.assertEqual(dec_ex + dec_ex2, (ddm_ex + ddm_ex2).dec())\nself.assertEqual(dec_ex2 + dec_ex, (ddm_ex2 + ddm_ex).dec())\nself.assertEqual(dec_ex - dec_ex2, (ddm_ex - ddm_ex2).dec())\nself.assertEqual(dec_ex2 - dec_ex, (ddm_ex2 - ddm_ex).dec())\nself.assertEqual(dec_ex * 5, (ddm_ex * 5).dec())\nself.assertEqual(5 * dec_ex, (5 * ddm_ex).dec())\nself.assertEqual(dec_ex / 3, (ddm_ex / 3).dec())\nself.assertEqual(abs(-ddm_ex), ddm_ex)\nself.assertEqual(-ddm_ex2, ddm_ex3)\nself.assertEqual(ddm_ex2, abs(ddm_ex3))\nself.assertEqual(ddm_ex, dms_ex)\nself.assertTrue(ddm_ex == ddm_ex)\nself.assertFalse(ddm_ex == ddm_ex2)\nself.assertTrue(ddm_ex != ddm_ex2)\nself.assertFalse(ddm_ex != ddm_ex)\nself.assertTrue(ddm_ex > ddm_ex2)\nself.assertFalse(ddm_ex2 > ddm_ex)\nself.assertTrue(ddm_ex2 < ddm_ex)\nself.assertFalse(ddm_ex < ddm_ex2)\nwith self.assertRaises(TypeError):\n    ddm_ex * 'a'\nwith self.assertRaises(TypeError):\n    'a' * ddm_ex\nwith self.assertRaises(TypeError):\n    ddm_ex / 'a'\nwith self.assertRaises(TypeError):\n    ddm_ex + 'a'\nwith self.assertRaises(TypeError):\n    'a' + ddm_ex\nwith self.assertRaises(TypeError):\n    ddm_ex - 'a'\nwith self.assertRaises(TypeError):\n    'a' - ddm_ex\n"
}