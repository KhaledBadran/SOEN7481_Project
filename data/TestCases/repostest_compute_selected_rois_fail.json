{
    "functionName": "test_compute_selected_rois_fail",
    "className": null,
    "fileName": "/NSLS-II_&_PyXRF/pyxrf_&_core_&_tests_&_test_map_processing.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"Failing cases of `compute_selected_rois` (wrong input parameters)\"\"\"\ndataset_params = {'n_data_dimensions': (20, 20)}\nadd_pts_before, add_pts_after = 15, 10\nuse_snip = False\nft = _FitXRFMapTesting(dataset_params=dataset_params, use_snip=use_snip,\n    add_pts_before=add_pts_before, add_pts_after=add_pts_after)\ndata = ft.data_input\nroi_dict = {'roi-1': (2.5, 3.5), 'roi-2': (3.5, 4.8), 'roi-3': (5.2, 7.4),\n    'roi-4': (6.0, 6.0), 'roi-5': (6.0, 5.5), 'roi-6': (10.1, 15.0)}\nkwargs = {'data': data, 'data_sel_indices': ft.data_sel_indices, 'roi_dict':\n    roi_dict, 'snip_param': ft.snip_param, 'use_snip': use_snip,\n    'chunk_pixels': 10, 'n_chunks_min': 4, 'progress_bar': None, 'client': None\n    }\nkwargs.update(params)\nwith pytest.raises(except_type, match=err_msg):\n    compute_selected_rois(**kwargs)\npytest.mark.parametrize('params, except_type, err_msg', [({\n    'data_sel_indices': 50}, TypeError,\n    \"Parameter 'data_sel_indices' must be tuple or list\"), ({\n    'data_sel_indices': (3, 10, 5)}, TypeError,\n    \"Parameter 'data_sel_indices' must contain two elements\"), ({\n    'data_sel_indices': [3]}, TypeError,\n    \"Parameter 'data_sel_indices' must contain two elements\"), ({\n    'data_sel_indices': (-1, 10)}, ValueError,\n    \"Some of the indices in 'data_sel_indices' are negative\"), ({\n    'data_sel_indices': [0, -10]}, ValueError,\n    \"Some of the indices in 'data_sel_indices' are negative\"), ({\n    'data_sel_indices': [3, 3]}, ValueError,\n    \"Parameter 'data_sel_indices' must select at least 1 element\"), ({\n    'data_sel_indices': [3, 2]}, ValueError,\n    \"Parameter 'data_sel_indices' must select at least 1 element\"), ({\n    'snip_param': [1, 2, 3]}, TypeError,\n    \"Parameter 'snip_param' must be a dictionary\"), ({'snip_param': None},\n    TypeError, \"Parameter 'snip_param' must be a dictionary\"), ({\n    'snip_param': {}}, TypeError,\n    \"Parameter 'snip_param' must a dictionary with keys\"), ({'snip_param':\n    {'e_offset': 0, 'e_linear': 0.1, 'e_quadratic': 0}, 'use_snip': True},\n    TypeError, \"Parameter 'snip_param' must a dictionary with keys\"), ({\n    'data': np.zeros(shape=(10, 15, 100)), 'data_sel_indices': (70, 70 + 50\n    )}, ValueError, 'Selection indices .* are outside the allowed range')])"
}