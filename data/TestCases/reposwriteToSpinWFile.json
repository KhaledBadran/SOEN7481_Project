{
    "functionName": "writeToSpinWFile",
    "className": null,
    "fileName": "/jakob-lass_&_MJOLNIR/MJOLNIR_&__tools.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"Write fitted values for spin wave(s) into a SpinW readable format.\n    \n    Args:\n        \n        - files (string): File into which the spin waves is to be saved\n        \n        - position (3D vector, 3 x m): HKL position of spin wave(s)\n        \n        - spinWaveEnergy (array, n x m): Array with energy position of spin wave. For multiple spin waves fill with 0 if wave not found\n        \n        - spinWaveWidth (array, n x m): Standard deviation of spin wave(s). For multiple spin waves fill with 0 if wave not found\n        \n        - spinWaveAmplitude (array, n x m): Amplitude of spin wave(s). For multiple spin waves fill with 0 if wave not found\n        \n        - EMin (float): Lowest energy measured in data [meV]\n        \n        - EMin (float): Highest energy measured in data [meV]\n        \n        \n    n is the number of spin waves\n    m is the number of data points measured        \n    \"\"\"\nspinWaveEnergy = np.asarray(spinWaveEnergy)\nif not spinWaveEnergyErr is None:\n    spinWaveEnergyErr = np.asarray(spinWaveEnergyErr)\n    if not spinWaveEnergy.shape == spinWaveEnergyErr.shape:\n        raise AttributeError(\n            'Arrays for spinWaveEnergy(shape: {}), spinWaveEnergyErr(shape: {}) have to have same shape.'\n            .format(spinWaveEnergy.shape, spinWaveEnergyErr.shape))\nspinWaveWidth = np.asarray(spinWaveWidth)\nspinWaveAmplitude = np.asarray(spinWaveAmplitude)\nposition = np.asarray(position)\nif not np.all([spinWaveEnergy.shape == spinWaveWidth.shape, spinWaveEnergy.\n    shape == spinWaveAmplitude.shape]):\n    raise AttributeError(\n        'Arrays for spinWaveEnergy(shape: {}), spinWaveWidth(shape: {}), and spinWaveAmplitude(shape: {}) have to have same shape.'\n        .format(spinWaveEnergy.shape, spinWaveWidth.shape,\n        spinWaveAmplitude.shape))\nif len(spinWaveEnergy.shape) == 1:\n    spinWaveEnergy.shape = 1, -1\n    spinWaveWidth.shape = 1, -1\n    spinWaveAmplitude.shape = 1, -1\nspinWaves, dataPoints = spinWaveEnergy.shape\nif not position.shape == (3, dataPoints):\n    raise AttributeError(\n        'With provided spin wave parameters, expected position of shape (3,{}) but recieved {}.'\n        .format(dataPoints, position.shape))\nif not spinWaveEnergyErr is None:\n    columns = 4\nelse:\n    columns = 3\ndataMatrix = np.zeros((5 + columns * spinWaves, dataPoints))\ndataMatrix[:3, :] = position\ndataMatrix[(3), :] = EMin\ndataMatrix[(4), :] = EMax\nenergyIndices = np.array([(6 + x * columns) for x in range(spinWaves)],\n    dtype=int)\nwidthIndices = np.array([(7 + x * columns) for x in range(spinWaves)],\n    dtype=int)\namplitudeIndices = np.array([(5 + x * columns) for x in range(spinWaves)],\n    dtype=int)\nif not spinWaveEnergyErr is None:\n    errorIndices = np.array([(8 + x * columns) for x in range(spinWaves)],\n        dtype=int)\n    dataMatrix[(errorIndices), :] = spinWaveEnergyErr\ndataMatrix[(energyIndices), :] = spinWaveEnergy\ndataMatrix[(widthIndices), :] = spinWaveWidth\ndataMatrix[(amplitudeIndices), :] = spinWaveAmplitude\nheaders = ['QH', 'QK', 'QL', 'ENlim1', 'ENlim2']\nif not spinWaveEnergyErr is None:\n    headers += list(np.concatenate([['I{}'.format(x + 1), 'EN{}'.format(x +\n        1), 'sigma{}'.format(x + 1), 'EErr{}'.format(x + 1)] for x in range\n        (spinWaves)]))\nelse:\n    headers += list(np.concatenate([['I{}'.format(x + 1), 'EN{}'.format(x +\n        1), 'sigma{}'.format(x + 1)] for x in range(spinWaves)]))\ntitles = ''.join(['{:>14s} '.format(x) for x in headers])\nnp.savetxt(file, dataMatrix.T, fmt='%+.7e', delimiter=' ', header=titles,\n    comments='')\n"
}