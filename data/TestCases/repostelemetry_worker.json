{
    "functionName": "telemetry_worker",
    "className": null,
    "fileName": "/FaradayRF_&_Faraday-Software/faraday_&_telemetry.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"\n    Interface Faraday Proxy to obtain telemetry\n\n    This function interfaces the Proxy application via its RESTful interface.\n    It is a one-way operation as it makes no sense to POST data to proxy for\n    telemetry to a specific unit with this application. This function runs\n    in an infinite loop continually querying for data.\n\n    :param config: telemetry.ini ConfigParser object\n    :return: Nothing\n    \"\"\"\nlogger.info('Starting telemetry_worker thread')\nstations = {}\ncount = 0\nproxy = faradaybasicproxyio.proxyio()\nfaradayParser = telemetryparser.TelemetryParse()\ntry:\n    count = config.getint('TELEMETRY', 'UNITS')\nexcept ConfigParser.Error as e:\n    while True:\n        logger.error('ConfigParse.Error: ' + str(e))\n        time.sleep(1)\nfor num in range(count):\n    try:\n        callsign = config.get('TELEMETRY', 'UNIT' + str(num) + 'CALL').upper()\n        nodeid = config.get('TELEMETRY', 'UNIT' + str(num) + 'ID')\n        proxyHost = str(config.get('TELEMETRY', 'proxyhost'))\n    except ConfigParser.Error as e:\n        while True:\n            logger.error('ConfigParse.Error: ' + str(e))\n            time.sleep(1)\n    stations['UNIT' + str(num) + 'CALL'] = callsign\n    stations['UNIT' + str(num) + 'ID'] = nodeid\n    telemetryDicts[str(callsign) + str(nodeid)] = deque([], maxlen=1000)\nwhile True:\n    for radio in range(count):\n        callsign = stations['UNIT' + str(num) + 'CALL']\n        nodeid = stations['UNIT' + str(num) + 'ID']\n        data = proxy.GET(proxyHost, str(callsign), str(nodeid), int(proxy.\n            TELEMETRY_PORT))\n        if type(data) is dict:\n            logger.info(data['error'])\n        elif data is None:\n            logger.debug('telemetryworker data GET response = None')\n        else:\n            logger.debug('Proxy data: ' + repr(data))\n            for item in data:\n                try:\n                    unPackedItem = proxy.DecodeRawPacket(item['data'])\n                    datagram = faradayParser.UnpackDatagram(unPackedItem, False\n                        )\n                    telemetryData = faradayParser.ExtractPaddedPacket(datagram\n                        ['PayloadData'], faradayParser.packet_3_len)\n                    parsedTelemetry = faradayParser.UnpackPacket_3(\n                        telemetryData, False)\n                except ValueError as e:\n                    logger.error('ValueError: ' + str(e))\n                except IndexError as e:\n                    logger.error('IndexError: ' + str(e))\n                except KeyError as e:\n                    logger.error('KeyError: ' + str(e))\n                else:\n                    workerDB = openDB()\n                    sqlInsert(workerDB, parsedTelemetry)\n                    telemetryDicts[str(callsign) + str(nodeid)].append(\n                        parsedTelemetry)\n    time.sleep(1)\n"
}