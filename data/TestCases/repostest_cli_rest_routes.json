{
    "functionName": "test_cli_rest_routes",
    "className": null,
    "fileName": "/incf-nidash_&_PyNIDM/nidm_&_experiment_&_tools_&_tests_&_test_rest.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "rest_parser = RestParser(verbosity_level=0)\nrest_parser.setOutputFormat(RestParser.CLI_FORMAT)\nproject_uuid = assess_one_col_output(rest_parser.run(BRAIN_VOL_FILES,\n    '/projects'))\ntxt_out = rest_parser.run(BRAIN_VOL_FILES, '/statistics/projects/{}'.format\n    (project_uuid))\nlines = txt_out.strip().splitlines()\nassert re.search('^-+ +-+$', lines[0])\nlines = lines[1:]\nsplit_lines = [str.split(x) for x in lines]\nfound_gender = found_age_max = found_age_min = found_title = False\nfor split in split_lines:\n    if len(split) > 0:\n        if re.search('title', split[0]):\n            found_title = True\n        if re.search('age_max', split[0]):\n            found_age_max = True\n        if re.search('age_min', split[0]):\n            found_age_min = True\n        if re.search('gender', split[0]):\n            found_gender = True\nassert found_title\nassert found_age_max\nassert found_age_min\nassert found_gender\nsubject_uuid = assess_one_col_output(rest_parser.run(BRAIN_VOL_FILES,\n    '/projects/{}/subjects'.format(project_uuid)))\ninst_text = rest_parser.run(BRAIN_VOL_FILES, '/projects/{}/subjects/{}/'.\n    format(project_uuid, subject_uuid))\nsections = inst_text.split('\\n\\n')\nsummary_lines = sections[0].strip().splitlines()[1:-1]\nsummary = dict()\nfor l in summary_lines:\n    summary[l.split()[0]] = l.split()[1]\ninst_uuid = summary['instruments'].split(',')[0]\nderiv_uuid = summary['derivatives'].split(',')[0]\nassert is_uuid(inst_uuid)\nassert is_uuid(deriv_uuid)\nderiv_lines = sections[1].strip().splitlines()\nderiv_headers = deriv_lines[0].split()\nheads = ['Derivative_UUID', 'Measurement', 'Label', 'Value', 'Datumtype']\nfor i in range(len(heads)):\n    assert re.search(heads[i], deriv_headers[i], re.IGNORECASE)\nd_uuid = deriv_lines[2].split()[0]\nassert is_uuid(d_uuid)\nassert d_uuid in summary['derivatives'].split(',')\ninst_lines = sections[2].strip().splitlines()\ninst_headers = inst_lines[0].split()\nheads = ['Instrument_UUID', 'Category', 'Value']\nfor i in range(len(heads)):\n    assert re.search(heads[i], inst_headers[i], re.IGNORECASE)\ni_uuid = inst_lines[2].split()[0]\nassert is_uuid(i_uuid)\nassert i_uuid in summary['instruments'].split(',')\n"
}