{
    "functionName": "_find_term_from_string",
    "className": "OnToma",
    "fileName": "/opentargets_&_OnToma/ontoma_&_interface.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"Searches for a matching EFO code for a given phenotype/disease string\n\n        Returns:\n            {term, label, source,quality, action}\n        \"\"\"\nquery = query.lower()\ntry:\n    efolup = self.efo_lookup(query)\n    if self._is_included(efolup):\n        return {'term': efolup, 'label': self.get_efo_label(efolup),\n            'source': 'EFO OBO', 'quality': 'match', 'action': None}\nexcept KeyError as e:\n    logger.debug('Failed EFO OBO lookup for %s', e)\ntry:\n    return {'term': self.otzooma_map_lookup(query), 'label': query,\n        'source': 'OT Zooma Mappings', 'quality': 'match', 'action': None}\nexcept KeyError as e:\n    logger.debug('Failed Zooma Mappings lookup for %s', e)\nif 'zooma' not in self.exclude:\n    zoomabest = self._zooma.besthit(query)\n    if zoomabest and self._is_included(zoomabest['iri']):\n        return {'term': zoomabest['iri'], 'label': zoomabest['label'],\n            'source': 'Zooma API lookup', 'quality': 'match', 'action': None}\n    else:\n        logger.debug('Failed Zooma API lookup for %s', query)\nexact_ols_efo = self._ols.besthit(query, ontology=['efo'], field_list=[\n    'iri', 'label'], exact=True)\nif exact_ols_efo and self._is_included(exact_ols_efo['iri']):\n    return {'term': exact_ols_efo['iri'], 'label': exact_ols_efo['label'],\n        'source': 'OLS API EFO lookup', 'quality': 'match', 'action': None}\nelse:\n    logger.debug('Failed OLS API EFO (exact) lookup for %s', query)\ntry:\n    hpterm = self.hp_lookup(query)\n    logger.warning(\n        'Using the HP term: %s for %s Please check if it is actually contained in the Open Targets ontology.'\n        , hpterm, query)\n    return {'term': hpterm, 'label': query, 'source': 'HP OBO lookup',\n        'quality': 'match', 'action': 'check if in OT'}\nexcept KeyError as e:\n    logger.debug('Failed HP OBO lookup for %s', e)\nif 'ols_hp' not in self.exclude:\n    exact_ols_hp = self._ols.besthit(query, ontology=['hp'], field_list=[\n        'iri', 'label'], exact=True)\n    if exact_ols_hp and self._is_included(exact_ols_hp['iri'], ontology='hp'):\n        logger.warning(\n            'Using the HP term: %s Please check if it is actually contained in the Open Targets ontology.'\n            , exact_ols_hp)\n        return {'term': exact_ols_hp['iri'], 'label': exact_ols_hp['label'],\n            'source': 'OLS API HP exact lookup', 'quality': 'match',\n            'action': 'check if in OT'}\n    else:\n        logger.debug('Failed OLS API HP (exact) lookup for %s', query)\nif 'ols_ordo' not in self.exclude:\n    exact_ols_ordo = self._ols.besthit(query, ontology=['ordo'], field_list\n        =['iri', 'label'], exact=True)\n    if exact_ols_ordo:\n        logger.warning(\n            'Using the ORDO term: %s Please check if it is actually contained in the Open Targets ontology.'\n            , exact_ols_ordo)\n        return {'term': exact_ols_ordo['iri'], 'label': exact_ols_ordo[\n            'label'], 'source': 'OLS API ORDO exact lookup', 'quality':\n            'match', 'action': 'check if in OT'}\n    else:\n        logger.debug('Failed OLS API ORDO (exact) lookup for %s', query)\nols_efo = self._ols.besthit(query, ontology=['efo'], field_list=['iri',\n    'label'], bytype='class')\nif ols_efo and self._is_included(ols_efo['iri']):\n    return {'term': ols_efo['iri'], 'label': ols_efo['label'], 'source':\n        'OLS API EFO lookup', 'quality': 'fuzzy', 'action': 'check if valid'}\nelse:\n    logger.debug('Failed OLS API EFO lookup for %s', query)\nif suggest:\n    ols_suggestion = self._ols.besthit(query, ontology=['efo', 'hp', 'ordo'\n        ], field_list=['iri', 'label'], bytype='class')\n    if ols_suggestion:\n        logger.warning(\n            'Found a fuzzy match in OLS API [EFO,HP,ORDO] - check if valid')\n        return {'term': ols_suggestion['iri'], 'label': ols_suggestion[\n            'label'], 'source': 'OLS API [ORDO] lookup', 'quality': 'fuzzy',\n            'action': 'check if valid'}\n    else:\n        logger.debug('Failed OLS API [EFO,HP,ORDO] lookup for %s', query)\nreturn None\nlru_cache(maxsize=None)"
}