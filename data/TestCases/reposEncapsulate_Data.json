{
    "functionName": "Encapsulate_Data",
    "className": "Transmit_Insert_Data_Queue_Class",
    "fileName": "/FaradayRF_&_Faraday-Software/faraday_&_uart_&_layer_2_protocol.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"\n        Byte framing routing for fragmented data packets. This is NO LONGER IMPLEMENTED.\n\n        This function byte stuffs a simple encapsulation framing protocol around a provided data packet.\n        Byte framing and escaping allows data to safely traverse the transmission medium with defined\n        packet start and stop boundries for parsing.\n        \"\"\"\nif len(self.fragment_data_list) == 1:\n    self.fragment_data_list[0] = chr(len(self.fragment_data_list[0])\n        ) + self.fragment_data_list[0] + chr(7)\n    self.fragment_data_list.append(chr(0) + chr(8))\nelif len(self.fragment_data_list) == 2:\n    self.fragment_data_list[0] = chr(len(self.fragment_data_list[0])\n        ) + self.fragment_data_list[0] + chr(7)\n    self.fragment_data_list[1] = chr(len(self.fragment_data_list[len(self.\n        fragment_data_list) - 1])) + self.fragment_data_list[len(self.\n        fragment_data_list) - 1] + chr(8)\nelif len(self.fragment_data_list) > 2:\n    self.fragment_data_list[0] = chr(len(self.fragment_data_list[0])\n        ) + self.fragment_data_list[0] + chr(7)\n    for i in range(1, len(self.fragment_data_list) - 1, 1):\n        self.fragment_data_list[i] = chr(len(self.fragment_data_list[i])\n            ) + self.fragment_data_list[i] + chr(i % 6)\n    self.fragment_data_list[len(self.fragment_data_list) - 1] = chr(len(\n        self.fragment_data_list[len(self.fragment_data_list) - 1])\n        ) + self.fragment_data_list[len(self.fragment_data_list) - 1] + chr(8)\nfor i in range(0, len(self.fragment_data_list), 1):\n    self.fragment_data_list[i] = self.fragment_data_list[i].replace(escapebyte,\n        escapebyte + escapebyte)\n    self.fragment_data_list[i] = self.fragment_data_list[i].replace(startbyte,\n        escapebyte + startbyte)\n    self.fragment_data_list[i] = self.fragment_data_list[i].replace(stopbyte,\n        escapebyte + stopbyte)\n    self.fragment_data_list[i] = startbyte + self.fragment_data_list[i]\n    self.fragment_data_list[i] = self.fragment_data_list[i] + stopbyte\n    self.tx_packet_queue.put(self.fragment_data_list[i])\n"
}