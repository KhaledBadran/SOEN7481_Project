{
    "functionName": "test_clawsca",
    "className": "ClawSCATests",
    "fileName": "/NCAR_&_Frelpt/tests_&_test_clawsca.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "for test in glob.glob(claw_sca_tests + '/sca*'):\n    last = os.path.basename(os.path.normpath(test))\n    if last in ('sca2', 'sca37', 'sca38', 'sca41', 'sca43', 'sca45'):\n        continue\n    print('FOUND : ', last)\n    orgdir = os.path.join(self.tempdir, last, 'org')\n    lptdir = os.path.join(self.tempdir, last, 'lpt')\n    os.makedirs(orgdir)\n    os.makedirs(lptdir)\n    makefile = makefile1\n    target = os.path.join(test, 'main.f90')\n    orgmain = os.path.join(orgdir, 'main.f90')\n    if not os.path.exists(target):\n        print('Test target for ' + last + ' does not exist.')\n        continue\n    with open(target, 'r') as fr:\n        with open(orgmain, 'w') as fw:\n            for line in fr:\n                if line.lstrip().startswith('!$claw sca') or line.lstrip(\n                    ).startswith('!$claw parallelize'):\n                    fw.write('!$frelpt pushdown\\n')\n                else:\n                    fw.write(line)\n    shutil.copy(os.path.join(test, 'mo_column.f90'), orgdir)\n    if os.path.isfile(os.path.join(test, 'mo_column_extra.f90')):\n        makefile = makefile2\n        shutil.copy(os.path.join(test, 'mo_column_extra.f90'), orgdir)\n    with open(os.path.join(orgdir, 'Makefile'), 'w') as f:\n        f.write(makefile)\n    with open(os.path.join(lptdir, 'Makefile'), 'w') as f:\n        f.write(makefile)\n    with self.subTest(sca=last):\n        print('BEGIN : ', last)\n        retval, forward = pyloco.perform(frelpt.FrelptTask, argv=[orgmain,\n            'make clean', 'make org', '--outdir', lptdir, '--log',\n            'basictests', '--debug'])\n        print('FINISHED : ', last)\n        out1 = pyloco.system('make test', cwd=orgdir)\n        out2 = pyloco.system('make test', cwd=lptdir)\n        self.assertEqual(out1[0], 0)\n        print('ORG RETURNED NO-ERROR : ', last)\n        self.assertEqual(out2[0], 0)\n        print('LPT RETURNED NO-ERROR : ', last)\n        self.assertEqual(out1[1].split()[-1], out2[1].split()[-1])\n        print('PASSED : ', last)\n"
}