{
    "functionName": "test_hal9000_alert_mal_disposition",
    "className": "TestCase",
    "fileName": "/IntegralDefense_&_ACE/lib_&_saq_&_modules_&_test_hal9000.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "root = create_root_analysis(analysis_mode=ANALYSIS_MODE_ANALYSIS)\nroot.initialize_storage()\ntest_observable = root.add_observable(F_TEST, 'test')\nroot.save()\nroot.schedule()\nengine = TestEngine(local_analysis_modes=[ANALYSIS_MODE_ANALYSIS,\n    ANALYSIS_MODE_CORRELATION, ANALYSIS_MODE_DISPOSITIONED])\nengine.set_cleanup(ANALYSIS_MODE_ANALYSIS, False)\nengine.enable_alerting()\nengine.enable_module('analysis_module_forced_detection', ANALYSIS_MODE_ANALYSIS\n    )\nengine.enable_module('analysis_module_hal9000', [ANALYSIS_MODE_ANALYSIS,\n    ANALYSIS_MODE_CORRELATION, ANALYSIS_MODE_DISPOSITIONED])\nengine.controlled_stop()\nengine.start()\nengine.wait()\nset_dispositions([root.uuid], DISPOSITION_DELIVERY, UNITTEST_USER_ID)\nengine = TestEngine(local_analysis_modes=[ANALYSIS_MODE_ANALYSIS,\n    ANALYSIS_MODE_CORRELATION, ANALYSIS_MODE_DISPOSITIONED])\nengine.enable_alerting()\nengine.enable_module('analysis_module_forced_detection', ANALYSIS_MODE_ANALYSIS\n    )\nengine.enable_module('analysis_module_hal9000', [ANALYSIS_MODE_ANALYSIS,\n    ANALYSIS_MODE_CORRELATION, ANALYSIS_MODE_DISPOSITIONED])\nengine.controlled_stop()\nengine.start()\nengine.wait()\nroot = RootAnalysis(storage_dir=storage_dir_from_uuid(root.uuid))\nroot.load()\nself.assertEquals(root.analysis_mode, ANALYSIS_MODE_DISPOSITIONED)\ntest_observable = root.get_observable(test_observable.id)\nself.assertIsNotNone(test_observable)\nanalysis = test_observable.get_analysis(HAL9000Analysis)\nself.assertIsNotNone(analysis)\nself.assertEquals(analysis.total_count, 0)\nself.assertEquals(analysis.mal_count, 0)\nhal9000_id = _compute_hal9000_md5(test_observable)\nc.execute('SELECT total_count, mal_count FROM observables WHERE id = UNHEX(%s)'\n    , (hal9000_id,))\nresult = c.fetchone()\ndb.commit()\nself.assertIsNotNone(result)\nself.assertEquals(result[0], 1)\nself.assertEquals(result[1], 1)\nstate = root.state['hal9000']\nself.assertTrue(STATE_KEY_ID_TRACKING in state)\ntracking = state[STATE_KEY_ID_TRACKING]\nself.assertTrue(hal9000_id in tracking)\ntracking_info = tracking[hal9000_id]\nself.assertTrue('id' in tracking_info)\nself.assertEquals(tracking_info['id'], test_observable.id)\nself.assertTrue(KEY_TOTAL_COUNT in tracking_info)\nself.assertTrue(KEY_MAL_COUNT in tracking_info)\nself.assertIsNotNone(tracking_info[KEY_TOTAL_COUNT])\nself.assertIsNotNone(tracking_info[KEY_MAL_COUNT])\nset_dispositions([root.uuid], DISPOSITION_FALSE_POSITIVE, UNITTEST_USER_ID)\nengine = TestEngine(local_analysis_modes=[ANALYSIS_MODE_ANALYSIS,\n    ANALYSIS_MODE_CORRELATION, ANALYSIS_MODE_DISPOSITIONED])\nengine.enable_alerting()\nengine.enable_module('analysis_module_forced_detection', ANALYSIS_MODE_ANALYSIS\n    )\nengine.enable_module('analysis_module_hal9000', [ANALYSIS_MODE_ANALYSIS,\n    ANALYSIS_MODE_CORRELATION, ANALYSIS_MODE_DISPOSITIONED])\nengine.controlled_stop()\nengine.start()\nengine.wait()\nroot = RootAnalysis(storage_dir=storage_dir_from_uuid(root.uuid))\nroot.load()\ntest_observable = root.get_observable(test_observable.id)\nself.assertIsNotNone(test_observable)\nanalysis = test_observable.get_analysis(HAL9000Analysis)\nself.assertIsNotNone(analysis)\nself.assertEquals(analysis.total_count, 0)\nself.assertEquals(analysis.mal_count, 0)\nhal9000_id = _compute_hal9000_md5(test_observable)\nc.execute('SELECT total_count, mal_count FROM observables WHERE id = UNHEX(%s)'\n    , (hal9000_id,))\nresult = c.fetchone()\ndb.commit()\nself.assertIsNotNone(result)\nself.assertEquals(result[0], 1)\nself.assertEquals(result[1], 0)\nstate = root.state['hal9000']\nself.assertTrue(STATE_KEY_ID_TRACKING in state)\ntracking = state[STATE_KEY_ID_TRACKING]\nself.assertTrue(hal9000_id in tracking)\ntracking_info = tracking[hal9000_id]\nself.assertTrue('id' in tracking_info)\nself.assertEquals(tracking_info['id'], test_observable.id)\nself.assertTrue(KEY_TOTAL_COUNT in tracking_info)\nself.assertTrue(KEY_MAL_COUNT in tracking_info)\nself.assertIsNotNone(tracking_info[KEY_TOTAL_COUNT])\nself.assertIsNone(tracking_info[KEY_MAL_COUNT])\nset_dispositions([root.uuid], DISPOSITION_IGNORE, UNITTEST_USER_ID)\nengine = TestEngine(local_analysis_modes=[ANALYSIS_MODE_ANALYSIS,\n    ANALYSIS_MODE_CORRELATION, ANALYSIS_MODE_DISPOSITIONED])\nengine.enable_alerting()\nengine.enable_module('analysis_module_forced_detection', ANALYSIS_MODE_ANALYSIS\n    )\nengine.enable_module('analysis_module_hal9000', [ANALYSIS_MODE_ANALYSIS,\n    ANALYSIS_MODE_CORRELATION, ANALYSIS_MODE_DISPOSITIONED])\nengine.controlled_stop()\nengine.start()\nengine.wait()\nroot = RootAnalysis(storage_dir=storage_dir_from_uuid(root.uuid))\nroot.load()\ntest_observable = root.get_observable(test_observable.id)\nself.assertIsNotNone(test_observable)\nanalysis = test_observable.get_analysis(HAL9000Analysis)\nself.assertIsNotNone(analysis)\nself.assertEquals(analysis.total_count, 0)\nself.assertEquals(analysis.mal_count, 0)\nhal9000_id = _compute_hal9000_md5(test_observable)\nc.execute('SELECT total_count, mal_count FROM observables WHERE id = UNHEX(%s)'\n    , (hal9000_id,))\nresult = c.fetchone()\ndb.commit()\nself.assertIsNotNone(result)\nself.assertEquals(result[0], 0)\nself.assertEquals(result[1], 0)\nstate = root.state['hal9000']\nself.assertTrue(STATE_KEY_ID_TRACKING in state)\ntracking = state[STATE_KEY_ID_TRACKING]\nself.assertTrue(hal9000_id in tracking)\ntracking_info = tracking[hal9000_id]\nself.assertTrue('id' in tracking_info)\nself.assertEquals(tracking_info['id'], test_observable.id)\nself.assertTrue(KEY_TOTAL_COUNT in tracking_info)\nself.assertTrue(KEY_MAL_COUNT in tracking_info)\nself.assertIsNone(tracking_info[KEY_TOTAL_COUNT])\nself.assertIsNone(tracking_info[KEY_MAL_COUNT])\nuse_db(name='hal9000')"
}