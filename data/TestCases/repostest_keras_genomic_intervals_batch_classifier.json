{
    "functionName": "test_keras_genomic_intervals_batch_classifier",
    "className": null,
    "fileName": "/goeckslab_&_Galaxy-ML/galaxy_ml_&_tests_&_test_keras_galaxy.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "ref_genome_path = (\n    '/projects/selene/manuscript/case1/data/GRCh38_no_alt_analysis_set_GCA_000001405.15.fasta'\n    )\nintervals_path = './tools/test-data/hg38_TF_intervals_2000.txt'\ntarget_path = '/projects/selene/manuscript/case1/data/GATA1_proery_bm.bed.gz'\nseed = 42\nrandom_state = 0\ngenerator = GenomicIntervalBatchGenerator(ref_genome_path=ref_genome_path,\n    intervals_path=intervals_path, target_path=target_path, seed=seed,\n    features=['Proery_BM|GATA1'], random_state=random_state)\nmodel = Sequential()\nmodel.add(Conv1D(filters=320, kernel_size=8, input_shape=(1000, 4)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPool1D(pool_size=4, strides=4))\nmodel.add(Dropout(0.2))\nmodel.add(Conv1D(filters=480, kernel_size=8))\nmodel.add(Activation('relu'))\nmodel.add(MaxPool1D(pool_size=4, strides=4))\nmodel.add(Dropout(0.2))\nmodel.add(Conv1D(filters=960, kernel_size=8))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Reshape((50880,)))\nmodel.add(Dense(1))\nmodel.add(Activation('relu'))\nmodel.add(Dense(1))\nmodel.add(Activation('sigmoid'))\nconfig = model.get_config()\nclassifier = KerasGBatchClassifier(config, clone(generator), optimizer=\n    'adam', momentum=0.9, decay=1e-06, nesterov=True, batch_size=64, n_jobs\n    =1, epochs=10, steps_per_epoch=20, prediction_steps=100,\n    class_positive_factor=3, metrics=['acc'])\nfor k, v in classifier.get_params().items():\n    if k.endswith('_seed') and v is None:\n        classifier.set_params(**{k: 999})\nclassifier1 = clone(classifier)\nintervals = pd.read_csv(intervals_path, sep='\\t', header=None)\nn_samples = intervals.shape[0]\nX = np.arange(n_samples)[:, (np.newaxis)]\ncv = ShuffleSplit(1, test_size=0.2, random_state=123)\nscoring = 'balanced_accuracy'\nparam_grid = {}\nsetattr(_search, '_fit_and_score', _fit_and_score)\nGridSearchCV = getattr(_search, 'GridSearchCV')\ngrid = GridSearchCV(classifier1, param_grid, scoring=scoring, cv=cv, refit=\n    False, error_score='raise', n_jobs=1)\ny = None\ngrid.fit(X, y, verbose=1)\nprint(grid.cv_results_)\nnottest"
}