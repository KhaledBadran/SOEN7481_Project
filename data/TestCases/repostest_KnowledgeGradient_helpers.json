{
    "functionName": "test_KnowledgeGradient_helpers",
    "className": "KnowledgeGradientTest",
    "fileName": "/facebook_&_Ax/ax_&_models_&_tests_&_test_botorch_kg.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "model = KnowledgeGradient()\nmodel.fit(Xs=self.Xs, Ys=self.Ys, Yvars=self.Yvars, bounds=self.bounds,\n    feature_names=self.feature_names, metric_names=self.metric_names,\n    task_features=[], fidelity_features=[])\nobjective = ScalarizedObjective(weights=self.objective_weights)\nX_dummy = torch.ones(1, 3, dtype=self.dtype, device=self.device)\nacq_function = _instantiate_KG(model=model.model, objective=objective,\n    n_fantasies=10, qmc=True)\nself.assertIsInstance(acq_function.sampler, SobolQMCNormalSampler)\nself.assertIsInstance(acq_function.objective, ScalarizedObjective)\nself.assertEqual(acq_function.num_fantasies, 10)\nacq_function = _instantiate_KG(model=model.model, objective=objective,\n    n_fantasies=10, qmc=False)\nself.assertIsInstance(acq_function.sampler, IIDNormalSampler)\nacq_function = _instantiate_KG(model=model.model, objective=objective, qmc=\n    False)\nself.assertIsNone(acq_function.inner_sampler)\nacq_function = _instantiate_KG(model=model.model, objective=objective, qmc=\n    True, X_pending=X_dummy)\nself.assertIsNone(acq_function.inner_sampler)\nself.assertTrue(torch.equal(acq_function.X_pending, X_dummy))\noutcome_constraints = torch.tensor([[1.0]]), torch.tensor([[0.5]])\nobjective_weights = torch.ones(1, dtype=self.dtype, device=self.device)\nself.assertIsInstance(get_botorch_objective(model=model.model,\n    outcome_constraints=outcome_constraints, objective_weights=\n    objective_weights, X_observed=X_dummy, use_scalarized_objective=False),\n    ConstrainedMCObjective)\nself.assertIsInstance(get_botorch_objective(model=model.model,\n    outcome_constraints=outcome_constraints, objective_weights=\n    objective_weights, X_observed=X_dummy), ConstrainedMCObjective)\nself.assertIsInstance(get_botorch_objective(model=model.model,\n    objective_weights=objective_weights, X_observed=X_dummy,\n    use_scalarized_objective=False), LinearMCObjective)\nself.assertIsInstance(get_botorch_objective(model=model.model,\n    objective_weights=objective_weights, X_observed=X_dummy),\n    ScalarizedObjective)\nacq_function, non_fixed_idcs = model._get_best_point_acqf(objective_weights\n    =objective_weights, outcome_constraints=outcome_constraints, X_observed\n    =X_dummy)\nself.assertIsInstance(acq_function, qSimpleRegret)\nself.assertIsInstance(acq_function.sampler, SobolQMCNormalSampler)\nself.assertIsNone(non_fixed_idcs)\nacq_function, non_fixed_idcs = model._get_best_point_acqf(objective_weights\n    =objective_weights, outcome_constraints=outcome_constraints, X_observed\n    =X_dummy, qmc=False)\nself.assertIsInstance(acq_function.sampler, IIDNormalSampler)\nself.assertIsNone(non_fixed_idcs)\nwith self.assertRaises(RuntimeError):\n    model._get_best_point_acqf(objective_weights=objective_weights,\n        outcome_constraints=outcome_constraints, X_observed=X_dummy,\n        target_fidelities={(1): 1.0})\nmodel = KnowledgeGradient()\nmodel.fit(Xs=self.Xs, Ys=self.Ys, Yvars=self.Yvars, bounds=self.bounds,\n    task_features=[], feature_names=self.feature_names, metric_names=self.\n    metric_names, fidelity_features=[-1])\nacq_function = _instantiate_KG(model=model.model, objective=objective,\n    target_fidelities={(2): 1.0}, current_value=0)\nself.assertIsInstance(acq_function, qMultiFidelityKnowledgeGradient)\nacq_function = _instantiate_KG(model=model.model, objective=\n    LinearMCObjective(weights=self.objective_weights))\nself.assertIsInstance(acq_function.inner_sampler, SobolQMCNormalSampler)\nwith self.assertRaises(RuntimeError):\n    _instantiate_KG(model=model.model, objective=objective,\n        target_fidelities={(1): 1.0}, fidelity_weights={(2): 1.0},\n        current_value=0)\nacq_function, non_fixed_idcs = model._get_best_point_acqf(objective_weights\n    =objective_weights, outcome_constraints=outcome_constraints, X_observed\n    =X_dummy, target_fidelities={(2): 1.0})\nself.assertIsInstance(acq_function, FixedFeatureAcquisitionFunction)\nself.assertIsInstance(acq_function.acq_func.sampler, SobolQMCNormalSampler)\nself.assertEqual(non_fixed_idcs, [0, 1])\nacq_function, non_fixed_idcs = model._get_best_point_acqf(objective_weights\n    =objective_weights, outcome_constraints=outcome_constraints, X_observed\n    =X_dummy, target_fidelities={(2): 1.0}, qmc=False)\nself.assertIsInstance(acq_function, FixedFeatureAcquisitionFunction)\nself.assertIsInstance(acq_function.acq_func.sampler, IIDNormalSampler)\nself.assertEqual(non_fixed_idcs, [0, 1])\nwith self.assertRaises(RuntimeError):\n    model._get_best_point_acqf(objective_weights=objective_weights,\n        outcome_constraints=outcome_constraints, X_observed=X_dummy, qmc=False)\nwith self.assertRaises(RuntimeError):\n    model._get_best_point_acqf(objective_weights=objective_weights,\n        outcome_constraints=outcome_constraints, X_observed=X_dummy,\n        fixed_features={(2): 2.0}, target_fidelities={(2): 1.0}, qmc=False)\n"
}