{
    "functionName": "test_content_key_search",
    "className": "TestProducer",
    "fileName": "/named-data_&_PyNDN2/tests_&_integration_tests_&_test_producer.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "timeMarkerFirstHop = Name('20150101T070000/20150101T080000')\ntimeMarkerSecondHop = Name('20150101T080000/20150101T090000')\ntimeMarkerThirdHop = Name('20150101T100000/20150101T110000')\nprefix = Name('/prefix')\nsuffix = Name('/suffix')\nexpectedInterest = Name(prefix)\nexpectedInterest.append(Encryptor.NAME_COMPONENT_READ)\nexpectedInterest.append(suffix)\nexpectedInterest.append(Encryptor.NAME_COMPONENT_E_KEY)\ncKeyName = Name(prefix)\ncKeyName.append(Encryptor.NAME_COMPONENT_SAMPLE)\ncKeyName.append(suffix)\ncKeyName.append(Encryptor.NAME_COMPONENT_C_KEY)\ntestTime = Schedule.fromIsoString('20150101T100001')\nself.createEncryptionKey(expectedInterest, timeMarkerFirstHop)\nself.createEncryptionKey(expectedInterest, timeMarkerSecondHop)\nself.createEncryptionKey(expectedInterest, timeMarkerThirdHop)\nrequestCount = [0]\nclass TestFace(object):\n\n    def __init__(self, handleExpressInterest):\n        self.handleExpressInterest = handleExpressInterest\n\n    def expressInterest(self, interest, onData, onTimeout, onNetworkNack):\n        return self.handleExpressInterest(interest, onData, onTimeout,\n            onNetworkNack)\ndef handleExpressInterest(interest, onData, onTimeout, onNetworkNack):\n    self.assertEqual(expectedInterest, interest.getName())\n    gotInterestName = False\n    for i in range(3):\n        interestName = Name(interest.getName())\n        if i == 0:\n            interestName.append(timeMarkerFirstHop)\n        elif i == 1:\n            interestName.append(timeMarkerSecondHop)\n        elif i == 2:\n            interestName.append(timeMarkerThirdHop)\n        if interest.matchesName(interestName):\n            gotInterestName = True\n            requestCount[0] += 1\n            break\n    if gotInterestName:\n        onData(interest, self.encryptionKeys[interestName])\n    return 0\nface = TestFace(handleExpressInterest)\ntestDb = Sqlite3ProducerDb(self.databaseFilePath)\nproducer = Producer(prefix, suffix, face, self.keyChain, testDb)\ndef onEncryptedKeys(result):\n    self.assertEqual(3, requestCount[0])\n    self.assertEqual(1, len(result))\n    keyData = result[0]\n    keyName = keyData.getName()\n    self.assertEqual(cKeyName, keyName.getSubName(0, 4))\n    self.assertEqual(timeMarkerThirdHop.get(0), keyName.get(4))\n    self.assertEqual(Encryptor.NAME_COMPONENT_FOR, keyName.get(5))\n    self.assertEqual(expectedInterest.append(timeMarkerThirdHop), keyName.\n        getSubName(6))\nproducer.createContentKey(testTime, onEncryptedKeys)\n"
}