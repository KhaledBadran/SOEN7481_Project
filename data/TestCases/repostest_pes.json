{
    "functionName": "test_pes",
    "className": null,
    "fileName": "/bobbypaton_&_GoodVibes/tests_&_test_goodvibes.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "temp = 298.15\nconc = GV.ATMOS / (GV.GAS_CONSTANT * temp)\n(QS, QH, s_freq_cutoff, h_freq_cutoff, freq_scale_factor, solv, invert, d3\n    ) = 'grimme', False, 100.0, 100.0, 1.0, 'none', False, 0\ninvert, spc, gconf = False, False, True\nprecision = 2\nfiles = ['pes/Int-III_Oax_cis_a.log', 'pes/Int-II_Oax_cis_a.log',\n    'pes/Int-I_Oax.log', 'pes/TolS.log', 'pes/TolSH.log']\nfiles = [datapath(file) for file in files]\nlog = GV.Logger('GoodVibes', 'test', False)\nbbe_vals = []\nfor file in files:\n    bbe = GV.calc_bbe(file, QS, QH, s_freq_cutoff, h_freq_cutoff, temp,\n        conc, freq_scale_factor, solv, spc, invert, d3)\n    bbe_vals.append(bbe)\nfileList = [file for file in files]\nthermo_data = dict(zip(fileList, bbe_vals))\npes = GV.get_pes(datapath('pes/Cis_complete_pathway.yaml'), thermo_data,\n    log, temp, gconf, QH)\nzero_vals = [pes.e_zero[0][0], pes.zpe_zero[0][0], pes.h_zero[0][0], temp *\n    pes.ts_zero[0][0], temp * pes.qhts_zero[0][0], pes.g_zero[0][0], pes.\n    qhg_zero[0][0]]\nfor i, path in enumerate(pes.path):\n    for j, e_abs in enumerate(pes.e_abs[i]):\n        species = [pes.e_abs[i][j], pes.zpe_abs[i][j], pes.h_abs[i][j], \n            temp * pes.s_abs[i][j], temp * pes.qs_abs[i][j], pes.g_abs[i][j\n            ], pes.qhg_abs[i][j]]\n        relative = [(species[x] - zero_vals[x]) for x in range(len(zero_vals))]\n        formatted_list = [(GV.KCAL_TO_AU * x) for x in relative]\n        assert E[j] == round(formatted_list[0], precision)\n        assert ZPE[j] == round(formatted_list[1], precision)\n        assert H[j] == round(formatted_list[2], precision)\n        assert TS[j] == round(formatted_list[3], precision)\n        assert TqhS[j] == round(formatted_list[4], precision)\n        assert GT[j] == round(formatted_list[5], precision)\n        assert qhGT[j] == round(formatted_list[6], precision)\nlog.finalize()\npytest.mark.parametrize('E, ZPE, H, TS, TqhS, GT, qhGT', [([0.0, -8.01, -\n    50.34], [0.0, 0.86, 4.27], [0.0, -7.1, -45.99], [0.0, -14.54, -26.25],\n    [0.0, -15.21, -29.6], [0.0, 7.44, -19.74], [0.0, 8.11, -16.39])])"
}