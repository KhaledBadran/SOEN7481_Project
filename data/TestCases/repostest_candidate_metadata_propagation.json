{
    "functionName": "test_candidate_metadata_propagation",
    "className": "ArrayModelBridgeTest",
    "fileName": "/facebook_&_Ax/ax_&_modelbridge_&_tests_&_test_array_modelbridge.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "exp = get_branin_experiment(with_status_quo=True, with_batch=True)\npreexisting_batch_gr = exp.trials[0]._generator_run_structs[0].generator_run\npreexisting_batch_gr._candidate_metadata_by_arm_signature = {\n    preexisting_batch_gr.arms[0].signature: {\n    'preexisting_batch_cand_metadata': 'some_value'}}\nmodelbridge = ArrayModelBridge(search_space=exp.search_space, experiment=\n    exp, model=NumpyModel(), data=get_branin_data())\nself.assertTrue(np.array_equal(mock_model_fit.call_args[1].get('Xs'), np.\n    array([[list(exp.trials[0].arms[0].parameters.values())]])))\nself.assertEqual(mock_model_fit.call_args[1].get('candidate_metadata'), [[{\n    Keys.OBS_FROM_DF_TIMESTAMP: 123456789,\n    'preexisting_batch_cand_metadata': 'some_value'}]])\ngr = modelbridge.gen(n=1)\nself.assertEqual(gr.candidate_metadata_by_arm_signature, {gr.arms[0].\n    signature: {'some_key': 'some_value_0'}, gr.arms[1].signature: {\n    'some_key': 'some_value_1'}})\nbatch = exp.new_batch_trial(generator_run=gr)\nmodelbridge.update(experiment=exp, new_data=get_branin_data(trial_indices=[\n    batch.index]))\nself.assertTrue(np.array_equal(mock_model_update.call_args[1].get('Xs'), np\n    .array([[list(exp.trials[0].arms[0].parameters.values()), [1, 2]]])))\nself.assertEqual(mock_model_update.call_args[1].get('candidate_metadata'),\n    [[{Keys.OBS_FROM_DF_TIMESTAMP: 123456789,\n    'preexisting_batch_cand_metadata': 'some_value'}, {Keys.\n    OBS_FROM_DF_TIMESTAMP: 123456789, 'some_key': 'some_value_0'}]])\nmock_model_gen.return_value = np.array([[2, 4], [3, 5]]), np.array([1, 2]\n    ), None, {}\ngr = modelbridge.gen(n=1)\nself.assertIsNone(gr.candidate_metadata_by_arm_signature)\nbatch = exp.new_batch_trial(generator_run=gr)\nmodelbridge.update(experiment=exp, new_data=get_branin_data(trial_indices=[\n    batch.index]))\nself.assertTrue(np.array_equal(mock_model_update.call_args[1].get('Xs'), np\n    .array([[list(exp.trials[0].arms[0].parameters.values()), [1, 2], [2, 4\n    ]]])))\nself.assertEqual(mock_model_update.call_args[1].get('candidate_metadata'),\n    [[{Keys.OBS_FROM_DF_TIMESTAMP: 123456789,\n    'preexisting_batch_cand_metadata': 'some_value'}, {Keys.\n    OBS_FROM_DF_TIMESTAMP: 123456789, 'some_key': 'some_value_0'}, {Keys.\n    OBS_FROM_DF_TIMESTAMP: 123456789}]])\nexp = get_branin_experiment(with_status_quo=True)\nmodelbridge = ArrayModelBridge(search_space=exp.search_space, experiment=\n    exp, model=NumpyModel())\nmodelbridge.outcomes = modelbridge._metric_names = next(iter(exp.metrics))\ngr = modelbridge.gen(n=1)\nself.assertIsNone(mock_model_fit.call_args[1].get('candidate_metadata'))\nself.assertIsNone(gr.candidate_metadata_by_arm_signature)\nbatch = exp.new_batch_trial(generator_run=gr)\nmodelbridge.update(experiment=exp, new_data=get_branin_data(trial_indices=[\n    batch.index]))\npatch(f'{NumpyModel.__module__}.NumpyModel.gen', return_value=(np.array([[1,\n    2], [2, 3]]), np.array([1, 2]), {}, [{'some_key': 'some_value_0'}, {\n    'some_key': 'some_value_1'}]), autospec=True)patch(f'{NumpyModel.__module__}.NumpyModel.update', autospec=True)patch(f'{NumpyModel.__module__}.NumpyModel.fit', autospec=True)patch(f'{Observation.__module__}.current_timestamp_in_millis', return_value\n    =123456789)"
}