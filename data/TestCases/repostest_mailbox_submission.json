{
    "functionName": "test_mailbox_submission",
    "className": "TestCase",
    "fileName": "/IntegralDefense_&_ACE/lib_&_saq_&_modules_&_test_email.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "from flask import url_for\nfrom saq.analysis import _JSONEncoder\nfrom saq.modules.email import EmailAnalysis\nt = saq.LOCAL_TIMEZONE.localize(datetime.datetime.now()).astimezone(pytz.UTC\n    ).strftime(event_time_format_json_tz)\nwith open(os.path.join('test_data', 'emails', 'splunk_logging.email.rfc822'\n    ), 'rb') as fp:\n    result = self.client.post(url_for('analysis.submit'), data={'analysis':\n        json.dumps({'analysis_mode': 'email', 'tool': 'unittest',\n        'tool_instance': 'unittest_instance', 'type': 'mailbox',\n        'description': 'testing', 'event_time': t, 'details': {},\n        'observables': [{'type': F_FILE, 'value': 'rfc822.email', 'time': t,\n        'tags': [], 'directives': [DIRECTIVE_ORIGINAL_EMAIL],\n        'limited_analysis': []}], 'tags': []}, cls=_JSONEncoder), 'file': (\n        fp, 'rfc822.email')}, content_type='multipart/form-data')\nresult = result.get_json()\nself.assertIsNotNone(result)\nself.assertTrue('result' in result)\nresult = result['result']\nself.assertIsNotNone(result['uuid'])\nuuid = result['uuid']\nsaq.CONFIG['analysis_mode_email']['cleanup'] = 'no'\nengine = TestEngine(local_analysis_modes=['email'])\nengine.enable_module('analysis_module_file_type', 'email')\nengine.enable_module('analysis_module_email_analyzer', 'email')\nengine.enable_module('analysis_module_mailbox_email_analyzer', 'email')\nengine.controlled_stop()\nengine.start()\nengine.wait()\nroot = RootAnalysis(storage_dir=workload_storage_dir(uuid))\nroot.load()\nobservable = root.find_observable(lambda o: o.has_directive(\n    DIRECTIVE_ORIGINAL_EMAIL))\nself.assertIsNotNone(observable)\nanalysis = observable.get_analysis(EmailAnalysis)\nself.assertIsNotNone(analysis)\nself.assertEquals(analysis.details, root.details)\n"
}