{
    "functionName": "test_asset_api",
    "className": null,
    "fileName": "/AO-StreetArt_&_PyAesel/test_&_test_transaction.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "print('Testing Asset API')\nprint('Create Asset')\nmetadata = AeselAssetMetadata()\nmetadata.file_type = 'json'\nmetadata.asset_type = 'test'\nrelationship = AeselAssetRelationship()\nrelationship.type = 'scene'\nrelationship.related = '12345'\nnew_key = None\ntry:\n    new_key = transaction_client.create_asset('test/resources/testupload.txt',\n        metadata, relationship)\nexcept Exception as e:\n    print(e)\n    assert False\nassert len(new_key) > 0\nprint('Asset Get')\nfile_contents = None\ntry:\n    file_contents = transaction_client.get_asset(new_key)\nexcept Exception as e:\n    print(e)\n    assert False\nprint(file_contents)\nassert file_contents == b'{\"test\": 1}\\n'\nprint('Asset Metadata Query')\nmetadata_query = AeselAssetMetadata()\nmetadata_query.file_type = 'json'\nmquery_return = None\ntry:\n    mquery_return = transaction_client.query_asset_metadata(metadata_query)\nexcept Exception as e:\n    print(e)\n    assert False\nprint(mquery_return)\nassert mquery_return[0]['key'] == new_key\nprint('Asset Metadata Bulk Retrieve')\nmbulk_return = None\ntry:\n    mbulk_return = transaction_client.bulk_query_asset_metadata([new_key])\nexcept Exception as e:\n    print(e)\n    assert False\nprint(mbulk_return)\nassert mbulk_return[0]['key'] == new_key\nprint('Asset Update')\nmetadata2 = AeselAssetMetadata()\nmetadata2.content_type = 'application/json'\nmetadata2.file_type = 'json'\nmetadata2.asset_type = 'second'\nupdated_key = None\ntry:\n    updated_key = transaction_client.update_asset(new_key,\n        'test/resources/testupload2.txt', metadata2)\nexcept Exception as e:\n    print(e)\n    assert False\nassert len(updated_key) > 0\nprint('Get Asset History')\nhistory_return = None\ntry:\n    history_return = transaction_client.get_asset_history(updated_key)\nexcept Exception as e:\n    print(e)\n    assert False\nprint(history_return)\nprint('Save Asset Relationship')\nnew_relationship = AeselAssetRelationship()\nnew_relationship.asset = updated_key\nnew_relationship.type = 'object'\nnew_relationship.related = '23456'\nnewrel_return = None\ntry:\n    newrel_return = transaction_client.save_asset_relationship(new_relationship\n        )\nexcept Exception as e:\n    print(e)\n    assert False\nprint(newrel_return)\nassert len(newrel_return[0]['id']) > 0\nprint('Asset Relationship Query')\nquery_relationship = AeselAssetRelationship()\nquery_relationship.related = '23456'\nrelq_return = None\ntry:\n    relq_return = transaction_client.query_asset_relationships(\n        query_relationship)\nexcept Exception as e:\n    print(e)\n    assert False\nprint(relq_return)\nassert len(relq_return[0]['id']) > 0\nprint('Asset Relationship Delete')\nreld_return = None\ntry:\n    reld_return = transaction_client.delete_asset_relationship(updated_key,\n        'object', '23456')\nexcept Exception as e:\n    print(e)\n    assert False\nprint(reld_return)\n"
}