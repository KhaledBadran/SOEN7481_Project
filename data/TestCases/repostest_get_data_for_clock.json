{
    "functionName": "test_get_data_for_clock",
    "className": "TestDataAcquisitionClient",
    "fileName": "/BciPy_&_BciPy/bcipy_&_acquisition_&_tests_&_test_client.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"Test queries to the data store by experiment clock units.\"\"\"\nchannels = ['ch1', 'ch2', 'TRG']\nsample_hz = 100\ntrigger_at = 10\nnum_records = 1000\nn_channels = len(channels) - 1\ndata = [(mock_record(n_channels) + [0 if i + 1 < trigger_at else 1]) for i in\n    range(num_records)]\ndevice = _MockDevice(data=data, channels=channels, fs=sample_hz)\ndaq = DataAcquisitionClient(device=device, buffer_name=\n    'buffer_client_test_get_data_for_clock.db', raw_data_file_name=None,\n    delete_archive=True, clock=CountClock())\ndaq.start_acquisition()\ntime.sleep(0.2)\ndaq.stop_acquisition()\nself.assertTrue(daq.is_calibrated)\nself.assertEqual(trigger_at, daq.record_at_calib.rownum)\nself.assertEqual(trigger_at, daq.record_at_calib.timestamp)\nself.assertEqual(data[trigger_at - 1], daq.record_at_calib.data)\nself.assertEqual(0.1, daq.offset)\ndata_slice = daq.get_data_for_clock(calib_time=0.1, start_time=0.2,\n    end_time=0.3)\nself.assertEqual(10, len(data_slice))\nstart_offset = 20\nfor i, record in enumerate(data_slice):\n    mock_data_index = i + start_offset - 1\n    self.assertEqual(record.data, data[mock_data_index])\ndata_slice = daq.get_data_for_clock(calib_time=0.2, start_time=0.4,\n    end_time=0.6)\nself.assertEqual(20, len(data_slice))\nstart_offset = 30\nfor i, record in enumerate(data_slice):\n    mock_data_index = i + start_offset - 1\n    self.assertEqual(record.data, data[mock_data_index])\ndaq.cleanup()\n"
}