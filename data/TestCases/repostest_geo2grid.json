{
    "functionName": "test_geo2grid",
    "className": "TestConvert",
    "fileName": "/GeoscienceAustralia_&_GeodePy/geodepy_&_tests_&_test_convert.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "hem, zone, east, north, psf, grid_conv = geo2grid(hp2dec(-37.482667598),\n    hp2dec(144.581644114))\nself.assertEqual(hem, 'South')\nself.assertEqual(zone, 55)\nself.assertAlmostEqual(east, 321405.5592, 3)\nself.assertAlmostEqual(north, 5813614.1613, 3)\nself.assertAlmostEqual(psf, 0.99999287, 8)\nself.assertAlmostEqual(grid_conv, -1.2439811331, 9)\nhem, zone, east, north, psf, grid_conv = geo2grid(DMSAngle(-37, 48, \n    26.67598), DMSAngle(144, 58, 16.44114))\nself.assertEqual(hem, 'South')\nself.assertEqual(zone, 55)\nself.assertAlmostEqual(east, 321405.5592, 3)\nself.assertAlmostEqual(north, 5813614.1613, 3)\nself.assertAlmostEqual(psf, 0.99999287, 8)\nself.assertAlmostEqual(grid_conv, -1.2439811331, 9)\nhem, zone, east, north, psf, grid_conv = geo2grid(DDMAngle(-37, 48.4445997),\n    DDMAngle(144, 58.274019))\nself.assertEqual(hem, 'South')\nself.assertEqual(zone, 55)\nself.assertAlmostEqual(east, 321405.5592, 3)\nself.assertAlmostEqual(north, 5813614.1613, 3)\nself.assertAlmostEqual(psf, 0.99999287, 8)\nself.assertAlmostEqual(grid_conv, -1.2439811331, 9)\nabs_path = os.path.abspath(os.path.dirname(__file__))\ntestdata = read_dnacoord(os.path.join(abs_path,\n    'resources/natadjust_rvs_example.dat'))\nfor coord in testdata:\n    coord.converthptodd()\n    hem, zonecomp, eastcomp, northcomp, psf, grid_conv = geo2grid(coord.lat,\n        coord.long)\n    self.assertEqual(zonecomp, coord.zone)\n    self.assertLess(abs(eastcomp - coord.easting), 0.0004)\n    self.assertLess(northcomp - coord.northing, 0.0004)\nnorth_ex = DMSAngle(34, 57, 0.79653).dec(), DMSAngle(117, 48, 36.68783).dec()\nsouth_ex = DMSAngle(-34, 57, 0.79653).dec(), DMSAngle(117, 48, 36.68783).dec()\nnorth_grid = geo2grid(north_ex[0], north_ex[1])\nsouth_grid = geo2grid(south_ex[0], south_ex[1])\nself.assertEqual(north_grid[0], 'North')\nself.assertEqual(south_grid[0], 'South')\nself.assertEqual(north_grid[1], south_grid[1])\nself.assertEqual(north_grid[2], south_grid[2])\nself.assertEqual(north_grid[3], 10000000 - south_grid[3])\nself.assertEqual(north_grid[4], south_grid[4])\nself.assertEqual(north_grid[5], -south_grid[5])\nwith self.assertRaises(ValueError):\n    geo2grid(0, 45, -1)\nwith self.assertRaises(ValueError):\n    geo2grid(0, 45, 61)\nwith self.assertRaises(ValueError):\n    geo2grid(-81, 45, 0)\nwith self.assertRaises(ValueError):\n    geo2grid(85, 45, 0)\nwith self.assertRaises(ValueError):\n    geo2grid(0, -181, 0)\nwith self.assertRaises(ValueError):\n    geo2grid(0, 181, 0)\n"
}