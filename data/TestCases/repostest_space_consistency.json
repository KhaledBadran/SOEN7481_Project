{
    "functionName": "test_space_consistency",
    "className": null,
    "fileName": "/bytesandbrains_&_ProcessOptimizer/ProcessOptimizer_&_tests_&_test_space.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "s1 = Space([Real(0.0, 1.0)])\ns2 = Space([Real(0.0, 1.0)])\ns3 = Space([Real(0, 1)])\ns4 = Space([(0.0, 1.0)])\ns5 = Space([(0.0, 1.0, 'uniform')])\ns6 = Space([(0, 1.0)])\ns7 = Space([(np.float64(0.0), 1.0)])\ns8 = Space([(0, np.float64(1.0))])\na1 = s1.rvs(n_samples=10, random_state=0)\na2 = s2.rvs(n_samples=10, random_state=0)\na3 = s3.rvs(n_samples=10, random_state=0)\na4 = s4.rvs(n_samples=10, random_state=0)\na5 = s5.rvs(n_samples=10, random_state=0)\nassert_equal(s1, s2)\nassert_equal(s1, s3)\nassert_equal(s1, s4)\nassert_equal(s1, s5)\nassert_equal(s1, s6)\nassert_equal(s1, s7)\nassert_equal(s1, s8)\nassert_array_equal(a1, a2)\nassert_array_equal(a1, a3)\nassert_array_equal(a1, a4)\nassert_array_equal(a1, a5)\ns1 = Space([Real(10 ** -3.0, 10 ** 3.0, prior='log-uniform')])\ns2 = Space([Real(10 ** -3.0, 10 ** 3.0, prior='log-uniform')])\ns3 = Space([Real(10 ** -3, 10 ** 3, prior='log-uniform')])\ns4 = Space([(10 ** -3.0, 10 ** 3.0, 'log-uniform')])\ns5 = Space([(np.float64(10 ** -3.0), 10 ** 3.0, 'log-uniform')])\na1 = s1.rvs(n_samples=10, random_state=0)\na2 = s2.rvs(n_samples=10, random_state=0)\na3 = s3.rvs(n_samples=10, random_state=0)\na4 = s4.rvs(n_samples=10, random_state=0)\nassert_equal(s1, s2)\nassert_equal(s1, s3)\nassert_equal(s1, s4)\nassert_equal(s1, s5)\nassert_array_equal(a1, a2)\nassert_array_equal(a1, a3)\nassert_array_equal(a1, a4)\ns1 = Space([Integer(1, 5)])\ns2 = Space([Integer(1.0, 5.0)])\ns3 = Space([(1, 5)])\ns4 = Space([(np.int64(1.0), 5)])\ns5 = Space([(1, np.int64(5.0))])\na1 = s1.rvs(n_samples=10, random_state=0)\na2 = s2.rvs(n_samples=10, random_state=0)\na3 = s3.rvs(n_samples=10, random_state=0)\nassert_equal(s1, s2)\nassert_equal(s1, s3)\nassert_equal(s1, s4)\nassert_equal(s1, s5)\nassert_array_equal(a1, a2)\nassert_array_equal(a1, a3)\ns1 = Space([Categorical(['a', 'b', 'c'])])\ns2 = Space([Categorical(['a', 'b', 'c'])])\ns3 = Space([['a', 'b', 'c']])\na1 = s1.rvs(n_samples=10, random_state=0)\na2 = s2.rvs(n_samples=10, random_state=0)\na3 = s3.rvs(n_samples=10, random_state=0)\nassert_equal(s1, s2)\nassert_array_equal(a1, a2)\nassert_equal(s1, s3)\nassert_array_equal(a1, a3)\ns1 = Space([(True, False)])\ns2 = Space([Categorical([True, False])])\ns3 = Space([np.array([True, False])])\nassert s1 == s2 == s3\npytest.mark.fast_test"
}