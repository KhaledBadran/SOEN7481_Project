{
    "functionName": "test_save_success",
    "className": "JSONGraphFormatTest",
    "fileName": "/pmeal_&_OpenPNM/tests_&_unit_&_io_&_JSONGraphFormatTest.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "path = Path(os.path.realpath(__file__), '../../../fixtures/JSONGraphFormat')\nfilename = Path(path.resolve(), 'save_success.json')\nop.io.JSONGraphFormat.save(self.net, filename=filename)\nwith open(filename, 'r') as file:\n    json_file = json.load(file)\nassert json_file['graph']['metadata']['number_of_nodes'] == self.net.Np\nassert json_file['graph']['metadata']['number_of_links'] == self.net.Nt\nnodes = sorted(json_file['graph']['nodes'], key=lambda node: int(node['id']))\nassert len(nodes) == self.net.Np\nassert isinstance(nodes, list)\nfor node in nodes:\n    assert isinstance(node, dict)\n    assert 'id' in node\n    assert 'metadata' in node\n    assert isinstance(node['id'], str)\n    assert isinstance(node['metadata'], dict)\n    assert int(node['id']) < self.net.Np\n    assert 'node_coordinates' in node['metadata']\n    assert 'node_squared_radius' in node['metadata']\n    assert 'x' in node['metadata']['node_coordinates']\n    assert 'y' in node['metadata']['node_coordinates']\n    assert 'z' in node['metadata']['node_coordinates']\n    assert isinstance(node['metadata']['node_coordinates'], dict)\n    assert isinstance(node['metadata']['node_squared_radius'], int)\n    assert isinstance(node['metadata']['node_coordinates']['x'], int)\n    assert isinstance(node['metadata']['node_coordinates']['y'], int)\n    assert isinstance(node['metadata']['node_coordinates']['z'], int)\n    assert node['metadata']['node_squared_radius'] == 1\n    assert node['metadata']['node_coordinates']['x'] * 2 % 2 == 0\n    assert node['metadata']['node_coordinates']['y'] * 2 % 2 == 0\n    assert node['metadata']['node_coordinates']['z'] * 2 % 2 == 0\nedges = sorted(json_file['graph']['edges'], key=lambda edge: int(edge['id']))\nassert len(edges) == self.net.Nt\nassert isinstance(edges, list)\nfor edge in edges:\n    assert isinstance(edge, dict)\n    assert 'id' in edge\n    assert 'source' in edge\n    assert 'target' in edge\n    assert 'metadata' in edge\n    assert isinstance(edge['id'], str)\n    assert isinstance(edge['source'], str)\n    assert isinstance(edge['target'], str)\n    assert isinstance(edge['metadata'], dict)\n    assert int(edge['id']) < self.net.Nt\n    assert int(edge['source']) < self.net.Np\n    assert int(edge['target']) < self.net.Np\n    assert 'link_length' in edge['metadata']\n    assert 'link_squared_radius' in edge['metadata']\n    assert isinstance(edge['metadata']['link_length'], float)\n    assert isinstance(edge['metadata']['link_squared_radius'], float)\n    assert edge['metadata']['link_length'] == 1.0\n    assert edge['metadata']['link_squared_radius'] == 1.0\nos.remove(filename)\n"
}