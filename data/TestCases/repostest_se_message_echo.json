{
    "functionName": "test_se_message_echo",
    "className": null,
    "fileName": "/Manishearth_&_ChatExchange/tests_&_test_client.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Tests that we are able to send a message, and recieve it back,\n        send a reply, and recieve that back, within a reasonable amount\n        of time.\n\n        This is a lot of complexity for a single test, but we don't want\n        to flood Stack Exchange with more test messages than necessary.\n        \"\"\"\nclient = Client(host_id)\nclient.login(live_testing.email, live_testing.password)\ntimeout_duration = 60\npending_events = queue.Queue()\ndef get_event(predicate):\n    \"\"\"\n            Waits until it has seen a message passing the specified\n            predicate from both polling and sockets.\n\n            Asserts that it has not waited longer than the specified\n            timeout, and asserts that the events from difference sources\n            have the same ID.\n\n            This may dequeue any number of additional unrelated events\n            while it is running, so it's not appropriate if you are\n            trying to wait for multiple events at once.\n            \"\"\"\n    socket_event = None\n    polling_event = None\n    timeout = time.time() + timeout_duration\n    while not (socket_event and polling_event):\n        if time.time() > timeout:\n            raise Exception('Timed out waiting for event')\n        try:\n            is_socket, event = pending_events.get(timeout=1)\n        except queue.Empty:\n            continue\n        if predicate(event):\n            logger.info('Expected event (is_socket==%r): %r', is_socket, event)\n            if is_socket:\n                assert socket_event is None\n                socket_event = event\n            else:\n                assert polling_event is None\n                polling_event = event\n        else:\n            logger.debug('Unexpected events: %r', event)\n    assert socket_event and polling_event\n    assert type(socket_event) is type(polling_event)\n    assert socket_event.id == polling_event.id\n    return socket_event\nlogger.debug('Joining chat')\nroom = client.get_room(room_id)\nroom.join()\nroom.watch_polling(lambda event, _: pending_events.put((False, event)), 5)\nroom.watch_socket(lambda event, _: pending_events.put((True, event)))\ntime.sleep(2)\ntest_message_nonce = uuid.uuid4().hex\ntest_message_content = TEST_MESSAGE_FORMAT.format(test_message_nonce)\nlogger.debug('Sending test message')\nroom.send_message(test_message_content)\n@get_event\ndef test_message_posted(event):\n    return isinstance(event, events.MessagePosted\n        ) and test_message_nonce in event.content\nlogger.debug('Observed test edit')\ntest_reply_nonce = uuid.uuid4().hex\ntest_reply_content = TEST_MESSAGE_FORMAT.format(test_reply_nonce)\nlogger.debug('Sending test reply')\ntest_message_posted.message.reply(test_reply_content)\n@get_event\ndef test_reply(event):\n    return isinstance(event, events.MessageReply\n        ) and test_reply_nonce in event.content\nlogger.debug('Observed test reply')\nassert test_reply.parent_message_id == test_message_posted.message.id\nassert test_reply.message.parent.id == test_reply.parent_message_id\nassert test_message_posted.message.id == test_message_posted.message.id\nassert test_reply.message.parent is test_message_posted.message\ntest_edit_nonce = uuid.uuid4().hex\ntest_edit_content = TEST_MESSAGE_FORMAT.format(test_edit_nonce)\nlogger.debug('Sending test edits')\ntest_message_posted.message.edit(\n    '**this is a** test edit and should be edited again')\ntest_message_posted.message.edit(\n    'this is **another test edit** and should be edited again')\ntest_message_posted.message.edit(\n    'this is **yet** another test edit and **should be edited again**')\ntest_message_posted.message.edit(test_edit_content)\n@get_event\ndef test_edit(event):\n    return isinstance(event, events.MessageEdited\n        ) and test_edit_nonce in event.content\nlogger.debug('Observed final test edit')\nassert test_message_posted.message is test_edit.message\nassert test_edit.message.id == test_message_posted.message.id\nassert test_edit.message.edits == 4\nassert test_edit.message.content_source == test_edit_content\nassert test_message_posted in client._recently_gotten_objects\nassert test_reply in client._recently_gotten_objects\nassert test_edit in client._recently_gotten_objects\ntest_reply.message.delete()\n@get_event\ndef test_deletion(event):\n    return isinstance(event, events.MessageDeleted\n        ) and test_reply.message == event.message\nassert test_deletion.message == test_reply.message\nclient.logout()\npytest.mark.parametrize('host_id,room_id', TEST_ROOMS)pytest.mark.timeout(240)"
}