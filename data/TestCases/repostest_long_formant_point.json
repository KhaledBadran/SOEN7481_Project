{
    "functionName": "test_long_formant_point",
    "className": null,
    "fileName": "/mmcauliffe_&_Pyraat/tests_&_test_long.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "script_path = os.path.join(praat_script_test_dir, 'formant_point_long.praat')\nfunc = PraatAnalysisFunction(script_path, praat_path, arguments=[0.33, 5, 5500]\n    )\nassert func.point_measure\nassert func.uses_long\nassert func._output_parse_function == parse_point_script_output\nheader = ['F1', 'B1', 'F2', 'B2', 'F3', 'B3', 'F4', 'B4', 'F5', 'B5']\noutput = func(long_sound_file, *iy_times, 0, 0, 0.33, 5, 5000)\nwith pytest.raises(PyraatError):\n    func(long_sound_file, 0, 0, 0.33, 5, 5000)\nprint(output)\nassert sorted(output.keys()) == sorted(header)\nfor k, v in output.items():\n    assert isinstance(k, str)\n    assert isinstance(v, (float, type(None)))\niy_F1 = output['F1']\niy_F2 = output['F2']\noutput = func(long_sound_file, *ih_times, 0, 0)\nprint(output)\nassert sorted(output.keys()) == sorted(header)\nfor k, v in output.items():\n    assert isinstance(k, str)\n    assert isinstance(v, (float, type(None)))\nih_F1 = output['F1']\nih_F2 = output['F2']\nassert ih_F1 < iy_F1\nassert ih_F2 < iy_F2\n"
}