{
    "functionName": "test_fisher",
    "className": null,
    "fileName": "/apetri_&_LensTools/lenstools_&_tests_&_test_constraints.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "parameters = list()\nfeatures = list()\nparameters.append(np.array([0.26, -1.0, 0.798, 0.96]))\nl, P, g = np.loadtxt(os.path.join(dataExtern(), 'fiducial'), unpack=True)\nfeatures.append(P)\ncovariance = P ** 2 / (l + 0.5)\nparameters.append(np.array([0.29, -1.0, 0.798, 0.96]))\nl, P, g = np.loadtxt(os.path.join(dataExtern(), 'v_Om_0.29'), unpack=True)\nfeatures.append(P)\nparameters.append(np.array([0.26, -0.8, 0.798, 0.96]))\nl, P, g = np.loadtxt(os.path.join(dataExtern(), 'v_w_-0.8'), unpack=True)\nfeatures.append(P)\nparameters.append(np.array([0.26, -1.0, 0.85, 0.96]))\nl, P, g = np.loadtxt(os.path.join(dataExtern(), 'v_si8_0.850'), unpack=True)\nfeatures.append(P)\nfeature_index = FisherSeries.make_index(pd.Index(l, name='ell'))\nf = FisherAnalysis.from_features(np.array(features), parameters=np.array(\n    parameters), parameter_index=['Om', 'w', 'si8', 'ns'], feature_index=\n    feature_index)\nassert f.parameter_set.shape[0] == 4\nassert f.feature_set.shape[0] == 4\nderivatives = f.derivatives.values\nassert derivatives.shape == (3, len(l))\nassert f.varied == [0, 1, 2]\nfor n in range(3):\n    plt.plot(l, np.abs(derivatives[n]) * 2 * np.pi / (l * (l + 1)), label=\n        'Parameter {0}'.format(n + 1))\nplt.yscale('log')\nplt.xlim(500, 5000)\nplt.ylim(1e-11, 1e-08)\nplt.xlabel('$l$')\nplt.ylabel('$\\\\partial P_l/\\\\partial p$')\nplt.legend(loc='upper right')\nplt.savefig('derivatives.png')\nplt.clf()\nfitted_parameters = f.fit(P, features_covariance=covariance)\nnp.savetxt('fitted_parameters.txt', fitted_parameters.values)\nfisher = f.fisher_matrix(simulated_features_covariance=covariance)\nnp.savetxt('fisher_constraints.txt', np.sqrt(np.linalg.inv(fisher.values).\n    diagonal()))\nfig, ax = plt.subplots()\ne = f.confidence_ellipse(covariance, observed_feature=P, parameters=['Om',\n    'si8'], fill=True, edgecolor='black', alpha=0.3)\nax.add_artist(e)\nax.set_xlim(0.26 - 0.005, 0.26 + 0.005)\nax.set_ylim(0.85 - 0.005, 0.85 + 0.005)\nax.legend([e], ['contour'], loc='upper left')\nax.set_xlabel('$\\\\Omega_m$')\nax.set_ylabel('$\\\\sigma_8$')\nfig.savefig('fisher_contours.png')\n"
}