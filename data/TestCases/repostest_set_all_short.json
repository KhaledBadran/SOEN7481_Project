{
    "functionName": "test_set_all_short",
    "className": "MainTest",
    "fileName": "/NCAR_&_PyReshaper/source_&_test_&_s2smakeTests.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "clevel = 3\nlsigfig = 2\nncfmt = 'netcdf'\nmetadata = ['meta1', 'meta2']\nxlist = ['x', 'y', 'z']\nspecfile = 'myspec.s2s'\nprefix = 'prefix.'\nsuffix = '.suffix'\ninfiles = [(self.cwd + f) for f in ['/s2smakeTests.py',\n    '/specificationTests.py']]\nargv = ['-1', '-c', str(clevel), '-d', str(lsigfig), '-f', ncfmt]\nfor md in metadata:\n    argv.extend(['-m', md])\nfor x in xlist:\n    argv.extend(['-x', x])\nargv.extend(['-o', specfile, '-p', prefix, '-s', suffix])\nargv.extend(infiles)\nif os.path.exists(specfile):\n    os.remove(specfile)\ns2smake.main(argv)\nself.assertTrue(os.path.exists(specfile), 'Specfile not found')\nspec = pickle.load(open(specfile, 'rb'))\nos.remove(specfile)\nself.assertTrue(isinstance(spec, Specifier),\n    'Specfile does not contain a Specifier')\nself.assertEqual(spec.compression_level, clevel,\n    'Default compression level is not {0!r}'.format(clevel))\nself.assertEqual(spec.least_significant_digit, lsigfig,\n    'Default least significant digit is not {0!r}'.format(lsigfig))\nself.assertEqual(len(spec.input_file_list), len(infiles),\n    'Default infiles is not of lenght {0}'.format(len(infiles)))\nfor i1, i2 in zip(spec.input_file_list, infiles):\n    self.assertEqual(i1, i2, 'Default infiles list is not {0}'.format(argv))\nself.assertEqual(len(spec.time_variant_metadata), len(metadata),\n    'Default metadata list is not of length {0}'.format(len(metadata)))\nfor i1, i2 in zip(spec.time_variant_metadata, metadata):\n    self.assertEqual(i1, i2, 'Default metadata list is not {0}'.format(\n        metadata))\nself.assertEqual(spec.netcdf_format, ncfmt,\n    'Default NetCDF format is not {0!r}'.format(ncfmt))\nself.assertEqual(spec.output_file_prefix, os.path.abspath(prefix),\n    'Default output prefix is not {0!r}'.format(prefix))\nself.assertEqual(spec.output_file_suffix, suffix + '.nc',\n    'Default output suffix is not {0!r}'.format(suffix))\nself.assertEqual(spec.time_series, None,\n    'Default time series names is not None')\nself.assertEqual(spec.assume_1d_time_variant_metadata, True,\n    'Default 1D time-variant metadata flag is not True')\nself.assertEqual(spec.exclude_list, xlist, 'Exclude list is not {0!r}'.\n    format(xlist))\n"
}