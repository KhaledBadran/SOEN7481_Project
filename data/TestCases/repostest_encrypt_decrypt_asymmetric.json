{
    "functionName": "test_encrypt_decrypt_asymmetric",
    "className": null,
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_services_&_server_&_crypto_&_test_engine.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n    Test that various encryption/decryption algorithms can be used to\n    correctly asymmetrically encrypt data.\n    \"\"\"\nbackend = backends.default_backend()\npublic_key_numbers = rsa.RSAPublicNumbers(asymmetric_parameters.get(\n    'public_key').get('e'), asymmetric_parameters.get('public_key').get('n'))\npublic_key = public_key_numbers.public_key(backend)\npublic_bytes = public_key.public_bytes(asymmetric_parameters.get('encoding'\n    ), serialization.PublicFormat.PKCS1)\nprivate_key_numbers = rsa.RSAPrivateNumbers(p=asymmetric_parameters.get(\n    'private_key').get('p'), q=asymmetric_parameters.get('private_key').get\n    ('q'), d=asymmetric_parameters.get('private_key').get('d'), dmp1=\n    asymmetric_parameters.get('private_key').get('dmp1'), dmq1=\n    asymmetric_parameters.get('private_key').get('dmq1'), iqmp=\n    asymmetric_parameters.get('private_key').get('iqmp'), public_numbers=\n    public_key_numbers)\nprivate_key = private_key_numbers.private_key(backend)\nprivate_bytes = private_key.private_bytes(asymmetric_parameters.get(\n    'encoding'), serialization.PrivateFormat.PKCS8, serialization.\n    NoEncryption())\nengine = crypto.CryptographyEngine()\nresult = engine.encrypt(asymmetric_parameters.get('algorithm'),\n    public_bytes, asymmetric_parameters.get('plain_text'), padding_method=\n    asymmetric_parameters.get('padding_method'), hashing_algorithm=\n    asymmetric_parameters.get('hashing_algorithm'))\nresult = engine.decrypt(asymmetric_parameters.get('algorithm'),\n    private_bytes, result.get('cipher_text'), padding_method=\n    asymmetric_parameters.get('padding_method'), hashing_algorithm=\n    asymmetric_parameters.get('hashing_algorithm'))\nassert asymmetric_parameters.get('plain_text') == result\n"
}