{
    "functionName": "_generate_and_finalize",
    "className": "TestSignTx",
    "fileName": "/bitcoin-core_&_HWI/test_&_test_device.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "if not unknown_inputs:\n    sign_res = self.do_command(self.dev_args + ['signtx', psbt['psbt']])\n    finalize_res = self.wrpc.finalizepsbt(sign_res['psbt'])\nelse:\n    first_psbt = PSBT()\n    first_psbt.deserialize(psbt['psbt'])\n    second_psbt = PSBT()\n    second_psbt.deserialize(psbt['psbt'])\n    for psbt_input in first_psbt.inputs[1:]:\n        for pubkey, path in psbt_input.hd_keypaths.items():\n            psbt_input.hd_keypaths[pubkey] = [0] + path[1:]\n    for pubkey, path in second_psbt.inputs[0].hd_keypaths.items():\n        second_psbt.inputs[0].hd_keypaths[pubkey] = [0] + path[1:]\n    single_input = len(first_psbt.inputs) == 1\n    first_psbt = first_psbt.serialize()\n    second_psbt = second_psbt.serialize()\n    first_sign_res = self.do_command(self.dev_args + ['signtx', first_psbt])\n    self.assertTrue(single_input == self.wrpc.finalizepsbt(first_sign_res[\n        'psbt'])['complete'])\n    second_sign_res = self.do_command(self.dev_args + ['signtx', second_psbt])\n    if 'psbt' in second_sign_res:\n        self.assertTrue(not self.wrpc.finalizepsbt(second_sign_res['psbt'])\n            ['complete'])\n        combined_psbt = self.wrpc.combinepsbt([first_sign_res['psbt'],\n            second_sign_res['psbt']])\n    else:\n        self.assertTrue('error' in second_sign_res)\n        combined_psbt = first_sign_res['psbt']\n    finalize_res = self.wrpc.finalizepsbt(combined_psbt)\n    self.assertTrue(finalize_res['complete'])\n    self.assertTrue(self.wrpc.testmempoolaccept([finalize_res['hex']])[0][\n        'allowed'])\nreturn finalize_res['hex']\n"
}