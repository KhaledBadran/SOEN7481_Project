{
    "functionName": "test_comparison",
    "className": "TestSplitKey",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_core_&_secrets_&_test_split_key.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that the equality/inequality operators return True/False when\n        comparing two SplitKey objects with the same data.\n        \"\"\"\na = secrets.SplitKey()\nb = secrets.SplitKey()\nself.assertTrue(a == b)\nself.assertTrue(b == a)\nself.assertFalse(a != b)\nself.assertFalse(b != a)\na = secrets.SplitKey(split_key_parts=4, key_part_identifier=1,\n    split_key_threshold=2, split_key_method=enums.SplitKeyMethod.\n    POLYNOMIAL_SHARING_GF_2_8, prime_field_size=104729, key_block=objects.\n    KeyBlock(key_format_type=misc.KeyFormatType(enums.KeyFormatType.RAW),\n    key_value=objects.KeyValue(key_material=objects.KeyMaterial(value=\n    b'f\\xc4jwT\\xf9M\\xe4 \\xc7\\xb1\\xa7\\xff\\xf5\\xecV')),\n    cryptographic_algorithm=primitives.Enumeration(enums.\n    CryptographicAlgorithm, value=enums.CryptographicAlgorithm.AES, tag=\n    enums.Tags.CRYPTOGRAPHIC_ALGORITHM), cryptographic_length=primitives.\n    Integer(value=128, tag=enums.Tags.CRYPTOGRAPHIC_LENGTH)))\nb = secrets.SplitKey(split_key_parts=4, key_part_identifier=1,\n    split_key_threshold=2, split_key_method=enums.SplitKeyMethod.\n    POLYNOMIAL_SHARING_GF_2_8, prime_field_size=104729, key_block=objects.\n    KeyBlock(key_format_type=misc.KeyFormatType(enums.KeyFormatType.RAW),\n    key_value=objects.KeyValue(key_material=objects.KeyMaterial(value=\n    b'f\\xc4jwT\\xf9M\\xe4 \\xc7\\xb1\\xa7\\xff\\xf5\\xecV')),\n    cryptographic_algorithm=primitives.Enumeration(enums.\n    CryptographicAlgorithm, value=enums.CryptographicAlgorithm.AES, tag=\n    enums.Tags.CRYPTOGRAPHIC_ALGORITHM), cryptographic_length=primitives.\n    Integer(value=128, tag=enums.Tags.CRYPTOGRAPHIC_LENGTH)))\nself.assertTrue(a == b)\nself.assertTrue(b == a)\nself.assertFalse(a != b)\nself.assertFalse(b != a)\n"
}