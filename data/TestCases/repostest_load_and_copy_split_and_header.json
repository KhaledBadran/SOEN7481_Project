{
    "functionName": "test_load_and_copy_split_and_header",
    "className": null,
    "fileName": "/capitalone_&_Data-Load-and-Copy-using-Python/tests_&_test_redshift.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "def reset_mocks():\n    mock_split_file.reset_mock()\n    mock_compress_file_list.reset_mock()\n    mock_s3_upload.reset_mock()\n    mock_s3_delete.reset_mock()\n    mock_rs_copy.reset_mock()\n    mock_remove.reset_mock()\nwith mock.patch(dbapi.__name__ + '.connect') as mock_connect:\n    r = Redshift(dbapi=dbapi, **credentials)\n    r.connect()\n    expected_calls_no_folder = [mock.call('/path/local_file.0', 's3_bucket',\n        'local_file.0'), mock.call('/path/local_file.1', 's3_bucket',\n        'local_file.1'), mock.call('/path/local_file.2', 's3_bucket',\n        'local_file.2')]\n    expected_calls_no_folder_gzip = [mock.call('/path/local_file.0.gz',\n        's3_bucket', 'local_file.0.gz'), mock.call('/path/local_file.1.gz',\n        's3_bucket', 'local_file.1.gz'), mock.call('/path/local_file.2.gz',\n        's3_bucket', 'local_file.2.gz')]\n    expected_calls_folder = [mock.call('/path/local_file.0', 's3_bucket',\n        'test/local_file.0'), mock.call('/path/local_file.1', 's3_bucket',\n        'test/local_file.1'), mock.call('/path/local_file.2', 's3_bucket',\n        'test/local_file.2')]\n    expected_calls_folder_gzip = [mock.call('/path/local_file.0.gz',\n        's3_bucket', 'test/local_file.0.gz'), mock.call(\n        '/path/local_file.1.gz', 's3_bucket', 'test/local_file.1.gz'), mock\n        .call('/path/local_file.2.gz', 's3_bucket', 'test/local_file.2.gz')]\n    mock_split_file.return_value = ['/path/local_file.txt']\n    mock_compress_file_list.return_value = ['/path/local_file.txt.gz']\n    r.load_and_copy('/path/local_file.txt', 's3_bucket', 'table_name',\n        delim='|')\n    assert mock_split_file.called\n    mock_compress_file_list.assert_called_with(['/path/local_file.txt'])\n    mock_s3_upload.assert_called_with('/path/local_file.txt.gz',\n        's3_bucket', 'local_file.txt.gz')\n    mock_rs_copy.assert_called_with('table_name',\n        's3://s3_bucket/local_file', '|', copy_options=['GZIP'])\n    assert not mock_s3_delete.called, 'Only delete when explicit'\n    reset_mocks()\n    r.load_and_copy('/path/local_file.txt', 's3_bucket', 'table_name',\n        delim='|', copy_options=['IGNOREHEADER as 1'])\n    assert mock_split_file.called\n    mock_compress_file_list.assert_called_with(['/path/local_file.txt'])\n    mock_s3_upload.assert_called_with('/path/local_file.txt.gz',\n        's3_bucket', 'local_file.txt.gz')\n    mock_rs_copy.assert_called_with('table_name',\n        's3://s3_bucket/local_file', '|', copy_options=['IGNOREHEADER as 1',\n        'GZIP'])\n    assert not mock_s3_delete.called, 'Only delete when explicit'\n    reset_mocks()\n    mock_split_file.return_value = ['/path/local_file.0',\n        '/path/local_file.1', '/path/local_file.2']\n    mock_compress_file_list.return_value = ['/path/local_file.0.gz',\n        '/path/local_file.1.gz', '/path/local_file.2.gz']\n    r.load_and_copy('/path/local_file', 's3_bucket', 'table_name', delim=\n        '|', splits=3, delete_s3_after=True)\n    mock_split_file.assert_called_with('/path/local_file',\n        '/path/local_file', splits=3, ignore_header=0)\n    mock_compress_file_list.assert_called_with(['/path/local_file.0',\n        '/path/local_file.1', '/path/local_file.2'])\n    mock_s3_upload.assert_has_calls(expected_calls_no_folder_gzip)\n    mock_rs_copy.assert_called_with('table_name',\n        's3://s3_bucket/local_file', '|', copy_options=['GZIP'])\n    assert mock_s3_delete.called_with('s3_bucket', 'local_file.0.gz')\n    assert mock_s3_delete.called_with('s3_bucket', 'local_file.1.gz')\n    assert mock_s3_delete.called_with('s3_bucket', 'local_file.2.gz')\n    reset_mocks()\n    mock_split_file.return_value = ['/path/local_file.0',\n        '/path/local_file.1', '/path/local_file.2']\n    mock_compress_file_list.return_value = ['/path/local_file.0.gz',\n        '/path/local_file.1.gz', '/path/local_file.2.gz']\n    r.load_and_copy('/path/local_file', 's3_bucket', 'table_name', delim=\n        '|', copy_options=['IGNOREHEADER as 1'], splits=3, delete_s3_after=True\n        )\n    mock_split_file.assert_called_with('/path/local_file',\n        '/path/local_file', splits=3, ignore_header=1)\n    mock_compress_file_list.assert_called_with(['/path/local_file.0',\n        '/path/local_file.1', '/path/local_file.2'])\n    mock_s3_upload.assert_has_calls(expected_calls_no_folder_gzip)\n    mock_rs_copy.assert_called_with('table_name',\n        's3://s3_bucket/local_file', '|', copy_options=['GZIP'])\n    assert mock_s3_delete.called_with('s3_bucket', 'local_file.0.gz')\n    assert mock_s3_delete.called_with('s3_bucket', 'local_file.1.gz')\n    assert mock_s3_delete.called_with('s3_bucket', 'local_file.2.gz')\npytest.mark.parametrize('dbapi', DBAPIS)mock.patch('locopy.utility.os.remove')mock.patch('locopy.redshift.Redshift.copy')mock.patch('locopy.redshift.Redshift.upload_to_s3')mock.patch('locopy.redshift.Redshift.delete_from_s3')mock.patch('locopy.s3.Session')mock.patch('locopy.redshift.compress_file_list')mock.patch('locopy.redshift.split_file')"
}