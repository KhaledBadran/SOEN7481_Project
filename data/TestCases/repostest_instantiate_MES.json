{
    "functionName": "test_instantiate_MES",
    "className": "MaxValueEntropySearchTest",
    "fileName": "/facebook_&_Ax/ax_&_models_&_tests_&_test_botorch_mes.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "model = MaxValueEntropySearch()\nmodel.fit(Xs=self.Xs, Ys=self.Ys, Yvars=self.Yvars, bounds=self.bounds,\n    feature_names=self.feature_names, metric_names=self.metric_names,\n    task_features=[], fidelity_features=[])\nX_dummy = torch.ones(1, 3, dtype=self.dtype, device=self.device)\ncandidate_set = torch.rand(10, 3, dtype=self.dtype, device=self.device)\nacq_function = _instantiate_MES(model=model.model, candidate_set=candidate_set)\nself.assertIsInstance(acq_function, qMaxValueEntropy)\nself.assertIsInstance(acq_function.sampler, SobolQMCNormalSampler)\nself.assertIsInstance(acq_function.fantasies_sampler, SobolQMCNormalSampler)\nself.assertEqual(acq_function.num_fantasies, 16)\nself.assertEqual(acq_function.num_mv_samples, 10)\nself.assertEqual(acq_function.use_gumbel, True)\nself.assertEqual(acq_function.maximize, True)\nacq_function = _instantiate_MES(model=model.model, candidate_set=\n    candidate_set, X_pending=X_dummy)\nself.assertTrue(torch.equal(acq_function.X_pending, X_dummy))\nmodel = MaxValueEntropySearch()\nmodel.fit(Xs=self.Xs, Ys=self.Ys, Yvars=self.Yvars, bounds=self.bounds,\n    task_features=[], feature_names=self.feature_names, metric_names=self.\n    metric_names, fidelity_features=[-1])\ncandidate_set = torch.rand(10, 3, dtype=self.dtype, device=self.device)\nacq_function = _instantiate_MES(model=model.model, candidate_set=\n    candidate_set, target_fidelities={(2): 1.0})\nself.assertIsInstance(acq_function, qMultiFidelityMaxValueEntropy)\nself.assertEqual(acq_function.expand(self.Xs), self.Xs)\nwith self.assertRaises(RuntimeError):\n    _instantiate_MES(model=model.model, candidate_set=candidate_set,\n        target_fidelities={(1): 1.0}, fidelity_weights={(2): 1.0})\n"
}