{
    "functionName": "test_set_residual_modes",
    "className": "OrdinaryPercolationTest",
    "fileName": "/pmeal_&_OpenPNM/tests_&_unit_&_algorithms_&_OrdinaryPercolationTest.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "self.alg = op.algorithms.OrdinaryPercolation(network=self.net)\nself.alg.setup(phase=self.water)\nPs = np.random.randint(0, self.net.Np, 10)\nTs = self.net.find_neighbor_pores(pores=Ps)\nself.alg.set_residual(pores=Ps, throats=Ts)\nassert np.sum(self.alg['pore.residual']) == np.size(np.unique(Ps))\nassert np.sum(self.alg['throat.residual']) == np.size(np.unique(Ts))\nPs = np.random.randint(0, self.net.Np, 10)\nTs = self.net.find_neighbor_pores(pores=Ps)\nself.alg.set_residual(pores=Ps, throats=Ts)\nassert np.sum(self.alg['pore.residual']) > np.size(np.unique(Ps))\nassert np.sum(self.alg['throat.residual']) > np.size(np.unique(Ts))\nPs = np.random.randint(0, self.net.Np, 10)\nTs = self.net.find_neighbor_pores(pores=Ps)\nself.alg.set_residual(pores=Ps, throats=Ts, overwrite=True)\nassert np.sum(self.alg['pore.residual']) == np.size(np.unique(Ps))\nassert np.sum(self.alg['throat.residual']) == np.size(np.unique(Ts))\nself.alg.set_residual(pores=[], throats=[], overwrite=True)\nassert np.sum(self.alg['pore.residual']) == 0\nself.alg.set_residual(pores=Ps, throats=Ts)\nself.alg.set_residual(overwrite=True)\nassert np.sum(self.alg['pore.residual']) == 0\n"
}