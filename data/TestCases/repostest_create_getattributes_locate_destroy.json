{
    "functionName": "test_create_getattributes_locate_destroy",
    "className": "TestProxyKmipClientIntegration",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_integration_&_services_&_test_proxykmipclient.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that the ProxyKmipClient can create symmetric keys and then\n        locate those keys using their attributes.\n        \"\"\"\nstart_time = int(time.time())\ntime.sleep(2)\na_id = self.client.create(enums.CryptographicAlgorithm.AES, 256)\ntime.sleep(2)\nmid_time = int(time.time())\ntime.sleep(2)\nb_id = self.client.create(enums.CryptographicAlgorithm.IDEA, 128)\ntime.sleep(2)\nend_time = int(time.time())\nself.assertIsInstance(a_id, str)\nself.assertIsInstance(b_id, str)\nresult_id, result_attributes = self.client.get_attributes(uid=a_id,\n    attribute_names=['Initial Date'])\nself.assertEqual(1, len(result_attributes))\nself.assertEqual('Initial Date', result_attributes[0].attribute_name.value)\ninitial_date_a = result_attributes[0].attribute_value.value\nresult_id, result_attributes = self.client.get_attributes(uid=b_id,\n    attribute_names=['Initial Date'])\nself.assertEqual(1, len(result_attributes))\nself.assertEqual('Initial Date', result_attributes[0].attribute_name.value)\ninitial_date_b = result_attributes[0].attribute_value.value\nresult = self.client.locate(attributes=[self.attribute_factory.\n    create_attribute(enums.AttributeType.INITIAL_DATE, initial_date_a)])\nself.assertEqual(1, len(result))\nself.assertEqual(a_id, result[0])\nresult = self.client.locate(attributes=[self.attribute_factory.\n    create_attribute(enums.AttributeType.INITIAL_DATE, initial_date_b)])\nself.assertEqual(1, len(result))\nself.assertEqual(b_id, result[0])\nresult = self.client.locate(attributes=[self.attribute_factory.\n    create_attribute(enums.AttributeType.INITIAL_DATE, start_time), self.\n    attribute_factory.create_attribute(enums.AttributeType.INITIAL_DATE,\n    mid_time)])\nself.assertEqual(1, len(result))\nself.assertEqual(a_id, result[0])\nresult = self.client.locate(attributes=[self.attribute_factory.\n    create_attribute(enums.AttributeType.INITIAL_DATE, mid_time), self.\n    attribute_factory.create_attribute(enums.AttributeType.INITIAL_DATE,\n    end_time)])\nself.assertEqual(1, len(result))\nself.assertEqual(b_id, result[0])\nresult = self.client.locate(attributes=[self.attribute_factory.\n    create_attribute(enums.AttributeType.INITIAL_DATE, start_time), self.\n    attribute_factory.create_attribute(enums.AttributeType.INITIAL_DATE,\n    end_time)])\nself.assertEqual(2, len(result))\nself.assertIn(a_id, result)\nself.assertIn(b_id, result)\nresult = self.client.locate(attributes=[self.attribute_factory.\n    create_attribute(enums.AttributeType.STATE, enums.State.PRE_ACTIVE)])\nself.assertEqual(2, len(result))\nself.assertIn(a_id, result)\nself.assertIn(b_id, result)\nresult = self.client.locate(attributes=[self.attribute_factory.\n    create_attribute(enums.AttributeType.OBJECT_TYPE, enums.ObjectType.\n    SYMMETRIC_KEY)])\nself.assertEqual(2, len(result))\nself.assertIn(a_id, result)\nself.assertIn(b_id, result)\nresult = self.client.locate(attributes=[self.attribute_factory.\n    create_attribute(enums.AttributeType.CRYPTOGRAPHIC_ALGORITHM, enums.\n    CryptographicAlgorithm.AES)])\nself.assertEqual(1, len(result))\nself.assertIn(a_id, result)\nresult = self.client.locate(attributes=[self.attribute_factory.\n    create_attribute(enums.AttributeType.CRYPTOGRAPHIC_ALGORITHM, enums.\n    CryptographicAlgorithm.IDEA)])\nself.assertEqual(1, len(result))\nself.assertIn(b_id, result)\nresult = self.client.locate(attributes=[self.attribute_factory.\n    create_attribute(enums.AttributeType.CRYPTOGRAPHIC_ALGORITHM, enums.\n    CryptographicAlgorithm.RSA)])\nself.assertEqual(0, len(result))\nresult = self.client.locate(attributes=[self.attribute_factory.\n    create_attribute(enums.AttributeType.CRYPTOGRAPHIC_LENGTH, 128)])\nself.assertEqual(1, len(result))\nself.assertIn(b_id, result)\nresult = self.client.locate(attributes=[self.attribute_factory.\n    create_attribute(enums.AttributeType.CRYPTOGRAPHIC_LENGTH, 256)])\nself.assertEqual(1, len(result))\nself.assertIn(a_id, result)\nresult = self.client.locate(attributes=[self.attribute_factory.\n    create_attribute(enums.AttributeType.CRYPTOGRAPHIC_LENGTH, 2048)])\nself.assertEqual(0, len(result))\nresult = self.client.locate(attributes=[self.attribute_factory.\n    create_attribute(enums.AttributeType.UNIQUE_IDENTIFIER, a_id)])\nself.assertEqual(1, len(result))\nself.assertIn(a_id, result)\nresult = self.client.locate(attributes=[self.attribute_factory.\n    create_attribute(enums.AttributeType.UNIQUE_IDENTIFIER, b_id)])\nself.assertEqual(1, len(result))\nself.assertIn(b_id, result)\nresult = self.client.locate(attributes=[self.attribute_factory.\n    create_attribute(enums.AttributeType.UNIQUE_IDENTIFIER, 'unknown')])\nself.assertEqual(0, len(result))\nresult = self.client.locate(attributes=[self.attribute_factory.\n    create_attribute(enums.AttributeType.OPERATION_POLICY_NAME, 'default')])\nself.assertEqual(2, len(result))\nself.assertIn(a_id, result)\nself.assertIn(b_id, result)\nresult = self.client.locate(attributes=[self.attribute_factory.\n    create_attribute(enums.AttributeType.OPERATION_POLICY_NAME, 'unknown')])\nself.assertEqual(0, len(result))\nresult = self.client.locate(offset_items=1)\nself.assertEqual(1, len(result))\nself.assertIn(a_id, result)\nresult = self.client.locate(maximum_items=1)\nself.assertEqual(1, len(result))\nself.assertIn(b_id, result)\nresult = self.client.locate(offset_items=1, maximum_items=1)\nself.assertEqual(1, len(result))\nself.assertIn(a_id, result)\nmask = [enums.CryptographicUsageMask.ENCRYPT]\nresult = self.client.locate(attributes=[self.attribute_factory.\n    create_attribute(enums.AttributeType.CRYPTOGRAPHIC_USAGE_MASK, mask)])\nself.assertEqual(2, len(result))\nself.assertIn(a_id, result)\nself.assertIn(b_id, result)\nmask.append(enums.CryptographicUsageMask.DECRYPT)\nresult = self.client.locate(attributes=[self.attribute_factory.\n    create_attribute(enums.AttributeType.CRYPTOGRAPHIC_USAGE_MASK, mask)])\nself.assertEqual(2, len(result))\nself.assertIn(a_id, result)\nself.assertIn(b_id, result)\nmask.append(enums.CryptographicUsageMask.SIGN)\nresult = self.client.locate(attributes=[self.attribute_factory.\n    create_attribute(enums.AttributeType.CRYPTOGRAPHIC_USAGE_MASK, mask)])\nself.assertEqual(0, len(result))\nmask = [enums.CryptographicUsageMask.EXPORT]\nresult = self.client.locate(attributes=[self.attribute_factory.\n    create_attribute(enums.AttributeType.CRYPTOGRAPHIC_USAGE_MASK, mask)])\nself.assertEqual(0, len(result))\nself.client.destroy(a_id)\nself.client.destroy(b_id)\n"
}