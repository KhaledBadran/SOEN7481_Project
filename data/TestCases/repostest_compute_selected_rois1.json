{
    "functionName": "test_compute_selected_rois1",
    "className": "TestComputeSelectedROIs",
    "fileName": "/NSLS-II_&_PyXRF/pyxrf_&_core_&_tests_&_test_map_processing.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Basic functionality of `compute_selected_rois`.\n        Tests are run using global Dask clients to inprove testing speed.\n        \"\"\"\nglobal_client = self.client\nadd_pts_before, add_pts_after = add_pts\nft = _FitXRFMapTesting(dataset_params=dataset_params, use_snip=use_snip,\n    add_pts_before=add_pts_before, add_pts_after=add_pts_after)\ndata_dask = _array_numpy_to_dask(ft.data_input, chunk_pixels=4, n_chunks_min=1)\ndata = _create_xrf_data(data_dask, data_representation, tmpdir)\nn_pts = ft.n_spectrum_points\nenergy_min, energy_max = 3.1, 12.2\nenergy_step = (energy_max - energy_min) / (n_pts - 1)\nroi_dict = {'roi-1': (2.5, 3.5), 'roi-2': (3.5, 4.8), 'roi-3': (5.2, 7.4),\n    'roi-4': (6.0, 6.0), 'roi-5': (6.0, 5.5), 'roi-6': (10.1, 15.0)}\nsnip_param = {'e_offset': energy_min - energy_step * add_pts_before,\n    'e_linear': energy_step, 'e_quadratic': 0, 'b_width': 2.0}\ndata_out = compute_selected_rois(data, data_sel_indices=ft.data_sel_indices,\n    roi_dict=roi_dict, snip_param=snip_param, use_snip=use_snip, client=\n    global_client)\nft.verify_roi_output(data_out=data_out, roi_dict=roi_dict, snip_param=\n    snip_param)\npytest.mark.parametrize('data_representation', ['numpy_array', 'dask_array',\n    'hdf5_file_dset'])pytest.mark.parametrize('dataset_params', [{'n_data_dimensions': (10, 10)},\n    {'n_data_dimensions': (9, 11)}, {'n_data_dimensions': (1, 100)}, {\n    'n_data_dimensions': (100, 1)}])pytest.mark.parametrize('add_pts', [(0, 0), (50, 100)])pytest.mark.parametrize('use_snip', [False, True])"
}