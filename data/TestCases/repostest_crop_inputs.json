{
    "functionName": "test_crop_inputs",
    "className": "TestAutocrop",
    "fileName": "/Lasagne_&_Lasagne/lasagne_&_tests_&_layers_&_test_merge.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "from lasagne.layers.merge import autocrop\nfrom numpy.testing import assert_array_equal\ncrop_0 = None\ncrop_1 = [None, 'lower', 'center', 'upper']\ncrop_l = ['lower', 'lower', 'lower', 'lower']\ncrop_c = ['center', 'center', 'center', 'center']\ncrop_u = ['upper', 'upper', 'upper', 'upper']\ncrop_x = ['lower', 'lower']\ncrop_bad = ['lower', 'lower', 'bad', 'worse']\nx0 = numpy.random.random((2, 3, 5, 7))\nx1 = numpy.random.random((1, 2, 3, 4))\nx2 = numpy.random.random((6, 3, 4, 2))\ndef crop_test(cropping, inputs, expected):\n    inputs = [theano.shared(x) for x in inputs]\n    outs = autocrop(inputs, cropping)\n    outs = [o.eval() for o in outs]\n    assert len(outs) == len(expected)\n    for o, e in zip(outs, expected):\n        assert_array_equal(o, e)\ncrop_test(crop_0, [x0, x1], [x0, x1])\ncrop_test(crop_1, [x0, x1], [x0[:, :2, 1:4, 3:], x1[:, :, :, :]])\ncrop_test(crop_l, [x0, x1], [x0[:1, :2, :3, :4], x1[:, :, :, :]])\ncrop_test(crop_c, [x0, x1], [x0[:1, :2, 1:4, 1:5], x1[:, :, :, :]])\ncrop_test(crop_u, [x0, x1], [x0[1:, 1:, 2:, 3:], x1[:, :, :, :]])\ncrop_test(crop_0, [x0, x2], [x0, x2])\ncrop_test(crop_1, [x0, x2], [x0[:, :, :4, 5:], x2[:, :, :, :]])\ncrop_test(crop_l, [x0, x2], [x0[:, :, :4, :2], x2[:2, :, :, :]])\ncrop_test(crop_c, [x0, x2], [x0[:, :, :4, 2:4], x2[2:4, :, :, :]])\ncrop_test(crop_u, [x0, x2], [x0[:, :, 1:, 5:], x2[4:, :, :, :]])\ncrop_test(crop_0, [x0, x1, x2], [x0, x1, x2])\ncrop_test(crop_1, [x0, x1, x2], [x0[:, :2, 1:4, 5:], x1[:, :, :, 2:], x2[:,\n    :2, :3, :]])\ncrop_test(crop_l, [x0, x1, x2], [x0[:1, :2, :3, :2], x1[:, :, :, :2], x2[:1,\n    :2, :3, :]])\ncrop_test(crop_c, [x0, x1, x2], [x0[:1, :2, 1:4, 2:4], x1[:, :, :, 1:3], x2\n    [2:3, :2, :3, :]])\ncrop_test(crop_u, [x0, x1, x2], [x0[1:, 1:, 2:, 5:], x1[:, :, :, 2:], x2[5:,\n    1:, 1:, :]])\ncrop_test(crop_x, [x0, x1, x2], [x0[:1, :2, :, :], x1[:1, :2, :, :], x2[:1,\n    :2, :, :]])\ncrop_test(crop_x, [x0, x1, x2, x0, x1, x2], [x0[:1, :2, :, :], x1[:1, :2, :,\n    :], x2[:1, :2, :, :], x0[:1, :2, :, :], x1[:1, :2, :, :], x2[:1, :2, :, :]]\n    )\nwith pytest.raises(ValueError):\n    crop_test(crop_bad, [x0, x1, x2], [x0[:1, :2, :, :], x1[:1, :2, :, :],\n        x2[:1, :2, :, :]])\nwith pytest.raises(ValueError):\n    crop_test(crop_bad, [x0[:, :, :, (0)], x1, x2[:, :, :, :, (None)]], [x0\n        [:1, :2, :, :], x1[:1, :2, :, :], x2[:1, :2, :, :]])\n"
}