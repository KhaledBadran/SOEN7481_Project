{
    "functionName": "test_left_context",
    "className": "TestContexts",
    "fileName": "/apmoore1_&_Bella/tests_&_test_contexts.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Tests :py:func:`bella.contexts.left_context`\n        \"\"\"\nsingle_left = [['This is a fake '], ['I had a great '], ['I ']]\nfor index, test_context in enumerate(self.single_context):\n    test_text = test_context['text']\n    test_target = test_context['target']\n    correct_context = single_left[index]\n    left_string = context(test_context, 'left', inc_target=False)\n    msg = (\n        'Cannot get the left context of target {} text {} which should be {} and not {}'\n        .format(test_target, test_text, correct_context, left_string))\n    self.assertEqual(correct_context, left_string, msg=msg)\nsingle_left = [['This is a fake news article'], ['I had a great day'], [\n    'I cycled']]\nfor index, test_context in enumerate(self.single_context):\n    test_text = test_context['text']\n    test_target = test_context['target']\n    correct_context = single_left[index]\n    left_string = context(test_context, 'left', inc_target=True)\n    msg = (\n        'Cannot get the left context of target {} text {} including the target which should be {} and not {}'\n        .format(test_target, test_text, correct_context, left_string))\n    self.assertEqual(correct_context, left_string, msg=msg)\nmulti_left = [['This is a fake ',\n    'This is a fake news article that is to represent a Tweet!!!! and it was an awful '\n    ], ['I had a great ',\n    'I had a great Day however I did not get much work done in the ']]\nfor index, test_context in enumerate(self.multi_contexts):\n    test_text = test_context['text']\n    test_target = test_context['target']\n    correct_context = multi_left[index]\n    left_string = context(test_context, 'left', inc_target=False)\n    msg = (\n        'Cannot get the left context of target {} text {} which should be {} and not {}'\n        .format(test_target, test_text, correct_context, left_string))\n    self.assertEqual(correct_context, left_string, msg=msg)\nmulti_left = [['This is a fake news article',\n    'This is a fake news article that is to represent a Tweet!!!! and it was an awful News Article'\n    ], ['I had a great Day',\n    'I had a great Day however I did not get much work done in the day']]\nfor index, test_context in enumerate(self.multi_contexts):\n    test_text = test_context['text']\n    test_target = test_context['target']\n    correct_context = multi_left[index]\n    left_string = context(test_context, 'left', inc_target=True)\n    msg = (\n        'Cannot get the left context of target {} text {} including the target which should be {} and not {}'\n        .format(test_target, test_text, correct_context, left_string))\n    self.assertEqual(correct_context, left_string, msg=msg)\n"
}