{
    "functionName": "test_render_datapoint",
    "className": "TestDatasetExporter",
    "fileName": "/vfdev-5_&_ImageDatasetViz/tests_&_test_dataset_exporter.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "img = ((0, 0, 210) * np.ones((256, 256, 3))).astype(np.uint8)\ntarget1 = 'test label'\nres = render_datapoint(img, target1, text_color=(0, 123, 0), text_size=10)\nassert isinstance(res, Image.Image)\nnp_res = np.asarray(res)\nunique_pixels = np_res.reshape(-1, 3).tolist()\nunique_pixels = set([tuple(p) for p in unique_pixels])\nassert (0, 0, 210) in unique_pixels\nassert (0, 123, 0) in unique_pixels\nimg = ((0, 0, 210) * np.ones((256, 256, 3))).astype(np.uint8)\ntarget2 = np.zeros((256, 256, 3), dtype=np.uint8)\ntarget2[34:145, 56:123, :] = 255\nalpha = 0.5\nres = render_datapoint(img, target2, blend_alpha=alpha)\nassert isinstance(res, Image.Image)\nnp_res = np.asarray(res)\nunique_pixels = np_res.reshape(-1, 3).tolist()\nunique_pixels = set([tuple(p) for p in unique_pixels])\nassert (int(255 * alpha), int(255 * alpha), int(210 * (1.0 - alpha) + 255 *\n    alpha)) in unique_pixels\nassert (0, 0, 210) in unique_pixels\nimg = ((0, 0, 255) * np.ones((256, 256, 3))).astype(np.uint8)\ntarget3 = np.array([[10, 10], [55, 10], [55, 77], [10, 77]])\nres = render_datapoint(img, target3, geom_color=(255, 0, 0))\nassert isinstance(res, Image.Image)\nnp_res = np.asarray(res)\nunique_pixels = np_res.reshape(-1, 3).tolist()\nunique_pixels = set([tuple(p) for p in unique_pixels])\nassert (0, 0, 255) in unique_pixels\nassert (255, 0, 0) in unique_pixels\nimg = ((0, 0, 210) * np.ones((256, 256, 3))).astype(np.uint8)\ntarget4 = np.array([[10, 10], [55, 10], [55, 77], [10, 77]]), 'test'\nres = render_datapoint(img, target4, geom_color=(123, 0, 0))\nassert isinstance(res, Image.Image)\nnp_res = np.asarray(res)\nunique_pixels = np_res.reshape(-1, 3).tolist()\nunique_pixels = set([tuple(p) for p in unique_pixels])\nassert (0, 0, 210) in unique_pixels\nassert (123, 0, 0) in unique_pixels\nassert (255, 255, 255) in unique_pixels\nassert (0, 0, 0) in unique_pixels\nres = render_datapoint(img, [target2, target1, target3, target4],\n    text_color=(0, 123, 0), text_size=10, geom_color=(234, 0, 0),\n    blend_alpha=alpha)\nassert isinstance(res, Image.Image)\nnp_res = np.asarray(res)\nunique_pixels = np_res.reshape(-1, 3).tolist()\nunique_pixels = set([tuple(p) for p in unique_pixels])\nassert (int(255 * alpha), int(255 * alpha), int(210 * (1.0 - alpha) + 255 *\n    alpha)) in unique_pixels\nassert (0, 0, 210) in unique_pixels\nassert (0, 123, 0) in unique_pixels\nassert (234, 0, 0) in unique_pixels\nassert (255, 255, 255) in unique_pixels\nassert (0, 0, 0) in unique_pixels\n"
}