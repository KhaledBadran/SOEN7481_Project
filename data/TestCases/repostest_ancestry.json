{
    "functionName": "test_ancestry",
    "className": "DAG",
    "fileName": "/al-niessner_&_DAWGIE/Test_&_test_05.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "nodes = self._unravel(self.__dag.vt)\nancestors = {'disk.engine.test.image': ['network.analyzer.test.image',\n    'network.engine.test.image'], 'feedback.command.request.voltage': [],\n    'feedback.control.law.P': ['feedback.command.request.voltage',\n    'feedback.sensor.measured.voltage', 'feedback.sum.total.voltage'],\n    'feedback.control.law.I': ['feedback.command.request.voltage',\n    'feedback.sensor.measured.voltage', 'feedback.sum.total.voltage'],\n    'feedback.control.law.D': ['feedback.command.request.voltage',\n    'feedback.sensor.measured.voltage', 'feedback.sum.total.voltage'],\n    'feedback.control.response.accum': ['feedback.command.request.voltage',\n    'feedback.sensor.measured.voltage', 'feedback.sum.total.voltage'],\n    'feedback.control.response.voltage': [\n    'feedback.command.request.voltage', 'feedback.sensor.measured.voltage',\n    'feedback.sum.total.voltage'], 'feedback.sensor.measured.voltage': [],\n    'feedback.sum.total.voltage': ['feedback.command.request.voltage',\n    'feedback.sensor.measured.voltage'], 'feedback.model.voltage.value': [\n    'feedback.command.request.voltage', 'feedback.control.response.voltage',\n    'feedback.sensor.measured.voltage', 'feedback.sum.total.voltage'],\n    'feedback.output.actual.voltage': ['feedback.command.request.voltage',\n    'feedback.control.response.voltage', 'feedback.model.voltage.value',\n    'feedback.sensor.measured.voltage', 'feedback.sum.total.voltage'],\n    'network.analyzer.test.image': [], 'network.engine.test.image': [\n    'network.analyzer.test.image'], 'noio.engine.test.image': [\n    'disk.engine.test.image', 'network.analyzer.test.image',\n    'network.engine.test.image'], 'review.aspect.test.image': [\n    'network.analyzer.test.image'], 'review.history.test.image': [\n    'network.analyzer.test.image']}\nself.assertEqual(16, len(nodes))\nfor node in nodes:\n    self.assertTrue(node.tag in ancestors)\n    print(node.tag, sorted([a for a in node.get('ancestry')]))\n    self.assertEqual(ancestors[node.tag], sorted([a for a in node.get(\n        'ancestry')]))\nreturn\n"
}