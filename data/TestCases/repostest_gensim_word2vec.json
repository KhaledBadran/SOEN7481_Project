{
    "functionName": "test_gensim_word2vec",
    "className": "TestWordVectors",
    "fileName": "/apmoore1_&_Bella/tests_&_test_word_vectors.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Tests the :py:class:`bella.word_vectors.GensimVectors`\n        \"\"\"\nvo_zhang = VoVectors(skip_conf=True)\nself.assertEqual(vo_zhang.vector_size, 100, msg=\n    'Vector size should be equal to 100 not {}'.format(vo_zhang.vector_size))\nzero_vector = np.zeros(100)\noov_word = 'thisssssdoesssssnotexists'\noov_vector = vo_zhang.lookup_vector(oov_word)\nself.assertEqual(True, np.array_equal(oov_vector, zero_vector), msg=\n    'This word {} should not exists and have a zero vector and not {}'.\n    format(oov_word, oov_vector))\nthe_vector = vo_zhang.lookup_vector('the')\nself.assertEqual(False, np.array_equal(the_vector, zero_vector), msg=\n    'The word `the` should have a non-zero vector.')\nwith self.assertRaises(ValueError, msg=\n    'Should raise a value for any paramthat is not a String and this is a list'\n    ):\n    vo_zhang.lookup_vector(['the'])\nindex_word = vo_zhang.index2word\nword_index = vo_zhang.word2index\nthe_index = word_index['the']\nself.assertEqual('the', index_word[the_index], msg=\n    'index2word and word2index do not match for the word `the`')\nindex_vector = vo_zhang.index2vector\nthe_vectors_match = np.array_equal(index_vector[the_index], vo_zhang.\n    lookup_vector('the'))\nself.assertEqual(True, the_vectors_match, msg=\n    'index2vector does not match lookup_vector func for the word `the`')\ntest_file_path = 'this'\nwith self.assertRaises(Exception, msg=\n    'The file path should have no saved word vector file {} and there is no training data'\n    .format(test_file_path)):\n    GensimVectors(test_file_path, 'fake data', model='word2vec')\nwith self.assertRaises(Exception, msg=\n    'Should not accept neither no saved word vector model nor no training data'\n    ):\n    GensimVectors(None, None, model='word2vec')\nwith self.assertRaises(Exception, msg=\n    'Should only accept the following models {}'.format(['word2vec',\n    'fasttext'])):\n    GensimVectors(None, [['hello', 'how', 'are']], model='nothing', min_count=1\n        )\ndata_path = os.path.abspath(read_config('sherlock_holmes_test', CONFIG_FP))\nwith open(data_path, 'r') as data:\n    data = map(tokenisers.whitespace, data)\n    with tempfile.NamedTemporaryFile() as temp_file:\n        data_vector = GensimVectors(temp_file.name, data, model='word2vec',\n            size=200, name='sherlock')\n        d_vec_size = data_vector.vector_size\n        self.assertEqual(d_vec_size, 200, msg=\n            'Vector size should be 200 not {}'.format(d_vec_size))\n        sherlock_vec = data_vector.lookup_vector('sherlock')\n        self.assertEqual(False, np.array_equal(zero_vector, sherlock_vec),\n            msg='Sherlock should be a non-zero vector')\n        saved_vector = GensimVectors(temp_file.name, None, model='word2vec')\n        s_vec_size = saved_vector.vector_size\n        self.assertEqual(s_vec_size, 200, msg=\n            'Vector size should be 200 not {}'.format(s_vec_size))\n        equal_sherlocks = np.array_equal(sherlock_vec, saved_vector.\n            lookup_vector('sherlock'))\n        self.assertEqual(True, equal_sherlocks, msg=\n            'The saved model and the trained model should have the same vectors'\n            )\n        self.assertEqual('sherlock', data_vector.name, msg=\n            'The name of the instance should be sherlock and not {}'.format\n            (data_vector.name))\npytest.mark.skip(reason='Takes a long time to test only add on large tests')"
}