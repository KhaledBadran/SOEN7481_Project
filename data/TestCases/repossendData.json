{
    "functionName": "sendData",
    "className": null,
    "fileName": "/FaradayRF_&_Faraday-Software/faraday_&_proxy.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "while True:\n    dataQueue = []\n    try:\n        dataQueue = getDicts[unit][1]\n    except KeyError:\n        logger.debug(\"port 1 doesn't exist\")\n        pass\n    if len(dataQueue) > 0:\n        try:\n            temp = dataQueue.popleft()\n        except IndexError as e:\n            logger.error(e)\n        try:\n            data = temp['data'].decode('base64', 'strict')\n        except UnicodeError as e:\n            logger.error(e)\n        if len(data) == 123:\n            try:\n                dataList = struct.unpack('BB121s', data)\n                dataList2 = struct.unpack('B{0}s'.format(payloadSize),\n                    dataList[2][:payloadSize + 1])\n                socketData = dataList2[1][:dataList2[0]]\n            except struct.error as e:\n                logger.warning(e)\n                logger.warning(len(data))\n                logger.warning(repr(data))\n            except StandardError as e:\n                logger.warning(e)\n            else:\n                try:\n                    conn.sendall(socketData)\n                except IOError as e:\n                    break\n        if len(data) == 42:\n            try:\n                dataList = struct.unpack('BB{0}s'.format(payloadSize + 1), data\n                    )\n                dataList2 = struct.unpack('B{0}s'.format(payloadSize),\n                    dataList[2][:payloadSize + 1])\n                socketData = dataList2[1][:dataList2[0]]\n            except struct.error as e:\n                logger.warning(e)\n                logger.warning(len(data))\n                logger.warning(repr(data))\n            except StandardError as e:\n                logger.warning(e)\n            else:\n                try:\n                    conn.sendall(socketData)\n                except IOError as e:\n                    break\n"
}