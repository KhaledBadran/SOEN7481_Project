{
    "functionName": "test_BotorchModel_with_scalarization_and_outcome_constraints",
    "className": "BotorchModelTest",
    "fileName": "/facebook_&_Ax/ax_&_models_&_tests_&_test_botorch_model.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "tkwargs = {'device': torch.device('cuda') if cuda else torch.device('cpu'),\n    'dtype': torch.float}\nXs1, Ys1, Yvars1, bounds, tfs, fns, mns = _get_torch_test_data(dtype=dtype,\n    cuda=cuda, constant_noise=True)\nXs2, Ys2, Yvars2, _, _, _, _ = _get_torch_test_data(dtype=dtype, cuda=cuda,\n    constant_noise=True)\nn = 2\nobjective_weights = torch.tensor([1.0, 1.0], **tkwargs)\nmodel = BotorchModel()\nwith mock.patch(FIT_MODEL_MO_PATH) as _mock_fit_model:\n    model.fit(Xs=Xs1 + Xs2, Ys=Ys1 + Ys2, Yvars=Yvars1 + Yvars2, bounds=\n        bounds, task_features=tfs, feature_names=fns, metric_names=mns,\n        fidelity_features=[])\n    _mock_fit_model.assert_called_once()\nX_dummy = torch.tensor([[[1.0, 2.0, 3.0]]], **tkwargs)\nacqfv_dummy = torch.tensor([[[1.0, 2.0, 3.0]]], **tkwargs)\nwith mock.patch(SAMPLE_SIMPLEX_UTIL_PATH, autospec=True, return_value=torch\n    .tensor([0.7, 0.3], **tkwargs)) as _mock_sample_simplex, mock.patch(\n    'ax.models.torch.botorch_defaults.optimize_acqf', return_value=(X_dummy,\n    acqfv_dummy)) as _:\n    model.gen(n, bounds, objective_weights, outcome_constraints=(torch.\n        tensor([[1.0, 1.0]], **tkwargs), torch.tensor([[10.0]], **tkwargs)),\n        model_gen_options={'acquisition_function_kwargs': {\n        'random_scalarization': True}, 'optimizer_kwargs':\n        _get_optimizer_kwargs()})\n    self.assertEqual(n, _mock_sample_simplex.call_count)\nwith mock.patch(CHEBYSHEV_SCALARIZATION_PATH, wraps=get_chebyshev_scalarization\n    ) as _mock_chebyshev_scalarization, mock.patch(\n    'ax.models.torch.botorch_defaults.optimize_acqf', return_value=(X_dummy,\n    acqfv_dummy)) as _:\n    model.gen(n, bounds, objective_weights, outcome_constraints=(torch.\n        tensor([[1.0, 1.0]], **tkwargs), torch.tensor([[10.0]], **tkwargs)),\n        model_gen_options={'acquisition_function_kwargs': {\n        'chebyshev_scalarization': True}, 'optimizer_kwargs':\n        _get_optimizer_kwargs()})\n    self.assertEqual(n, _mock_chebyshev_scalarization.call_count)\n"
}