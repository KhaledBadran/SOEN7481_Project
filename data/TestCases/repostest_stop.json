{
    "functionName": "test_stop",
    "className": "TestKmipServer",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_services_&_server_&_test_server.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that the right calls and log messages are triggered while\n        cleaning up the server and any remaining sessions.\n        \"\"\"\ns = server.KmipServer(hostname='127.0.0.1', port=5696, config_path=None,\n    policy_path=None)\ns._logger = mock.MagicMock()\ns._socket = mock.MagicMock()\nthread_mock = mock.MagicMock()\nthread_mock.join = mock.MagicMock()\nthread_mock.is_alive = mock.MagicMock(return_value=False)\nthread_mock.name = 'TestThread'\nwith mock.patch('threading.enumerate') as threading_mock:\n    threading_mock.return_value = [thread_mock]\n    s.stop()\n    s._logger.info.assert_any_call('Cleaning up remaining connection threads.')\n    self.assertTrue(threading_mock.called)\n    thread_mock.join.assert_called_once_with(10.0)\n    s._logger.info.assert_any_call('Cleanup succeeded for thread: TestThread')\n    s._logger.info.assert_any_call('Shutting down server socket handler.')\n    s._socket.shutdown.assert_called_once_with(socket.SHUT_RDWR)\n    s._socket.close.assert_called_once_with()\nthread_mock.reset_mock()\ntest_exception = Exception()\nthread_mock.join = mock.MagicMock(side_effect=test_exception)\ns._logger.reset_mock()\ns._socket.reset_mock()\nwith mock.patch('threading.enumerate') as threading_mock:\n    threading_mock.return_value = [thread_mock]\n    s.stop()\n    s._logger.info.assert_any_call('Cleaning up remaining connection threads.')\n    self.assertTrue(threading_mock.called)\n    thread_mock.join.assert_called_once_with(10.0)\n    s._logger.info.assert_any_call(\n        'Error occurred while attempting to cleanup thread: TestThread')\n    s._logger.exception.assert_called_once_with(test_exception)\n    s._logger.info.assert_any_call('Shutting down server socket handler.')\n    s._socket.shutdown.assert_called_once_with(socket.SHUT_RDWR)\n    s._socket.close.assert_called_once_with()\nthread_mock.reset_mock()\ntest_exception = Exception()\nthread_mock.join = mock.MagicMock()\nthread_mock.is_alive = mock.MagicMock(return_value=True)\ns._logger.reset_mock()\ns._socket.reset_mock()\nwith mock.patch('threading.enumerate') as threading_mock:\n    threading_mock.return_value = [thread_mock]\n    s.stop()\n    s._logger.info.assert_any_call('Cleaning up remaining connection threads.')\n    self.assertTrue(threading_mock.called)\n    thread_mock.join.assert_called_once_with(10.0)\n    s._logger.warning.assert_any_call(\n        'Cleanup failed for thread: TestThread. Thread is still alive')\n    s._logger.info.assert_any_call('Shutting down server socket handler.')\n    s._socket.shutdown.assert_called_once_with(socket.SHUT_RDWR)\n    s._socket.close.assert_called_once_with()\ns._logger.reset_mock()\ns._socket.reset_mock()\ntest_exception = Exception()\ns._socket.close = mock.MagicMock(side_effect=test_exception)\nregex = 'Server failed to shutdown socket handler.'\nself.assertRaisesRegex(exceptions.NetworkingError, regex, s.stop)\ns._logger.info.assert_any_call('Cleaning up remaining connection threads.')\ns._logger.info.assert_any_call('Shutting down server socket handler.')\ns._socket.shutdown.assert_called_once_with(socket.SHUT_RDWR)\ns._socket.close.assert_called_once_with()\ns._logger.exception(test_exception)\nmock.patch('kmip.services.server.engine.KmipEngine')mock.patch('kmip.services.server.server.KmipServer._setup_logging')"
}