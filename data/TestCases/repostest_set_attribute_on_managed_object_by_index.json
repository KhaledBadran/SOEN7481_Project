{
    "functionName": "test_set_attribute_on_managed_object_by_index",
    "className": "TestKmipEngine",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_services_&_server_&_test_engine.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that an attribute can be modified on a managed object given its\n        name, index, and new value.\n        \"\"\"\ne = engine.KmipEngine()\ne._data_store = self.engine\ne._data_store_session_factory = self.session_factory\ne._data_session = e._data_store_session_factory()\ne._logger = mock.MagicMock()\nsymmetric_key = pie_objects.SymmetricKey(enums.CryptographicAlgorithm.AES, \n    0, b'', masks=[enums.CryptographicUsageMask.ENCRYPT, enums.\n    CryptographicUsageMask.DECRYPT])\ne._data_session.add(symmetric_key)\ne._data_session.commit()\ne._data_session = e._data_store_session_factory()\ne._set_attribute_on_managed_object(symmetric_key, (\n    'Application Specific Information', [attributes.\n    ApplicationSpecificInformation(application_namespace=\n    'Example Namespace 1', application_data='Example Data 1'), attributes.\n    ApplicationSpecificInformation(application_namespace=\n    'Example Namespace 2', application_data='Example Data 2')]))\ne._set_attribute_on_managed_object(symmetric_key, ('Name', [attributes.Name\n    (name_value=attributes.Name.NameValue('Name 1')), attributes.Name(\n    name_value=attributes.Name.NameValue('Name 2'))]))\ne._set_attribute_on_managed_object(symmetric_key, ('Object Group', [\n    primitives.TextString('Example Group 1', tag=enums.Tags.OBJECT_GROUP),\n    primitives.TextString('Example Group 2', tag=enums.Tags.OBJECT_GROUP)]))\na = e._get_attribute_from_managed_object(symmetric_key,\n    'Application Specific Information')\nself.assertEqual(2, len(a))\nself.assertEqual('Example Namespace 1', a[0].get('application_namespace'))\nself.assertEqual('Example Data 1', a[0].get('application_data'))\nself.assertEqual('Example Namespace 2', a[1].get('application_namespace'))\nself.assertEqual('Example Data 2', a[1].get('application_data'))\ne._set_attribute_on_managed_object_by_index(symmetric_key,\n    'Application Specific Information', attributes.\n    ApplicationSpecificInformation(application_namespace=\n    'Example Namespace 3', application_data='Example Data 3'), 1)\na = e._get_attribute_from_managed_object(symmetric_key,\n    'Application Specific Information')\nself.assertEqual(2, len(a))\nself.assertEqual('Example Namespace 1', a[0].get('application_namespace'))\nself.assertEqual('Example Data 1', a[0].get('application_data'))\nself.assertEqual('Example Namespace 3', a[1].get('application_namespace'))\nself.assertEqual('Example Data 3', a[1].get('application_data'))\na = e._get_attribute_from_managed_object(symmetric_key, 'Name')\nself.assertEqual(3, len(a))\nself.assertEqual('Symmetric Key', a[0].name_value.value)\nself.assertEqual('Name 1', a[1].name_value.value)\nself.assertEqual('Name 2', a[2].name_value.value)\ne._set_attribute_on_managed_object_by_index(symmetric_key, 'Name',\n    attributes.Name(name_value=attributes.Name.NameValue('Name 3')), 1)\na = e._get_attribute_from_managed_object(symmetric_key, 'Name')\nself.assertEqual(3, len(a))\nself.assertEqual('Symmetric Key', a[0].name_value.value)\nself.assertEqual('Name 3', a[1].name_value.value)\nself.assertEqual('Name 2', a[2].name_value.value)\na = e._get_attribute_from_managed_object(symmetric_key, 'Object Group')\nself.assertEqual(2, len(a))\nself.assertEqual('Example Group 1', a[0])\nself.assertEqual('Example Group 2', a[1])\ne._set_attribute_on_managed_object_by_index(symmetric_key, 'Object Group',\n    primitives.TextString('Example Group 3', tag=enums.Tags.OBJECT_GROUP), 1)\na = e._get_attribute_from_managed_object(symmetric_key, 'Object Group')\nself.assertEqual(2, len(a))\nself.assertEqual('Example Group 1', a[0])\nself.assertEqual('Example Group 3', a[1])\n"
}