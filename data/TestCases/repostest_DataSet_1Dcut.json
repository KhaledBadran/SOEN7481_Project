{
    "functionName": "test_DataSet_1Dcut",
    "className": null,
    "fileName": "/jakob-lass_&_MJOLNIR/MJOLNIR_&_Data_&_DataSet.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "q1 = np.array([1.23, -1.51])\nq2 = np.array([1.54, -1.25])\nwidth = 0.1\nplt.ioff()\nimport matplotlib\nmatplotlib.use('Agg')\nconvertFiles = ['Data/camea2018n000136.hdf', 'Data/camea2018n000137.hdf']\nds = DataSet(dataFiles=convertFiles)\nds.convertDataFile(saveFile=False)\nax, Data, bins = ds.plotCut1D(q1, q2, width, rlu=False, minPixel=0.01, Emin\n    =2.0, Emax=2.5, fmt='.', ticks=5, tickRound=2)\nData2, bins2 = ds.cut1D(q1, q2, width, rlu=False, minPixel=0.01, Emin=2.0,\n    Emax=2.5)\nassert Data2.equals(Data.loc[:, (Data.columns != 'binDistance')])\nData, bins = ds.cut1D(q1, q2, width, rlu=False, minPixel=0.01, Emin=2.0,\n    Emax=2.5, extend=False)\nassert np.all(np.logical_and(bins[0][:, (0)] >= q1[0] - 0.1, bins[0][:, (0)\n    ] <= q2[0] + 0.1))\nData, bins = ds.cut1D(q1, q2, width, rlu=False, minPixel=0.01, Emin=2.0,\n    Emax=2.5, extend=False)\nassert np.all(bins[0][:, (0)] >= q1[0] - 0.1)\nassert np.all(bins[0][:, (0)] <= q2[0] + 0.1)\nassert np.all(bins[0][:, (1)] >= q1[1] - 0.1)\nassert np.all(bins[0][:, (1)] <= q2[1] + 0.1)\nQ1 = np.array([1, 0, 0])\nQ2 = np.array([0.5, 1, 0])\nax, Data, bins = ds.plotCut1D(Q1, Q2, width, rlu=True, minPixel=0.01, Emin=\n    2.0, Emax=2.5, fmt='.')\nData2, bins2 = ds.cut1D(Q1, Q2, width, rlu=True, minPixel=0.01, Emin=2.0,\n    Emax=2.5)\nassert Data2.equals(Data.loc[:, (Data.columns != 'binDistance')])\nassert np.all(np.array([np.all(np.isclose(bins[i], bins2[i])) for i in\n    range(len(bins))]).flatten())\nq1, q2 = ds.convertToQxQy([Q1, Q2])\nD1, b1 = ds.cut1D(Q1, Q2, width, rlu=True, minPixel=0.01, Emin=2.0, Emax=2.5)\nD2, b2 = ds.cut1D(q1, q2, width, rlu=False, minPixel=0.01, Emin=2.0, Emax=2.5)\nBinPos, OrthoPos, E = b1\nBinPos = np.concatenate([ds.convertToQxQy(BinPos[:, :3]), BinPos[:, (-1)].\n    reshape(-1, 1)], axis=1)\nOrthoPos = ds.convertToQxQy(OrthoPos)\nb1 = [BinPos, OrthoPos, E]\nassert np.all(np.isclose(D1, D2))\nassert np.all(np.array([np.all(np.isclose(b1[i], b2[i])) for i in range(len\n    (b1))]).flatten())\n"
}