{
    "functionName": "linear_sym",
    "className": null,
    "fileName": "/pmeal_&_OpenPNM/openpnm_&_models_&_physics_&_generic_source_term.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"\n    Calculates the rate, as well as slope and intercept of the following\n    function at the given value of *x*:\n\n        .. math::\n            r = A_{1}   x  +  A_{2}\n\n    Parameters\n    ----------\n    A1 -> A2 : string\n        The dictionary keys on the target object containing the coefficients\n        values to be used in the source term model\n\n    X : string\n        The dictionary key on the target object containing the the quantity\n        of interest\n\n    Returns\n    -------\n    A dictionary containing the following three items:\n\n        **'rate'** - The value of the source term function at the given X.\n\n        **'S1'** - The slope of the source term function at the given X.\n\n        **'S2'** - The intercept of the source term function at the given X.\n\n    The slope and intercept provide a linearized source term equation about the\n    current value of X as follow:\n\n        .. math::\n            rate = S_{1}   X  +  S_{2}\n\n    \"\"\"\nfrom sympy import symbols\nA = _parse_args(target=target, key=A1, default=0.0)\nB = _parse_args(target=target, key=A2, default=0.0)\nX = target[X]\na, b, x = symbols('a,b,x')\ny = a * x + b\nr, s1, s2 = _build_func(eq=y, a=a, b=b, x=x)\nr_val = r(A, B, X)\ns1_val = s1(A, B, X)\ns2_val = s2(A, B, X)\nvalues = {'S1': s1_val, 'S2': s2_val, 'rate': r_val}\nreturn values\n"
}