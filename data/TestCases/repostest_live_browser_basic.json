{
    "functionName": "test_live_browser_basic",
    "className": "TestCase",
    "fileName": "/IntegralDefense_&_ACE/lib_&_saq_&_modules_&_test_url.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"Basic test of LiveBrowserAnalysis.\"\"\"\nfrom saq.modules.url import CrawlphishAnalysisV2\nfrom saq.modules.url import LiveBrowserAnalysis\nroot = create_root_analysis()\nroot.initialize_storage()\nurl = root.add_observable(F_URL,\n    'http://localhost:{}/test_data/live_browser.000.html'.format(LOCAL_PORT))\nurl.add_directive(DIRECTIVE_CRAWL)\nroot.save()\nroot.schedule()\nengine = TestEngine()\nengine.enable_module('analysis_module_crawlphish', 'test_groups')\nengine.enable_module('analysis_module_live_browser_analyzer', 'test_groups')\nengine.controlled_stop()\nengine.start()\nengine.wait()\nroot.load()\nurl = root.get_observable(url.id)\nanalysis = url.get_analysis(CrawlphishAnalysisV2)\nfile_observables = analysis.get_observables_by_type(F_FILE)\nself.assertEquals(len(file_observables), 1)\nfile_observable = file_observables[0]\nanalysis = file_observable.get_analysis(LiveBrowserAnalysis)\nfile_observables = analysis.get_observables_by_type(F_FILE)\nself.assertEquals(len(file_observables), 1)\nfile_observable = file_observables[0]\nself.assertEquals(file_observable.value,\n    'crawlphish/localhost_0/localhost_000.png')\nunittest.skipforce_alerts"
}