{
    "functionName": "test_top_matcher",
    "className": "TestRegex",
    "fileName": "/named-data_&_PyNDN2/tests_&_unit_tests_&_test_regex.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "cm = NdnRegexTopMatcher('^<a><b><c>')\nres = cm.match(Name('/a/b/c/d'))\nself.assertEqual(True, res)\nself.assertEqual(4, len(cm.getMatchResult()))\nself.assertEqual('a', cm.getMatchResult()[0].toEscapedString())\nself.assertEqual('b', cm.getMatchResult()[1].toEscapedString())\nself.assertEqual('c', cm.getMatchResult()[2].toEscapedString())\nself.assertEqual('d', cm.getMatchResult()[3].toEscapedString())\ncm = NdnRegexTopMatcher('<b><c><d>$')\nres = cm.match(Name('/a/b/c/d'))\nself.assertEqual(True, res)\nself.assertEqual(4, len(cm.getMatchResult()))\nself.assertEqual('a', cm.getMatchResult()[0].toEscapedString())\nself.assertEqual('b', cm.getMatchResult()[1].toEscapedString())\nself.assertEqual('c', cm.getMatchResult()[2].toEscapedString())\nself.assertEqual('d', cm.getMatchResult()[3].toEscapedString())\ncm = NdnRegexTopMatcher('^<a><b><c><d>$')\nres = cm.match(Name('/a/b/c/d'))\nself.assertEqual(True, res)\nself.assertEqual(4, len(cm.getMatchResult()))\nself.assertEqual('a', cm.getMatchResult()[0].toEscapedString())\nself.assertEqual('b', cm.getMatchResult()[1].toEscapedString())\nself.assertEqual('c', cm.getMatchResult()[2].toEscapedString())\nself.assertEqual('d', cm.getMatchResult()[3].toEscapedString())\nres = cm.match(Name('/a/b/c/d/e'))\nself.assertEqual(False, res)\nself.assertEqual(0, len(cm.getMatchResult()))\ncm = NdnRegexTopMatcher('<a><b><c><d>')\nres = cm.match(Name('/a/b/c/d'))\nself.assertEqual(True, res)\nself.assertEqual(4, len(cm.getMatchResult()))\nself.assertEqual('a', cm.getMatchResult()[0].toEscapedString())\nself.assertEqual('b', cm.getMatchResult()[1].toEscapedString())\nself.assertEqual('c', cm.getMatchResult()[2].toEscapedString())\nself.assertEqual('d', cm.getMatchResult()[3].toEscapedString())\ncm = NdnRegexTopMatcher('<b><c>')\nres = cm.match(Name('/a/b/c/d'))\nself.assertEqual(True, res)\nself.assertEqual(4, len(cm.getMatchResult()))\nself.assertEqual('a', cm.getMatchResult()[0].toEscapedString())\nself.assertEqual('b', cm.getMatchResult()[1].toEscapedString())\nself.assertEqual('c', cm.getMatchResult()[2].toEscapedString())\nself.assertEqual('d', cm.getMatchResult()[3].toEscapedString())\n"
}