{
    "functionName": "test_instrument_query",
    "className": null,
    "fileName": "/Galvant_&_InstrumentKit/instruments_&_tests_&_test_base_instrument.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n    Expected order of operations:\n\n    - IK sends command to instrument\n    - Instrument sends ACK, commonly an echo of the command\n    - ACK is verified with _ack_expected function\n    - If ACK is good, do another read which contains our return data\n    - Another read is done to capture the prompt characters sent by the\n        instrument. Read should be equal to the length of the expected prompt\n    - Exception is raised is prompt is not correct\n    \"\"\"\nmock_filelike = mock.MagicMock()\nmock_filelike.__class__ = AbstractCommunicator\ninst = ik.Instrument(mock_filelike)\ninst._file.query.return_value = 'foobar?'\ninst.read = mock.MagicMock(side_effect=['foobar?', 'datas', '> '])\ndef new_ack(msg):\n    return msg\ninst._ack_expected = new_ack\ninst.prompt = '> '\nassert inst.query('foobar?') == 'datas'\ninst.read.assert_any_call(-1)\ninst.read.assert_any_call(2)\ninst._file.query.assert_called_with('foobar?', size=0)\nassert inst.read.call_count == 3\n"
}