{
    "functionName": "test_t_3d",
    "className": "TestHilbertCurve",
    "fileName": "/oberbichler_&_ANurbs/tests_&_TestHilbertCurve.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "data = [((0, 1, 0), 0), ((0, 0, 0), 0), ((0, 1, 0), 0), ((0, 0, 1), 4), ((0,\n    1, 0), 0), ((0, 0, 3), 5), ((0, 1, 0), 0), ((0, 0, 2), 1), ((0, 1, 0), \n    0), ((0, 0, 6), 3), ((0, 1, 0), 0), ((0, 0, 7), 7), ((0, 1, 0), 0), ((0,\n    0, 5), 6), ((0, 1, 0), 0), ((0, 0, 4), 2), ((0, 1, 1), 2), ((0, -1, 0),\n    0), ((0, 1, 1), 2), ((0, -1, 1), 1), ((0, 1, 1), 2), ((0, -1, 3), 3), (\n    (0, 1, 1), 2), ((0, -1, 2), 2), ((0, 1, 1), 2), ((0, -1, 6), 6), ((0, 1,\n    1), 2), ((0, -1, 7), 7), ((0, 1, 1), 2), ((0, -1, 5), 5), ((0, 1, 1), 2\n    ), ((0, -1, 4), 4), ((0, 1, 3), 6), ((0, -1, 0), 0), ((0, 1, 3), 6), ((\n    0, -1, 1), 1), ((0, 1, 3), 6), ((0, -1, 3), 3), ((0, 1, 3), 6), ((0, -1,\n    2), 2), ((0, 1, 3), 6), ((0, -1, 6), 6), ((0, 1, 3), 6), ((0, -1, 7), 7\n    ), ((0, 1, 3), 6), ((0, -1, 5), 5), ((0, 1, 3), 6), ((0, -1, 4), 4), ((\n    0, 1, 2), 4), ((3, 1, 0), 6), ((0, 1, 2), 4), ((3, 1, 1), 4), ((0, 1, 2\n    ), 4), ((3, 1, 3), 0), ((0, 1, 2), 4), ((3, 1, 2), 2), ((0, 1, 2), 4),\n    ((3, 1, 6), 3), ((0, 1, 2), 4), ((3, 1, 7), 1), ((0, 1, 2), 4), ((3, 1,\n    5), 5), ((0, 1, 2), 4), ((3, 1, 4), 7), ((0, 1, 6), 5), ((3, 1, 0), 6),\n    ((0, 1, 6), 5), ((3, 1, 1), 4), ((0, 1, 6), 5), ((3, 1, 3), 0), ((0, 1,\n    6), 5), ((3, 1, 2), 2), ((0, 1, 6), 5), ((3, 1, 6), 3), ((0, 1, 6), 5),\n    ((3, 1, 7), 1), ((0, 1, 6), 5), ((3, 1, 5), 5), ((0, 1, 6), 5), ((3, 1,\n    4), 7), ((0, 1, 7), 7), ((5, -1, 0), 5), ((0, 1, 7), 7), ((5, -1, 1), 4\n    ), ((0, 1, 7), 7), ((5, -1, 3), 6), ((0, 1, 7), 7), ((5, -1, 2), 7), ((\n    0, 1, 7), 7), ((5, -1, 6), 3), ((0, 1, 7), 7), ((5, -1, 7), 2), ((0, 1,\n    7), 7), ((5, -1, 5), 0), ((0, 1, 7), 7), ((5, -1, 4), 1), ((0, 1, 5), 3\n    ), ((5, -1, 0), 5), ((0, 1, 5), 3), ((5, -1, 1), 4), ((0, 1, 5), 3), ((\n    5, -1, 3), 6), ((0, 1, 5), 3), ((5, -1, 2), 7), ((0, 1, 5), 3), ((5, -1,\n    6), 3), ((0, 1, 5), 3), ((5, -1, 7), 2), ((0, 1, 5), 3), ((5, -1, 5), 0\n    ), ((0, 1, 5), 3), ((5, -1, 4), 1), ((0, 1, 4), 1), ((6, 0, 0), 3), ((0,\n    1, 4), 1), ((6, 0, 1), 7), ((0, 1, 4), 1), ((6, 0, 3), 6), ((0, 1, 4), \n    1), ((6, 0, 2), 2), ((0, 1, 4), 1), ((6, 0, 6), 0), ((0, 1, 4), 1), ((6,\n    0, 7), 4), ((0, 1, 4), 1), ((6, 0, 5), 5), ((0, 1, 4), 1), ((6, 0, 4), 1)]\nfor (e, d, b), expected in data:\n    actual = an.HilbertCurve3D._t(e, d, b)\n    assert_equal(actual, expected)\nstaticmethod"
}