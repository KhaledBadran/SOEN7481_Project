{
    "functionName": "test_models_with_mean_functions_changes",
    "className": null,
    "fileName": "/GPflow_&_GPflow/tests_&_gpflow_&_test_mean_functions.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n    Simply check that all models have a higher prediction with a constant mean\n    function than with a zero mean function.\n\n    For compositions of mean functions check that multiplication/ addition of\n    a constant results in a higher prediction, whereas addition of zero/\n    mutliplication with one does not.\n    \"\"\"\ndata = rng.randn(Datum.N, Datum.input_dim), rng.randn(Datum.N, 1)\nXnew = rng.randn(Datum.Ntest, Datum.input_dim)\ninducing_variable = InducingPoints(Z=rng.randn(Datum.M, Datum.input_dim))\nkernel = gpflow.kernels.Matern32()\nlikelihood = gpflow.likelihoods.Gaussian()\nzero_mean = Zero()\nnon_zero_mean = Constant(c=np.ones(1) * 10)\nif model_class in [gpflow.models.GPR]:\n    model_zero_mean = model_class(data, kernel=kernel, mean_function=zero_mean)\n    model_non_zero_mean = model_class(data, kernel=kernel, mean_function=\n        non_zero_mean)\nelif model_class in [gpflow.models.VGP]:\n    model_zero_mean = model_class(data, likelihood=likelihood, kernel=\n        kernel, mean_function=zero_mean)\n    model_non_zero_mean = model_class(data, likelihood=likelihood, kernel=\n        kernel, mean_function=non_zero_mean)\nelif model_class in [gpflow.models.SVGP]:\n    model_zero_mean = model_class(kernel=kernel, likelihood=likelihood,\n        inducing_variable=inducing_variable, mean_function=zero_mean)\n    model_non_zero_mean = model_class(kernel=kernel, likelihood=likelihood,\n        inducing_variable=inducing_variable, mean_function=non_zero_mean)\nelif model_class in [gpflow.models.SGPR, gpflow.models.GPRFITC]:\n    model_zero_mean = model_class(data, kernel=kernel, inducing_variable=\n        inducing_variable, mean_function=zero_mean)\n    model_non_zero_mean = model_class(data, kernel=kernel,\n        inducing_variable=inducing_variable, mean_function=non_zero_mean)\nelif model_class in [gpflow.models.SGPMC]:\n    model_zero_mean = model_class(data, kernel=kernel, likelihood=\n        likelihood, inducing_variable=inducing_variable, mean_function=\n        zero_mean)\n    model_non_zero_mean = model_class(data, kernel=kernel, likelihood=\n        likelihood, inducing_variable=inducing_variable, mean_function=\n        non_zero_mean)\nelif model_class in [gpflow.models.GPMC]:\n    model_zero_mean = model_class(data, kernel=kernel, likelihood=\n        likelihood, mean_function=zero_mean)\n    model_non_zero_mean = model_class(data, kernel=kernel, likelihood=\n        likelihood, mean_function=non_zero_mean)\nelse:\n    raise NotImplementedError\nmu_zero, var_zero = model_zero_mean.predict_f(Xnew)\nmu_non_zero, var_non_zero = model_non_zero_mean.predict_f(Xnew)\nassert np.all(var_zero.numpy() == var_non_zero.numpy())\nassert not np.all(mu_zero.numpy() == mu_non_zero.numpy())\npytest.mark.parametrize('model_class', _model_classes)"
}