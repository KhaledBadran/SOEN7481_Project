{
    "functionName": "test_loading_good_several_single_files",
    "className": "TestLoading",
    "fileName": "/ornlneutronimaging_&_NeuNorm/tests_&_NeuNorm_&_loading_test.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"assert sample, ob and df multi files correctly loaded\"\"\"\nsample_tif_file_1 = self.data_path + '/tif//sample/image001.tif'\nsample_tif_file_2 = self.data_path + '/tif/sample/image002.tif'\nob_tif_file_1 = self.data_path + '/tif/ob/ob001.tif'\no_norm = Normalization()\no_norm.load(file=sample_tif_file_1, data_type='sample', auto_gamma_filter=False\n    )\no_norm.load(file=sample_tif_file_2, data_type='sample', auto_gamma_filter=False\n    )\no_norm.load(file=ob_tif_file_1, data_type='ob', auto_gamma_filter=False)\n_expected_data_1 = np.ones([5, 5])\n_expected_data_1[0, 0] = 5\n_expected_data_1[:, (2)] = 2\n_expected_data_1[:, (3)] = 3\n_expected_data_1[:, (4)] = 4\n_loaded_data_1 = o_norm.data['sample']['data'][0]\nself.assertTrue((_expected_data_1 == _loaded_data_1).all())\n_expected_name_1 = sample_tif_file_1\n_loaded_name_1 = o_norm.data['sample']['file_name'][0]\nself.assertTrue(_expected_name_1 == _loaded_name_1)\n_expected_data_2 = np.ones([5, 5])\n_expected_data_2[0, 0] = 5\n_expected_data_2[:, (2)] = 2\n_expected_data_2[:, (3)] = 3\n_expected_data_2[:, (4)] = 4\n_loaded_data_2 = o_norm.data['sample']['data'][1]\nself.assertTrue((_expected_data_2 == _loaded_data_2).all())\n_expected_name_2 = sample_tif_file_2\n_loaded_name_2 = o_norm.data['sample']['file_name'][1]\nself.assertTrue(_expected_name_2 == _loaded_name_2)\n_expected_data_1 = np.ones([5, 5])\n_expected_data_1[0, 0] = 5\n_loaded_data_1 = o_norm.data['ob']['data'][0]\nself.assertTrue((_expected_data_1 == _loaded_data_1).all())\nsample_fits_file_1 = self.data_path + '/fits//sample/image001.fits'\nsample_fits_file_2 = self.data_path + '/fits/sample/image002.fits'\no_norm = Normalization()\no_norm.load(file=sample_fits_file_1, data_type='sample', auto_gamma_filter=\n    False)\no_norm.load(file=sample_fits_file_2, data_type='sample', auto_gamma_filter=\n    False)\n_expected_data_1 = np.ones([5, 5])\n_expected_data_1[0, 0] = 5\n_expected_data_1[:, (2)] = 2\n_expected_data_1[:, (3)] = 3\n_expected_data_1[:, (4)] = 4\n_loaded_data_1 = o_norm.data['sample']['data'][0]\nself.assertTrue((_expected_data_1 == _loaded_data_1).all())\n_expected_name_1 = sample_fits_file_1\n_loaded_name_1 = o_norm.data['sample']['file_name'][0]\nself.assertTrue(_expected_name_1 == _loaded_name_1)\n_expected_data_2 = np.ones([5, 5])\n_expected_data_2[0, 0] = 5\n_expected_data_2[:, (2)] = 2\n_expected_data_2[:, (3)] = 3\n_expected_data_2[:, (4)] = 4\n_loaded_data_2 = o_norm.data['sample']['data'][1]\nself.assertTrue((_expected_data_2 == _loaded_data_2).all())\n_expected_name_2 = sample_fits_file_2\n_loaded_name_2 = o_norm.data['sample']['file_name'][1]\nself.assertTrue(_expected_name_2 == _loaded_name_2)\n"
}