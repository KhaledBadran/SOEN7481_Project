{
    "functionName": "test_auth_failures",
    "className": null,
    "fileName": "/PlaidWeb_&_Authl/tests_&_handlers_&_test_fediverse.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "store = tokens.DictStore({})\nhandler = fediverse.Fediverse('test', store, homepage='http://foo.example/')\nmock_mastodon = mocker.patch('mastodon.Mastodon')\nresult = handler.initiate_auth('fail.example', 'https://cb', 'qwerpoiu')\nassert isinstance(result, disposition.Error)\nassert 'Failed to register client' in result.message\nrequests_mock.get('https://fail.example/api/v1/instance', text=\"'lolwut'\")\nresult = handler.initiate_auth('fail.example', 'https://cb', 'qwerpoiu')\nassert isinstance(result, disposition.Error)\nassert 'Failed to register client' in result.message\nrequests_mock.get('https://fail.example/api/v1/instance', text=json.dumps({\n    'uri': 'foo', 'version': '2.5.1', 'urls': 'foo.bar'}))\nmock_mastodon.create_app.return_value = 'the id', 'the secret'\nmock_mastodon().auth_request_url.return_value = 'https://cb?foo=bar'\nresult = handler.initiate_auth('fail.example', 'https://cb', 'qwerpoiu')\nassert isinstance(result, disposition.Redirect)\nresult = handler.check_callback(result.url, parse_args(result.url), {})\nassert isinstance(result, disposition.Error)\nassert \"Missing 'code'\" in result.message\nmock_mastodon(\n    ).auth_request_url.return_value = 'https://cb?code=12345&error=nope'\nresult = handler.initiate_auth('fail.example', 'https://cb', 'qwerpoiu')\nassert isinstance(result, disposition.Redirect)\nresult = handler.check_callback(result.url, parse_args(result.url), {})\nassert isinstance(result, disposition.Error)\nassert 'Error signing into instance' in result.message\nmock_mastodon().auth_request_url.return_value = 'https://cb?code=yep'\nmock_mastodon().log_in.side_effect = mastodon.MastodonRatelimitError('stop it')\nresult = handler.initiate_auth('fail.example', 'https://cb', 'qwerpoiu')\nassert isinstance(result, disposition.Redirect)\nresult = handler.check_callback(result.url, parse_args(result.url), {})\nassert isinstance(result, disposition.Error)\nassert 'Error signing into instance' in result.message\nmock_mastodon().log_in.side_effect = None\nmock_mastodon().log_in.return_value = 'some auth code'\nmock_time = mocker.patch('time.time')\nmock_time.return_value = 100\nresult = handler.initiate_auth('fail.example', 'https://cb', 'qwerpoiu')\nassert isinstance(result, disposition.Redirect)\nmock_time.return_value = 86400\nresult = handler.check_callback(result.url, parse_args(result.url), {})\nassert isinstance(result, disposition.Error)\nassert 'Login timed out' in result.message\nmock_mastodon().me.return_value = {}\nresult = handler.initiate_auth('fail.example', 'https://cb', 'qwerpoiu')\nassert isinstance(result, disposition.Redirect)\nresult = handler.check_callback(result.url, parse_args(result.url), {})\nassert isinstance(result, disposition.Error)\nassert 'Missing user profile' in result.message\nmock_mastodon().me.return_value = {'url': 'https://fail.example/@larry',\n    'source': ['ha ha ha', 'i break you']}\nresult = handler.initiate_auth('fail.example', 'https://cb', 'qwerpoiu')\nassert isinstance(result, disposition.Redirect)\nresult = handler.check_callback(result.url, parse_args(result.url), {})\nassert isinstance(result, disposition.Error)\nassert 'Malformed user profile' in result.message\n"
}