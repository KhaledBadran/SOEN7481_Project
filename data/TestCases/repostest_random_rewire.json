{
    "functionName": "test_random_rewire",
    "className": null,
    "fileName": "/Silmathoron_&_NNGT/testing_&_test_rewire.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\" Check random rewire \"\"\"\nnum_nodes = 10\ncoord_nb = 2\nrecip = 0.7\nshortcut = 0.2\ng = ng.newman_watts(coord_nb, shortcut, reciprocity_circular=recip, nodes=\n    num_nodes)\nfinal_recip = na.reciprocity(g)\nnum_edges = g.edge_nb()\ng.new_node_attribute('random_int', 'int', values=[2, 5, 33, 6, 4, 1, 98, 45,\n    30, 10])\ng.new_node_attribute('attr2', 'float', values=nngt._rng.uniform(size=num_nodes)\n    )\nww = np.arange(1, num_edges + 1, dtype=float)\ng.set_weights(ww)\ng.new_edge_attribute('my-edge-attr', 'int', values=-ww[::-1].astype(int))\nr1 = ng.random_rewire(g)\nassert r1.node_nb() == num_nodes\nassert r1.edge_nb() == num_edges\nassert g.node_attributes == r1.node_attributes\nassert g.edge_attributes == r1.edge_attributes\nassert not np.array_equal(g.node_attributes['random_int'], r1.\n    node_attributes['random_int'])\nassert not np.array_equal(g.node_attributes['attr2'], r1.node_attributes[\n    'attr2'])\nassert not np.array_equal(g.edge_attributes['weight'], r1.edge_attributes[\n    'weight'])\nassert not np.array_equal(g.edge_attributes['my-edge-attr'], r1.\n    edge_attributes['my-edge-attr'])\nfor deg_type in ['in-degree', 'out-degree', 'total-degree']:\n    degrees = g.get_degrees(deg_type)\n    edge_constraint = 'together'\n    if deg_type == 'in-degree':\n        edge_constraint = 'preserve_in'\n    elif deg_type == 'out-degree':\n        edge_constraint = 'preserve_out'\n    r2 = ng.random_rewire(g, constraints=deg_type, node_attr_constraints=\n        'preserve', edge_attr_constraints=edge_constraint)\n    assert r2.node_nb() == num_nodes\n    assert r2.edge_nb() == num_edges\n    assert np.array_equal(r2.get_degrees(deg_type), degrees)\n    assert g.node_attributes == r2.node_attributes\n    assert np.array_equal(g.node_attributes['random_int'], r2.\n        node_attributes['random_int'])\n    assert np.array_equal(g.node_attributes['attr2'], r2.node_attributes[\n        'attr2'])\n    if deg_type == 'total-degree':\n        weights = r2.get_weights()\n        my_eattr = r2.edge_attributes['my-edge-attr']\n        assert np.array_equal(my_eattr, (weights - (num_edges + 1)).astype(int)\n            )\n    else:\n        node_type = ('source_node' if edge_constraint == 'preserve_out' else\n            'target_node')\n        for i in range(num_nodes):\n            kwarg = {node_type: i}\n            old_edges = g.get_edges(**kwarg)\n            new_edges = r2.get_edges(**kwarg)\n            for name in g.edge_attributes:\n                old_attr = g.get_edge_attributes(old_edges, name)\n                new_attr = r2.get_edge_attributes(new_edges, name)\n                assert set(old_attr) == set(new_attr)\npytest.mark.mpi_skip"
}