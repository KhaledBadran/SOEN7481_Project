{
    "functionName": "logClass",
    "className": null,
    "fileName": "/jakob-lass_&_MJOLNIR/MJOLNIR_&__tools.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "if parent is None:\n    parent = object\ndef track_all_class_methods(Cls):\n\n\n    class NewCls(parent):\n\n        def __init__(self, *args, **kwargs):\n            createLogger(self, name=log, stream=stream, level=level)\n            self._log.info('Calling {}({})'.format(Cls.__name__,\n                beautifyArgs(args, kwargs)))\n            self._Instance = Cls(*args, **kwargs)\n\n        def __getattribute__(self, s):\n            \"\"\"\n                this is called whenever any attribute of a NewCls object is accessed. This function first tries to \n                get the attribute off NewCls. If it fails then it tries to fetch the attribute from self.oInstance (an\n                instance of the decorated class). If it manages to fetch the attribute from self.oInstance, and \n                the attribute is an instance method then `time_this` is applied.\n                \"\"\"\n            try:\n                x = super(NewCls, self).__getattribute__(s)\n                skip = True\n            except AttributeError:\n                x = self._Instance.__getattribute__(s)\n                skip = False\n            else:\n                pass\n            finally:\n                if skip and s[0] != '_':\n                    if type(x) == type(self.__init__):\n                        return logMethod(self, x)\n                        pass\n                    else:\n                        logAttribute(self, s)\n                return x\n\n        def _printLog(self):\n            pass\n    d = Cls.__dict__\n    keys = d.keys()\n    copy = [x for x in list(Cls.__dict__) if not x in list(NewCls.__dict__)]\n    for key in (copy + ['__doc__']):\n        if key == '__dict__' or key in ['__getattribute__', '__init__']:\n            continue\n        if type(d[key]) == type(Cls.__init__):\n            if hasattr(d[key], '_original'):\n                setattr(NewCls, key, KwargChecker(d[key]._function, d[key].\n                    _include)(d[key]._original))\n            else:\n                setattr(NewCls, key, d[key])\n                for funckey in d[key].__dict__:\n                    setattr(d[key], funckey, d[key].__dict__[funckey])\n        else:\n            setattr(NewCls, key, d[key])\n    return NewCls\nreturn track_all_class_methods\n"
}