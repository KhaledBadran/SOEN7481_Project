{
    "functionName": "test_generate_all_training",
    "className": "TestSystem",
    "fileName": "/SimGus_&_Chatette/tests_&_system-testing_&_test_system.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Tests templates that generate all possible examples for each intent\n        and that generate only training data.\n        \"\"\"\nfacade = ChatetteFacade.get_or_create()\ninput_dir_path = 'tests/system-testing/inputs/generate-all/'\ninput_filenames = ['simplest.chatette', 'only-words.chatette',\n    'words-and-groups.chatette', 'alias.chatette', 'include.chatette',\n    'slot.chatette']\nfor filename in input_filenames:\n    file_path = os.path.join(input_dir_path, filename)\n    facade.run(file_path)\n    if not TestSystem.check_no_duplicates(facade.train_examples):\n        pytest.fail('Some examples were generated several times ' +\n            \"when dealing with file '\" + filename + \"'.\\nGenerated: \" + str\n            (facade.train_examples))\n    legal_examples = TestSystem.get_legal_examples(file_path)\n    for ex in facade.train_examples:\n        formatted_ex = {'intent': ex.intent_name, 'text': ex.text}\n        if formatted_ex not in legal_examples:\n            pytest.fail(str(formatted_ex) + \" is not a legal example for '\" +\n                file_path + \"'\")\n    if len(legal_examples) != len(facade.train_examples):\n        training_texts = [ex.text for ex in facade.train_examples]\n        for legal_ex in legal_examples:\n            if legal_ex['text'] not in training_texts:\n                pytest.fail(\"Example '\" + legal_ex['text'] +\n                    \"' was not generated.\")\n        pytest.fail('An unknown example was not generated (' + str(len(\n            facade.train_examples)) + ' generated instead of ' + str(len(\n            legal_examples)) + ').\\nGenerated: ' + str(facade.train_examples))\n    legal_syn = TestSystem.get_legal_synonyms(file_path)\n    if legal_syn is not None:\n        synonyms = AST.get_or_create().get_entities_synonyms()\n        for key in synonyms:\n            if key not in legal_syn:\n                pytest.fail(\"'\" + key + \"' shouldn't have any synonyms.\")\n            for syn in synonyms[key]:\n                if syn not in legal_syn[key]:\n                    pytest.fail(\"'\" + syn + \"' shouldn't be a synonym of '\" +\n                        key + \"'\")\n"
}