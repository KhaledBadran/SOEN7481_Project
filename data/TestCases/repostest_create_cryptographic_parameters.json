{
    "functionName": "test_create_cryptographic_parameters",
    "className": "TestAttributeValueFactory",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_core_&_factories_&_test_attribute_values.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that a CryptographicParameters attribute can be created.\n        \"\"\"\nvalue = {'block_cipher_mode': enums.BlockCipherMode.NIST_KEY_WRAP,\n    'padding_method': enums.PaddingMethod.ANSI_X923, 'key_role_type': enums\n    .KeyRoleType.KEK, 'hashing_algorithm': enums.HashingAlgorithm.SHA_512,\n    'digital_signature_algorithm': enums.DigitalSignatureAlgorithm.\n    ECDSA_WITH_SHA512, 'cryptographic_algorithm': enums.\n    CryptographicAlgorithm.HMAC_SHA512, 'random_iv': True, 'iv_length': 96,\n    'tag_length': None, 'fixed_field_length': 32, 'invocation_field_length':\n    64, 'counter_length': None, 'initial_counter_value': 1}\ncryptographic_parameters = self.factory.create_attribute_value(enums.\n    AttributeType.CRYPTOGRAPHIC_PARAMETERS, value)\nself.assertIsInstance(cryptographic_parameters, attributes.\n    CryptographicParameters)\nself.assertEqual(enums.BlockCipherMode.NIST_KEY_WRAP,\n    cryptographic_parameters.block_cipher_mode)\nself.assertEqual(enums.PaddingMethod.ANSI_X923, cryptographic_parameters.\n    padding_method)\nself.assertEqual(enums.KeyRoleType.KEK, cryptographic_parameters.key_role_type)\nself.assertEqual(enums.HashingAlgorithm.SHA_512, cryptographic_parameters.\n    hashing_algorithm)\nself.assertEqual(enums.DigitalSignatureAlgorithm.ECDSA_WITH_SHA512,\n    cryptographic_parameters.digital_signature_algorithm)\nself.assertEqual(enums.CryptographicAlgorithm.HMAC_SHA512,\n    cryptographic_parameters.cryptographic_algorithm)\nself.assertEqual(True, cryptographic_parameters.random_iv)\nself.assertEqual(96, cryptographic_parameters.iv_length)\nself.assertEqual(None, cryptographic_parameters.tag_length)\nself.assertEqual(32, cryptographic_parameters.fixed_field_length)\nself.assertEqual(64, cryptographic_parameters.invocation_field_length)\nself.assertEqual(None, cryptographic_parameters.counter_length)\nself.assertEqual(1, cryptographic_parameters.initial_counter_value)\n"
}