{
    "functionName": "test_filter_srna",
    "className": "TestsRNADetection",
    "fileName": "/Sung-Huan_&_ANNOgesic/tests_&_test_srna.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "self.srna.helper.merge_blast_out = self.mock.mock_merge_blast_out\nsr.classify_srna = self.mock.mock_classify_srna\nsr.gen_srna_table = self.mock.mock_gen_srna_table\nsr.extract_blast = self.mock.mock_extract_blast\nself.srna._run_blast = self.mock.mock_run_blast\nself.srna._run_format = self.mock.mock_run_format\nsr.extract_energy = self.mock.mock_extract_energy\nsr.change_format = self.mock.mock_change_format\nself.srna._run_replot = self.mock.mock_run_replot\nself.srna._convert_pdf = self.mock.mock_convert_pdf\nself.srna._run_mountain = self.mock.mock_run_mountain\nself.srna.multiparser = Mock_multiparser\nself.srna._check_gff = self.mock.mock_check_gff\nself.srna._run_normal = self.mock.mock_run_normal\nself.srna._run_utrsrna = self.mock.mock_run_utrsrna\nsr.merge_srna_gff = self.mock.mock_merge_srna_gff\nsr.merge_srna_table = self.mock.mock_merge_srna_table\nsr.extract_energy = self.mock.mock_extract_energy\nself.srna.helper.get_seq = self.mock.mock_get_seq\nself.srna._run_RNAfold = self.mock.mock_run_RNAfold\nstat_out = os.path.join(self.out, 'stat')\nif 'mountain_plot' not in os.listdir(self.out):\n    os.mkdir(os.path.join(self.out, 'mountain_plot'))\nsec_path = os.path.join(self.out, 'sec_structure')\nif 'sec_structure' not in os.listdir(self.out):\n    os.mkdir(sec_path)\n    os.mkdir(os.path.join(sec_path, 'sec_plot'))\n    os.mkdir(os.path.join(sec_path, 'dot_plot'))\ngen_file(os.path.join(self.fastas, 'tmp/test.fa'), \"\"\">test\nAAATTTGGGCCC\"\"\")\ngen_file(os.path.join(self.out, 'sRNA_seq_test'), \"\"\">test\nAAATTTGGGCCC\"\"\")\ngen_file(os.path.join(self.out, 'sRNA_index_test'), \"\"\">test\nAAATTTGGGCCC\"\"\")\ngen_file(os.path.join(self.out, 'tmp_basic_test'), self.example.srna_file)\ngen_file(os.path.join(self.out, 'tmp_energy_test'), 'test')\ngen_file(os.path.join(self.out, 'tmp_nr_test'), 'test')\ngen_file(os.path.join(self.out, 'tmp_sRNA_test'), 'test')\ngen_file(os.path.join(self.out, 'tmp_sRNA_test.csv'), 'test')\ngen_file(os.path.join(self.test_folder, 'srna'), 'test')\ngen_file(os.path.join(self.test_folder, 'nr'), 'test')\nsr.blast_class = self.mock.mock_blast_class\nsr.srna_sorf_comparison = self.mock.mock_srna_sorf_comparison\nargs = self.mock_args.mock()\nargs.import_info = ['tss', 'blast_nr', 'blast_srna', 'sec_str', 'sorf']\nargs.out_folder = self.out\nargs.fastas = self.fastas\nargs.rnafold = 'test'\nargs.relplot_pl = 'test'\nargs.mountain_pl = 'test'\nargs.table_best = True\nargs.in_cds = False\nargs.ps2pdf14_path = 'test'\nargs.sorf_file = self.sorf\nargs.mountain = True\nargs.nr_database = os.path.join(self.test_folder, 'nr')\nargs.srna_database = os.path.join(self.test_folder, 'srna')\nargs.blastx = 'blast_path'\nargs.blastn = 'blast_path'\nargs.nr_format = False\nlog = open(os.path.join(self.test_folder, 'test.log'), 'w')\nargs.srna_format = False\nargs.compute_sec_str = False\nargs.e_nr = 0\nargs.e_srna = 0\nargs.para_blast = 1\nargs.blast_score_s = 0\nargs.blast_score_n = 0\nself.srna._filter_srna(args, ['test'], log)\ndatas = import_data(os.path.join(self.out, 'tmp_basic_test'))\nself.assertEqual('\\n'.join(datas), 'test')\n"
}