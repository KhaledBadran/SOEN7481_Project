{
    "functionName": "test_search_cpu",
    "className": null,
    "fileName": "/viebboy_&_PyGOP/test_&_utility_&_test_gop_search.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "model_path = os.path.join(tmpdir.dirname, 'test_model')\nif os.path.exists(model_path):\n    shutil.rmtree(model_path)\nos.mkdir(model_path)\nparams, train_states = utility.get_random_states()\nparams['tmp_dir'] = tmpdir.dirname\nparams['model_name'] = 'test_model'\nparams['convergence_measure'] = random.choice(['train_', 'val_']) + params[\n    'convergence_measure']\nparams['no_op_set'] = len(params['nodal_set']) * len(params['pool_set']) * len(\n    params['activation_set'])\nparams['search_computation'] = 'cpu', 2\ntrain_states['model'] = random.choice(['HeMLGOP', 'HoMLGOP', 'HeMLRN',\n    'HoMLRN'])\ngop_utils.search_cpu(params, train_states, utility.get_generator, [\n    INPUT_DIM, OUTPUT_DIM, BATCH_SIZE, STEPS], utility.get_generator, [\n    INPUT_DIM, OUTPUT_DIM, BATCH_SIZE, STEPS], utility.get_generator, [\n    INPUT_DIM, OUTPUT_DIM, BATCH_SIZE, STEPS])\nshutil.rmtree(model_path)\nparams['max_topology'] = [20, 20, 20]\nparams['layer_iter'] = 1\nparams['block_iter'] = 0\ntrain_states['model'] = 'POPfast'\nos.mkdir(model_path)\ngop_utils.search_cpu(params, train_states, utility.get_generator, [\n    INPUT_DIM, OUTPUT_DIM, BATCH_SIZE, STEPS], utility.get_generator, [\n    INPUT_DIM, OUTPUT_DIM, BATCH_SIZE, STEPS], utility.get_generator, [\n    INPUT_DIM, OUTPUT_DIM, BATCH_SIZE, STEPS])\nshutil.rmtree(model_path)\ntrain_states['model'] = 'POP'\ntrain_states['topology'][-1] = 'gop', OUTPUT_DIM\nos.mkdir(model_path)\ntrain_states['search_layer'] = 'output'\ntrain_states['hidden_op_set_idx'] = np.random.randint(0, params['no_op_set'])\ngop_utils.search_cpu(params, train_states, utility.get_generator, [\n    INPUT_DIM, OUTPUT_DIM, BATCH_SIZE, STEPS], utility.get_generator, [\n    INPUT_DIM, OUTPUT_DIM, BATCH_SIZE, STEPS], utility.get_generator, [\n    INPUT_DIM, OUTPUT_DIM, BATCH_SIZE, STEPS])\ntrain_states['search_layer'] = 'hidden'\ntrain_states['output_op_set_idx'] = np.random.randint(0, params['no_op_set'])\ngop_utils.search_cpu(params, train_states, utility.get_generator, [\n    INPUT_DIM, OUTPUT_DIM, BATCH_SIZE, STEPS], utility.get_generator, [\n    INPUT_DIM, OUTPUT_DIM, BATCH_SIZE, STEPS], utility.get_generator, [\n    INPUT_DIM, OUTPUT_DIM, BATCH_SIZE, STEPS])\nshutil.rmtree(model_path)\n"
}