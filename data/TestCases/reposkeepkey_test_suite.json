{
    "functionName": "keepkey_test_suite",
    "className": null,
    "fileName": "/bitcoin-core_&_HWI/test_&_test_keepkey.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "sys.stderr = open(os.devnull, 'w')\ntype = 'keepkey'\nfull_type = 'keepkey'\npath = 'udp:127.0.0.1:21324'\nfingerprint = '95d8f670'\nmaster_xpub = (\n    'xpub6D1weXBcFAo8CqBbpP4TbH5sxQH8ZkqC5pDEvJ95rNNBZC9zrKmZP2fXMuve7ZRBe18pWQQsGg68jkq24mZchHwYENd8cCiSb71u3KD4AFH'\n    )\ndev_emulator = KeepkeyEmulator(emulator)\nsuite = unittest.TestSuite()\nsuite.addTest(DeviceTestCase.parameterize(TestDeviceConnect, rpc, userpass,\n    type, full_type, path, fingerprint, master_xpub, emulator=dev_emulator,\n    interface=interface))\nsuite.addTest(DeviceTestCase.parameterize(TestDeviceConnect, rpc, userpass,\n    'keepkey_simulator', full_type, path, fingerprint, master_xpub,\n    emulator=dev_emulator, interface=interface))\nsuite.addTest(DeviceTestCase.parameterize(TestGetDescriptors, rpc, userpass,\n    type, full_type, path, fingerprint, master_xpub, emulator=dev_emulator,\n    interface=interface))\nsuite.addTest(DeviceTestCase.parameterize(TestGetKeypool, rpc, userpass,\n    type, full_type, path, fingerprint, master_xpub, emulator=dev_emulator,\n    interface=interface))\nsuite.addTest(DeviceTestCase.parameterize(TestSignTx, rpc, userpass, type,\n    full_type, path, fingerprint, master_xpub, emulator=dev_emulator,\n    interface=interface))\nsuite.addTest(DeviceTestCase.parameterize(TestDisplayAddress, rpc, userpass,\n    type, full_type, path, fingerprint, master_xpub, emulator=dev_emulator,\n    interface=interface))\nsuite.addTest(DeviceTestCase.parameterize(TestSignMessage, rpc, userpass,\n    type, full_type, path, fingerprint, master_xpub, emulator=dev_emulator,\n    interface=interface))\nsuite.addTest(KeepkeyTestCase.parameterize(TestKeepkeyGetxpub, emulator=\n    dev_emulator, interface=interface))\nsuite.addTest(KeepkeyTestCase.parameterize(TestKeepkeyManCommands, emulator\n    =dev_emulator, interface=interface))\nresult = unittest.TextTestRunner(stream=sys.stdout, verbosity=2).run(suite)\nsys.stderr = sys.__stderr__\nreturn result.wasSuccessful()\n"
}