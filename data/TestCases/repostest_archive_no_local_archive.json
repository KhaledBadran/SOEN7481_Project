{
    "functionName": "test_archive_no_local_archive",
    "className": "TestCase",
    "fileName": "/IntegralDefense_&_ACE/lib_&_saq_&_modules_&_test_email.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "self.reset_email_archive()\nsaq.ENCRYPTION_PASSWORD = None\nroot = create_root_analysis(alert_type='mailbox')\nroot.initialize_storage()\nshutil.copy(os.path.join('test_data', 'emails',\n    'splunk_logging.email.rfc822'), os.path.join(root.storage_dir,\n    'email.rfc822'))\nfile_observable = root.add_observable(F_FILE, 'email.rfc822')\nfile_observable.add_directive(DIRECTIVE_ARCHIVE)\nroot.save()\nroot.schedule()\nengine = TestEngine()\nengine.enable_module('analysis_module_file_type', 'test_groups')\nengine.enable_module('analysis_module_file_hash_analyzer', 'test_groups')\nengine.enable_module('analysis_module_email_analyzer', 'test_groups')\nengine.enable_module('analysis_module_email_archiver', 'test_groups')\nengine.enable_module('analysis_module_url_extraction', 'test_groups')\nengine.controlled_stop()\nengine.start()\nengine.wait()\nroot = RootAnalysis(storage_dir=root.storage_dir)\nroot.load()\nfile_observable = root.get_observable(file_observable.id)\nself.assertIsNotNone(file_observable)\narchive_results = file_observable.get_analysis('EmailArchiveResults')\nself.assertIsNotNone(archive_results)\nself.assertIsNone(archive_results.details)\nwith get_db_connection('email_archive') as db:\n    c = db.cursor()\n    c.execute('SELECT archive_id FROM archive')\n    row = c.fetchone()\n    self.assertIsNotNone(row)\n    archive_id = row[0]\n    expected_values = [('body_from', b'unixfreak0037@gmail.com'), (\n        'body_to', b'jwdavison@company.com'), ('decoded_subject',\n        b'canary #3'), ('env_to', b'jwdavison@company.com'), ('message_id',\n        b'<CANTOGZsMiMb+7aB868zXSen_fO=NS-qFTUMo9h2eHtOexY8Qhw@mail.gmail.com>'\n        ), ('subject', b'canary #3'), ('url',\n        b'http://tldp.org/LDP/abs/html'), ('url',\n        b'https://www.alienvault.com'), ('url', b'http://197.210.28.107')]\n    for field_name, field_value in expected_values:\n        with self.subTest(field_name=field_name, field_value=field_value):\n            c.execute(\n                'SELECT value FROM archive_search WHERE field = %s AND archive_id = %s AND value = %s'\n                , (field_name, archive_id, field_value))\n            row = c.fetchone()\n            self.assertIsNotNone(row)\n            value = row[0]\n            self.assertEquals(value, field_value)\n"
}