{
    "functionName": "test_rcm_run_cases",
    "className": "TestSimulation",
    "fileName": "/kyleniemeyer_&_PyTeCK/pyteck_&_tests_&_test_simulation.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"Test that RCM case runs correctly.\n        \"\"\"\nfile_path = os.path.join('testfile_rcm.yaml')\nfilename = pkg_resources.resource_filename(__name__, file_path)\nproperties = ChemKED(filename, skip_validation=True)\nsimulations = create_simulations(filename, properties)\nmechanism_filename = 'gri30.xml'\nSPEC_KEY = {'H2': 'H2', 'O2': 'O2', 'N2': 'N2', 'Ar': 'AR'}\nwith TemporaryDirectory() as temp_dir:\n    sim = simulations[0]\n    sim.setup_case(mechanism_filename, SPEC_KEY, path=temp_dir)\n    sim.run_case()\n    assert os.path.exists(sim.meta['save-file'])\n    with tables.open_file(sim.meta['save-file'], 'r') as h5file:\n        table = h5file.root.simulation\n        assert set(['time', 'temperature', 'pressure', 'volume',\n            'mass_fractions']) == set(table.colnames)\n        time_end = 0.1\n        temp = 2385.3726323703772\n        pres = 7785283.273098443\n        mass_fracs = np.array([0.000120958787, 2.24531172e-06, \n            1.00369447e-05, 0.000522700388, 0.000428382158, 0.0678623202, \n            4.00112919e-07, 1.4654492e-07, 1.2083135e-32, 3.89605241e-34, -\n            3.39400724e-33, -2.46590209e-34, -1.74786488e-31, -\n            5.36410698e-31, 4.72585636e-27, 7.94725956e-26, 5.20640355e-33,\n            2.16633481e-32, 2.74982659e-34, 5.2054721e-35, 5.96795929e-33, \n            -2.9835367e-48, -1.16084981e-45, -2.33518734e-48, -\n            6.38881605e-47, -3.09502377e-48, -8.1401141e-48, -\n            6.95137295e-47, -8.71647858e-47, -3.34677877e-46, 2.0547918e-09,\n            1.59879068e-09, 2.45613053e-09, 2.0696255e-08, 2.82124731e-09, \n            0.000455692132, 3.22230699e-07, 1.49833621e-07, 5.93547268e-08,\n            -2.74353105e-33, -1.17993222e-30, -5.51437143e-36, -\n            9.13974801e-37, -1.97028722e-31, -9.69084296e-32, -\n            1.31976752e-30, -2.1206099e-32, 0.155792718, 0.774803838, \n            2.72630502e-66, 2.88273784e-67, -2.18774836e-50, -1.47465442e-48])\n        assert np.allclose(table.col('time')[-1], time_end)\n        assert np.allclose(table.col('temperature')[-1], temp, rtol=1e-05,\n            atol=1e-09)\n        assert np.allclose(table.col('pressure')[-1], pres, rtol=1e-05,\n            atol=1e-09)\n        assert np.allclose(table.col('mass_fractions')[-1], mass_fracs,\n            rtol=0.0001, atol=1e-08)\npytest.mark.xfail(reason=\n    'cannot currently guarantee integration to specified end time')"
}