{
    "functionName": "test_save_validation_fail_in_created_context_precludes_save",
    "className": "OWMTest",
    "fileName": "/openworm_&_PyOpenWorm/tests_&_CommandTest.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "a = 'http://example.org/mdc'\ns = URIRef('http://example.org/node')\nk = URIRef('http://example.org/created_context')\nv = URIRef('http://example.org/unknown_context')\nself._init_conf({DEFAULT_CONTEXT_KEY: a})\nwith patch('importlib.import_module') as im:\n    with patch('owmeta.command.Context') as ctxc:\n        default_context = Mock()\n        default_context.identifier = URIRef(a)\n        ctxk = Mock()\n        ctxk.identifier = k\n        ctxc.side_effect = [default_context, ctxk]\n\n        def f(ns):\n            ctx = ns.context\n            new_ctx = ns.new_context('this value doesnt matter')\n            stmt = MagicMock(name='stmt')\n            stmt.to_triple.return_value = s, s, s\n            stmt.object.context.identifier = URIRef(a)\n            stmt.property.context.identifier = URIRef(a)\n            stmt.subject.context.identifier = URIRef(a)\n            stmt.context.identifier = URIRef(a)\n            ctx.add_statement(stmt)\n            stmt1 = MagicMock(name='stmt')\n            stmt1.to_triple.return_value = s, s, s\n            stmt1.object.context.identifier = k\n            stmt1.property.context.identifier = v\n            stmt1.subject.context.identifier = k\n            stmt1.context.identifier = k\n            new_ctx.add_statement(stmt1)\n        im().test = f\n        try:\n            self.cut.save('tests', 'test')\n            self.fail('Should have errored')\n        except StatementValidationError:\n            default_context.save_context.assert_not_called()\n            ctxk.save_context.assert_not_called()\n"
}