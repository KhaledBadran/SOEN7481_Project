{
    "functionName": "test_search_consistency",
    "className": null,
    "fileName": "/FreeDiscovery_&_FreeDiscovery/freediscovery_&_server_&_tests_&_test_search.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\" A number of consistency checks\"\"\"\nimport pickle\nfrom scipy.stats import pearsonr\nfrom sklearn.metrics.pairwise import cosine_similarity\ndataset_id, lsi_id, ds_pars, input_ds = get_features_lsi_cached(app)\nquery_document_id = 1\ninput_ds = pd.DataFrame(input_ds['dataset']).set_index('document_id')\npars = dict(parent_id=lsi_id, query_document_id=query_document_id)\ndata = app.post_check(V01 + '/search/', json=pars)\ndf_s = pd.DataFrame(data['data']).set_index('document_id')\ndf_s = df_s.merge(input_ds, how='left', left_index=True, right_index=True)\nwith open(os.path.join(CACHE_DIR, 'ediscovery_cache', dataset_id,\n    'vectorizer'), 'rb') as fh:\n    vect = pickle.load(fh)\nlsi_est = joblib.load(os.path.join(CACHE_DIR, 'ediscovery_cache',\n    dataset_id, 'lsi', lsi_id, 'model'))\nX_tmp = []\ncomp_document_id = 2365444\nfor document_id in [query_document_id, comp_document_id]:\n    with open(os.path.join(ds_pars['data_dir'], input_ds.loc[document_id].\n        file_path), 'rb') as fh:\n        X_tmp.append(fh.read().decode('utf-8'))\nX_tmp = vect.transform(X_tmp)\nX_tmp = lsi_est.transform_lsi_norm(X_tmp)\nassert_allclose(cosine_similarity(X_tmp[[0]], X_tmp[[1]]), df_s.loc[\n    comp_document_id].score)\nwith open(os.path.join(ds_pars['data_dir'], input_ds.loc[query_document_id]\n    .file_path), 'rt') as fh:\n    query_txt = fh.read()\npars = dict(parent_id=lsi_id, query=query_txt)\ndata = app.post_check(V01 + '/search/', json=pars)\ndf_s_txt = pd.DataFrame(data['data']).set_index('document_id')\ndf_s_txt = df_s_txt.merge(input_ds, how='left', left_index=True,\n    right_index=True)\ndf_s_txt.loc[query_document_id].score == 1.0\ndf_s_txt = df_s_txt[df_s_txt.index != query_document_id]\nassert_allclose(df_s.score.values, df_s_txt.score.values)\nquery_category = input_ds.loc[query_document_id].category\nassert df_s[df_s.category == query_category].score.quantile(q=0.75) > df_s[\n    df_s.category != query_category].score.quantile(q=0.75)\n"
}