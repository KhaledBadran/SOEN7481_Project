{
    "functionName": "test_get_wrapped_key_unsupported_attribute_wrapping",
    "className": "TestKmipEngine",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_services_&_server_&_test_engine.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that the right error is thrown when key wrapping is requested\n        with attribute names in a Get request.\n        \"\"\"\ne = engine.KmipEngine()\ne._data_store = self.engine\ne._data_store_session_factory = self.session_factory\ne._data_session = e._data_store_session_factory()\ne._is_allowed_by_operation_policy = mock.Mock(return_value=True)\ne._logger = mock.MagicMock()\ne._cryptography_engine.logger = mock.MagicMock()\nwrapping_key = pie_objects.SymmetricKey(enums.CryptographicAlgorithm.AES, \n    128, b'\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\t\\n\\x0b\\x0c\\r\\x0e\\x0f', [\n    enums.CryptographicUsageMask.WRAP_KEY])\nwrapping_key.state = enums.State.ACTIVE\nunwrapped_key = pie_objects.SymmetricKey(enums.CryptographicAlgorithm.AES, \n    128, b'\\x00\\x11\"3DUfw\\x88\\x99\\xaa\\xbb\\xcc\\xdd\\xee\\xff', [enums.\n    CryptographicUsageMask.ENCRYPT])\ne._data_session.add(wrapping_key)\ne._data_session.add(unwrapped_key)\ne._data_session.commit()\ne._data_session = e._data_store_session_factory()\nwrapping_key_uuid = str(wrapping_key.unique_identifier)\nunwrapped_key_uuid = str(unwrapped_key.unique_identifier)\ncryptographic_parameters = attributes.CryptographicParameters(block_cipher_mode\n    =enums.BlockCipherMode.NIST_KEY_WRAP)\npayload = payloads.GetRequestPayload(unique_identifier=unwrapped_key_uuid,\n    key_wrapping_specification=objects.KeyWrappingSpecification(\n    wrapping_method=enums.WrappingMethod.ENCRYPT,\n    encryption_key_information=objects.EncryptionKeyInformation(\n    unique_identifier=wrapping_key_uuid, cryptographic_parameters=\n    cryptographic_parameters), attribute_names=['Cryptographic Algorithm'],\n    encoding_option=enums.EncodingOption.NO_ENCODING))\nargs = payload,\nself.assertRaisesRegex(exceptions.IllegalOperation,\n    'Wrapping object attributes is not supported.', e._process_get, *args)\n"
}