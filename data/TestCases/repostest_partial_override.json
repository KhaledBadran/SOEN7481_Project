{
    "functionName": "test_partial_override",
    "className": "TestGetSimulationToOptimizationParameterMapping",
    "fileName": "/PEtab-dev_&_PEtab/tests_&_test_parameter_mapping.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "condition_df = condition_df_2_conditions\n_, sbml_model = minimal_sbml_model\nadd_global_parameter(sbml_model, 'dynamicParameter1')\nadd_global_parameter(sbml_model, 'observableParameter1_obs1')\nadd_global_parameter(sbml_model, 'observableParameter2_obs1')\nadd_global_parameter(sbml_model, 'observableParameter1_obs2')\nmeasurement_df = pd.DataFrame(data={OBSERVABLE_ID: ['obs1', 'obs2', 'obs1',\n    'obs2'], SIMULATION_CONDITION_ID: ['condition1', 'condition1',\n    'condition2', 'condition2'], PREEQUILIBRATION_CONDITION_ID: ['', '', '',\n    ''], OBSERVABLE_PARAMETERS: ['obs1par1override;obs1par2cond1override',\n    '', 'obs1par1override;obs1par2cond2override', 'obs2par1cond2override'],\n    NOISE_PARAMETERS: ['', '', '', '']})\nparameter_df = pd.DataFrame(data={PARAMETER_ID: ['dynamicParameter1',\n    'obs1par1override', 'obs1par2cond1override', 'obs1par2cond2override',\n    'obs2par1cond2override'], ESTIMATE: [1, 1, 1, 1, 1]})\nparameter_df.set_index(PARAMETER_ID, inplace=True)\nexpected = [({}, {'fixedParameter1': 1.0, 'dynamicParameter1':\n    'dynamicParameter1', 'observableParameter1_obs1': 'obs1par1override',\n    'observableParameter2_obs1': 'obs1par2cond1override',\n    'observableParameter1_obs2': np.nan}, {}, {'fixedParameter1': LIN,\n    'dynamicParameter1': LIN, 'observableParameter1_obs1': LIN,\n    'observableParameter2_obs1': LIN, 'observableParameter1_obs2': LIN}), (\n    {}, {'fixedParameter1': 2.0, 'dynamicParameter1': 'dynamicParameter1',\n    'observableParameter1_obs1': 'obs1par1override',\n    'observableParameter2_obs1': 'obs1par2cond2override',\n    'observableParameter1_obs2': 'obs2par1cond2override'}, {}, {\n    'fixedParameter1': LIN, 'dynamicParameter1': LIN,\n    'observableParameter1_obs1': LIN, 'observableParameter2_obs1': LIN,\n    'observableParameter1_obs2': LIN})]\nactual = petab.get_optimization_to_simulation_parameter_mapping(measurement_df\n    =measurement_df, condition_df=condition_df, sbml_model=sbml_model,\n    parameter_df=parameter_df)\nassert np.isnan(expected[0][1]['observableParameter1_obs2'])\nassert np.isnan(actual[0][1]['observableParameter1_obs2'])\nexpected[0][1]['observableParameter1_obs2'] = 0.0\nactual[0][1]['observableParameter1_obs2'] = 0.0\nassert actual == expected\nstaticmethod"
}