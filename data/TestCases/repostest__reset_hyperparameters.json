{
    "functionName": "test__reset_hyperparameters",
    "className": "Test_Oi2",
    "fileName": "/fraenkel-lab_&_OmicsIntegrator2/test_&_test_graph.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "print('test__reset_hyperparameters')\nreset = self.graph._reset_hyperparameters\nwith pytest.raises(ValueError):\n    reset({'w': -1})\nwith pytest.raises(ValueError):\n    reset({'w': '1'})\nwith pytest.raises(ValueError):\n    reset({'b': -1})\nwith pytest.raises(ValueError):\n    reset({'b': '1'})\nwith pytest.raises(ValueError):\n    reset({'g': -1})\nwith pytest.raises(ValueError):\n    reset({'g': '1'})\nwith pytest.raises(ValueError):\n    reset({'edge_noise': -1})\nwith pytest.raises(ValueError):\n    reset({'edge_noise': '1'})\nwith pytest.raises(ValueError):\n    reset({'dummy_mode': -1})\nwith pytest.raises(ValueError):\n    reset({'dummy_mode': '1'})\nwith pytest.raises(ValueError):\n    reset({'dummy_mode': ' all'})\nwith pytest.raises(ValueError):\n    reset({'seed': [1]})\nwith pytest.raises(ValueError):\n    reset({'seed': '1'})\nparams = {'w': 5, 'b': 2, 'g': 2, 'edge_noise': 0.1, 'dummy_mode':\n    'terminals', 'seed': 0, 'skip_checks': False}\nreset(params)\nassert self.graph.params.w == params['w']\nassert self.graph.params.b == params['b']\nassert self.graph.params.g == params['g']\nassert self.graph.params.edge_noise == params['edge_noise']\nassert self.graph.params.dummy_mode == params['dummy_mode']\nassert self.graph.params.seed == params['seed']\nassert hasattr(self.graph, 'edge_penalties')\nassert hasattr(self.graph, 'costs')\nprint('...pass')\n"
}