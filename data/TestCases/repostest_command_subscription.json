{
    "functionName": "test_command_subscription",
    "className": null,
    "fileName": "/PRIArobotics_&_HedgehogServer/tests_&_test_server.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "async with conn_dealer() as socket:\n    sub = Subscription()\n    sub.subscribe = True\n    sub.timeout = 1000\n    unsub = Subscription()\n    unsub.subscribe = False\n    unsub.timeout = 1000\n    await assertReplyDealer(socket, io.CommandSubscribe(0, sub), ack.OK)\n    with assertTimeoutTrio(2):\n        await socket.recv_multipart()\n    with assertImmediate():\n        await assertReplyDealer(socket, io.Action(0, io.INPUT_PULLDOWN), ack.OK\n            )\n        _, update = await socket.recv_msg()\n        assert update == io.CommandUpdate(0, io.INPUT_PULLDOWN, sub)\n    await assertReplyDealer(socket, io.Action(0, io.INPUT_PULLDOWN), ack.OK)\n    with assertTimeoutTrio(2):\n        await socket.recv_multipart()\n    with assertImmediate():\n        await assertReplyDealer(socket, io.Action(0, io.INPUT_PULLUP), ack.OK)\n        _, update = await socket.recv_msg()\n        assert update == io.CommandUpdate(0, io.INPUT_PULLUP, sub)\n    with assertPassed(1):\n        await assertReplyDealer(socket, io.Action(0, io.INPUT_PULLDOWN), ack.OK\n            )\n        _, update = await socket.recv_msg()\n        assert update == io.CommandUpdate(0, io.INPUT_PULLDOWN, sub)\n    with assertImmediate():\n        await assertReplyDealer(socket, io.CommandSubscribe(0, sub), ack.OK)\n        _, update = await socket.recv_msg()\n        assert update == io.CommandUpdate(0, io.INPUT_PULLDOWN, sub)\n    await assertReplyDealer(socket, io.CommandSubscribe(0, unsub), ack.OK)\n    with assertPassed(1):\n        await assertReplyDealer(socket, io.Action(0, io.INPUT_PULLUP), ack.OK)\n        _, update = await socket.recv_msg()\n        assert update == io.CommandUpdate(0, io.INPUT_PULLUP, sub)\n    await assertReplyDealer(socket, io.CommandSubscribe(0, unsub), ack.OK)\n    await assertReplyDealer(socket, io.Action(0, io.INPUT_PULLDOWN), ack.OK)\n    with assertTimeoutTrio(2):\n        await socket.recv_multipart()\npytest.mark.trio"
}