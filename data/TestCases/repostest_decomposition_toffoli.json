{
    "functionName": "test_decomposition_toffoli",
    "className": "Test_conjugated_kernel",
    "fileName": "/QE-Lab_&_OpenQL/tests_&_test_unitary.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "self.setUpClass()\nnum_qubits = 3\np = ql.Program('test_usingqx_toffoli', platform, num_qubits)\nk = ql.Kernel('akernel', platform, num_qubits)\nmatrix = np.array([[1, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0], [0, \n    0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0\n    ], [0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, \n    0, 1, 0]]).flatten()\nu1 = ql.Unitary('rotatedtoffoli', matrix)\nu1.decompose()\nk.hadamard(0)\nk.hadamard(1)\nk.hadamard(2)\nk.gate(u1, [0, 1, 2])\np.add_kernel(k)\np.compile()\nqx.set(os.path.join(output_dir, p.name + '_initialqasmwriter_out.qasm'))\nqx.execute()\nc0 = qx.get_state()\nself.assertAlmostEqual(0.125 * helper_prob(matrix[0] + matrix[1] + matrix[2\n    ] + matrix[3] + matrix[4] + matrix[5] + matrix[6] + matrix[7]),\n    helper_regex(c0)[0], 5)\nself.assertAlmostEqual(0.125 * helper_prob(matrix[8] + matrix[9] + matrix[\n    10] + matrix[11] + matrix[12] + matrix[13] + matrix[14] + matrix[15]),\n    helper_regex(c0)[1], 5)\nself.assertAlmostEqual(0.125 * helper_prob(matrix[16] + matrix[17] + matrix\n    [18] + matrix[19] + matrix[20] + matrix[21] + matrix[22] + matrix[23]),\n    helper_regex(c0)[2], 5)\nself.assertAlmostEqual(0.125 * helper_prob(matrix[24] + matrix[25] + matrix\n    [26] + matrix[27] + matrix[28] + matrix[29] + matrix[30] + matrix[31]),\n    helper_regex(c0)[3], 5)\nself.assertAlmostEqual(0.125 * helper_prob(matrix[32] + matrix[33] + matrix\n    [34] + matrix[35] + matrix[36] + matrix[37] + matrix[38] + matrix[39]),\n    helper_regex(c0)[4], 5)\nself.assertAlmostEqual(0.125 * helper_prob(matrix[40] + matrix[41] + matrix\n    [42] + matrix[43] + matrix[44] + matrix[45] + matrix[46] + matrix[47]),\n    helper_regex(c0)[5], 5)\nself.assertAlmostEqual(0.125 * helper_prob(matrix[48] + matrix[49] + matrix\n    [50] + matrix[51] + matrix[52] + matrix[53] + matrix[54] + matrix[55]),\n    helper_regex(c0)[6], 5)\nself.assertAlmostEqual(0.125 * helper_prob(matrix[56] + matrix[57] + matrix\n    [58] + matrix[59] + matrix[60] + matrix[61] + matrix[62] + matrix[63]),\n    helper_regex(c0)[7], 5)\n"
}