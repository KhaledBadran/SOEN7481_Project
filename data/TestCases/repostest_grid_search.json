{
    "functionName": "test_grid_search",
    "className": "TestSklearn",
    "fileName": "/microsoft_&_LightGBM/tests_&_python_package_test_&_test_sklearn.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "X, y = load_iris(return_X_y=True)\ny = y.astype(str)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1,\n    random_state=42)\nX_train, X_val, y_train, y_val = train_test_split(X_train, y_train,\n    test_size=0.1, random_state=42)\nparams = dict(subsample=0.8, subsample_freq=1)\ngrid_params = dict(boosting_type=['rf', 'gbdt'], n_estimators=[4, 6],\n    reg_alpha=[0.01, 0.005])\nfit_params = dict(verbose=False, eval_set=[(X_val, y_val)], eval_metric=\n    constant_metric, early_stopping_rounds=2)\ngrid = GridSearchCV(estimator=lgb.LGBMClassifier(**params), param_grid=\n    grid_params, cv=2)\ngrid.fit(X_train, y_train, **fit_params)\nscore = grid.score(X_test, y_test)\nself.assertIn(grid.best_params_['boosting_type'], ['rf', 'gbdt'])\nself.assertIn(grid.best_params_['n_estimators'], [4, 6])\nself.assertIn(grid.best_params_['reg_alpha'], [0.01, 0.005])\nself.assertLessEqual(grid.best_score_, 1.0)\nself.assertEqual(grid.best_estimator_.best_iteration_, 1)\nself.assertLess(grid.best_estimator_.best_score_['valid_0']['multi_logloss'\n    ], 0.25)\nself.assertEqual(grid.best_estimator_.best_score_['valid_0']['error'], 0)\nself.assertGreaterEqual(score, 0.2)\nself.assertLessEqual(score, 1.0)\n"
}