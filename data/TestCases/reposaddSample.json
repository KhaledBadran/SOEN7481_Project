{
    "functionName": "addSample",
    "className": null,
    "fileName": "/jakob-lass_&_MJOLNIR/MJOLNIR_&_Data_&_DataFile.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "sam = entry.create_group('sample')\nsam.attrs['NX_class'] = np.string_('NXsample')\ndset = sam.create_dataset('name', (1,), data=np.string_(self.sample.name))\nub = self.sample.orientationMatrix / (2 * np.pi)\ndset = sam.create_dataset('orientation_matrix', data=ub)\ndset = sam.create_dataset('plane_vector_1', data=self.sample.plane_vector1)\ndset = sam.create_dataset('plane_vector_2', data=self.sample.plane_vector2)\nnormal = self.sample.planeNormal\ndset = sam.create_dataset('plane_normal', data=normal)\ncell = np.array(self.sample.unitCell, dtype='float32')\ndset = sam.create_dataset('unit_cell', data=cell)\ndset = sam.create_dataset('azimuthal_angle', data=self.sample.azimuthalAngle)\ndset.attrs['units'] = np.string_('degree')\ndset = sam.create_dataset('x', data=self.sample.x)\ndset.attrs['units'] = np.string_('degree')\ndset = sam.create_dataset('y', data=self.sample.y)\ndset.attrs['units'] = np.string_('degree')\nif hasattr(self, 'temperature'):\n    if not self.temperature is None:\n        dset = sam.create_dataset('temperature', data=self.temperature,\n            dtype='float32')\n        dset.attrs['units'] = np.string_('K')\nif hasattr(self, 'magneticField'):\n    if not self.magneticField is None:\n        dset = sam.create_dataset('magnetic_field', data=self.magneticField,\n            dtype='float32')\n        dset.attrs['units'] = np.string_('T')\nif hasattr(self, 'electricField'):\n    if not self.electricField is None:\n        dset = sam.create_dataset('electric_field', data=self.electricField,\n            dtype='float32')\n        dset.attrs['units'] = np.string_('V')\nfor attr, value in zip(['sgu', 'sgl'], ['sgu', 'sgl']):\n    dset = sam.create_dataset(attr, (1,), data=getattr(self.sample, value))\n    dset.attrs['units'] = np.string_('degree')\n    dset = sam.create_dataset(attr + '_zero', (1,), data=getattr(self.\n        sample, value + 'Zero'))\n    dset.attrs['units'] = np.string_('degree')\n"
}