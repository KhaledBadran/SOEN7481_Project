{
    "functionName": "testNormalizedArmWeights",
    "className": "BatchTrialTest",
    "fileName": "/facebook_&_Ax/ax_&_core_&_tests_&_test_batch_trial.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "new_batch_trial = self.experiment.new_batch_trial()\nparameterizations = [{'w': 0.75, 'x': 1, 'y': 'foo', 'z': True}, {'w': 0.77,\n    'x': 2, 'y': 'foo', 'z': True}]\narms = [Arm(parameters=p) for i, p in enumerate(parameterizations)]\nnew_batch_trial.add_arms_and_weights(arms=arms, weights=[2, 1])\narm_weights = new_batch_trial.normalized_arm_weights()\nbatch_arm_parameters = [arm.parameters for arm in list(arm_weights.keys())]\narm_parameters = [arm.parameters for arm in arms]\nself.assertEqual(batch_arm_parameters, arm_parameters)\nself.assertTrue(np.allclose(list(arm_weights.values()), [2 / 3, 1 / 3]))\narm_weights = new_batch_trial.normalized_arm_weights(total=100)\nbatch_arm_parameters = [arm.parameters for arm in list(arm_weights.keys())]\narm_parameters = [arm.parameters for arm in arms]\nself.assertEqual(batch_arm_parameters, arm_parameters)\nself.assertTrue(np.allclose(list(arm_weights.values()), [200 / 3, 100 / 3]))\narm_weights = new_batch_trial.normalized_arm_weights(total=1, trunc_digits=2)\nbatch_arm_parameters = [arm.parameters for arm in list(arm_weights.keys())]\narm_parameters = [arm.parameters for arm in arms]\nself.assertEqual(batch_arm_parameters, arm_parameters)\nself.assertTrue(np.allclose(list(arm_weights.values()), [0.67, 0.33]))\n"
}