{
    "functionName": "test_monte_carlo_2_din",
    "className": null,
    "fileName": "/GPflow_&_GPflow/tests_&_gpflow_&_conditionals_&_test_uncertain_conditional.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "kernel = gpflow.kernels.SquaredExponential(variance=rng.rand())\nmean_function = mean_function_factory(mean, DataMC2.D_in, DataMC2.D_out)\nmodel = MomentMatchingSVGP(kernel, gpflow.likelihoods.Gaussian(),\n    num_latent_gps=DataMC2.D_out, mean_function=mean_function,\n    inducing_variable=DataMC2.X.copy(), whiten=white)\nmodel.full_output_cov = True\ntraining_loop(model.training_loss_closure(DataMC2.data), optimizer=tf.\n    optimizers.Adam(), var_list=model.trainable_variables, maxiter=100,\n    compile=True)\nmean1, var1 = model.uncertain_predict_f_moment_matching(*map(tf.\n    convert_to_tensor, [DataMC2.Xnew_mu, DataMC2.Xnew_covar]))\nfor n in range(DataMC2.N_new):\n    mean2, var2 = model.uncertain_predict_f_monte_carlo(DataMC2.Xnew_mu[n,\n        ...], DataMC2.L[n, ...])\n    assert_allclose(mean1[n, ...], mean2, atol=0.01)\n    assert_allclose(var1[n, ...], var2, atol=0.01)\npytest.mark.parametrize('white', [True, False])pytest.mark.parametrize('mean', MEANS)"
}