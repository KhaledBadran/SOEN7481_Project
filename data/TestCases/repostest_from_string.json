{
    "functionName": "test_from_string",
    "className": "TestSigningInfo",
    "fileName": "/named-data_&_PyNDN2/tests_&_unit_tests_&_test_signing_info.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "infoDefault = SigningInfo('')\nself.assertEqual(SigningInfo.SignerType.NULL, infoDefault.getSignerType())\nself.assertTrue(Name().equals(infoDefault.getSignerName()))\nself.assertEqual(DigestAlgorithm.SHA256, infoDefault.getDigestAlgorithm())\ninfoId = SigningInfo('id:/my-identity')\nself.assertEqual(SigningInfo.SignerType.ID, infoId.getSignerType())\nself.assertTrue(Name('/my-identity').equals(infoId.getSignerName()))\nself.assertEqual(DigestAlgorithm.SHA256, infoId.getDigestAlgorithm())\ninfoKey = SigningInfo('key:/my-key')\nself.assertEqual(SigningInfo.SignerType.KEY, infoKey.getSignerType())\nself.assertTrue(Name('/my-key').equals(infoKey.getSignerName()))\nself.assertEqual(DigestAlgorithm.SHA256, infoKey.getDigestAlgorithm())\ninfoCert = SigningInfo('cert:/my-cert')\nself.assertEqual(SigningInfo.SignerType.CERT, infoCert.getSignerType())\nself.assertTrue(Name('/my-cert').equals(infoCert.getSignerName()))\nself.assertEqual(DigestAlgorithm.SHA256, infoCert.getDigestAlgorithm())\ninfoSha = SigningInfo('id:/localhost/identity/digest-sha256')\nself.assertEqual(SigningInfo.SignerType.SHA256, infoSha.getSignerType())\nself.assertTrue(Name().equals(infoSha.getSignerName()))\nself.assertEqual(DigestAlgorithm.SHA256, infoSha.getDigestAlgorithm())\n"
}