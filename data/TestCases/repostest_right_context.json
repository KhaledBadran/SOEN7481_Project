{
    "functionName": "test_right_context",
    "className": "TestContexts",
    "fileName": "/apmoore1_&_Bella/tests_&_test_contexts.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Tests :py:func:`bella.contexts.right_context`\n        \"\"\"\nsingle_right = [[' that is to represent a Tweet!!!!'], [\n    ' however I did not get much work done'], [\n    ' in today and it was ok as it was not raining.']]\nfor index, test_context in enumerate(self.single_context):\n    test_text = test_context['text']\n    test_target = test_context['target']\n    correct_context = single_right[index]\n    right_string = context(test_context, 'right', inc_target=False)\n    msg = (\n        'Cannot get the right context of target {} text {} which should be {} and not {}'\n        .format(test_target, test_text, correct_context, right_string))\n    self.assertEqual(correct_context, right_string, msg=msg)\nsingle_right = [['news article that is to represent a Tweet!!!!'], [\n    'day however I did not get much work done'], [\n    'cycled in today and it was ok as it was not raining.']]\nfor index, test_context in enumerate(self.single_context):\n    test_text = test_context['text']\n    test_target = test_context['target']\n    correct_context = single_right[index]\n    right_string = context(test_context, 'right', inc_target=True)\n    msg = (\n        'Cannot get the right context of target {} text {} including the target which should be {} and not {}'\n        .format(test_target, test_text, correct_context, right_string))\n    self.assertEqual(correct_context, right_string, msg=msg)\nmulti_right = [[\n    ' that is to represent a Tweet!!!! and it was an awful News Article I think.'\n    , ' I think.'], [' however I did not get much work done in the day', '']]\nfor index, test_context in enumerate(self.multi_contexts):\n    test_text = test_context['text']\n    test_target = test_context['target']\n    correct_context = multi_right[index]\n    right_string = context(test_context, 'right', inc_target=False)\n    msg = (\n        'Cannot get the right context of target {} text {} which should be {} and not {}'\n        .format(test_target, test_text, correct_context, right_string))\n    self.assertEqual(correct_context, right_string, msg=msg)\nmulti_right = [[\n    'news article that is to represent a Tweet!!!! and it was an awful News Article I think.'\n    , 'News Article I think.'], [\n    'Day however I did not get much work done in the day', 'day']]\nfor index, test_context in enumerate(self.multi_contexts):\n    test_text = test_context['text']\n    test_target = test_context['target']\n    correct_context = multi_right[index]\n    right_string = context(test_context, 'right', inc_target=True)\n    msg = (\n        'Cannot get the right context of target {} text {} including the target which should be {} and not {}'\n        .format(test_target, test_text, correct_context, right_string))\n    self.assertEqual(correct_context, right_string, msg=msg)\n"
}