{
    "functionName": "create_color_lut",
    "className": null,
    "fileName": "/nipy_&_PySurfer/surfer_&_utils.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"Return a colormap suitable for setting as a Mayavi LUT.\n\n    Parameters\n    ----------\n    cmap : string, list of colors, n x 3 or n x 4 array\n        Input colormap definition. This can be the name of a matplotlib\n        colormap, a list of valid matplotlib colors, or a suitable\n        mayavi LUT (possibly missing the alpha channel).\n\n        if value is \"auto\", a default sequential or divergent colormap is\n        returned\n    n_colors : int, optional\n        Number of colors in the resulting LUT. This is ignored if cmap\n        is a 2d array.\n    center : double, optional\n        indicates whether desired colormap should be for divergent values,\n        currently only used to select default colormap for cmap='auto'\n\n    Returns\n    -------\n    lut : n_colors x 4 integer array\n        Color LUT suitable for passing to mayavi\n    \"\"\"\nif isinstance(cmap, np.ndarray):\n    if np.ndim(cmap) == 2:\n        if cmap.shape[1] == 4:\n            lut = cmap.astype(np.int)\n        elif cmap.shape[1] == 3:\n            alpha = np.ones(len(cmap), np.int) * 255\n            lut = np.c_[cmap, alpha]\n        return lut\nif isinstance(cmap, string_types) and cmap == 'auto':\n    if center is None:\n        cmap = 'rocket'\n    else:\n        cmap = 'icefire'\nsurfer_cmaps = ['rocket', 'mako', 'icefire', 'vlag']\nsurfer_cmaps += [(name + '_r') for name in surfer_cmaps]\nif not isinstance(cmap, string_types) and isinstance(cmap, Sequence):\n    colors = list(map(mpl.colors.colorConverter.to_rgba, cmap))\n    cmap = mpl.colors.ListedColormap(colors)\nelif cmap in surfer_cmaps:\n    cmap = getattr(surfer_cm, cmap)\nelse:\n    try:\n        cmap = mpl_cm.get_cmap(cmap)\n    except (TypeError, ValueError):\n        raise ValueError('Input %r was not valid for making a lut' % cmap)\nlut = (cmap(np.linspace(0, 1, n_colors)) * 255).astype(np.int)\nreturn lut\n"
}