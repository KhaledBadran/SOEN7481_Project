{
    "functionName": "_create_approximate_models",
    "className": null,
    "fileName": "/GPflow_&_GPflow/tests_&_integration_&_test_method_equivalence.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"\n    1) Variational GP (with the likelihood set to Gaussian)\n    2) Sparse variational GP (likelihood is Gaussian, inducing points\n       at the data)\n    3) Sparse variational GP (as above, but with the whitening rotation\n       of the inducing variables)\n    4) Sparse variational GP Regression (as above, but there the inducing\n       variables are 'collapsed' out, as in Titsias 2009)\n    5) FITC Sparse GP Regression\n    \"\"\"\nmodel_1 = gpflow.models.VGP((Datum.X, Datum.Y), gpflow.kernels.\n    SquaredExponential(), likelihood=gpflow.likelihoods.Gaussian(),\n    mean_function=gpflow.mean_functions.Constant())\nmodel_2 = gpflow.models.SVGP(gpflow.kernels.SquaredExponential(), gpflow.\n    likelihoods.Gaussian(), inducing_variable=Datum.X.copy(), q_diag=False,\n    mean_function=gpflow.mean_functions.Constant(), num_latent_gps=Datum.Y.\n    shape[1])\ngpflow.set_trainable(model_2.inducing_variable, False)\nmodel_3 = gpflow.models.SVGP(kernel=gpflow.kernels.SquaredExponential(),\n    likelihood=gpflow.likelihoods.Gaussian(), inducing_variable=Datum.X.\n    copy(), q_diag=False, whiten=True, mean_function=gpflow.mean_functions.\n    Constant(), num_latent_gps=Datum.Y.shape[1])\ngpflow.set_trainable(model_3.inducing_variable, False)\nmodel_4 = gpflow.models.GPRFITC((Datum.X, Datum.Y), kernel=gpflow.kernels.\n    SquaredExponential(), inducing_variable=Datum.X.copy(), mean_function=\n    Constant())\ngpflow.set_trainable(model_4.inducing_variable, False)\nmodel_5 = gpflow.models.SGPR((Datum.X, Datum.Y), gpflow.kernels.\n    SquaredExponential(), inducing_variable=Datum.X.copy(), mean_function=\n    Constant())\ngpflow.set_trainable(model_5.inducing_variable, False)\nopt = gpflow.optimizers.Scipy()\nopt.minimize(model_1.training_loss, variables=model_1.trainable_variables,\n    options=dict(maxiter=300))\nopt.minimize(model_2.training_loss_closure(Datum.data), variables=model_2.\n    trainable_variables, options=dict(maxiter=300))\nopt.minimize(model_3.training_loss_closure(Datum.data), variables=model_3.\n    trainable_variables, options=dict(maxiter=300))\nopt.minimize(model_4.training_loss, variables=model_4.trainable_variables,\n    options=dict(maxiter=300))\nopt.minimize(model_5.training_loss, variables=model_5.trainable_variables,\n    options=dict(maxiter=300))\nreturn model_1, model_2, model_3, model_4, model_5\n"
}