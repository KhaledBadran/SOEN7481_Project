{
    "functionName": "testSurv",
    "className": "Test",
    "fileName": "/AllenDowney_&_EmpyricalDistributions/empiricaldist_&_test_empiricaldist.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "surv = Surv.from_seq(list('allen'))\nself.assertAlmostEqual(surv['a'], 0.8)\nself.assertAlmostEqual(surv['e'], 0.6)\nself.assertAlmostEqual(surv['l'], 0.2)\nself.assertAlmostEqual(surv['n'], 0)\nt = [1, 2, 2, 3, 5]\nsurv = Surv.from_seq(t, normalize=False)\nself.assertListEqual(list(surv), [4, 2, 1, 0])\nres = surv([0, 1, 2, 3, 4, 5, 6])\nself.assertListEqual(list(res), [5.0, 4.0, 2.0, 1.0, 1.0, 0.0, 0.0])\nres = surv.inverse([0, 1, 2, 3, 4, 5])\nself.assertListEqual(list(res), [5, 3, 2, 2, 1, -np.inf])\nsurv = Surv.from_seq(t)\nself.assertEqual(surv(0), 1)\nself.assertAlmostEqual(surv(1), 0.8)\nself.assertAlmostEqual(surv(2), 0.4)\nself.assertAlmostEqual(surv(3), 0.2)\nself.assertAlmostEqual(surv(4), 0.2)\nself.assertAlmostEqual(surv(5), 0)\nself.assertAlmostEqual(surv(6), 0)\nxs = range(-1, 7)\nps = surv(xs)\nfor p1, p2 in zip(ps, [1, 1, 0.8, 0.4, 0.2, 0.2, 0, 0]):\n    self.assertAlmostEqual(p1, p2)\nself.assertTrue(np.isnan(surv.inverse(-0.1)))\nself.assertEqual(surv.inverse(0), 5)\nself.assertEqual(surv.inverse(0.1), 5)\nself.assertEqual(surv.inverse(0.2), 3)\nself.assertEqual(surv.inverse(0.3), 3)\nself.assertEqual(surv.inverse(0.4), 2)\nself.assertEqual(surv.inverse(0.5), 2)\nself.assertEqual(surv.inverse(0.6), 2)\nself.assertEqual(surv.inverse(0.7), 2)\nself.assertEqual(surv.inverse(0.8), 1)\nself.assertEqual(surv.inverse(0.9), 1)\nself.assertEqual(surv.inverse(1), -np.inf)\nps = [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\nqs = surv.inverse(ps)\nself.assertTrue((qs == [5, 5, 3, 3, 2, 2, 2, 2, 1, 1, -np.inf]).all())\nnp.random.seed(42)\nxs = surv.choice(7, replace=True)\nself.assertListEqual(xs.tolist(), [2, 5, 3, 2, 1, 1, 1])\n"
}