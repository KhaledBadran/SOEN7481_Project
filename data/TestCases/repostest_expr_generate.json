{
    "functionName": "test_expr_generate",
    "className": "AstParseTest",
    "fileName": "/whiteclover_&_Choco/test_&_test_ast.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"test the round trip of expressions to AST back to python source\"\"\"\nx = 1\ny = 2\nclass F(object):\n\n    def bar(self, a, b):\n        return a + b\ndef lala(arg):\n    return 'blah' + arg\nlocal_dict = dict(x=x, y=y, foo=F(), lala=lala)\ncode = \"str((x+7*y) / foo.bar(5,6)) + lala('ho')\"\nastnode = pyparser.parse(code)\nnewcode = pyparser.ExpressionGenerator(astnode).value()\neq_(eval(code, local_dict), eval(newcode, local_dict))\na = ['one', 'two', 'three']\nhoho = {'somevalue': 'asdf'}\ng = [1, 2, 3, 4, 5]\nlocal_dict = dict(a=a, hoho=hoho, g=g)\ncode = \"a[2] + hoho['somevalue'] + repr(g[3:5]) + repr(g[3:]) + repr(g[:5])\"\nastnode = pyparser.parse(code)\nnewcode = pyparser.ExpressionGenerator(astnode).value()\neq_(eval(code, local_dict), eval(newcode, local_dict))\nlocal_dict = {'f': lambda : 9, 'x': 7}\ncode = 'x+f()'\nastnode = pyparser.parse(code)\nnewcode = pyparser.ExpressionGenerator(astnode).value()\neq_(eval(code, local_dict), eval(newcode, local_dict))\nfor code in [\"repr({'x':7,'y':18})\", 'repr([])', 'repr({})',\n    'repr([{3:[]}])', \"repr({'x':37*2 + len([6,7,8])})\",\n    \"repr([1, 2, {}, {'x':'7'}])\", \"repr({'x':-1})\",\n    'repr(((1,2,3), (4,5,6)))', 'repr(1 and 2 and 3 and 4)',\n    'repr(True and False or 55)', 'repr(lambda x, y: (x + y))',\n    'repr(lambda *arg, **kw: arg, kw)', 'repr(1 & 2 | 3)', 'repr(3//5)',\n    'repr(3^5)', \"repr([q.endswith('e') for q in ['one', 'two', 'three']])\",\n    'repr([x for x in (5,6,7) if x == 6])', 'repr(not False)']:\n    local_dict = {}\n    astnode = pyparser.parse(code)\n    newcode = pyparser.ExpressionGenerator(astnode).value()\n    if 'lambda' in code:\n        eq_(code, newcode)\n    else:\n        eq_(eval(code, local_dict), eval(newcode, local_dict))\n"
}