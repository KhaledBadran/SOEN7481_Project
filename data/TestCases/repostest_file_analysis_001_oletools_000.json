{
    "functionName": "test_file_analysis_001_oletools_000",
    "className": "TestCase",
    "fileName": "/IntegralDefense_&_ACE/lib_&_saq_&_modules_&_test_file_analysis.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "KEY_STORAGE_DIR = 'storage_dir'\nKEY_TAGS = 'tags'\nKEY_MACRO_COUNT = 'macro_count'\nKEY_OID = 'oid'\nKEY_SANDBOX = 'sandbox'\nresults = {'Past Due Invoices.doc': {KEY_OID: None, KEY_STORAGE_DIR: None,\n    KEY_TAGS: ['microsoft_office', 'ole'], KEY_MACRO_COUNT: 4, KEY_SANDBOX:\n    True}, 'Outstanding Invoices.doc': {KEY_OID: None, KEY_STORAGE_DIR:\n    None, KEY_TAGS: ['microsoft_office', 'ole'], KEY_MACRO_COUNT: 3,\n    KEY_SANDBOX: True}, 'Paid Invoice.doc': {KEY_OID: None, KEY_STORAGE_DIR:\n    None, KEY_TAGS: ['microsoft_office', 'ole'], KEY_MACRO_COUNT: 3,\n    KEY_SANDBOX: True}, 'mortgage_payment-0873821-0565.docm': {KEY_OID:\n    None, KEY_STORAGE_DIR: None, KEY_TAGS: ['microsoft_office'],\n    KEY_MACRO_COUNT: 1, KEY_SANDBOX: True}, 'receipt_687790.doc': {KEY_OID:\n    None, KEY_STORAGE_DIR: None, KEY_TAGS: ['microsoft_office'],\n    KEY_MACRO_COUNT: 5, KEY_SANDBOX: True}}\nfor file_name in results.keys():\n    root = create_root_analysis(uuid=str(uuid.uuid4()))\n    root.initialize_storage()\n    target_path = os.path.join('test_data/ole_files', file_name)\n    shutil.copy(target_path, root.storage_dir)\n    file_observable = root.add_observable(F_FILE, file_name)\n    root.save()\n    root.schedule()\n    results[file_name][KEY_OID] = file_observable.id\n    results[file_name][KEY_STORAGE_DIR] = root.storage_dir\nengine = TestEngine()\nengine.enable_module('analysis_module_olevba_v1_2', 'test_groups')\nengine.enable_module('analysis_module_file_type', 'test_groups')\nengine.controlled_stop()\nengine.start()\nengine.wait()\nfor file_name in results.keys():\n    with self.subTest(storage_dir=results[file_name][KEY_STORAGE_DIR],\n        file_name=file_name):\n        root = RootAnalysis(storage_dir=results[file_name][KEY_STORAGE_DIR])\n        root.load()\n        file_observable = root.get_observable(results[file_name][KEY_OID])\n        self.assertIsNotNone(file_observable)\n        if results[file_name][KEY_SANDBOX]:\n            self.assertTrue(file_observable.has_directive(DIRECTIVE_SANDBOX))\n        for tag in results[file_name][KEY_TAGS]:\n            with self.subTest(storage_dir=results[file_name][\n                KEY_STORAGE_DIR], file_name=file_name, tag=tag):\n                self.assertTrue(file_observable.has_tag(tag))\n        macro_count = len([f for f in root.all_observables if f.type ==\n            F_FILE and f.has_tag('macro')])\n        self.assertEquals(macro_count, results[file_name][KEY_MACRO_COUNT])\n"
}