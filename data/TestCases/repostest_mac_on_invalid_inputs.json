{
    "functionName": "test_mac_on_invalid_inputs",
    "className": "TestProxyKmipClient",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_pie_&_test_client.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that a TypeError exception is raised when wrong type\n        of arguments are given to mac operation.\n        \"\"\"\nuuid = 'aaaaaaaa-1111-2222-3333-ffffffffffff'\nuuid_invalid = int(123)\nalgorithm = enums.CryptographicAlgorithm.HMAC_SHA256\nalgorithm_invalid = enums.CryptographicUsageMask.MAC_GENERATE\ndata = b'\\x00\\x01\\x02\\x03\\x04'\ndata_invalid = int(123)\nresult = results.MACResult(contents.ResultStatus(enums.ResultStatus.SUCCESS\n    ), uuid=attr.UniqueIdentifier(uuid), mac_data=obj.MACData(data))\nargs = [data, uuid_invalid, algorithm]\nwith ProxyKmipClient() as client:\n    client.proxy.mac.return_value = result\n    self.assertRaises(TypeError, client.mac, *args)\nargs = [data, uuid, algorithm_invalid]\nwith ProxyKmipClient() as client:\n    client.proxy.mac.return_value = result\n    self.assertRaises(TypeError, client.mac, *args)\nargs = [data_invalid, uuid, algorithm]\nwith ProxyKmipClient() as client:\n    client.proxy.mac.return_value = result\n    self.assertRaises(TypeError, client.mac, *args)\nmock.patch('kmip.pie.client.KMIPProxy', mock.MagicMock(spec_set=KMIPProxy))"
}