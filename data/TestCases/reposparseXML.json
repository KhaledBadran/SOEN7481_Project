{
    "functionName": "parseXML",
    "className": null,
    "fileName": "/jakob-lass_&_MJOLNIR/MJOLNIR_&_Geometry_&_InstrumentXML.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "from MJOLNIR.Geometry import Detector, Analyser, Wedge, Instrument\nimport xml.etree.ElementTree as ET\nimport numpy as np\ntree = ET.parse(filename)\ninstr_root = tree.getroot()\ninstrSettings = {}\nfor attrib in instr_root.keys():\n    instrSettings[attrib] = instr_root.attrib[attrib]\nInstr = Instrument.Instrument(**instrSettings)\nfor wedge in list(instr_root):\n    if wedge.tag in dir(Wedge):\n        Wedgeclass_ = getattr(Wedge, wedge.tag)\n    else:\n        raise ValueError(\"Element is supposed to be a Wedge, but got '{}'.\"\n            .format(wedge.tag))\n    wedgeSettings = {}\n    for attrib in wedge.keys():\n        if attrib == 'concept':\n            wedgeSettings[attrib] = np.array(wedge.attrib[attrib].strip().\n                split(','), dtype=str)\n        else:\n            wedgeSettings[attrib] = np.array(wedge.attrib[attrib].strip().\n                split(','), dtype=float)\n    temp_wedge = Wedgeclass_(**wedgeSettings)\n    for item in list(wedge):\n        if item.tag in dir(Detector):\n            class_ = getattr(Detector, item.tag)\n        elif item.tag in dir(Analyser):\n            class_ = getattr(Analyser, item.tag)\n        else:\n            raise ValueError(\n                \"Item '{}' not recognized as MJOLNIR detector or analyser.\"\n                .format(item.tag))\n        itemSettings = {}\n        for attrib in item.keys():\n            attribVal = item.get(attrib).strip().split(',')\n            if len(attribVal) == 1:\n                itemSettings[attrib] = float(attribVal[0])\n            elif attrib == 'split':\n                itemSettings[attrib] = attribVal\n            else:\n                itemSettings[attrib] = np.array(attribVal, dtype=float)\n        try:\n            temp_item = class_(**itemSettings)\n        except TypeError as e:\n            print(e.args[0])\n            raise ValueError('Item {} misses argument(s):{}'.format(class_,\n                e.args[0].split(':')[1]))\n        except ValueError:\n            raise ValueError('Item {} not initialized due to error.'.format\n                (class_))\n        temp_wedge.append(temp_item)\n    Instr.append(temp_wedge)\nreturn Instr\n"
}