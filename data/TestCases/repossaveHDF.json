{
    "functionName": "saveHDF",
    "className": "DataFile",
    "fileName": "/jakob-lass_&_MJOLNIR/MJOLNIR_&_Data_&_DataFile.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"Save current HDF file object into an HDF file.\n\n        Args:\n\n            - saveFileName (string): File name to be saved into.\n\n        \"\"\"\ndef addMetaData(self, entry):\n    dset = entry.create_dataset('start_time', (1,), dtype='<S70')\n    dset[0] = np.string_(self.startTime)\n    dset = entry.create_dataset('end_time', (1,), dtype='<S70')\n    dset[0] = np.string_(self.endTime)\n    dset = entry.create_dataset('experiment_identifier', (1,), dtype='<S70')\n    dset[0] = self.experimentIdentifier.encode('utf8')\n    dset = entry.create_dataset('instrument', (1,), dtype='<S70')\n    dset[0] = self.instrument.title().upper().encode('utf8')\n    dset = entry.create_dataset('comment', (1,), data=np.string_(self.comment))\n    dset = entry.create_dataset('title', (1,), data=np.string_(self.title))\n    dset = entry.create_dataset('proposal_id', (1,), data=np.string_(self.\n        proposalId))\n    dset = entry.create_dataset('proposal_title', (1,), data=np.string_(\n        self.proposalTitle))\n    cont = entry.create_group('local_contact')\n    cont.attrs['NX_class'] = np.string_('NXuser')\n    dset = cont.create_dataset('name', (1,), data=np.string_(self.\n        localContactName))\n    us = entry.create_group('proposal_user')\n    us.attrs['NX_class'] = np.string_('NXuser')\n    dset = us.create_dataset('name', (1,), data=np.string_(self.\n        proposalUserName))\n    dset = us.create_dataset('email', (1,), data=np.string_(self.\n        proposalUserEmail))\n    pus = entry.create_group('user')\n    pus.attrs['NX_class'] = np.string_('NXuser')\n    dset = pus.create_dataset('name', (1,), data=np.string_(self.userName))\n    dset = pus.create_dataset('email', (1,), data=np.string_(self.userEmail))\n    dset = pus.create_dataset('address', (1,), data=np.string_(self.\n        userAddress))\n    dset = pus.create_dataset('affiliation', (1,), data=np.string_(self.\n        userAffiliation))\ndef addMono(self, inst):\n    mono = inst.create_group('monochromator')\n    mono.attrs['NX_class'] = np.string_('NXmonochromator')\n    dset = mono.create_dataset('type', (1,), dtype='S70')\n    dset[0] = getattr(self, 'monochromatorType')\n    attributes = ['d_spacing', 'horizontal_curvature', 'vertical_curvature',\n        'horizontal_curvature_zero', 'vertical_curvature_zero', 'gm',\n        'gm_zero', 'tlm', 'tlm_zero', 'tum', 'tum_zero']\n    units = ['angstrom'] + ['meter'] * 4 + ['degree'] * 6\n    values = [('monochromator' + x) for x in ['DSpacing',\n        'HorizontalCurvature', 'VerticalCurvature',\n        'HorizontalCurvatureZero', 'VerticalCurvatureZero', 'GM', 'GMZero',\n        'TLM', 'TLMZero', 'TUM', 'TUMZero']]\n    for att, val, unit in zip(attributes, values, units):\n        if val in self.__dict__:\n            dset = mono.create_dataset(att, (1,), 'float32')\n            dset[0] = getattr(self, val)\n            dset.attrs['units'] = unit\n    monoSlit = inst.create_group('monochromator_slit')\n    monoSlit.attrs['NX_class'] = np.string_('NXmonochromatorslit')\n    attributes = [(x + zero) for x in ['bottom', 'left', 'right', 'top'] for\n        zero in ['', '_zero']]\n    values = [('monochromatorSlit' + x + zero) for x in ['Bottom', 'Left',\n        'Right', 'Top'] for zero in ['', 'Zero']]\n    for att, value in zip(attributes, values):\n        val = getattr(self, value)\n        if not val.dtype == 'O':\n            dset = monoSlit.create_dataset(att, (1,), 'float32')\n            dset[0] = val\n            dset.attrs['units'] = np.string_('mm')\n    for value, att in zip(['monochromatorSlitXGap', 'monochromatorSlitYGap'\n        ], ['x_gap', 'y_gap']):\n        dset = monoSlit.create_dataset(att, (3,), 'float32')\n        dset[:] = getattr(self, value)\n        dset.attrs['units'] = 'mm'\ndef addAna(self, inst):\n    ana = inst.create_group('analyzer')\n    ana.attrs['NX_class'] = np.string_('NXcrystal')\n    attributes = ['d_spacing', 'nominal_energy', 'polar_angle',\n        'polar_angle_offset']\n    values = [('analyzer' + x.replace('_', ' ').title().replace(' ', '')) for\n        x in attributes]\n    units = ['anstrom', 'mev', 'degree', 'degree']\n    for att, value, unit in zip(attributes, values, units):\n        dset = ana.create_dataset(att, (1,), 'float32')\n        dset[0] = getattr(self, value)\n        if not unit is None:\n            dset.attrs['units'] = np.string_(unit)\n    dset = ana.create_dataset('type', data=np.array([np.string_(self.\n        analyzerType)]))\n    dset = ana.create_dataset('analyzer_selection', (1,), 'int32', data=\n        self.analyzerSelection)\ndef addDetector(inst):\n    det = inst.create_group('detector')\n    det.attrs['NX_class'] = np.string_('NXdetector')\ndef addSample(self, entry):\n    sam = entry.create_group('sample')\n    sam.attrs['NX_class'] = np.string_('NXsample')\n    dset = sam.create_dataset('name', (1,), data=np.string_(self.sample.name))\n    ub = self.sample.orientationMatrix / (2 * np.pi)\n    dset = sam.create_dataset('orientation_matrix', data=ub)\n    dset = sam.create_dataset('plane_vector_1', data=self.sample.plane_vector1)\n    dset = sam.create_dataset('plane_vector_2', data=self.sample.plane_vector2)\n    normal = self.sample.planeNormal\n    dset = sam.create_dataset('plane_normal', data=normal)\n    cell = np.array(self.sample.unitCell, dtype='float32')\n    dset = sam.create_dataset('unit_cell', data=cell)\n    dset = sam.create_dataset('azimuthal_angle', data=self.sample.\n        azimuthalAngle)\n    dset.attrs['units'] = np.string_('degree')\n    dset = sam.create_dataset('x', data=self.sample.x)\n    dset.attrs['units'] = np.string_('degree')\n    dset = sam.create_dataset('y', data=self.sample.y)\n    dset.attrs['units'] = np.string_('degree')\n    if hasattr(self, 'temperature'):\n        if not self.temperature is None:\n            dset = sam.create_dataset('temperature', data=self.temperature,\n                dtype='float32')\n            dset.attrs['units'] = np.string_('K')\n    if hasattr(self, 'magneticField'):\n        if not self.magneticField is None:\n            dset = sam.create_dataset('magnetic_field', data=self.\n                magneticField, dtype='float32')\n            dset.attrs['units'] = np.string_('T')\n    if hasattr(self, 'electricField'):\n        if not self.electricField is None:\n            dset = sam.create_dataset('electric_field', data=self.\n                electricField, dtype='float32')\n            dset.attrs['units'] = np.string_('V')\n    for attr, value in zip(['sgu', 'sgl'], ['sgu', 'sgl']):\n        dset = sam.create_dataset(attr, (1,), data=getattr(self.sample, value))\n        dset.attrs['units'] = np.string_('degree')\n        dset = sam.create_dataset(attr + '_zero', (1,), data=getattr(self.\n            sample, value + 'Zero'))\n        dset.attrs['units'] = np.string_('degree')\ndef makeTheta(self):\n    k = np.sqrt(self.Ei / 2.072)\n    fd = np.pi / (k * self.monochromatorDSpacing[0])\n    theta = np.degrees(np.arcsin(fd))\n    return theta, 2 * theta\ndef storeScanData(self, entry):\n    nxdata = entry.create_group('data')\n    nxdata.attrs['NX_class'] = np.string_('NXdata')\n    det = entry['CAMEA/detector']\n    dset = det.create_dataset('counts', data=self.I.swapaxes(1, 2),\n        compression='gzip', compression_opts=6)\n    dset.attrs['target'] = np.string_('/entry/CAMEA/detector/counts')\n    nxdata['counts'] = dset\n    dset = det.create_dataset('detector_selection', (1,), 'int32', data=\n        self.detectorSelection)\n    dset = det.create_dataset('summed_counts', data=np.sum(self.I, axis=(1, 2))\n        )\n    dset.attrs['target'] = np.string_('/entry/CAMEA/detector/summed_counts')\n    nxdata['summed_counts'] = dset\n    sam = entry['sample']\n    dset = sam.create_dataset('rotation_angle', data=self.A3, dtype='float32')\n    dset_zero = sam.create_dataset('rotation_angle_zero', data=self.A3Off,\n        dtype='float32')\n    dset.attrs['units'] = np.string_('degree')\n    dset_zero.attrs['units'] = np.string_('degree')\n    dset = sam.create_dataset('polar_angle', data=self.A4, dtype='float32')\n    dset_zero = sam.create_dataset('polar_angle_zero', data=self.A4Off,\n        dtype='float32')\n    dset.attrs['units'] = np.string_('degree')\n    dset_zero.attrs['units'] = np.string_('degree')\n    dset.attrs['units'] = np.string_('degree')\n    dset_zero.attrs['units'] = np.string_('degree')\n    mono = entry['CAMEA/monochromator']\n    dset = mono.create_dataset('energy', data=self.Ei, dtype='float32')\n    dset.attrs['units'] = np.string_('mev')\n    dset = mono.create_dataset('rotation_angle', data=self.\n        monochromatorRotationAngle, dtype='float32')\n    dset.attrs['units'] = np.string_('degree')\n    dset = mono.create_dataset('rotation_angle_zero', data=self.\n        monochromatorRotationAngleZero, dtype='float32')\n    dset.attrs['units'] = np.string_('degree')\n    entry.create_dataset('scancommand', (1,), data=np.string_(self.scanCommand)\n        )\n    entry.create_dataset('scanvars', data=np.string_([x.encode('utf8') for\n        x in self.scanParameters]))\n    for variable, pos in zip(self.scanParameters, self.scanDataPosition):\n        positionRelativeEntry = '/'.join([x for x in pos.split('/')[2:]])\n        original = entry.get(positionRelativeEntry)\n        nxdata[variable] = original\n        nxdata[variable].attrs['target'] = np.string_('/entry/' +\n            positionRelativeEntry)\n    control = entry.create_group('control')\n    control.attrs['NX_class'] = np.string_('NXmonitor')\n    mons = self.Monitor\n    control.create_dataset('data', data=mons, dtype='int32')\n    dset = control.create_dataset('preset', (1,), dtype='int32')\n    dset[0] = self.MonitorPreset\n    dset = control.create_dataset('mode', (1,), data=np.string_(self.\n        MonitorMode))\n    time = self.Time\n    dset = control.create_dataset('time', data=time, dtype='float32')\n    dset.attrs['units'] = np.string_('seconds')\n    time = self.absoluteTime\n    dset = control.create_dataset('absolute_time', data=time, dtype='float32')\n    dset.attrs['units'] = np.string_('seconds')\n    pb = entry.create_group('proton_beam')\n    pb.attrs['NX_class'] = np.string_('NXmonitor')\n    vals = self.protonBeam\n    dset = pb.create_dataset('data', data=vals, dtype='int32')\nwith hdf.File(saveFileName, 'w') as f:\n    f.attrs['file_name'] = np.string_(saveFileName)\n    import datetime, time\n    cT = datetime.datetime.now()\n    f.attrs['file_time'] = np.string_('{}-{}-{}T{}:{}:{}{:+02.0f}:00'.\n        format(cT.year, cT.month, cT.day, cT.hour, cT.minute, cT.second, -\n        time.timezone / (60 * 60)))\n    entry = f.create_group('entry')\n    entry.attrs['NX_class'] = np.string_('NXentry')\n    inst = entry.create_group(b'CAMEA')\n    inst.attrs['NX_class'] = np.string_('NXinstrument')\n    attribute = ['a4offset', 'amplitude', 'background', 'boundaries',\n        'final_energy', 'width']\n    for calibration, binning in zip(self.instrumentCalibrations, self.\n        possibleBinnings):\n        pixelCalib = inst.create_group('calib{}'.format(binning))\n        Etable, A4, bound = calibration\n        amp, Ef, width, bg = Etable.T\n        values = [A4, amp, bg, bound, Ef, width]\n        dtypes = ['float32', 'float32', 'float32', 'int', 'float32', 'float32']\n        units = ['degree', None, None, None, 'mev', 'mev']\n        for att, value, dtype, unit in zip(attribute, values, dtypes, units):\n            dset = pixelCalib.create_dataset(att, data=value, dtype=dtype)\n            if not unit is None:\n                dset.attrs['units'] = np.string_(unit)\n    addMetaData(self, entry)\n    addMono(self, inst)\n    addAna(self, inst)\n    addDetector(inst)\n    addSample(self, entry)\n    storeScanData(self, entry)\n"
}