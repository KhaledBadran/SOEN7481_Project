{
    "functionName": "test_elif",
    "className": "TestInsertCode",
    "fileName": "/fabioz_&_PyDev.Debugger/tests_python_&_test_bytecode_modification.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "self.original_stdout = sys.stdout\nsys.stdout = StringIO()\ntry:\n\n    def original():\n        a = 5\n        b = 0\n        if a < 0:\n            print('a < 0')\n        elif a < 3:\n            print('a < 3')\n        else:\n            print('a >= 3')\n            b = a\n        return b\n\n    def check_line_1():\n        tracing()\n        a = 5\n        b = 0\n        if a < 0:\n            print('a < 0')\n        elif a < 3:\n            print('a < 3')\n        else:\n            print('a >= 3')\n            b = a\n        return b\n\n    def check_line_8():\n        a = 5\n        b = 0\n        if a < 0:\n            print('a < 0')\n        elif a < 3:\n            print('a < 3')\n        else:\n            tracing()\n            print('a >= 3')\n            b = a\n        return b\n\n    def check_line_9():\n        a = 5\n        b = 0\n        if a < 0:\n            print('a < 0')\n        elif a < 3:\n            print('a < 3')\n        else:\n            print('a >= 3')\n            tracing()\n            b = a\n        return b\n    self.check_insert_to_line_with_exec(original, tracing, original.\n        __code__.co_firstlineno + 1)\n    self.check_insert_to_line_with_exec(original, tracing, original.\n        __code__.co_firstlineno + 2)\n    self.check_insert_to_line_with_exec(original, tracing, original.\n        __code__.co_firstlineno + 8)\n    self.check_insert_to_line_with_exec(original, tracing, original.\n        __code__.co_firstlineno + 9)\n    self.check_insert_to_line_by_symbols(original, call_tracing, original.\n        __code__.co_firstlineno + 1, check_line_1.__code__)\n    self.check_insert_to_line_by_symbols(original, call_tracing, original.\n        __code__.co_firstlineno + 8, check_line_8.__code__)\n    self.check_insert_to_line_by_symbols(original, call_tracing, original.\n        __code__.co_firstlineno + 9, check_line_9.__code__)\nfinally:\n    sys.stdout = self.original_stdout\n"
}