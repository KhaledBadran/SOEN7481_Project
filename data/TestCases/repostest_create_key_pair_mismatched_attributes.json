{
    "functionName": "test_create_key_pair_mismatched_attributes",
    "className": "TestKmipEngine",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_services_&_server_&_test_engine.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that the right errors are generated when required attributes\n        are mismatched in a CreateKeyPair request.\n        \"\"\"\ne = engine.KmipEngine()\ne._data_store = self.engine\ne._data_store_session_factory = self.session_factory\ne._data_session = e._data_store_session_factory()\ne._logger = mock.MagicMock()\nattribute_factory = factory.AttributeFactory()\ncommon_template = objects.TemplateAttribute(attributes=[attribute_factory.\n    create_attribute(enums.AttributeType.NAME, attributes.Name.create(\n    'Test Asymmetric Key', enums.NameType.UNINTERPRETED_TEXT_STRING))], tag\n    =enums.Tags.COMMON_TEMPLATE_ATTRIBUTE)\npublic_template = objects.TemplateAttribute(attributes=[attribute_factory.\n    create_attribute(enums.AttributeType.CRYPTOGRAPHIC_ALGORITHM, enums.\n    CryptographicAlgorithm.RSA), attribute_factory.create_attribute(enums.\n    AttributeType.CRYPTOGRAPHIC_LENGTH, 2048), attribute_factory.\n    create_attribute(enums.AttributeType.CRYPTOGRAPHIC_USAGE_MASK, [enums.\n    CryptographicUsageMask.ENCRYPT])], tag=enums.Tags.\n    PUBLIC_KEY_TEMPLATE_ATTRIBUTE)\nprivate_template = objects.TemplateAttribute(attributes=[attribute_factory.\n    create_attribute(enums.AttributeType.CRYPTOGRAPHIC_ALGORITHM, enums.\n    CryptographicAlgorithm.DSA), attribute_factory.create_attribute(enums.\n    AttributeType.CRYPTOGRAPHIC_LENGTH, 2048), attribute_factory.\n    create_attribute(enums.AttributeType.CRYPTOGRAPHIC_USAGE_MASK, [enums.\n    CryptographicUsageMask.DECRYPT])], tag=enums.Tags.\n    PRIVATE_KEY_TEMPLATE_ATTRIBUTE)\npayload = payloads.CreateKeyPairRequestPayload(common_template,\n    private_template, public_template)\nargs = payload,\nregex = 'The public and private key algorithms must be the same.'\nsix.assertRaisesRegex(self, exceptions.InvalidField, regex, e.\n    _process_create_key_pair, *args)\ne._logger.info.assert_any_call('Processing operation: CreateKeyPair')\ne._logger.reset_mock()\ncommon_template = objects.TemplateAttribute(attributes=[attribute_factory.\n    create_attribute(enums.AttributeType.NAME, attributes.Name.create(\n    'Test Asymmetric Key', enums.NameType.UNINTERPRETED_TEXT_STRING))], tag\n    =enums.Tags.COMMON_TEMPLATE_ATTRIBUTE)\npublic_template = objects.TemplateAttribute(attributes=[attribute_factory.\n    create_attribute(enums.AttributeType.CRYPTOGRAPHIC_ALGORITHM, enums.\n    CryptographicAlgorithm.RSA), attribute_factory.create_attribute(enums.\n    AttributeType.CRYPTOGRAPHIC_LENGTH, 2048), attribute_factory.\n    create_attribute(enums.AttributeType.CRYPTOGRAPHIC_USAGE_MASK, [enums.\n    CryptographicUsageMask.ENCRYPT])], tag=enums.Tags.\n    PUBLIC_KEY_TEMPLATE_ATTRIBUTE)\nprivate_template = objects.TemplateAttribute(attributes=[attribute_factory.\n    create_attribute(enums.AttributeType.CRYPTOGRAPHIC_ALGORITHM, enums.\n    CryptographicAlgorithm.RSA), attribute_factory.create_attribute(enums.\n    AttributeType.CRYPTOGRAPHIC_LENGTH, 4096), attribute_factory.\n    create_attribute(enums.AttributeType.CRYPTOGRAPHIC_USAGE_MASK, [enums.\n    CryptographicUsageMask.DECRYPT])], tag=enums.Tags.\n    PRIVATE_KEY_TEMPLATE_ATTRIBUTE)\npayload = payloads.CreateKeyPairRequestPayload(common_template,\n    private_template, public_template)\nargs = payload,\nregex = 'The public and private key lengths must be the same.'\nsix.assertRaisesRegex(self, exceptions.InvalidField, regex, e.\n    _process_create_key_pair, *args)\ne._logger.info.assert_any_call('Processing operation: CreateKeyPair')\ne._logger.reset_mock()\n"
}