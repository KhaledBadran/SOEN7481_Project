{
    "functionName": "test_opaque_data_register_get_destroy",
    "className": "TestIntegration",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_integration_&_services_&_test_integration.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Tests that opaque objects can be properly registered, retrieved,\n        and destroyed\n        \"\"\"\nopaque_obj_type = ObjectType.OPAQUE_DATA\nopaque_obj_data_type = OpaqueObject.OpaqueDataType(OpaqueDataType.NONE)\nname = Attribute.AttributeName('Name')\nopaque_obj_name = 'Integration Test - Register-Get-Destroy Opaque Data'\nopaque_obj_name_value = Name.NameValue(opaque_obj_name)\nname_type = Name.NameType(NameType.UNINTERPRETED_TEXT_STRING)\nopaque_obj_value = Name(name_value=opaque_obj_name_value, name_type=name_type)\nopaque_obj_name_attr = Attribute(attribute_name=name, attribute_value=\n    opaque_obj_value)\nopaque_obj_attributes = [opaque_obj_name_attr]\nopaque_obj_template_attribute = TemplateAttribute(attributes=\n    opaque_obj_attributes)\nopaque_obj_data = OpaqueObject.OpaqueDataValue(\n    b'0\\x82\\x03\\x120\\x82\\x01\\xfa\\xa0\\x03\\x02\\x01\\x02\\x02\\x01\\x010\\r\\x06\\t*\\x86H\\x86\\xf7\\r\\x01\\x01\\x05\\x05\\x000;1\\x0b0\\t\\x06\\x03U\\x04\\x06\\x13\\x02US1\\r0\\x0b\\x06\\x03U\\x04\\n\\x13\\x04TEST1\\x0e0'\n    )\nopaque_obj = OpaqueObject(opaque_data_type=opaque_obj_data_type,\n    opaque_data_value=opaque_obj_data)\nopaque_obj_result = self.client.register(opaque_obj_type,\n    opaque_obj_template_attribute, opaque_obj, credential=None)\nself._check_result_status(opaque_obj_result, ResultStatus, ResultStatus.SUCCESS\n    )\nself._check_uuid(opaque_obj_result.uuid, str)\nopaque_obj_uuid = opaque_obj_result.uuid\nopaque_obj_result = self.client.get(uuid=opaque_obj_uuid, credential=None)\nself._check_result_status(opaque_obj_result, ResultStatus, ResultStatus.SUCCESS\n    )\nself._check_object_type(opaque_obj_result.object_type, ObjectType,\n    ObjectType.OPAQUE_DATA)\nself._check_uuid(opaque_obj_result.uuid, str)\nopaque_obj_secret = opaque_obj_result.secret\nopaque_obj_secret_expected = OpaqueObject\nself.assertIsInstance(opaque_obj_secret, opaque_obj_secret_expected)\nopaque_obj_material = opaque_obj_result.secret.opaque_data_value.value\nexpected = opaque_obj_data.value\nself.assertEqual(expected, opaque_obj_material)\nself.logger.debug('Destroying opaque object: ' + opaque_obj_name +\n    '\\nWith \" \"UUID: ' + opaque_obj_result.uuid)\nopaque_obj_result = self.client.destroy(opaque_obj_result.uuid)\nself._check_result_status(opaque_obj_result, ResultStatus, ResultStatus.SUCCESS\n    )\nself._check_uuid(opaque_obj_result.uuid.value, str)\nopaque_obj_result_destroyed_result = self.client.get(uuid=opaque_obj_uuid,\n    credential=None)\nself._check_result_status(opaque_obj_result_destroyed_result, ResultStatus,\n    ResultStatus.OPERATION_FAILED)\nexpected = ResultReason\nopaque_obj_observed = type(opaque_obj_result_destroyed_result.result_reason\n    .value)\nself.assertEqual(expected, opaque_obj_observed)\n"
}