{
    "functionName": "test_usingqx_fullyentangled_4qubit",
    "className": "Test_conjugated_kernel",
    "fileName": "/QE-Lab_&_OpenQL/tests_&_test_unitary.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "self.setUpClass()\nnum_qubits = 4\np = ql.Program('test_usingqxfullentangled_4qubit', platform, num_qubits)\nk = ql.Kernel('akernel', platform, num_qubits)\nmatrix = [-0.11921901 - 0.30382154j, -0.10645804 - 0.11760155j, -0.09639953 -\n    0.0353926j, -0.32605797 + 0.19552924j, 0.0168262 - 0.26748208j, -\n    0.17808469 + 0.25265196j, -0.24676084 - 0.23228431j, -0.02960302 + \n    0.23697569j, -0.12435741 - 0.07223017j, 0.00178745 + 0.14813263j, -\n    0.11173158 + 0.26636089j, 0.27656908 + 0.05229833j, -0.02964214 - \n    0.01505502j, -0.26959616 + 0.23274949j, -0.18183627 - 0.04041783j, \n    0.05385991 - 0.05587908j, 0.17894461 - 0.25668366j, -0.01553181 - \n    0.07446613j, 0.1876467 - 0.49135878j, -0.18292006 - 0.04599956j, -\n    0.01618695 + 0.21951951j, 0.06003169 - 0.12728871j, -0.04276406 + \n    0.08327372j, 0.30102765 + 0.18403071j, -0.08122018 - 0.08375638j, -\n    0.02971758 + 0.09096399j, 0.10753511 - 0.03359547j, -0.1596309 + \n    0.20649279j, -0.13684564 + 0.29450386j, 0.20557421 + 0.24856224j, \n    0.0683444 + 0.01780095j, -0.22317907 - 0.12123145j, -0.0323504 - \n    0.02668934j, 0.08743777 - 0.49956832j, -0.30202031 - 0.22517221j, -\n    0.10642491 - 0.11883126j, -0.13756817 - 0.20632933j, 0.02593802 + \n    0.00583978j, 0.05130972 + 0.06678859j, -0.10426135 - 0.14411822j, \n    0.12318252 + 0.28583957j, 0.04903179 - 0.31898637j, -0.07650819 - \n    0.07261235j, -0.22918932 - 0.28329527j, -0.26553775 + 0.04563403j, -\n    0.07728053 + 0.14952931j, -0.10271285 - 0.00216319j, -0.09000117 + \n    0.09055528j, -0.15385903 + 0.01767834j, 0.42229431 - 0.05610483j, -\n    0.11330491 - 0.05458018j, 0.01740815 - 0.01605897j, -0.11908997 - \n    0.01830574j, 0.21139794 - 0.10602858j, -0.23249721 - 0.25516076j, -\n    0.29066084 - 0.19129198j, 0.21273108 - 0.14369238j, -0.20662513 + \n    0.14463032j, 0.2512466 - 0.20356141j, 0.0869495 + 0.24425667j, \n    0.09736427 - 0.03954332j, 0.1446303 + 0.14263171j, -0.25679664 + \n    0.09389641j, -0.04020309 - 0.19362247j, 0.12577257 - 0.14527364j, \n    0.00371525 + 0.14235318j, -0.22416134 + 0.02069087j, 0.03851418 - \n    0.05351593j, -0.00289848 - 0.33289946j, 0.15454716 - 0.126633j, -\n    0.08996296 - 0.09119411j, -0.00804455 - 0.19149767j, -0.13311475 - \n    0.47100304j, -0.13920624 - 0.16994321j, -0.05030304 + 0.16820614j, \n    0.05770089 - 0.15422191j, -0.23739468 - 0.05651883j, 0.19202883 + \n    0.03893001j, 0.48514604 + 0.01905479j, -0.01593819 - 0.06475285j, \n    0.31543713 + 0.41579542j, -0.08776349 + 0.24207219j, -0.07984699 - \n    0.12818844j, 0.00359655 + 0.02677178j, -0.12110453 - 0.25327887j, -\n    0.21175671 - 0.1650074j, -0.14570465 - 0.05140668j, 0.06873883 - \n    0.01768705j, -0.13804809 - 0.16458822j, 0.15096981 - 0.02802171j, -\n    0.05750448 - 0.18911017j, -0.01552104 + 0.03159908j, -0.0482418 + \n    0.09434822j, 0.1336447 + 0.22030451j, -0.3771364 - 0.17773263j, \n    0.16023381 + 0.26613455j, 0.12688452 - 0.07290393j, 0.14834649 + \n    0.08064162j, -0.06224533 + 0.04404318j, 0.03464369 + 0.19965444j, -\n    0.38140629 - 0.18927599j, -0.19710535 - 0.178657j, -0.0507885 + \n    0.19579635j, 0.11741615 + 0.13922702j, 0.2673399 - 0.01439493j, \n    0.10844591 - 0.19799688j, 0.01177533 + 0.031846j, -0.07643954 + \n    0.25870281j, 0.28971442 - 0.25385986j, -0.23713666 + 0.01838019j, \n    0.1731864 - 0.09372299j, -0.36912353 - 0.02243029j, 0.03562803 - \n    0.09449815j, 0.13578229 - 0.19205153j, 0.21279127 + 0.14541266j, -\n    0.20195524 + 0.187477j, -0.06326783 + 0.0134827j, 0.26953438 - \n    0.11153784j, -0.28939961 - 0.08995754j, 0.20662437 - 0.15535337j, -\n    0.03615272 + 0.00848631j, 0.14124129 - 0.10250932j, 0.08990493 - \n    0.13010897j, -0.04547667 + 0.17579099j, -0.01292137 + 0.10354402j, -\n    0.21338733 - 0.11928412j, 0.19733294 + 0.12876129j, 0.35162495 + \n    0.45226713j, 0.17112722 - 0.18496045j, -0.34024071 - 0.09520237j, \n    0.18864652 - 0.07147408j, 0.31340662 + 0.24027412j, -0.0720874 - \n    0.11081564j, 0.08727975 + 0.02830958j, -0.07584662 - 0.22555917j, \n    0.07086867 - 0.27714915j, -0.19116148 - 0.02164144j, -0.24831911 + \n    0.1055229j, -0.09939105 - 0.24800283j, -0.15274706 - 0.12267535j, \n    0.05237777 - 0.09974669j, -0.18435891 - 0.1737002j, -0.20884292 + \n    0.1076081j, -0.31368958 - 0.02539025j, 0.03436293 - 0.19794965j, \n    0.11892581 - 0.17440358j, -0.03488877 + 0.02305411j, 0.29835292 - \n    0.08836461j, 0.07893495 - 0.16881403j, 0.21025843 + 0.13204032j, \n    0.17194288 - 0.06285539j, -0.0500497 + 0.35833208j, -0.14979745 - \n    0.07567974j, 0.00193804 + 0.04092128j, -0.07528403 - 0.18508153j, -\n    0.16873521 - 0.09470809j, 0.50335605 + 0.00445803j, 0.11671956 + \n    0.30273552j, 0.10253226 - 0.13365319j, 0.16676135 + 0.18345473j, -\n    0.10096334 - 0.24031019j, -0.18452241 + 0.05766426j, 0.18102499 - \n    0.13532486j, 0.06252468 - 0.18030042j, -0.00591499 + 0.07587582j, -\n    0.35209025 - 0.12186396j, -0.25282963 - 0.26651504j, -0.13074882 + \n    0.14059941j, 0.18125386 - 0.03889917j, 0.06983104 - 0.3425076j, \n    0.37124455 - 0.00305632j, 0.04469806 - 0.31220629j, 0.16501585 + \n    0.00125887j, 0.15895714 - 0.14115809j, -0.01515444 + 0.06836136j, \n    0.03934186 + 0.13425449j, 0.0513499 + 0.21915368j, 0.00089628 - \n    0.3044611j, 0.05443815 - 0.05530296j, 0.12091374 - 0.16717579j, -\n    0.06795704 - 0.2515947j, -0.43324316 + 0.13138954j, 0.03753289 - \n    0.00666299j, 0.16823686 - 0.22736152j, -0.00567807 + 0.05485941j, -\n    0.11705816 + 0.39078352j, 0.29136164 + 0.18699453j, -0.09255109 + \n    0.08923507j, 0.11214398 + 0.00806872j, 0.02971631 + 0.05584961j, 0.2561 +\n    0.22302638j, 0.12491596 + 0.01725833j, 0.23473354 - 0.19203316j, -\n    0.09144197 - 0.04827201j, -0.0630975 - 0.16831612j, 0.01497053 + \n    0.11121057j, 0.1426864 - 0.15815582j, 0.21509872 - 0.0821851j, \n    0.00650273 + 0.42560079j, -0.15721229 + 0.09919403j, 0.18076365 - \n    0.05697395j, -0.10596487 + 0.23118383j, 0.30913352 + 0.24695589j, -\n    0.03403863 - 0.01778209j, -0.07783213 - 0.25923847j, 0.06847369 - \n    0.2460447j, -0.24223779 - 0.10590238j, 0.15920784 + 0.21435437j, \n    0.26632193 - 0.02864663j, 0.06457043 + 0.0577428j, -0.38792984 + \n    0.08474334j, 0.00944311 + 0.22274564j, 0.11762823 + 0.36687658j, -\n    0.1058428 - 0.2103637j, -0.12970051 - 0.27031414j, 0.12684307 + \n    0.08398822j, 0.06711923 + 0.23195763j, -0.04537262 + 0.26478843j, \n    0.10253668 - 0.07706414j, -0.13531665 - 0.27150259j, -0.09124132 - \n    0.23306839j, -0.08631867 + 0.17221145j, 0.17654328 - 0.10341264j, \n    0.11171903 - 0.05824829j, 0.04708668 - 0.13436316j, -0.10544253 + \n    0.07083904j, 0.04191629 + 0.28190845j, -0.4212947 - 0.28704399j, \n    0.10278485 + 0.05713015j, 0.02057009 - 0.19126408j, 0.04856717 + \n    0.26648423j, 0.05388858 - 0.32433511j, -0.09408669 - 0.12159016j, -\n    0.01355394 + 0.04757554j, 0.10925003 - 0.0453999j, -0.02512057 - \n    0.23836324j, 0.31375479 - 0.0993564j, -0.14702106 + 0.33395328j, -\n    0.1608029 + 0.11439592j, -0.11028577 - 0.0093615j, -0.08440005 - \n    0.12376623j, 0.12932188 + 0.09711828j, 0.18574716 - 0.06392924j, -\n    0.13048059 + 0.0287961j, -0.29552716 - 0.08768809j, -0.02439943 - \n    0.01548155j, 0.07775135 + 0.00727332j, 0.1561534 - 0.06489038j, \n    0.46665242 - 0.07708219j, -0.05251139 + 0.37781248j, -0.3549081 - \n    0.10086123j, 0.11180645 - 0.40408473j, 0.03031085 + 0.16928711j, \n    0.1190129 - 0.10061168j, 0.0318046 - 0.12504866j, 0.08689947 + 0.07223655j]\nu1 = ql.Unitary('testname', matrix)\nu1.decompose()\nk.hadamard(0)\nk.hadamard(1)\nk.hadamard(2)\nk.hadamard(3)\nk.cnot(0, 1)\nk.cnot(0, 2)\nk.cnot(0, 3)\nk.cnot(1, 2)\nk.cnot(1, 3)\nk.cnot(2, 3)\nk.gate(u1, [0, 1, 2, 3])\np.add_kernel(k)\np.compile()\nqx.set(os.path.join(output_dir, p.name + '_initialqasmwriter_out.qasm'))\nqx.execute()\nc0 = qx.get_state()\nself.assertAlmostEqual(0.0625 * helper_prob(matrix[0] + matrix[1] + matrix[\n    2] + matrix[3] + matrix[4] + matrix[5] + matrix[6] + matrix[7] + matrix\n    [8] + matrix[9] + matrix[10] + matrix[11] + matrix[12] + matrix[13] +\n    matrix[14] + matrix[15]), helper_regex(c0)[0], 5)\nself.assertAlmostEqual(0.0625 * helper_prob(matrix[16] + matrix[17] +\n    matrix[18] + matrix[19] + matrix[20] + matrix[21] + matrix[22] + matrix\n    [23] + matrix[24] + matrix[25] + matrix[26] + matrix[27] + matrix[28] +\n    matrix[29] + matrix[30] + matrix[31]), helper_regex(c0)[1], 5)\nself.assertAlmostEqual(0.0625 * helper_prob(matrix[32] + matrix[33] +\n    matrix[34] + matrix[35] + matrix[36] + matrix[37] + matrix[38] + matrix\n    [39] + matrix[40] + matrix[41] + matrix[42] + matrix[43] + matrix[44] +\n    matrix[45] + matrix[46] + matrix[47]), helper_regex(c0)[2], 5)\nself.assertAlmostEqual(0.0625 * helper_prob(matrix[48] + matrix[49] +\n    matrix[50] + matrix[51] + matrix[52] + matrix[53] + matrix[54] + matrix\n    [55] + matrix[56] + matrix[57] + matrix[58] + matrix[59] + matrix[60] +\n    matrix[61] + matrix[62] + matrix[63]), helper_regex(c0)[3], 5)\nself.assertAlmostEqual(0.0625 * helper_prob(matrix[64] + matrix[65] +\n    matrix[66] + matrix[67] + matrix[68] + matrix[69] + matrix[70] + matrix\n    [71] + matrix[72] + matrix[73] + matrix[74] + matrix[75] + matrix[76] +\n    matrix[77] + matrix[78] + matrix[79]), helper_regex(c0)[4], 5)\nself.assertAlmostEqual(0.0625 * helper_prob(matrix[80] + matrix[81] +\n    matrix[82] + matrix[83] + matrix[84] + matrix[85] + matrix[86] + matrix\n    [87] + matrix[88] + matrix[89] + matrix[90] + matrix[91] + matrix[92] +\n    matrix[93] + matrix[94] + matrix[95]), helper_regex(c0)[5], 5)\nself.assertAlmostEqual(0.0625 * helper_prob(matrix[96] + matrix[97] +\n    matrix[98] + matrix[99] + matrix[100] + matrix[101] + matrix[102] +\n    matrix[103] + matrix[104] + matrix[105] + matrix[106] + matrix[107] +\n    matrix[108] + matrix[109] + matrix[110] + matrix[111]), helper_regex(c0\n    )[6], 5)\nself.assertAlmostEqual(0.0625 * helper_prob(matrix[112] + matrix[113] +\n    matrix[114] + matrix[115] + matrix[116] + matrix[117] + matrix[118] +\n    matrix[119] + matrix[120] + matrix[121] + matrix[122] + matrix[123] +\n    matrix[124] + matrix[125] + matrix[126] + matrix[127]), helper_regex(c0\n    )[7], 5)\nself.assertAlmostEqual(0.0625 * helper_prob(matrix[128] + matrix[129] +\n    matrix[130] + matrix[131] + matrix[132] + matrix[133] + matrix[134] +\n    matrix[135] + matrix[136] + matrix[137] + matrix[138] + matrix[139] +\n    matrix[140] + matrix[141] + matrix[142] + matrix[143]), helper_regex(c0\n    )[8], 5)\nself.assertAlmostEqual(0.0625 * helper_prob(matrix[144] + matrix[145] +\n    matrix[146] + matrix[147] + matrix[148] + matrix[149] + matrix[150] +\n    matrix[151] + matrix[152] + matrix[153] + matrix[154] + matrix[155] +\n    matrix[156] + matrix[157] + matrix[158] + matrix[159]), helper_regex(c0\n    )[9], 5)\nself.assertAlmostEqual(0.0625 * helper_prob(matrix[160] + matrix[161] +\n    matrix[162] + matrix[163] + matrix[164] + matrix[165] + matrix[166] +\n    matrix[167] + matrix[168] + matrix[169] + matrix[170] + matrix[171] +\n    matrix[172] + matrix[173] + matrix[174] + matrix[175]), helper_regex(c0\n    )[10], 5)\nself.assertAlmostEqual(0.0625 * helper_prob(matrix[176] + matrix[177] +\n    matrix[178] + matrix[179] + matrix[180] + matrix[181] + matrix[182] +\n    matrix[183] + matrix[184] + matrix[185] + matrix[186] + matrix[187] +\n    matrix[188] + matrix[189] + matrix[190] + matrix[191]), helper_regex(c0\n    )[11], 5)\nself.assertAlmostEqual(0.0625 * helper_prob(matrix[192] + matrix[193] +\n    matrix[194] + matrix[195] + matrix[196] + matrix[197] + matrix[198] +\n    matrix[199] + matrix[200] + matrix[201] + matrix[202] + matrix[203] +\n    matrix[204] + matrix[205] + matrix[206] + matrix[207]), helper_regex(c0\n    )[12], 5)\nself.assertAlmostEqual(0.0625 * helper_prob(matrix[208] + matrix[209] +\n    matrix[210] + matrix[211] + matrix[212] + matrix[213] + matrix[214] +\n    matrix[215] + matrix[216] + matrix[217] + matrix[218] + matrix[219] +\n    matrix[220] + matrix[221] + matrix[222] + matrix[223]), helper_regex(c0\n    )[13], 5)\nself.assertAlmostEqual(0.0625 * helper_prob(matrix[224] + matrix[225] +\n    matrix[226] + matrix[227] + matrix[228] + matrix[229] + matrix[230] +\n    matrix[231] + matrix[232] + matrix[233] + matrix[234] + matrix[235] +\n    matrix[236] + matrix[237] + matrix[238] + matrix[239]), helper_regex(c0\n    )[14], 5)\nself.assertAlmostEqual(0.0625 * helper_prob(matrix[240] + matrix[241] +\n    matrix[242] + matrix[243] + matrix[244] + matrix[245] + matrix[246] +\n    matrix[247] + matrix[248] + matrix[249] + matrix[250] + matrix[251] +\n    matrix[252] + matrix[253] + matrix[254] + matrix[255]), helper_regex(c0\n    )[15], 5)\n"
}