{
    "functionName": "test_session_values",
    "className": "TestSession",
    "fileName": "/ChristianVisintin_&_ATtila/tests_&_test_session.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test set/get session values\n        \"\"\"\nsession = ATSession([])\nwith self.assertRaises(KeyError):\n    session.get_session_value('foobar')\nsession.set_session_value('foo', 'bar')\nself.assertEqual(session.get_session_value('foo'), 'bar', \n    \"get_session_value failed; expected 'bar' got %s\" % session.\n    get_session_value('foo'))\n\"\"\"\n    Test ATSession just adding a command and evaluating its response\n    \"\"\"\nsession = ATSession([])\nsimple_command = ATCommand('AT', 'OK')\nsession.add_command(simple_command)\nnext_command = session.get_next_command()\nserial_response = ['OK']\nresponse = session.validate_response(serial_response, 100)\nprint('%s (expected %s) has response: %s' % (next_command.command,\n    next_command.expected_response, response.full_response))\nself.assertFalse(session.last_command_failed)\nself.assertEqual(response.response, 'OK', \n    'Command should have OK as response but has %s' % response.response)\nsimple_command2 = ATCommand('AT+CGDCONT=1, \"IP\", \"internet.foo.bar\"', 'OK')\nsession.add_command(simple_command2)\nnext_command = session.get_next_command()\nserial_response = ['ERROR']\nresponse = session.validate_response(serial_response, 100)\nprint('%s (expected %s) has response: %s' % (next_command.command,\n    next_command.expected_response, response.full_response))\nself.assertTrue(session.last_command_failed)\ngsn_command = ATCommand('AT+GSN', '^[0-9,A-F]{16}$')\nsession.add_command(gsn_command)\nnext_command = session.get_next_command()\nserial_response = ['AC03C7F3D2EB7832', 'OK']\nresponse = session.validate_response(serial_response, 100)\nprint('%s (expected %s) has response: %s' % (next_command.command,\n    next_command.expected_response, response.full_response))\nself.assertFalse(session.last_command_failed)\nself.assertEqual(response.response, 'AC03C7F3D2EB7832', \n    'Command should have AC03C7F3D2EB7832 as response but has %s' %\n    response.response)\ncsq_command = ATCommand('AT+CSQ', '[0-9]{1,2}')\nsession.add_command(csq_command)\nnext_command = session.get_next_command()\ncsq_response = ['+CSQ: 22,99', '', 'OK']\nresponse = session.validate_response(csq_response, 100)\nprint('%s (expected %s) has response: %s' % (next_command.command,\n    next_command.expected_response, response.full_response))\nself.assertFalse(session.last_command_failed)\nself.assertEqual(response.response, '22', \n    'Command should have 22 as response but has %s' % response.response)\ncommand_not_replaceable = ATCommand('AT+CGDATA=${CONTEXT}', 'OK')\nsession.add_command(command_not_replaceable)\nself.assertIsNotNone(session.get_next_command())\nserial_response = ['+CME: ERRROR']\nresponse = session.validate_response(serial_response, 100)\nprint('%s (expected %s) has response: %s' % (next_command.command,\n    next_command.expected_response, response.full_response))\nself.assertTrue(session.last_command_failed)\n"
}