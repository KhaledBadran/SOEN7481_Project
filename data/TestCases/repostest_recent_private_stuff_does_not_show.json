{
    "functionName": "test_recent_private_stuff_does_not_show",
    "className": "TestETL",
    "fileName": "/klahnakoski_&_Bugzilla-ETL/tests_&_test_etl.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "self.settings.param.allow_private_bugs = False\nFile(self.settings.param.first_run_time).delete()\nFile(self.settings.param.last_run_time).delete()\ndatabase.make_test_instance(self.settings.bugzilla)\nbz_etl.main(es=self.settings.public.bugs.es, es_comments=self.settings.\n    public.comments.es, kwargs=self.settings)\nwith MySQL(self.settings.bugzilla) as db:\n    private_bugs = {1157}\n    Log.note('The private bugs are {{bugs}}', bugs=private_bugs)\n    for b in private_bugs:\n        database.add_bug_group(db, b, BUG_GROUP_FOR_TESTING)\n    comments = db.query('SELECT comment_id FROM longdescs').comment_id\n    marked_private_comments = Random.sample(comments, 5)\n    for c in marked_private_comments:\n        database.mark_comment_private(db, c, isprivate=1)\n    implied_private_comments = db.query(\n        \"\"\"\n                SELECT comment_id FROM longdescs WHERE {{where}}\n            \"\"\"\n        , {'where': esfilter2sqlwhere({'terms': {'bug_id': private_bugs}})}\n        ).comment_id\n    private_comments = marked_private_comments + implied_private_comments\n    Log.note('The private comments are {{comments}}', comments=private_comments\n        )\n    attachments = db.query('SELECT bug_id, attach_id FROM attachments')\n    private_attachments = Random.sample(attachments, 5)\n    Log.note('The private attachments are {{attachments}}', attachments=\n        private_attachments)\n    for a in private_attachments:\n        database.mark_attachment_private(db, a.attach_id, isprivate=1)\nif not File(self.settings.param.last_run_time).exists:\n    Log.error('last_run_time should exist')\nbz_etl.main(es=self.settings.public.bugs.es, es_comments=self.settings.\n    public.comments.es, kwargs=self.settings)\nes = real_elasticsearch.Index(self.settings.public.bugs.es)\nes_c = real_elasticsearch.Index(self.settings.public.comments.es)\nrefresh_metadata(es)\nverify_no_private_bugs(es, private_bugs)\nverify_no_private_attachments(es, private_attachments)\nverify_no_private_comments(es_c, private_comments)\nwith MySQL(self.settings.bugzilla) as db:\n    for b in private_bugs:\n        database.remove_bug_group(db, b, BUG_GROUP_FOR_TESTING)\nbz_etl.main(es=self.settings.public.bugs.es, es_comments=self.settings.\n    public.comments.es, kwargs=self.settings)\nrefresh_metadata(es)\nverify_public_bugs(es, private_bugs)\nverify_no_private_attachments(es, private_attachments)\nverify_no_private_comments(es_c, marked_private_comments)\n"
}