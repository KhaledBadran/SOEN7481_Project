{
    "functionName": "test_paired_ranks_test",
    "className": null,
    "fileName": "/happma_&_PyNonpar/tests_&_test_twosample_paired.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "if PyNonpar.twosample_paired.paired_ranks_test(x, y, alternative='less',\n    quantile='normal')[-1] != pytest.approx(p_less, 0.001):\n    raise AssertionError()\nif PyNonpar.twosample_paired.paired_ranks_test(x, y, alternative='greater',\n    quantile='normal')[-1] != pytest.approx(p_greater, 0.001):\n    raise AssertionError()\nif PyNonpar.twosample_paired.paired_ranks_test(x, y, alternative=\n    'two.sided', quantile='normal')[-1] != pytest.approx(p_two, 0.001):\n    raise AssertionError()\nif PyNonpar.twosample_paired.paired_ranks_test(x, y, alternative='less',\n    quantile='t')[-1] != pytest.approx(pt_less, 0.001):\n    raise AssertionError()\nif PyNonpar.twosample_paired.paired_ranks_test(x, y, alternative='greater',\n    quantile='t')[-1] != pytest.approx(pt_greater, 0.001):\n    raise AssertionError()\nif PyNonpar.twosample_paired.paired_ranks_test(x, y, alternative=\n    'two.sided', quantile='t')[-1] != pytest.approx(pt_two, 0.001):\n    raise AssertionError()\n"
}