{
    "functionName": "rfdataport",
    "className": null,
    "fileName": "/FaradayRF_&_Faraday-Software/faraday_&_data.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"\n    Flask function that provides the \"transmit\" and \"receive\" functionality.\n    \"\"\"\nif request.method == 'POST':\n    proxycallsign = request.args.get('localcallsign').upper()\n    proxynodeid = request.args.get('localnodeid')\n    data = request.args.get('data')\n    try:\n        data = base64.b64decode(data)\n    except TypeError as e:\n        logger.info('BASE64 data error: {0}'.format(e))\n        return json.dumps({'status': 'BASE64 data error.'}), 400\n    else:\n        if len(data) > PAYLOAD_LEN:\n            fragment_list = fragmentmsg(data, PAYLOAD_LEN)\n            for item in fragment_list:\n                cmd = 0\n                seq = 0\n                datapacket = packet_struct.pack(cmd, seq, str(item))\n                faraday_1.POST(proxycallsign, proxynodeid,\n                    APP_DATA_UART_PORT, datapacket)\n        else:\n            cmd = 0\n            seq = 0\n            datapacket = packet_struct.pack(cmd, seq, data)\n            faraday_1.POST(proxycallsign, proxynodeid, APP_DATA_UART_PORT,\n                datapacket)\n        return json.dumps({'status': 'Posted Packet(s)'}), 200\nelse:\n    proxycallsign = request.args.get('localcallsign').upper()\n    proxynodeid = request.args.get('localnodeid')\n    rxdata = faraday_1.GET(proxycallsign, proxynodeid, APP_DATA_UART_PORT)\n    if rxdata is not None:\n        if 'error' in rxdata:\n            return rxdata['error'], 404\n        else:\n            for item in rxdata:\n                try:\n                    data_truncated = base64.b64decode(item['data'])[0:\n                        DATA_FIXED_LEN]\n                    unpacked_rxdata = packet_struct.unpack(data_truncated)\n                    item['data'] = base64.b64encode(unpacked_rxdata[2])\n                except struct.error as e:\n                    return 'Struct Error: {0}'.format(e), 400\n            return json.dumps(rxdata, indent=1), 200, {'Content-Type':\n                'application/json'}\n    else:\n        return '', 204\napp.route('/', methods=['GET', 'POST'])"
}