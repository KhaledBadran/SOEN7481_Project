{
    "functionName": "test_run_cmd_interrupt_remote_command",
    "className": null,
    "fileName": "/AmadeusITGroup_&_JumpSSH/tests_&_test__session.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "caplog.set_level(logging.DEBUG)\n\"\"\"Test behavior of run_cmd when user hit Contrl-C while a command is being executed remotely\"\"\"\ngateway_ip, gateway_port = docker_env.get_host_ip_port()\ngateway_session = SSHSession(host=gateway_ip, port=gateway_port, username=\n    'user1', password='password1').open()\nmock_input = '__builtin__.raw_input' if util.PY2 else 'builtins.input'\nwith pytest.raises(KeyboardInterrupt):\n    with mock.patch('select.select', side_effect=KeyboardInterrupt(\n        'Fake Ctrl-C')):\n        monkeypatch.setattr(mock_input, lambda x: 'Y')\n        gateway_session.run_cmd('sleep 30')\nassert gateway_session.get_exit_code('ps aux | grep -v grep | grep \"sleep 30\"'\n    ) == 1\nwith pytest.raises(KeyboardInterrupt):\n    with mock.patch('select.select', side_effect=KeyboardInterrupt(\n        'Fake Ctrl-C')):\n        monkeypatch.setattr(mock_input, lambda x: 'N')\n        gateway_session.run_cmd('sleep 40')\nassert gateway_session.get_exit_code('ps aux | grep -v grep | grep \"sleep 40\"'\n    ) == 0\nwith pytest.raises(KeyboardInterrupt):\n    with mock.patch('select.select', side_effect=KeyboardInterrupt(\n        'Fake Ctrl-C')):\n        monkeypatch.setattr(mock_input, lambda x: '')\n        gateway_session.run_cmd('sleep 50')\nassert gateway_session.get_exit_code('ps aux | grep -v grep | grep \"sleep 50\"'\n    ) == 1\nwith pytest.raises(KeyboardInterrupt):\n    with mock.patch('select.select', side_effect=KeyboardInterrupt(\n        'Fake Ctrl-C')):\n        with mock.patch(mock_input, side_effect=KeyboardInterrupt(\n            '2nd Fake Ctrl-C')):\n            gateway_session.run_cmd('sleep 60')\nassert gateway_session.get_exit_code('ps aux | grep -v grep | grep \"sleep 60\"'\n    ) == 0\nwith pytest.raises(KeyboardInterrupt):\n    with mock.patch('select.select', side_effect=KeyboardInterrupt(\n        'Fake Ctrl-C')):\n        monkeypatch.setattr(mock_input, lambda x: time.sleep(4) or 'Y')\n        gateway_session.run_cmd('sleep 3')\nassert 'Remote command execution already finished with exit code' in caplog.text\nwith pytest.raises(KeyboardInterrupt):\n    with mock.patch('select.select', side_effect=KeyboardInterrupt(\n        'Fake Ctrl-C')):\n        monkeypatch.setattr('paramiko.channel.Channel.recv_exit_status', lambda\n            x: -1)\n        gateway_session.run_cmd('sleep 3')\nassert 'Unable to terminate remote command because channel is closed.' in caplog.text\npytest.mark.skipif(sys.version_info[0:2] in [(3, 5), (3, 6)], reason=\n    'failing mostly with python 3.5/3.6 and no idea why yet...')"
}