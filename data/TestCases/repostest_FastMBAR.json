{
    "functionName": "test_FastMBAR",
    "className": null,
    "fileName": "/xqding_&_FastMBAR/FastMBAR_&_test_installation.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "import numpy as np\nnp.random.seed(0)\nnum_states = 10\nnum_conf = np.array([(2000) for i in range(num_states)])\nmu = np.random.normal(0, 4, size=num_states)\nsigma = np.random.uniform(1, 3, size=num_states)\nXs = []\nfor i in range(num_states):\n    Xs += list(np.random.normal(loc=mu[i], scale=sigma[i], size=num_conf[i]))\nXs = np.array(Xs)\nenergy = np.zeros((num_states, len(Xs)))\nfor i in range(num_states):\n    energy[(i), :] = 0.5 * ((Xs - mu[i]) / sigma[i]) ** 2\nnum_states_perturbed = 5\nmu_perturbed = np.random.normal(0, 4, size=num_states_perturbed)\nsigma_perturbed = np.random.uniform(1, 3, size=num_states_perturbed)\nenergy_perturbed = np.zeros((num_states_perturbed, len(Xs)))\nfor i in range(num_states_perturbed):\n    energy_perturbed[(i), :] = 0.5 * ((Xs - mu_perturbed[i]) /\n        sigma_perturbed[i]) ** 2\nreference_result = np.concatenate([-np.log(sigma), -np.log(sigma_perturbed)])\nreference_result = reference_result - reference_result[0]\nprint('=' * 40)\nprint('Start testing FastMBAR: ')\nprint('=' * 40)\nprint('')\nprint('Without bootstrap')\nprint('-' * 40)\nmbar = FastMBAR(energy, num_conf, cuda=False, bootstrap=False)\nF_perturbed, _ = mbar.calculate_free_energies_of_perturbed_states(\n    energy_perturbed)\nF = np.concatenate((mbar.F, F_perturbed))\ndiff_cpu = np.sqrt(np.mean((F - reference_result) ** 2))\nassert diff_cpu <= 0.05\nprint('RMSD (CPU calculation and reference results) < 0.05. PASSED.')\nif torch.cuda.is_available():\n    mbar = FastMBAR(energy, num_conf, cuda=True, bootstrap=False)\n    F_perturbed, _ = mbar.calculate_free_energies_of_perturbed_states(\n        energy_perturbed)\n    F = np.concatenate((mbar.F, F_perturbed))\n    diff_cpu = np.sqrt(np.mean((F - reference_result) ** 2))\n    assert diff_cpu <= 0.05\n    print('RMSD (GPU calculation and reference results) < 0.05. PASSED.')\n    mbar = FastMBAR(energy, num_conf, cuda=True, cuda_batch_mode=True,\n        bootstrap=False)\n    F_perturbed, _ = mbar.calculate_free_energies_of_perturbed_states(\n        energy_perturbed)\n    F = np.concatenate((mbar.F, F_perturbed))\n    diff_cpu = np.sqrt(np.mean((F - reference_result) ** 2))\n    assert diff_cpu <= 0.05\n    print(\n        'RMSD (GPU-batch-mode calculation and reference results) < 0.05. PASSED.'\n        )\nprint('')\nprint('With bootstrap')\nprint('-' * 40)\nmbar = FastMBAR(energy, num_conf, cuda=False, bootstrap=True)\nF_perturbed, _ = mbar.calculate_free_energies_of_perturbed_states(\n    energy_perturbed)\nF = np.concatenate((mbar.F, F_perturbed))\ndiff_cpu = np.sqrt(np.mean((F - reference_result) ** 2))\nassert diff_cpu <= 0.05\nprint('RMSD (CPU calculation and reference results) < 0.05. PASSED.')\nif torch.cuda.is_available():\n    mbar = FastMBAR(energy, num_conf, cuda=True, bootstrap=True)\n    F_perturbed, _ = mbar.calculate_free_energies_of_perturbed_states(\n        energy_perturbed)\n    F = np.concatenate((mbar.F, F_perturbed))\n    diff_cpu = np.sqrt(np.mean((F - reference_result) ** 2))\n    assert diff_cpu <= 0.05\n    print('RMSD (GPU calculation and reference results) < 0.05. PASSED.')\n    mbar = FastMBAR(energy, num_conf, cuda=True, cuda_batch_mode=True,\n        bootstrap=True)\n    F_perturbed, _ = mbar.calculate_free_energies_of_perturbed_states(\n        energy_perturbed)\n    F = np.concatenate((mbar.F, F_perturbed))\n    diff_cpu = np.sqrt(np.mean((F - reference_result) ** 2))\n    assert diff_cpu <= 0.05\n    print(\n        'RMSD (GPU-batch-mode calculation and reference results): {:.2f} < 0.05. PASSED.'\n        )\nprint('=' * 40)\nprint('ALL TESTS ARE PASSED.')\n"
}