{
    "functionName": "test_subset_values_class",
    "className": "TestLexicons",
    "fileName": "/apmoore1_&_Bella/tests_&_test_lexicons.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Tests that :py:func:`bella.lexicons.Lexicon._process_lexicon` function\n        works correctly. The functionality is lower casing the lexicon words and\n        removing words from the lexicon if they are not within\n        \"\"\"\nwith self.assertRaises(TypeError, msg=\n    'Should not allow list types for the `subset_values` parameter type found only set'\n    ):\n    HuLiu(['positive'])\nwith self.assertRaises(TypeError, msg=\n    'Should not allow 1 as a substitute for True boolean'):\n    HuLiu({'positive'}, 1)\nmpqa_upper = Mpqa(lower=False).lexicon\nnormal_mpqa = Mpqa().lexicon\nmpqa_lower = Mpqa(lower=True).lexicon\nfalse_value = mpqa_lower == mpqa_upper\nself.assertEqual(False, false_value, msg=\n    'The upper case version of mpqa should not equal the lower case')\nself.assertEqual(normal_mpqa, mpqa_upper, msg=\n    'Default values of lower should be False')\nvalid_subset_size = 2006\nsubset_size = len(HuLiu(subset_cats={'positive'}, lower=True).lexicon)\nself.assertEqual(valid_subset_size, subset_size, msg=\n    'The size of the positive hu and liu lexicon should be {} not {}'.\n    format(valid_subset_size, subset_size))\nvalid_subset_size = 4783\nsubset_size = len(HuLiu(subset_cats={'negative'}, lower=True).lexicon)\nself.assertEqual(valid_subset_size, subset_size, msg=\n    'The size of the negative hu and liu lexicon should be {} not {}'.\n    format(valid_subset_size, subset_size))\nvalid_subset_size = 2312\nsubset_size = len(NRC(subset_cats={'positive'}, lower=True).lexicon)\nself.assertEqual(valid_subset_size, subset_size, msg=\n    'The size of the positive nrc emotion lexicon should be {} not {}'.\n    format(valid_subset_size, subset_size))\nvalid_subset_size = 3324\nsubset_size = len(NRC(subset_cats={'negative'}, lower=True).lexicon)\nself.assertEqual(valid_subset_size, subset_size, msg=\n    'The size of the negative nrc emotion lexicon should be {} not {}'.\n    format(valid_subset_size, subset_size))\nvalid_subset_size = 2304\nsubset_size = len(Mpqa(subset_cats={'positive'}, lower=True).lexicon)\nself.assertEqual(valid_subset_size, subset_size, msg=\n    'The size of the positive mpqa lexicon should be {} not {}'.format(\n    valid_subset_size, subset_size))\nvalid_subset_size = 4154\nsubset_size = len(Mpqa(subset_cats={'negative'}, lower=True).lexicon)\nself.assertEqual(valid_subset_size, subset_size, msg=\n    'The size of the negative mpqa lexicon should be {} not {}'.format(\n    valid_subset_size, subset_size))\npytest.mark.skip(reason=\n    'Requires the files to be downloaded and we do not own the lexicons therefore cannot release them.'\n    )"
}