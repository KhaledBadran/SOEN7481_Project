{
    "functionName": "test_t_2d",
    "className": "TestHilbertCurve",
    "fileName": "/oberbichler_&_ANurbs/tests_&_TestHilbertCurve.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "data = [([0, 0, 0], 0), ([0, -1, 0], 0), ([0, 0, 0], 0), ([0, -1, 1], 1), (\n    [0, 0, 0], 0), ([0, -1, 3], 3), ([0, 0, 0], 0), ([0, -1, 2], 2), ([0, 0,\n    1], 2), ([0, 0, 0], 0), ([0, 0, 1], 2), ([0, 0, 1], 2), ([0, 0, 1], 2),\n    ([0, 0, 3], 3), ([0, 0, 1], 2), ([0, 0, 2], 1), ([0, 0, 3], 3), ([0, 0,\n    0], 0), ([0, 0, 3], 3), ([0, 0, 1], 2), ([0, 0, 3], 3), ([0, 0, 3], 3),\n    ([0, 0, 3], 3), ([0, 0, 2], 1), ([0, 0, 2], 1), ([3, -1, 0], 3), ([0, 0,\n    2], 1), ([3, -1, 1], 2), ([0, 0, 2], 1), ([3, -1, 3], 0), ([0, 0, 2], 1\n    ), ([3, -1, 2], 1), ([0, 0, 2], 1), ([0, 0, 1], 2)]\nfor (e, d, b), expected in data:\n    actual = an.HilbertCurve2D._t(e, d, b)\n    assert_equal(actual, expected)\nstaticmethod"
}