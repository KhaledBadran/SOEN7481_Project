{
    "functionName": "test_handler_success",
    "className": null,
    "fileName": "/PlaidWeb_&_Authl/tests_&_handlers_&_test_indieauth.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "store = {}\nhandler = indieauth.IndieAuth('http://client/', tokens.DictStore(store))\nassert handler.service_name == 'IndieAuth'\nassert handler.url_schemes\nassert 'IndieAuth' in handler.description\nassert handler.cb_id\nassert handler.logo_html[0][1] == 'IndieAuth'\nendpoint = {'Link':\n    '<https://auth.example/endpoint>; rel=\"authorization_endpoint'}\nrequests_mock.get('http://example.user/', headers=endpoint)\nrequests_mock.get('https://example.user/bob', headers=endpoint)\ninjected = requests.get('http://example.user/')\nassert not handler.handles_url('http://example.user/')\nassert handler.handles_page('http://example.user/', injected.headers,\n    BeautifulSoup(injected.text, 'html.parser'), injected.links)\nassert handler.handles_url('http://example.user/')\ndisp = handler.initiate_auth('http://example.user/', 'http://client/cb',\n    '/dest')\nassert isinstance(disp, disposition.Redirect)\nassert disp.url.startswith('https://auth.example/endpoint')\nuser_get = parse_args(disp.url)\nassert user_get['redirect_uri'].startswith('http://client/cb')\nassert 'client_id' in user_get\nassert 'state' in user_get\nassert user_get['state'] in store\nassert user_get['response_type'] == 'code'\nassert 'me' in user_get\ndef verify_callback(request, _):\n    import urllib.parse\n    args = urllib.parse.parse_qs(request.text)\n    assert args['code'] == ['asdf']\n    assert args['client_id'] == ['http://client/']\n    assert 'redirect_uri' in args\n    return json.dumps({'me': 'https://example.user/bob'})\nrequests_mock.post('https://auth.example/endpoint', text=verify_callback)\nLOGGER.debug('state=%s', user_get['state'])\nresponse = handler.check_callback(user_get['redirect_uri'], {'state':\n    user_get['state'], 'code': 'asdf'}, {})\nLOGGER.debug('verification response: %s', response)\nassert isinstance(response, disposition.Verified)\nassert response.identity == 'https://example.user/bob'\nassert response.redir == '/dest'\nresponse = handler.check_callback(user_get['redirect_uri'], {'state':\n    user_get['state'], 'code': 'asdf'}, {})\nassert isinstance(response, disposition.Error)\n"
}