{
    "functionName": "test_target_eq",
    "className": "TestTarget",
    "fileName": "/apmoore1_&_Bella/tests_&_test_data_types.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test the Target __eq__ method\n        \"\"\"\ntarget_example_0 = Target([(3, 5), (6, 8)], '1', 'Iphone',\n    'text with Iphone', 1)\ntarget_example_1 = Target([(1, 5)], '3', 'Iphone', 'text with Iphone', 1)\ntarget_example_2 = Target([(1, 2)], '2', 'Iphone', 'text with Iphone', 1)\ntarget_example_dup0 = Target([(1, 2)], '1', 'S8', 'text with Samsung S8', 1)\nself.assertEqual(target_example_0, target_example_dup0, msg=\n    'Should be equal as they have the same ID `1`')\ntarget_example_dup1 = copy.deepcopy(target_example_1)\ndel target_example_dup1['target_id']\nself.assertEqual(target_example_1, target_example_dup1, msg=\n    'Should be equal as they have the same minimum keys')\ntarget_example_dup2 = copy.deepcopy(target_example_2)\nself.assertEqual(target_example_2, target_example_dup2, msg=\n    'Copies of the same Target instance should be equal')\ndict_example_1 = {'target': 'Iphone', 'sentiment': 1, 'spans': [(1, 5)],\n    'text': 'text with Iphone'}\ntest_equality = dict_example_1 == target_example_1\nself.assertEqual(False, test_equality, msg=\n    'Should not accept dicts even with the same minimum_keys')\n"
}