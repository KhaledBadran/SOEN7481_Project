{
    "functionName": "test_modify_attribute_kmip_2_0_with_multivalued",
    "className": "TestKmipEngine",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_services_&_server_&_test_engine.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that a ModifyAttribute request can be processed correctly with\n        KMIP 2.0 parameters.\n        \"\"\"\ne = engine.KmipEngine()\ne._protocol_version = contents.ProtocolVersion(2, 0)\ne._attribute_policy._version = e._protocol_version\ne._data_store = self.engine\ne._data_store_session_factory = self.session_factory\ne._data_session = e._data_store_session_factory()\ne._is_allowed_by_operation_policy = mock.Mock(return_value=True)\ne._logger = mock.MagicMock()\nsecret = pie_objects.SymmetricKey(enums.CryptographicAlgorithm.AES, 0, b'')\ne._data_session.add(secret)\ne._data_session.commit()\ne._data_session = e._data_store_session_factory()\nmanaged_object = e._get_object_with_access_controls('1', enums.Operation.\n    MODIFY_ATTRIBUTE)\nself.assertEqual('Symmetric Key', managed_object.names[0])\npayload = payloads.ModifyAttributeRequestPayload(unique_identifier='1',\n    current_attribute=objects.CurrentAttribute(attribute=attributes.Name(\n    name_value=attributes.Name.NameValue('Symmetric Key'))), new_attribute=\n    objects.NewAttribute(attribute=attributes.Name(name_value=attributes.\n    Name.NameValue('Modified Name'))))\nresponse_payload = e._process_modify_attribute(payload)\ne._data_session.commit()\ne._data_session = e._data_store_session_factory()\ne._logger.info.assert_any_call('Processing operation: ModifyAttribute')\nself.assertEqual('1', response_payload.unique_identifier)\nself.assertIsNone(response_payload.attribute)\nmanaged_object = e._get_object_with_access_controls(response_payload.\n    unique_identifier, enums.Operation.MODIFY_ATTRIBUTE)\nself.assertEqual('Modified Name', managed_object.names[0])\n"
}