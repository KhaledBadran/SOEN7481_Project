{
    "functionName": "set_occupancy",
    "className": "MultiPhase",
    "fileName": "/pmeal_&_OpenPNM/openpnm_&_phases_&_MultiPhase.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"\n        Specify occupancy of a phase in each pore and/or throat\n\n        Parameters\n        ----------\n        phase : OpenPNM Phase object\n            The phase whose occupancy is being specified\n\n        Pvals : array_like, float\n            The volume fraction of ``phase`` in each pore. This array must be\n            *``Np``*-long, except when ``pores`` is also passed, where in that\n            case they must be of equal length, with one value between 0 and 1,\n            for each pore in the network. If a scalar is received it is applied\n            to all pores. If nothing is passed, ``Pvals=1.0`` is assumed.\n\n        Tvals : array_like, float\n            The volume fraction of ``phase`` in each throat. This array must be\n            *``Nt``*-long, except when ``throats`` is also passed, where in that\n            case they must be of equal length, with one value between 0 and 1,\n            for each throat in the network. If a scalar is received it is applied\n            to all throats. If nothing is passed, ``Tvals=1.0`` is assumed.\n\n        pores : array_like, int\n            The location of pores for which the phase occupancy is to be set.\n\n        throats : array_like, int\n            The location of throats for which the phase occupancy is to be set.\n\n        \"\"\"\nPvals = np.array(Pvals, ndmin=1)\nTvals = np.array(Tvals, ndmin=1)\npores = np.array(pores, ndmin=1)\nthroats = np.array(throats, ndmin=1)\nif Pvals.size and pores.size:\n    if Pvals.size != 1 and pores.size != 1:\n        if Pvals.size != pores.size:\n            raise Exception('Pvals and pores must be the same size.')\nif Tvals.size and throats.size:\n    if Tvals.size != 1 and throats.size != 1:\n        if Tvals.size != throats.size:\n            raise Exception('Tvals and throats must be the same size.')\nif phase not in self.project:\n    raise Exception(f\"{phase.name} doesn't belong to this project\")\nelif phase.name not in self.settings['phases']:\n    self.add_phases(phase)\nif np.any(Pvals > 1.0) or np.any(Pvals < 0.0):\n    logger.critical('Received Pvals contain volume fractions outside ' +\n        'the range of 0 to 1')\nif np.any(Tvals > 1.0) or np.any(Tvals < 0.0):\n    logger.critical('Received Tvals contain volume fractions outside ' +\n        'the range of 0 to 1')\nif Pvals.size and not pores.size:\n    pores = self.pores()\nif Tvals.size and not throats.size:\n    throats = self.throats()\nif pores.size:\n    Pvals = Pvals if Pvals.size else 1.0\n    self['pore.occupancy.' + phase.name][pores] = Pvals\nif throats.size:\n    Tvals = Tvals if Tvals.size else 1.0\n    self['throat.occupancy.' + phase.name][throats] = Tvals\nif self.settings['throat_occupancy'] == 'automatic':\n    self.regenerate_models(propnames=f'throat.occupancy.{phase.name}')\nself._update_occupancy()\n"
}