{
    "functionName": "test_file_analysis_005_office_file_archiver_000_archive",
    "className": "TestCase",
    "fileName": "/IntegralDefense_&_ACE/lib_&_saq_&_modules_&_test_file_analysis.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "target_dir = os.path.join(saq.DATA_DIR, saq.CONFIG[\n    'analysis_module_office_file_archiver']['office_archive_dir'])\ntry:\n    if os.path.isdir(target_dir):\n        shutil.rmtree(target_dir)\n    os.mkdir(target_dir)\nexcept Exception as e:\n    logging.error('unable to reset {}: {}'.format(target_dir, e))\nroot = create_root_analysis(uuid=str(uuid.uuid4()))\nroot.initialize_storage()\nshutil.copy('test_data/ole_files/Paid Invoice.doc', root.storage_dir)\n_file = root.add_observable(F_FILE, 'Paid Invoice.doc')\nroot.save()\nroot.schedule()\nengine = TestEngine()\nengine.enable_module('analysis_module_office_file_archiver', 'test_groups')\nengine.enable_module('analysis_module_file_type', 'test_groups')\nengine.controlled_stop()\nengine.start()\nengine.wait()\nroot.load()\n_file = root.get_observable(_file.id)\nself.assertIsNotNone(_file)\nfrom saq.modules.file_analysis import OfficeFileArchiveAction\nanalysis = _file.get_analysis(OfficeFileArchiveAction)\nself.assertTrue(analysis)\nself.assertTrue(analysis.details)\nself.assertTrue(os.path.exists(analysis.details))\nroot = create_root_analysis(uuid=str(uuid.uuid4()))\nroot.initialize_storage()\nshutil.copy('test_data/ole_files/Paid Invoice.doc', root.storage_dir)\n_file = root.add_observable(F_FILE, 'Paid Invoice.doc')\nroot.save()\nroot.schedule()\nengine = TestEngine()\nengine.enable_module('analysis_module_office_file_archiver', 'test_groups')\nengine.enable_module('analysis_module_file_type', 'test_groups')\nengine.controlled_stop()\nengine.start()\nengine.wait()\nroot.load()\n_file = root.get_observable(_file.id)\nself.assertIsNotNone(_file)\nfrom saq.modules.file_analysis import OfficeFileArchiveAction\nanalysis = _file.get_analysis(OfficeFileArchiveAction)\nself.assertTrue(analysis)\nself.assertTrue(analysis.details)\nself.assertTrue(os.path.exists(analysis.details))\nself.assertTrue(os.path.basename(analysis.details).startswith('000001_'))\n"
}