{
    "functionName": "test_clean_duplicates",
    "className": "TestMapper",
    "fileName": "/fechbmaster_&_3DNIRmapper/tests_&_test_mapper.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "location = [4.28, 3.58, 0]\nrotation = [-90, 180, -52.2]\nfocal_length = 35\nsensor_width = 32\nsensor_height = 18\nscreen_width = 1920\nscreen_height = 1080\ncam3 = Camera(focal_length, screen_width, screen_height, sensor_width,\n    sensor_height, location, rotation, 'EULER')\ntexture3 = Texture('/fake_texture.png', cam3)\nself.mapper.textures.append(texture3)\nself.mapper.start_visibility_analysis()\nself.mapper.clean_duplicates()\nexpected_tri_ids_0 = [5, 11]\nexpected_tri_ids_1 = [8]\nexpected_tri_ids_2 = [2]\ntry:\n    np.testing.assert_equal(self.mapper.textures[0].vis_triangle_indices,\n        expected_tri_ids_0)\n    np.testing.assert_equal(self.mapper.textures[1].vis_triangle_indices,\n        expected_tri_ids_1)\n    np.testing.assert_equal(self.mapper.textures[2].vis_triangle_indices,\n        expected_tri_ids_2)\n    res = True\nexcept AssertionError as err:\n    res = False\n    print(err)\nself.assertTrue(res)\ntry:\n    np.testing.assert_equal(self.mapper.textures[0].\n        duplicate_triangle_indices, [])\n    np.testing.assert_equal(self.mapper.textures[1].\n        duplicate_triangle_indices, [])\n    np.testing.assert_equal(self.mapper.textures[2].\n        duplicate_triangle_indices, [])\n    res = True\nexcept AssertionError as err:\n    res = False\n    print(err)\nself.assertTrue(res)\n"
}