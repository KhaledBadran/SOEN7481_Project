{
    "functionName": "test_file_providers",
    "className": "TestChapter1",
    "fileName": "/axiros_&_DevApps/tests_&_test_tutorial.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\"\"\"\ntt = \"\"\"\n        # Providers\n\n        Changing the defaults of an app makes more sense to do via other means\n        than the CLI.\n\n        Built in we do have two more so called \"providers\", i.e. deliverers of config:\n\n        `0.` [Programmed Defaults]\n        `1.` Config File\n        `2.` Environ\n        `3.` CLI\n\n        overriding each other's values in the given order. That order can be changed.\n\n        ## File\n\n        Lets create a config file, changing the default operator to `mul` and also the default of the first *function parameter* `a`:\n\n        \"\"\"\nmd(tt)\nval = '10.3'\nres = bash_run(\n    \"\"\"python -c \"if 1:\n        cfg = {'oper_func': 'mul', 'run': {'a': %s}}\n\n        # write to user config dir:\n        from appdirs import user_config_dir as ucd\n        from json import dumps\n        with open(ucd() + '/Calc.json', 'w') as fd:\n            fd.write(dumps(cfg))\"\n            \"\"\"\n     % val, no_cmd_path=True)\nmd('Now we can run the app *without* supplying `a` and get a multiplication:')\nres = bash_run(['calc1.py b=42'])\nassert res[0]['res'] == '420'\nmd('> Positionally you could overwrite `a` still on the CLI, so we do not map one value only to `b`'\n    )\nres = bash_run(['calc1.py 5 42'])\nassert res[0]['res'] == '210'\nres = bash_run(['calc1.py 5'])\nmd('Here is the output of `-h`:')\nres = bash_run(['calc1.py -h'], res_as=markdown)\nassert 'mul' in res[0]['res']\nassert not val in res[0]['res']\nmd('Again the app was reconfigured - this time by the config file (F)')\nmd(\"\"\"\n        Observe the int value - it was converted from the float, since that is what the function explicitly asked for.\n        \"\"\"\n    )\nmd('> Yes, we did mutate inplace the defaults of the `Calc.do_run` function - i.e. process wide!'\n    )\nmd(\"\"\"> Keep this in mind when using that feature - reading the source code is then misleading.\n> Help output shows modifications and origin rather prominently as you can see.\n\n\"\"\"\n    )\nmd('We delete the file for now.')\ndel_user_calc_json()\n"
}