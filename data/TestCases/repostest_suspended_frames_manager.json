{
    "functionName": "test_suspended_frames_manager",
    "className": null,
    "fileName": "/fabioz_&_PyDev.Debugger/tests_python_&_test_suspended_frames_manager.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "from _pydevd_bundle.pydevd_suspended_frames import SuspendedFramesManager\nfrom _pydevd_bundle.pydevd_utils import DAPGrouper\nsuspended_frames_manager = SuspendedFramesManager()\npy_db = _DummyPyDB()\nwith suspended_frames_manager.track_frames(py_db) as tracker:\n    thread_id = 'thread1'\n    frame = get_frame()\n    tracker.track(thread_id, pydevd_frame_utils.\n        create_frames_list_from_frame(frame))\n    assert suspended_frames_manager.get_thread_id_for_variable_reference(id\n        (frame)) == thread_id\n    variable = suspended_frames_manager.get_variable(id(frame))\n    assert ['var1', 'var2', 'var3'] == [x.get_name() for x in variable.\n        get_children_variables()]\n    as_dict = dict((x.get_name(), x.get_var_data()) for x in variable.\n        get_children_variables())\n    var_reference = as_dict['var2'].pop('variablesReference')\n    assert isinstance(var_reference, int_types)\n    assert isinstance(as_dict['var3'].pop('variablesReference'), int_types)\n    check_vars_dict_expected(as_dict, {'var1': {'name': 'var1', 'value':\n        '1', 'type': 'int', 'evaluateName': 'var1', 'variablesReference': 0\n        }, 'var2': {'name': 'var2', 'value': '[1]', 'type': 'list',\n        'evaluateName': 'var2'}, 'var3': {'name': 'var3', 'value':\n        '{33: [1]}', 'type': 'dict', 'evaluateName': 'var3'}})\n    as_dict = dict((x.get_name(), x.get_var_data(fmt={'hex': True})) for x in\n        variable.get_children_variables())\n    var_reference = as_dict['var2'].pop('variablesReference')\n    assert isinstance(var_reference, int_types)\n    assert isinstance(as_dict['var3'].pop('variablesReference'), int_types)\n    check_vars_dict_expected(as_dict, {'var1': {'name': 'var1', 'value':\n        '0x1', 'type': 'int', 'evaluateName': 'var1', 'variablesReference':\n        0}, 'var2': {'name': 'var2', 'value': '[0x1]', 'type': 'list',\n        'evaluateName': 'var2'}, 'var3': {'name': 'var3', 'value':\n        '{0x21: [0x1]}', 'type': 'dict', 'evaluateName': 'var3'}})\n    var2 = dict((x.get_name(), x) for x in variable.get_children_variables())[\n        'var2']\n    children_vars = var2.get_children_variables()\n    as_dict = dict([x.get_name(), x.get_var_data()] for x in children_vars if\n        x.get_name() not in DAPGrouper.SCOPES_SORTED)\n    assert as_dict == {'0': {'name': '0', 'value': '1', 'type': 'int',\n        'evaluateName': 'var2[0]', 'variablesReference': 0},\n        GENERATED_LEN_ATTR_NAME: {'name': GENERATED_LEN_ATTR_NAME, 'value':\n        '1', 'type': 'int', 'evaluateName': 'len(var2)',\n        'variablesReference': 0, 'presentationHint': {'attributes': [\n        'readOnly']}}}\n    var3 = dict((x.get_name(), x) for x in variable.get_children_variables())[\n        'var3']\n    children_vars = var3.get_children_variables()\n    as_dict = dict([x.get_name(), x.get_var_data()] for x in children_vars if\n        x.get_name() not in DAPGrouper.SCOPES_SORTED)\n    assert isinstance(as_dict['33'].pop('variablesReference'), int_types)\n    check_vars_dict_expected(as_dict, {'33': {'name': '33', 'value': '[1]',\n        'type': 'list', 'evaluateName': 'var3[33]'},\n        GENERATED_LEN_ATTR_NAME: {'name': GENERATED_LEN_ATTR_NAME, 'value':\n        '1', 'type': 'int', 'evaluateName': 'len(var3)',\n        'variablesReference': 0, 'presentationHint': {'attributes': [\n        'readOnly']}}})\n"
}