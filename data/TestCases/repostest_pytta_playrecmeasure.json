{
    "functionName": "test_pytta_playrecmeasure",
    "className": "TestPyttaSave",
    "fileName": "/PyTTAmaster_&_PyTTa/tests_&_test_pyttasave.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        PlayRecMeasure pytta save test\n        \"\"\"\nmType = 'playrec'\nfftDegree = 18\nfftDegree2 = 19\ndevice = 4\ndevice2 = 3\ninChannels = [1, 2, 3, 4]\ninChannels2 = [1, 5, 3, 7]\noutChannels = [1, 2]\noutChannels2 = [1, 3]\nsamplingRate = 44100\nsamplingRate2 = 48000\nfreqMin = 22\nfreqMin2 = 20\nfreqMax = 19222\nfreqMax2 = 20000\ncomment = 'Testing'\ncomment2 = 'Testing2'\nexcitation = pytta.generate.sweep(freqMin=freqMin, freqMax=freqMax,\n    samplingRate=samplingRate, fftDegree=fftDegree)\nexcitation2 = pytta.generate.sweep(freqMin=freqMin2, freqMax=freqMax2,\n    samplingRate=samplingRate2, fftDegree=fftDegree2)\nmed1 = pytta.generate.measurement(kind=mType, excitation=excitation,\n    samplingRate=samplingRate, freqMin=freqMin, freqMax=freqMax, device=\n    device, inChannels=inChannels, outChannels=outChannels, comment=comment)\nmed2 = pytta.generate.measurement(kind=mType, excitation=excitation2,\n    samplingRate=samplingRate2, freqMin=freqMin2, freqMax=freqMax2, device=\n    device2, inChannels=inChannels2, outChannels=outChannels2, comment=comment2\n    )\nsavedlst = [med1, med2]\npytta.save(self.filename, med1, med2)\na = pytta.load(self.filename)\nloadedlst = [pyttaobj for pyttaobj in a]\nfor idx, pobj in enumerate(loadedlst):\n    self.assertEqual(pobj.lengthDomain, savedlst[idx].lengthDomain)\n    self.assertEqual(pobj.excitation.timeSignal.tolist(), savedlst[idx].\n        excitation.timeSignal.tolist())\n    self.assertEqual(pobj.device, savedlst[idx].device)\n    self.assertEqual(str(pobj.inChannels), str(savedlst[idx].inChannels))\n    self.assertEqual(str(pobj.outChannels), str(savedlst[idx].outChannels))\n    self.assertEqual(pobj.samplingRate, savedlst[idx].samplingRate)\n    self.assertEqual(pobj.freqMin, savedlst[idx].freqMin)\n    self.assertEqual(pobj.freqMax, savedlst[idx].freqMax)\n    self.assertEqual(pobj.comment, savedlst[idx].comment)\n"
}