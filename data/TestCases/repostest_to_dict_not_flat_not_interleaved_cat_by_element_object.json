{
    "functionName": "test_to_dict_not_flat_not_interleaved_cat_by_element_object",
    "className": "DictTest",
    "fileName": "/pmeal_&_OpenPNM/tests_&_unit_&_io_&_DictTest.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "D = Dict.to_dict(network=self.net, phases=[self.phase_1, self.phase_2],\n    flatten=False, interleave=False, categorize_by=['element', 'object'])\na = set(['network', 'phase', 'physics', 'geometry'])\nb = set(['net_01', 'phase_01', 'phase_02'])\nc = set(['labels', 'properties'])\nd = set(['pore', 'throat'])\ne = set(['network', 'phase'])\nassert e == set(D.keys())\nassert e == set(D.keys())\nassert 'geometry' in D['network']['net_01'].keys()\nassert 'physics' in D['phase']['phase_01'].keys()\nassert 'physics' in D['phase']['phase_02'].keys()\nassert d.issubset(D['network']['net_01'].keys())\nassert d.issubset(D['phase']['phase_01'].keys())\nassert d.issubset(D['phase']['phase_01'].keys())\nassert d.issubset(D['phase']['phase_02'].keys())\nassert d.issubset(D['phase']['phase_02'].keys())\nassert d.issubset(D['network']['net_01']['geometry']['geo_01'].keys())\nassert d.issubset(D['network']['net_01']['geometry']['geo_01'].keys())\nassert d.issubset(D['network']['net_01']['geometry']['geo_02'].keys())\nassert d.issubset(D['network']['net_01']['geometry']['geo_02'].keys())\nassert d.issubset(D['phase']['phase_01']['physics']['phys_01'].keys())\nassert d.issubset(D['phase']['phase_01']['physics']['phys_01'].keys())\nassert d.issubset(D['phase']['phase_01']['physics']['phys_02'].keys())\nassert d.issubset(D['phase']['phase_01']['physics']['phys_02'].keys())\nassert d.issubset(D['phase']['phase_02']['physics']['phys_03'].keys())\nassert d.issubset(D['phase']['phase_02']['physics']['phys_03'].keys())\nassert d.issubset(D['phase']['phase_02']['physics']['phys_04'].keys())\nassert d.issubset(D['phase']['phase_02']['physics']['phys_04'].keys())\n"
}