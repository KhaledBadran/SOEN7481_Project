{
    "functionName": "test_producer_synchronized_perform_consumers_queue_with_multiple_consumer",
    "className": null,
    "fileName": "/Drakkar-Software_&_OctoBot-Channels/tests_&_test_synchronized.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "async def callback():\n    pass\ntest_consumer_1_1 = await synchronized_channel.new_consumer(callback)\ntest_consumer_1_2 = await synchronized_channel.new_consumer(callback)\ntest_consumer_2_1 = await synchronized_channel.new_consumer(callback,\n    priority_level=2)\ntest_consumer_2_2 = await synchronized_channel.new_consumer(callback,\n    priority_level=2)\ntest_consumer_3_1 = await synchronized_channel.new_consumer(callback,\n    priority_level=3)\nproducer = TestSynchronizedProducer(get_chan(TEST_SYNCHRONIZED_CHANNEL))\nawait producer.run()\nwith patch.object(test_consumer_1_1, 'callback', new=AsyncMock()\n    ) as mocked_test_consumer_1_1_callback, patch.object(test_consumer_1_2,\n    'callback', new=AsyncMock()\n    ) as mocked_test_consumer_1_2_callback, patch.object(test_consumer_2_1,\n    'callback', new=AsyncMock()\n    ) as mocked_test_consumer_2_1_callback, patch.object(test_consumer_2_2,\n    'callback', new=AsyncMock()\n    ) as mocked_test_consumer_2_2_callback, patch.object(test_consumer_3_1,\n    'callback', new=AsyncMock()) as mocked_test_consumer_3_1_callback:\n    await producer.send({})\n    await mock_was_not_called(mocked_test_consumer_1_1_callback)\n    await mock_was_not_called(mocked_test_consumer_1_2_callback)\n    await mock_was_not_called(mocked_test_consumer_2_1_callback)\n    await mock_was_not_called(mocked_test_consumer_2_2_callback)\n    await mock_was_not_called(mocked_test_consumer_3_1_callback)\n    await producer.synchronized_perform_consumers_queue(1)\n    await mock_was_called_once(mocked_test_consumer_1_1_callback)\n    await mock_was_called_once(mocked_test_consumer_1_2_callback)\n    await mock_was_not_called(mocked_test_consumer_2_1_callback)\n    await mock_was_not_called(mocked_test_consumer_2_2_callback)\n    await mock_was_not_called(mocked_test_consumer_3_1_callback)\n    await producer.synchronized_perform_consumers_queue(2)\n    await mock_was_called_once(mocked_test_consumer_1_1_callback)\n    await mock_was_called_once(mocked_test_consumer_1_2_callback)\n    await mock_was_called_once(mocked_test_consumer_2_1_callback)\n    await mock_was_called_once(mocked_test_consumer_2_2_callback)\n    await mock_was_not_called(mocked_test_consumer_3_1_callback)\n    assert not producer.is_consumers_queue_empty(3)\n    await producer.synchronized_perform_consumers_queue(3)\n    await mock_was_called_once(mocked_test_consumer_3_1_callback)\n    assert producer.is_consumers_queue_empty(1)\n    assert producer.is_consumers_queue_empty(2)\n    assert producer.is_consumers_queue_empty(3)\nwith patch.object(test_consumer_1_1, 'callback', new=AsyncMock()\n    ) as mocked_test_consumer_1_1_callback, patch.object(test_consumer_1_2,\n    'callback', new=AsyncMock()\n    ) as mocked_test_consumer_1_2_callback, patch.object(test_consumer_2_1,\n    'callback', new=AsyncMock()\n    ) as mocked_test_consumer_2_1_callback, patch.object(test_consumer_2_2,\n    'callback', new=AsyncMock()\n    ) as mocked_test_consumer_2_2_callback, patch.object(test_consumer_3_1,\n    'callback', new=AsyncMock()) as mocked_test_consumer_3_1_callback:\n    await producer.send({})\n    await mock_was_not_called(mocked_test_consumer_1_1_callback)\n    await mock_was_not_called(mocked_test_consumer_1_2_callback)\n    await mock_was_not_called(mocked_test_consumer_2_1_callback)\n    await mock_was_not_called(mocked_test_consumer_2_2_callback)\n    await mock_was_not_called(mocked_test_consumer_3_1_callback)\n    assert not producer.is_consumers_queue_empty(2)\n    await producer.synchronized_perform_consumers_queue(3)\n    await mock_was_called_once(mocked_test_consumer_1_1_callback)\n    await mock_was_called_once(mocked_test_consumer_1_2_callback)\n    await mock_was_called_once(mocked_test_consumer_2_1_callback)\n    await mock_was_called_once(mocked_test_consumer_2_2_callback)\n    await mock_was_called_once(mocked_test_consumer_3_1_callback)\n    assert producer.is_consumers_queue_empty(1)\n    assert producer.is_consumers_queue_empty(2)\n    assert producer.is_consumers_queue_empty(3)\npytest.mark.asyncio"
}