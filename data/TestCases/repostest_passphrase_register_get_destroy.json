{
    "functionName": "test_passphrase_register_get_destroy",
    "className": "TestIntegration",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_integration_&_services_&_test_integration.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Tests that passphrases can be properly registered, retrieved,\n        and destroyed\n        \"\"\"\npass_obj_type = ObjectType.SECRET_DATA\nmask_flags = [CryptographicUsageMask.VERIFY]\nattribute_type = AttributeType.CRYPTOGRAPHIC_USAGE_MASK\nusage_mask = self.attr_factory.create_attribute(attribute_type, mask_flags)\nname = Attribute.AttributeName('Name')\npass_name = 'Integration Test - Register-Get-Destroy Passphrase'\npass_name_value = Name.NameValue(pass_name)\nname_type = Name.NameType(NameType.UNINTERPRETED_TEXT_STRING)\npass_value = Name(name_value=pass_name_value, name_type=name_type)\npass_name_attr = Attribute(attribute_name=name, attribute_value=pass_value)\npass_attributes = [usage_mask, pass_name_attr]\npass_template_attribute = TemplateAttribute(attributes=pass_attributes)\npass_format_type = SecretData.SecretDataType(SecretDataType.PASSWORD)\nkey_format_type = KeyFormatType(KeyFormatTypeEnum.OPAQUE)\nkey_data = b'peek-a-boo!!'\nkey_material = KeyMaterial(key_data)\nkey_value = KeyValue(key_material)\nkey_block = KeyBlock(key_format_type=key_format_type, key_compression_type=\n    None, key_value=key_value, key_wrapping_data=None)\npass_obj = SecretData(secret_data_type=pass_format_type, key_block=key_block)\npass_result = self.client.register(pass_obj_type, pass_template_attribute,\n    pass_obj, credential=None)\nself._check_result_status(pass_result, ResultStatus, ResultStatus.SUCCESS)\nself._check_uuid(pass_result.uuid, str)\npass_uuid = pass_result.uuid\npass_result = self.client.get(uuid=pass_uuid, credential=None)\nself._check_result_status(pass_result, ResultStatus, ResultStatus.SUCCESS)\nself._check_object_type(pass_result.object_type, ObjectType, ObjectType.\n    SECRET_DATA)\nself._check_uuid(pass_result.uuid, str)\npass_secret = pass_result.secret\npass_secret_expected = SecretData\nself.assertIsInstance(pass_secret, pass_secret_expected)\npass_material = pass_result.secret.key_block.key_value.key_material.value\nexpected = key_data\nself.assertEqual(expected, pass_material)\nself.logger.debug('Destroying cert: ' + pass_name + '\\nWith \" \"UUID: ' +\n    pass_result.uuid)\npass_result = self.client.destroy(pass_result.uuid)\nself._check_result_status(pass_result, ResultStatus, ResultStatus.SUCCESS)\nself._check_uuid(pass_result.uuid.value, str)\npass_result_destroyed_result = self.client.get(uuid=pass_uuid, credential=None)\nself._check_result_status(pass_result_destroyed_result, ResultStatus,\n    ResultStatus.OPERATION_FAILED)\nexpected = ResultReason\npass_observed = type(pass_result_destroyed_result.result_reason.value)\nself.assertEqual(expected, pass_observed)\n"
}