{
    "functionName": "test_permutations",
    "className": "ListTestCase",
    "fileName": "/hsolbrig_&_CFGraph/tests_&_test_list.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "g = self.build_graph()\nself.assertEqual([(s6, p6, o6), (s6, p6, o6), (s6, p6, Literal(1)), (s6, p6,\n    Literal(2)), (s6, p7, o6), (s6, p7, o7)], sorted(list(g.triples((s6,\n    None, None)))))\nself.assertEqual([(s6, p6, o6), (s6, p6, o6), (s6, p6, Literal(1)), (s6, p6,\n    Literal(2))], sorted(g.triples((None, p6, None))))\nself.assertEqual([(s6, p7, o6), (s6, p7, o7)], sorted(g.triples((None, p7,\n    None))))\nself.assertEqual([(s6, p6, o6), (s6, p6, o6), (s6, p7, o6)], sorted(g.\n    triples(None, None, o6)))\nself.assertEqual([(s6, p7, o7)], sorted(g.triples(None, None, o7)))\nself.assertEqual([(s6, p6, o6), (s6, p6, o6), (s6, p6, Literal(1)), (s6, p6,\n    Literal(2))], sorted(g.triples(s6, p6, None)))\nself.assertEqual([(s6, p6, o6)], sorted(g.triples(None, p6, o6)))\nself.assertEqual([(s6, p6, o6), (s6, p7, o6)], sorted(g.triples((s6, None,\n    o6))))\nself.assertEqual([(s6, p6, o6)], sorted(g.triples((s6, p6, o6))))\nself.assertEqual([(s1, p1, o1), (s1, p1, Literal('a')), (s1, p1, Literal(\n    'b')), (s1, p1, Literal('b')), (s1, p1, Literal('c')), (s1, p1, Literal\n    ('d')), (s1, p1, Literal('e')), (s2, p2, o2), (s2, p2, Literal('a')), (\n    s2, p2, Literal('b')), (s2, p2, Literal('c')), (s2, p2, Literal('d')),\n    (s2, p2, Literal('e')), (s4, p4, Literal(17.0, datatype=XSD.decimal)),\n    (s5, p5, o5), (s5, p5, Literal(1)), (s5, p5, Literal(2)), (s6, p6, o6),\n    (s6, p6, o6), (s6, p6, Literal(1)), (s6, p6, Literal(2)), (s6, p7, o6),\n    (s6, p7, o7)], sorted(g.triples(None, None, None)))\n"
}