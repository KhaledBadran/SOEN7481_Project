{
    "functionName": "test_signature_verify_no_cryptographic_parameters",
    "className": "TestKmipEngine",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_services_&_server_&_test_engine.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that the right error is thrown when cryptographic parameters\n        are not provided with a SignatureVerify request.\n\n        Note: once the cryptographic parameters can be obtained from the\n              encryption key's attributes, this test should be updated to\n              reflect that.\n        \"\"\"\ne = engine.KmipEngine()\ne._data_store = self.engine\ne._data_store_session_factory = self.session_factory\ne._data_session = e._data_store_session_factory()\ne._is_allowed_by_operation_policy = mock.Mock(return_value=True)\ne._logger = mock.MagicMock()\ne._cryptography_engine.logger = mock.MagicMock()\nsigning_key = pie_objects.PublicKey(enums.CryptographicAlgorithm.RSA, 1120,\n    b'0\\x81\\x89\\x02\\x81\\x81\\x00\\xac\\x13\\xd9\\xfd\\xae{s5\\xb6\\x9c\\xd9\\x85g\\xe9d}\\x99\\xbf7:\\x9e\\x05\\xce45\\xd6de\\xf3(\\xb7\\xf73Ky*\\xee~\\xfa\\x04N\\xbcLz0\\xb2\\x1a]z\\x89\\xcd\\xb3\\xa3\\r\\xfc\\xd9\\xfe\\xe9\\x99^\\tA^\\xdc\\x0b\\xf9\\xe5\\xb4\\xc3\\xf7O\\xf5?\\xb4\\xd2\\x94A\\xbf\\x1b~\\xd6\\xcb\\xddJG\\xf9%\"i\\xe1dol\\x1a\\xee\\x05\\x14\\xe9?l\\xb9\\xdfq\\xd0l\\x06\\n!\\x04\\xb4{r`\\xac7\\xc1\\x06\\x86\\x1d\\xc7\\x8c\\xa5\\xa2_\\xaa\\x9c\\xb2\\xe3\\x02\\x03\\x01\\x00\\x01'\n    , masks=[enums.CryptographicUsageMask.SIGN, enums.\n    CryptographicUsageMask.VERIFY])\nsigning_key.state = enums.State.ACTIVE\ne._data_session.add(signing_key)\ne._data_session.commit()\ne._data_session = e._data_store_session_factory()\nunique_identifier = str(signing_key.unique_identifier)\npayload = payloads.SignatureVerifyRequestPayload(unique_identifier=\n    unique_identifier, data=b'', signature_data=b'')\nargs = payload,\nself.assertRaisesRegex(exceptions.InvalidField,\n    'The cryptographic parameters must be specified.', e.\n    _process_signature_verify, *args)\n"
}