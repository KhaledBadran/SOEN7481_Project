{
    "functionName": "test_create_key_pair_get_destroy",
    "className": "TestKmipEngine",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_services_&_server_&_test_engine.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that a key pair can be created, retrieved, and destroyed without\n        error.\n        \"\"\"\ne = engine.KmipEngine()\ne._data_store = self.engine\ne._data_store_session_factory = self.session_factory\ne._data_session = e._data_store_session_factory()\ne._is_allowed_by_operation_policy = mock.Mock(return_value=True)\ne._logger = mock.MagicMock()\nattribute_factory = factory.AttributeFactory()\ncommon_template = objects.TemplateAttribute(attributes=[attribute_factory.\n    create_attribute(enums.AttributeType.NAME, attributes.Name.create(\n    'Test Asymmetric Key', enums.NameType.UNINTERPRETED_TEXT_STRING)),\n    attribute_factory.create_attribute(enums.AttributeType.\n    CRYPTOGRAPHIC_ALGORITHM, enums.CryptographicAlgorithm.RSA),\n    attribute_factory.create_attribute(enums.AttributeType.\n    CRYPTOGRAPHIC_LENGTH, 2048)], tag=enums.Tags.COMMON_TEMPLATE_ATTRIBUTE)\npublic_template = objects.TemplateAttribute(attributes=[attribute_factory.\n    create_attribute(enums.AttributeType.CRYPTOGRAPHIC_USAGE_MASK, [enums.\n    CryptographicUsageMask.ENCRYPT])], tag=enums.Tags.\n    PUBLIC_KEY_TEMPLATE_ATTRIBUTE)\nprivate_template = objects.TemplateAttribute(attributes=[attribute_factory.\n    create_attribute(enums.AttributeType.CRYPTOGRAPHIC_USAGE_MASK, [enums.\n    CryptographicUsageMask.DECRYPT])], tag=enums.Tags.\n    PRIVATE_KEY_TEMPLATE_ATTRIBUTE)\npayload = payloads.CreateKeyPairRequestPayload(common_template,\n    private_template, public_template)\nresponse_payload = e._process_create_key_pair(payload)\ne._data_session.commit()\ne._data_session = e._data_store_session_factory()\ne._logger.info.assert_any_call('Processing operation: CreateKeyPair')\npublic_id = response_payload.public_key_unique_identifier\nself.assertEqual('1', public_id)\nprivate_id = response_payload.private_key_unique_identifier\nself.assertEqual('2', private_id)\ne._logger.reset_mock()\npayload = payloads.GetRequestPayload(unique_identifier=public_id)\nresponse_payload = e._process_get(payload)\ne._data_session.commit()\ne._data_session = e._data_store_session_factory()\ne._logger.info.assert_any_call('Processing operation: Get')\nself.assertEqual(enums.ObjectType.PUBLIC_KEY, response_payload.object_type)\nself.assertEqual(str(public_id), response_payload.unique_identifier)\nself.assertIsInstance(response_payload.secret, secrets.PublicKey)\nkey_block = response_payload.secret.key_block\nself.assertEqual(enums.KeyFormatType.PKCS_1, key_block.key_format_type.value)\nself.assertEqual(enums.CryptographicAlgorithm.RSA, key_block.\n    cryptographic_algorithm.value)\nself.assertEqual(2048, key_block.cryptographic_length.value)\ne._logger.reset_mock()\npayload = payloads.GetRequestPayload(unique_identifier=private_id)\nresponse_payload = e._process_get(payload)\ne._data_session.commit()\ne._data_session = e._data_store_session_factory()\ne._logger.info.assert_any_call('Processing operation: Get')\nself.assertEqual(enums.ObjectType.PRIVATE_KEY, response_payload.object_type)\nself.assertEqual(str(private_id), response_payload.unique_identifier)\nself.assertIsInstance(response_payload.secret, secrets.PrivateKey)\nkey_block = response_payload.secret.key_block\nself.assertEqual(enums.KeyFormatType.PKCS_8, key_block.key_format_type.value)\nself.assertEqual(enums.CryptographicAlgorithm.RSA, key_block.\n    cryptographic_algorithm.value)\nself.assertEqual(2048, key_block.cryptographic_length.value)\ne._data_session.commit()\ne._data_store_session_factory()\ne._logger.reset_mock()\npayload = payloads.DestroyRequestPayload(unique_identifier=attributes.\n    UniqueIdentifier(public_id))\nresponse_payload = e._process_destroy(payload)\ne._data_session.commit()\ne._data_session = e._data_store_session_factory()\ne._logger.info.assert_any_call('Processing operation: Destroy')\nself.assertEqual(str(public_id), response_payload.unique_identifier.value)\ne._data_session.commit()\ne._data_store_session_factory()\ne._logger.reset_mock()\nargs = payload,\nregex = 'Could not locate object: {0}'.format(public_id)\nsix.assertRaisesRegex(self, exceptions.ItemNotFound, regex, e.\n    _process_destroy, *args)\ne._data_session.commit()\ne._data_store_session_factory()\ne._logger.reset_mock()\npayload = payloads.DestroyRequestPayload(unique_identifier=attributes.\n    UniqueIdentifier(private_id))\nresponse_payload = e._process_destroy(payload)\ne._data_session.commit()\ne._data_session = e._data_store_session_factory()\ne._logger.info.assert_any_call('Processing operation: Destroy')\nself.assertEqual(str(private_id), response_payload.unique_identifier.value)\ne._data_session.commit()\ne._data_store_session_factory()\ne._logger.reset_mock()\nargs = payload,\nregex = 'Could not locate object: {0}'.format(private_id)\nsix.assertRaisesRegex(self, exceptions.ItemNotFound, regex, e.\n    _process_destroy, *args)\ne._data_session.commit()\ne._data_store_session_factory()\n"
}