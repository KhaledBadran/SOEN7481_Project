{
    "functionName": "test_150",
    "className": "MyTest",
    "fileName": "/andrewferlitsch_&_Gap/tests_&_image_test.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\" Images - numpy array as labels \"\"\"\niarr = np.array([[1.0, 0.5], [0.25, 0.75], [0.2, 0.4]], dtype=np.float32)\nlarr = np.array([0, 1, 2], dtype=np.uint8)\nimages = Images(iarr, larr, config=['nostore'])\nself.assertEquals(len(images), 3)\nself.assertEquals(images[1].label, 1)\nlarr = np.array([0, 1, 2], dtype=np.uint16)\nimages = Images(iarr, larr, config=['nostore'])\nself.assertEquals(len(images), 3)\nself.assertEquals(images[1].label, 1)\nlarr = np.array([0, 1, 2], dtype=np.uint32)\nimages = Images(iarr, larr, config=['nostore'])\nself.assertEquals(len(images), 3)\nself.assertEquals(images[1].label, 1)\nlarr = np.array([0, 1, 2], dtype=np.int8)\nimages = Images(iarr, larr, config=['nostore'])\nself.assertEquals(len(images), 3)\nself.assertEquals(images[1].label, 1)\nlarr = np.array([0, 1, 2], dtype=np.int16)\nimages = Images(iarr, larr, config=['nostore'])\nself.assertEquals(len(images), 3)\nself.assertEquals(images[1].label, 1)\nlarr = np.array([0, 1, 2], dtype=np.int32)\nimages = Images(iarr, larr, config=['nostore'])\nself.assertEquals(len(images), 3)\nself.assertEquals(images[1].label, 1)\n"
}