{
    "functionName": "extend",
    "className": null,
    "fileName": "/pmeal_&_OpenPNM/openpnm_&_topotools_&_topotools.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"\n    Add individual pores and/or throats to the network from a list of coords\n    or conns.\n\n    Parameters\n    ----------\n    network : OpenPNM Network Object\n        The Network to which pores or throats should be added\n\n    pore_coords : array_like\n        The coordinates of the pores to add\n\n    throat_conns : array_like\n        The throat connections to add\n\n    labels : string, or list of strings, optional\n        A list of labels to apply to the new pores and throats\n\n    Notes\n    -----\n    This needs to be enhanced so that it increases the size of all pore\n    and throat props and labels on ALL associated Phase objects.  At the\n    moment it throws an error is there are any associated Phases.\n\n    This is an in-place operation, meaning the received Network object will\n    be altered directly.\n\n    \"\"\"\nif len(network.project.phases()) > 0:\n    raise Exception('Project has active Phases, copy network to a new ' +\n        'project and try again')\nNp_old = network.num_pores()\nNt_old = network.num_throats()\nNp = Np_old + int(np.size(pore_coords) / 3)\nNt = Nt_old + int(np.size(throat_conns) / 2)\ndel network['pore.all'], network['throat.all']\nnetwork['pore.all'] = np.ones((Np,), dtype=bool)\nnetwork['throat.all'] = np.ones((Nt,), dtype=bool)\nif np.size(pore_coords) > 0:\n    coords = np.vstack((network['pore.coords'], pore_coords))\n    network['pore.coords'] = coords\nif np.size(throat_conns) > 0:\n    conns = np.vstack((network['throat.conns'], throat_conns))\n    network['throat.conns'] = conns\nfor item in list(network.keys()):\n    if item.split('.')[1] not in ['coords', 'conns', 'all', '_id']:\n        N = network._count(element=item.split('.')[0])\n        arr = network.pop(item)\n        s = arr.shape\n        if arr.dtype == bool:\n            network[item] = np.zeros(shape=(N, *s[1:]), dtype=bool)\n        else:\n            network[item] = np.ones(shape=(N, *s[1:]), dtype=float) * np.nan\n        network[item][:arr.shape[0]] = arr\nif labels != []:\n    if type(labels) is str:\n        labels = [labels]\n    for label in labels:\n        label = label.split('.')[-1]\n        if np.size(pore_coords) > 0:\n            Ps = np.r_[Np_old:Np]\n            if 'pore.' + label not in network.labels():\n                network['pore.' + label] = False\n            network['pore.' + label][Ps] = True\n        if np.size(throat_conns) > 0:\n            Ts = np.r_[Nt_old:Nt]\n            if 'throat.' + label not in network.labels():\n                network['throat.' + label] = False\n            network['throat.' + label][Ts] = True\nnetwork._am.clear()\nnetwork._im.clear()\n"
}