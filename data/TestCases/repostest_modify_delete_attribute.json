{
    "functionName": "test_modify_delete_attribute",
    "className": "TestIntegration",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_integration_&_services_&_test_integration.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that the KMIPProxy client can be used to set, modify, and delete\n        attributes for an object stored by the server.\n        \"\"\"\nkey_name = 'Integration Test - Set-Modify-Delete-Attribute Key'\nresult = self._create_symmetric_key(key_name=key_name)\nkey_uuid = result.uuid\nself.assertEqual(ResultStatus.SUCCESS, result.result_status.value)\nself.assertEqual(ObjectType.SYMMETRIC_KEY, result.object_type)\nself.assertIsInstance(key_uuid, str)\nresult = self.client.get_attributes(uuid=key_uuid, attribute_names=['Name'])\nself.assertEqual(ResultStatus.SUCCESS, result.result_status.value)\nself.assertEqual(1, len(result.attributes))\nself.assertEqual('Name', result.attributes[0].attribute_name.value)\nself.assertEqual(0, result.attributes[0].attribute_index.value)\nself.assertEqual('Integration Test - Set-Modify-Delete-Attribute Key',\n    result.attributes[0].attribute_value.name_value.value)\nresponse_payload = self.client.send_request_payload(enums.Operation.\n    MODIFY_ATTRIBUTE, payloads.ModifyAttributeRequestPayload(\n    unique_identifier=key_uuid, attribute=self.attr_factory.\n    create_attribute(enums.AttributeType.NAME, 'New Name', index=0)))\nself.assertEqual(key_uuid, response_payload.unique_identifier)\nself.assertEqual('Name', response_payload.attribute.attribute_name.value)\nself.assertEqual(0, response_payload.attribute.attribute_index.value)\nself.assertEqual('New Name', response_payload.attribute.attribute_value.\n    name_value.value)\nresult = self.client.get_attributes(uuid=key_uuid, attribute_names=['Name'])\nself.assertEqual(ResultStatus.SUCCESS, result.result_status.value)\nself.assertEqual(1, len(result.attributes))\nself.assertEqual('Name', result.attributes[0].attribute_name.value)\nself.assertEqual(0, result.attributes[0].attribute_index.value)\nself.assertEqual('New Name', result.attributes[0].attribute_value.\n    name_value.value)\nresponse_payload = self.client.send_request_payload(enums.Operation.\n    DELETE_ATTRIBUTE, payloads.DeleteAttributeRequestPayload(\n    unique_identifier=key_uuid, attribute_name='Name', attribute_index=0))\nself.assertEqual(key_uuid, response_payload.unique_identifier)\nself.assertEqual('Name', response_payload.attribute.attribute_name.value)\nself.assertEqual(0, response_payload.attribute.attribute_index.value)\nself.assertEqual('New Name', response_payload.attribute.attribute_value.\n    name_value.value)\n"
}