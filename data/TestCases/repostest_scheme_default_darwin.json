{
    "functionName": "test_scheme_default_darwin",
    "className": "TestUnixScheme",
    "fileName": "/cournape_&_Bento/bento_&_commands_&_tests_&_test_configure.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "bento_info = 'Name: foo\\n'\nself.options.prefix = self.eprefix = None\nscheme = self._compute_scheme(bento_info, self.options)\nprefix = scheme.pop('prefix')\neprefix = scheme.pop('eprefix')\npy_version_short = scheme.pop('py_version_short')\npkgname = scheme.pop('pkgname')\nself.assertEqual(prefix, sys.prefix)\nself.assertEqual(eprefix, sys.exec_prefix)\nself.assertEqual(pkgname, 'foo')\nself.assertEqual(py_version_short, PY_VERSION_SHORT)\nfor k, v in scheme.items():\n    self.assertEqual(UNIX_REFERENCE[k], v)\nmock.patch('sys.platform', 'darwin')mock.patch('bento.core.platforms.sysconfig.bento.utils.path.find_root', lambda\n    ignored: '/')mock.patch('bento.commands.configure.op.normpath', posixpath.normpath)mock.patch('bento.commands.configure.virtualenv_prefix', lambda : None)mock.patch('sys.prefix', '/Library/Frameworks/Python.framework/Versions/2.8')mock.patch('sys.exec_prefix',\n    '/Exec/Library/Frameworks/Python.framework/Versions/2.8')"
}