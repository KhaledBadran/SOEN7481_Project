{
    "functionName": "test_mutliphase_partition_coef",
    "className": "MultiPhaseTest",
    "fileName": "/pmeal_&_OpenPNM/tests_&_unit_&_phases_&_MultiPhaseTest.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "m = op.phases.MultiPhase(network=self.net, phases=[self.water, self.air,\n    self.oil])\nx, y, z = self.net['pore.coords'].T\nps_water = self.net.Ps[(y <= 3) + (y >= 8)]\nps_air = self.net.Ps[(y > 3) * (y < 6)]\nps_oil = self.net.Ps[(y >= 6) * (y < 8)]\nm.set_occupancy(phase=self.water, pores=ps_water)\nm.set_occupancy(phase=self.air, pores=ps_air)\nm.set_occupancy(phase=self.oil, pores=ps_oil)\nconst = op.models.misc.constant\nK_air_water = 2.0\nK_air_oil = 1.8\nK_water_oil = 0.73\nm.set_binary_partition_coef(propname='throat.partition_coef', phases=[self.\n    air, self.water], model=const, value=K_air_water)\nm.set_binary_partition_coef(propname='throat.partition_coef', phases=[self.\n    air, self.oil], model=const, value=K_air_oil)\nm.set_binary_partition_coef(propname='throat.partition_coef', phases=[self.\n    water, self.oil], model=const, value=K_water_oil)\nK_aw = m['throat.partition_coef.air:water']\nK_ao = m['throat.partition_coef.air:oil']\nK_wo = m['throat.partition_coef.water:oil']\nK_global = m['throat.partition_coef.all']\nassert np.isclose(K_aw.mean(), K_air_water)\nassert np.isclose(K_ao.mean(), K_air_oil)\nassert np.isclose(K_wo.mean(), K_water_oil)\ntmp1 = self.net.find_neighbor_throats(ps_water, mode='xor')\ntmp2 = self.net.find_neighbor_throats(ps_air, mode='xor')\nTs_water_air_interface = np.intersect1d(tmp1, tmp2)\ntmp1 = self.net.find_neighbor_throats(ps_air, mode='xor')\ntmp2 = self.net.find_neighbor_throats(ps_oil, mode='xor')\nTs_air_oil_interface = np.intersect1d(tmp1, tmp2)\ntmp1 = self.net.find_neighbor_throats(ps_oil, mode='xor')\ntmp2 = self.net.find_neighbor_throats(ps_water, mode='xor')\nTs_oil_water_interface = np.intersect1d(tmp1, tmp2)\nassert np.isclose(K_global[Ts_water_air_interface].mean(), 1 / K_air_water)\nassert np.isclose(K_global[Ts_air_oil_interface].mean(), K_air_oil)\nassert np.isclose(K_global[Ts_oil_water_interface].mean(), 1 / K_water_oil)\ninterface_throats = np.hstack((Ts_water_air_interface, Ts_air_oil_interface,\n    Ts_oil_water_interface))\nTs_single_phase = np.setdiff1d(self.net.Ts, interface_throats)\nassert np.isclose(K_global[Ts_single_phase].mean(), 1.0)\n"
}