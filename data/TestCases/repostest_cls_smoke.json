{
    "functionName": "test_cls_smoke",
    "className": null,
    "fileName": "/LSSTDESC_&_CCL/pyccl_&_tests_&_test_cls.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "z = np.linspace(0.0, 1.0, 200)\nn = np.exp(-((z - 0.5) / 0.1) ** 2)\nb = np.sqrt(1.0 + z)\nlens1 = ccl.WeakLensingTracer(COSMO, (z, n))\nlens2 = ccl.WeakLensingTracer(COSMO, dndz=(z, n), ia_bias=(z, n))\nnc1 = ccl.NumberCountsTracer(COSMO, False, dndz=(z, n), bias=(z, b))\nnc2 = ccl.NumberCountsTracer(COSMO, True, dndz=(z, n), bias=(z, b))\nnc3 = ccl.NumberCountsTracer(COSMO, True, dndz=(z, n), bias=(z, b),\n    mag_bias=(z, b))\ncmbl = ccl.CMBLensingTracer(COSMO, 1100.0)\ntracers = [lens1, lens2, nc1, nc2, nc3, cmbl]\nell_scl = 4.0\nell_int = 4\nell_lst = [2, 3, 4, 5]\nell_arr = np.arange(2, 5)\nells = [ell_int, ell_scl, ell_lst, ell_arr]\nfor i in range(len(tracers)):\n    for j in range(i, len(tracers)):\n        for ell in ells:\n            corr = ccl.angular_cl(COSMO, tracers[i], tracers[j], ell,\n                p_of_k_a=p_of_k_a)\n            assert np.all(np.isfinite(corr))\n            assert np.shape(corr) == np.shape(ell)\n            corr_rev = ccl.angular_cl(COSMO, tracers[j], tracers[i], ell,\n                p_of_k_a=p_of_k_a)\n            assert np.allclose(corr, corr_rev)\nwith assert_raises(ValueError):\n    ccl.NumberCountsTracer(COSMO, False, dndz=z, bias=(z, b))\nwith assert_raises(ValueError):\n    ccl.NumberCountsTracer(COSMO, False, dndz=(z, n, n), bias=(z, b))\nwith assert_raises(ValueError):\n    ccl.NumberCountsTracer(COSMO, False, dndz=(z,), bias=(z, b))\nwith assert_raises(ValueError):\n    ccl.NumberCountsTracer(COSMO, False, dndz=(1, 2), bias=(z, b))\nwith assert_raises(ValueError):\n    ccl.WeakLensingTracer(COSMO, dndz=z)\nwith assert_raises(ValueError):\n    ccl.WeakLensingTracer(COSMO, dndz=(z, n, n))\nwith assert_raises(ValueError):\n    ccl.WeakLensingTracer(COSMO, dndz=(z,))\nwith assert_raises(ValueError):\n    ccl.WeakLensingTracer(COSMO, dndz=(1, 2))\npytest.mark.parametrize('p_of_k_a', [None, PKA])"
}