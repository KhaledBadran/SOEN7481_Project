{
    "functionName": "sendPositions",
    "className": null,
    "fileName": "/FaradayRF_&_Faraday-Software/faraday_&_aprs.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"\n    Constructs an APRS position string for station and sends to a socket.\n    Includes BASE91 comment telemetry functionality as well.\n\n    :param telemSequence: Telemetry sequence number\n    :param stations: List of dictionary organized station data\n    :param socket: APRS-IS server internet socket\n    :return: None\n    \"\"\"\nfor item in stations:\n    station = item[0]\n    sourceCallsign = station['SOURCECALLSIGN']\n    sourceID = station['SOURCEID']\n    destinationCallsign = station['DESTINATIONCALLSIGN']\n    destinationID = station['DESTINATIONID']\n    latitude = station['GPSLATITUDE']\n    longitude = station['GPSLONGITUDE']\n    latitudeDirection = station['GPSLATITUDEDIR']\n    longitudeDir = station['GPSLONGITUDEDIR']\n    altitude = station['GPSALTITUDE']\n    speed = station['GPSSPEED']\n    gpsFix = station['GPSFIX']\n    qConstruct = aprsConfig.get('APRS', 'QCONSTRUCT')\n    dataTypeIdent = aprsConfig.get('APRS', 'DATATYPEIDENT')\n    destAddress = aprsConfig.get('APRS', 'DESTADDRESS')\n    symbolTable = aprsConfig.get('APRS', 'SYMBOLTABLE')\n    symbol = aprsConfig.get('APRS', 'SYMBOL')\n    altSymbolTable = aprsConfig.get('APRS', 'ALTSYMBOLTABLE')\n    altSymbol = aprsConfig.get('APRS', 'ALTSYMBOL')\n    comment = aprsConfig.get('APRS', 'COMMENT')\n    altComment = aprsConfig.get('APRS', 'ALTCOMMENT')\n    ioSource = aprsConfig.get('APRS', 'IOSOURCE').upper()\n    node = sourceCallsign + '-' + str(sourceID)\n    destNode = destinationCallsign + '-' + str(destinationID)\n    gpioValues = station['GPIOSTATE']\n    rfValues = station['RFSTATE']\n    if ioSource == 'GPIO':\n        ioList = gpioValues\n    elif ioSource == 'RF':\n        ioList = rfValues\n    b91seq = base91.from_decimal(telemSequence, 2)\n    b91a = base91.from_decimal(station['ADC0'], 2)\n    b91b = base91.from_decimal(station['ADC1'], 2)\n    b91c = base91.from_decimal(station['ADC3'], 2)\n    b91d = base91.from_decimal(station['ADC6'], 2)\n    b91e = base91.from_decimal(station['BOARDTEMP'], 2)\n    b91f = base91.from_decimal(ioList, 2)\n    b91Tlm = '|{0}{1}{2}{3}{4}{5}{6}|'.format(b91seq, b91a, b91b, b91c,\n        b91d, b91e, b91f)\n    comment += b91Tlm\n    altComment += b91Tlm\n    latString, lonString = nmeaToDegDecMin(latitude, longitude)\n    try:\n        rawaltitude = str(round(altitude, 0)).split('.')\n        rawspeed = str(round(speed, 0)).split('.')\n    except TypeError as e:\n        logger.error(e)\n        logger.error(altitude)\n        logger.error(speed)\n    else:\n        altitude = rawaltitude[0].zfill(6)\n        speed = rawspeed[0].zfill(3)\n        if gpsFix <= 0:\n            logger.debug(node + ' No GPS Fix')\n        if node != destNode:\n            aprsPosition = ''.join([dataTypeIdent, latString,\n                latitudeDirection, symbolTable, lonString, longitudeDir,\n                symbol])\n            positionString = '{}>{},{},{}:{}.../{}/A={}{}\\r'.format(node,\n                destAddress, qConstruct, destNode, aprsPosition, speed,\n                altitude, comment)\n            logger.debug(positionString)\n            return sendAPRSPacket(socket, positionString)\n        elif node == destNode:\n            aprsPosition = ''.join([dataTypeIdent, latString,\n                latitudeDirection, altSymbolTable, lonString, longitudeDir,\n                altSymbol])\n            positionString = '{}>{}:{}.../{}/A={}{}\\r'.format(node,\n                destAddress, aprsPosition, speed, altitude, altComment)\n            logger.debug(positionString)\n            return sendAPRSPacket(socket, positionString)\n"
}