{
    "functionName": "binEdges",
    "className": null,
    "fileName": "/jakob-lass_&_MJOLNIR/MJOLNIR_&__tools.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"Generate binning of values array with minimum bin size of tolerance. Binning starts at values[0]-tolerance/2.0 and ends at values[-1]+tolerance/2.0.\n    \n    Args:\n        \n        - values (array): 1D array to be binned.\n        \n        - tolerance (float): Minimum length of bin sizes.\n        \n\n    Kwargs:\n\n        - startPoint (float): Minimum position from wicht to start (default None)\n\n        - endPoint (float): Maximal end bin position (default None)\n\n    Returns:\n        \n        - bins (array)\n    \n    \"\"\"\nvalues_array = np.array(values).ravel().flatten()\nunique_values = np.asarray(list(set(values_array)))\nunique_values.sort()\nif len(unique_values) == 0:\n    return []\nbin_edges = [unique_values[0] - tolerance * 0.1]\nadd = 1\ncurrent = 0\nwhile current < len(unique_values) - 1:\n    add = 1\n    broken = False\n    while (unique_values[current + add] + unique_values[current + add - 1]\n        ) * 0.5 - bin_edges[-1] < tolerance:\n        if current + add < len(unique_values) - 1:\n            add += 1\n        else:\n            broken = True\n            break\n    if not broken:\n        bin_edges.append((unique_values[current + add - 1] + unique_values[\n            current + add]) / 2)\n    current += add\nif unique_values[-1] - bin_edges[-1] < 1.1 * tolerance:\n    bin_edges.append(bin_edges[-1] + tolerance)\nelse:\n    bin_edges.append(unique_values[-1] + 0.1 * tolerance)\nbin_edges = np.array(bin_edges)\nif not endPoint is None:\n    if endPoint - bin_edges[-1] < tolerance:\n        bin_edges = np.concatenate([bin_edges[:np.sum(bin_edges < endPoint)\n            ], [endPoint]])\nif not startPoint is None:\n    if bin_edges[0] - startPoint < tolerance or bin_edges[0] < startPoint:\n        bin_edges = np.concatenate([[startPoint], bin_edges[np.sum(\n            bin_edges < startPoint):]])\nreturn bin_edges\n"
}