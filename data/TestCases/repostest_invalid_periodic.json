{
    "functionName": "test_invalid_periodic",
    "className": "Test_valid_init",
    "fileName": "/mchalela_&_GriSPy/tests_&_test_data_consistency.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "bad_periodic = '{0: [-1, 1], 1: (-1, 1), 2: None}'\nwith pytest.raises(TypeError):\n    GriSPy(self.data, N_cells=self.N_cells, periodic=bad_periodic, metric=\n        self.metric, copy_data=self.copy_data)\nbad_periodic = {(0): [-1, 1], (1): (-1, 1), (2): None}\nwith pytest.raises(TypeError):\n    GriSPy(self.data, N_cells=self.N_cells, periodic=bad_periodic, metric=\n        self.metric, copy_data=self.copy_data)\nbad_periodic = {'A': (-1, 1), (1): (-1, 1), (2): None}\nwith pytest.raises(TypeError):\n    GriSPy(self.data, N_cells=self.N_cells, periodic=bad_periodic, metric=\n        self.metric, copy_data=self.copy_data)\nbad_periodic = {(0): (1, -1), (1): (-1, 1), (2): None}\nwith pytest.raises(ValueError):\n    GriSPy(self.data, N_cells=self.N_cells, periodic=bad_periodic, metric=\n        self.metric, copy_data=self.copy_data)\nbad_periodic = {(0): (-1, [1]), (1): (-1, 1), (2): None}\nwith pytest.raises(TypeError):\n    GriSPy(self.data, N_cells=self.N_cells, periodic=bad_periodic, metric=\n        self.metric, copy_data=self.copy_data)\n"
}