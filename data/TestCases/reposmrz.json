{
    "functionName": "mrz",
    "className": null,
    "fileName": "/konstantint_&_PassportEye/passporteye_&_mrz_&_scripts.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"\n    Command-line script for extracting MRZ from a given image\n    \"\"\"\nparser = argparse.ArgumentParser(description=\n    'Run the MRZ OCR recognition algorithm on the given image.')\nparser.add_argument('filename')\nparser.add_argument('--json', action='store_true', help=\n    'Produce JSON (rather than tabular) output')\nparser.add_argument('--legacy', action='store_true', help=\n    'Use the \"legacy\" Tesseract OCR engine (--oem 0). Despite the name, it most often results in better results. It is not the default option, because it will only work if your Tesseract installation includes the legacy *.traineddata files. You can download them at https://github.com/tesseract-ocr/tesseract/wiki/Data-Files#data-files-for-version-400-november-29-2016'\n    )\nparser.add_argument('-r', '--save-roi', default=None, help=\n    'Output the region of the image that is detected to contain the MRZ to the given png file'\n    )\nparser.add_argument('--version', action='version', version=\n    'PassportEye MRZ v%s' % passporteye.__version__)\nargs = parser.parse_args()\ntry:\n    extra_params = '--oem 0' if args.legacy else ''\n    filename, mrz_, walltime = process_file((args.filename, args.save_roi\n         is not None, extra_params))\nexcept TesseractNotFoundError:\n    sys.stderr.write(\n        \"\"\"ERROR: The tesseract executable was not found.\nPlease, make sure Tesseract is installed and the appropriate directory is included in your PATH environment variable.\n\"\"\"\n        )\n    sys.exit(1)\nexcept TesseractError as ex:\n    sys.stderr.write('ERROR: %s' % ex.message)\n    sys.exit(ex.status)\nd = mrz_.to_dict() if mrz_ is not None else {'mrz_type': None, 'valid': \n    False, 'valid_score': 0}\nd['walltime'] = walltime\nd['filename'] = filename\nif args.save_roi is not None and mrz_ is not None and 'roi' in mrz_.aux:\n    io.imsave(args.save_roi, mrz_.aux['roi'])\nif not args.json:\n    for k in d:\n        print('%s\\t%s' % (k, str(d[k])))\nelse:\n    print(json.dumps(d, indent=2))\n"
}