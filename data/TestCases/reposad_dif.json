{
    "functionName": "ad_dif",
    "className": null,
    "fileName": "/pmeal_&_OpenPNM/openpnm_&_models_&_physics_&_ad_dif_conductance.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"\n    Calculate the advective-diffusive conductance of conduits in network, where\n    a conduit is ( 1/2 pore - full throat - 1/2 pore ). See the notes section.\n\n    Parameters\n    ----------\n    target : OpenPNM Object\n        The object which this model is associated with. This controls the\n        length of the calculated array, and also provides access to other\n        necessary properties.\n\n    conduit_lengths : string\n        Dictionary key of the conduit length values\n\n    pore_pressure : string\n        Dictionary key of the pore pressure values\n\n   throat_hydraulic_conductance : string\n       Dictionary key of the throat hydraulic conductance values\n\n   throat_diffusive_conductance : string\n       Dictionary key of the throat diffusive conductance values\n\n   s_scheme : string\n       Name of the space discretization scheme to use\n\n    Returns\n    -------\n    g : ndarray\n        Array containing advective-diffusive conductance values for conduits in\n        the geometry attached to the given physics object.\n\n    Notes\n    -----\n    (1) This function requires that all the necessary phase properties already\n    be calculated.\n\n    (2) This function calculates the specified property for the *entire*\n    network then extracts the values for the appropriate throats at the end.\n\n    (3) This function assumes cylindrical throats with constant cross-section\n    area. Corrections for different shapes and variable cross-section area can\n    be imposed by passing the proper conduit_shape_factors argument when\n    computig the diffusive and hydraulic conductances.\n\n    (4) shape_factor depends on the physics of the problem, i.e. diffusion-like\n    processes and fluid flow need different shape factors.\n\n    \"\"\"\nnetwork = target.project.network\nthroats = network.map_throats(throats=target.Ts, origin=target)\nphase = target.project.find_phase(target)\ncn = network['throat.conns'][throats]\nL1 = network[conduit_lengths + '.pore1'][throats]\nLt = network[conduit_lengths + '.throat'][throats]\nL2 = network[conduit_lengths + '.pore2'][throats]\ng1, g2, gt = _np.zeros((3, len(Lt)))\nm1, m2, mt = [(Li != 0) for Li in [L1, L2, Lt]]\ng1[~m1] = g2[~m2] = gt[~mt] = _np.inf\nP = phase[pore_pressure]\ngh = phase[throat_hydraulic_conductance][throats]\ngd = phase[throat_diffusive_conductance][throats]\nif gd.size == throats.size:\n    gd = _np.tile(gd, 2)\nelif gd.size == 2 * throats.size:\n    gd = gd.reshape(throats.size * 2, order='F')\nelse:\n    raise Exception(\n        f'Shape of {throat_diffusive_conductance} must either be (Nt,1) or (Nt,2)'\n        )\nQij = -gh * _np.diff(P[cn], axis=1).squeeze()\nQij = _np.append(Qij, -Qij)\nPeij = Qij / gd\nPeij[(Peij < 1e-10) & (Peij >= 0)] = 1e-10\nPeij[(Peij > -1e-10) & (Peij <= 0)] = -1e-10\nphase['throat.peclet.ad'] = _np.nan\nphase['throat.peclet.ad'][throats] = _np.absolute(Peij[0:len(Lt)])\nQij = Peij * gd\nif s_scheme == 'upwind':\n    w = gd + _np.maximum(0, -Qij)\nelif s_scheme == 'hybrid':\n    w = _np.maximum(0, _np.maximum(-Qij, gd - Qij / 2))\nelif s_scheme == 'powerlaw':\n    w = gd * _np.maximum(0, (1 - 0.1 * _np.absolute(Peij)) ** 5) + _np.maximum(\n        0, -Qij)\nelif s_scheme == 'exponential':\n    w = -Qij / (1 - _np.exp(Peij))\nelse:\n    raise Exception('Unrecognized discretization scheme: ' + s_scheme)\nw = w.reshape(throats.size, 2, order='F')\nreturn w\n"
}