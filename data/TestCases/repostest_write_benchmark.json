{
    "functionName": "test_write_benchmark",
    "className": null,
    "fileName": "/bio-phys_&_MDBenchmark/mdbenchmark_&_tests_&_mdengines_&_test_utils.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"Test that the write_benchmark works as expected.\"\"\"\nhost = 'draco'\nbase_dirname = '{}_{}'.format(host, engine)\nnodes = 5\nwith tmpdir.as_cwd():\n    base_directory = dtr.Tree(base_dirname)\n    for ext in extensions:\n        open('md.{}'.format(ext), 'a').close()\n    template = retrieve_host_template('draco')\n    utils.write_benchmark(engine=engine, base_directory=base_directory,\n        template=template, nodes=nodes, gpu=gpu, module=module, name=\n        input_name, job_name=job_name, relative_path='.', host=host, time=15)\n    expected_job_name = 'md' if job_name is None else job_name\n    assert os.path.exists(base_dirname)\n    assert os.path.exists(os.path.join(base_dirname, '{}'.format(nodes),\n        input_name))\n    with open(os.path.join(base_dirname, '{}'.format(nodes), 'bench.job'), 'r'\n        ) as f:\n        for line in f:\n            if '#SBATCH -J' in line:\n                assert line == '#SBATCH -J {}\\n'.format(expected_job_name)\n            if '--partition=' in line:\n                if gpu:\n                    assert line == '#SBATCH --partition=gpu\\n'\n                else:\n                    assert line == '#SBATCH --partition=express\\n'\n            if '--nodes=' in line:\n                assert line == '#SBATCH --nodes={}\\n'.format(nodes)\n            if '--time=' in line:\n                assert line == '#SBATCH --time={}\\n'.format('00:20:00')\n            if 'module load {}/'.format(engine) in line:\n                assert line == 'module load {}\\n'.format(module)\n            if 'srun' in line:\n                if engine == 'gromacs':\n                    assert line == 'srun gmx_mpi mdrun -v -maxh 0.25 -deffnm md'\n                elif engine == 'namd':\n                    assert line == 'srun namd2 md.namd'\npytest.mark.parametrize('engine, module, input_name, extensions', [(gromacs,\n    'gromacs/5.1.4', 'md.tpr', ['tpr']), (namd, 'namd/2.12', 'md.namd', [\n    'namd', 'pdb', 'psf'])])pytest.mark.parametrize('gpu,job_name', ((True, 'gpu_job'), (False, None)))"
}