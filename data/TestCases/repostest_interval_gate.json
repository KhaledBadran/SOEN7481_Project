{
    "functionName": "test_interval_gate",
    "className": "TestGates",
    "fileName": "/eyurtsev_&_FlowCytometryTools/FlowCytometryTools_&_tests_&_test_gates.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "test_df = pd.DataFrame({'channel': [-1, 0.5, 1.5]}, index=[1, 2, 3])\ntest_cases = (0.0, 1.0, ['channel'], 'in', 'gate1', [2]), (-10.0, 1.0, [\n    'channel'], 'in', 'gate1', [1, 2]), (-10.0, 10.0, ['channel'], 'in',\n    'gate1', [1, 2, 3]), (10.0, 30.0, ['channel'], 'in', 'gate1', []), (\n    10.0, 30.0, ['channel'], 'out', 'gate1', [1, 2, 3]), (0, 1, ['channel'],\n    'out', 'gate1', [1, 3]), (-10, 10, ['channel'], 'out', 'gate1', [])\nfor vert0, vert1, channel_name, region, gate_name, expected_output in test_cases:\n    interval_gate = IntervalGate((vert0, vert1), channel_name, region, name\n        =gate_name)\n    bool_series = interval_gate._identify(test_df)\n    actual_output = _get_indexes_where_true(bool_series)\n    self.assertEqual(expected_output, actual_output)\ninterval_gate = IntervalGate((0, 1), 'invalid channel', 'in')\nwith self.assertRaises(KeyError):\n    interval_gate._identify(test_df)\nwith self.assertRaises(ValueError):\n    IntervalGate((1, 0), 'invalid channel', 'in')\nempty_df = pd.DataFrame({'channel': []}, index=[])\ngate = IntervalGate((0, 1), ['channel'], 'in')\nself.assertEqual(_get_indexes_where_true(gate._identify(empty_df)), [])\n"
}