{
    "functionName": "test_console_debugger_connected",
    "className": null,
    "fileName": "/fabioz_&_PyDev.Debugger/tests_python_&_test_console.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "class _DebuggerWriterThread(AbstractWriterThread):\n    FORCE_KILL_PROCESS_WHEN_FINISHED_OK = True\n\n    def __init__(self):\n        AbstractWriterThread.__init__(self)\n        socket_name = get_socket_name(close=True)\n        server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        server_socket.bind(socket_name)\n        server_socket.listen(1)\n        self.port = socket_name[1]\n        self.__server_socket = server_socket\n\n    def run(self):\n        print('waiting for second process')\n        self.sock, addr = self.__server_socket.accept()\n        print('accepted second process')\n        from tests_python.debugger_unittest import ReaderThread\n        self.reader_thread = ReaderThread(self.sock)\n        self.reader_thread.start()\n        self._sequence = -1\n        self.write_version()\n        self.log.append('start_socket')\n        self.write_make_initial_run()\n        time.sleep(1)\n        seq = self.write_list_threads()\n        msg = self.wait_for_list_threads(seq)\n        assert msg.thread['name'] == 'MainThread'\n        assert msg.thread['id'] == 'console_main'\n        self.write_get_frame('console_main', '1')\n        self.wait_for_vars([[\n            '<var name=\"a\" type=\"int\" qualifier=\"%s\" value=\"int: 10\"' % (\n            builtin_qualifier,), '<var name=\"a\" type=\"int\"  value=\"int']])\n        self.finished_ok = True\nwith console_setup.check_console() as writer:\n    writer.execute_line('a = 10')\n    debugger_writer_thread = _DebuggerWriterThread()\n    debugger_writer_thread.start()\n    writer.connect_to_debugger(debugger_writer_thread.port)\n    wait_for_condition(lambda : debugger_writer_thread.finished_ok)\n    writer.execute_line('print(\"TEST SUCEEDED\")')\n    writer.close()\n    writer.finished_ok = True\n"
}