{
    "functionName": "test_archive_2",
    "className": "TestCase",
    "fileName": "/IntegralDefense_&_ACE/lib_&_saq_&_modules_&_test_email.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "self.reset_email_archive()\nroot = create_root_analysis(alert_type='mailbox')\nroot.initialize_storage()\nshutil.copy(os.path.join('test_data', 'emails',\n    'pdf_attachment.email.rfc822'), os.path.join(root.storage_dir,\n    'email.rfc822'))\nfile_observable = root.add_observable(F_FILE, 'email.rfc822')\nfile_observable.add_directive(DIRECTIVE_ARCHIVE)\nroot.save()\nroot.schedule()\nengine = TestEngine()\nengine.enable_module('analysis_module_file_type', 'test_groups')\nengine.enable_module('analysis_module_file_hash_analyzer', 'test_groups')\nengine.enable_module('analysis_module_email_analyzer', 'test_groups')\nengine.enable_module('analysis_module_email_archiver', 'test_groups')\nengine.enable_module('analysis_module_url_extraction', 'test_groups')\nengine.enable_module('analysis_module_pdf_analyzer', 'test_groups')\nengine.controlled_stop()\nengine.start()\nengine.wait()\nroot = RootAnalysis(storage_dir=root.storage_dir)\nroot.load()\nfile_observable = root.get_observable(file_observable.id)\nself.assertIsNotNone(file_observable)\narchive_results = file_observable.get_analysis('EmailArchiveResults')\nself.assertIsNotNone(archive_results)\nself.assertIsNotNone(archive_results.details)\narchive_path = archive_results.details + '.e'\nself.assertTrue(os.path.exists(archive_path))\ngzip_path = os.path.join(saq.TEMP_DIR, 'temp.gz')\ndest_path = os.path.join(saq.TEMP_DIR, 'temp.email')\ndecrypt(archive_path, gzip_path)\nwith gzip.open(gzip_path, 'rb') as fp_in:\n    with open(dest_path, 'wb') as fp_out:\n        shutil.copyfileobj(fp_in, fp_out)\nself.assertTrue(filecmp.cmp(dest_path, os.path.join(root.storage_dir,\n    'email.rfc822')))\nwith get_db_connection('email_archive') as db:\n    c = db.cursor()\n    c.execute('SELECT archive_id FROM archive')\n    row = c.fetchone()\n    archive_id = row[0]\n    expected_values = [('env_to', b'jwdavison@company.com'), ('body_from',\n        b'unixfreak0037@gmail.com'), ('body_to', b'jwdavison@company.com'),\n        ('subject', b'canary #1'), ('decoded_subject', b'canary #1'), (\n        'message_id',\n        b'<CANTOGZuWahvYOEr0NwPELF5ASriGNWjfVsWhMSE_ekiSVw1RbA@mail.gmail.com>'\n        ), ('content', b'6967810094670a0978da20db86fbfadc'), ('url',\n        b'http://www.ams.org')]\n    for field_name, field_value in expected_values:\n        c.execute(\n            'SELECT value FROM archive_search WHERE field = %s AND archive_id = %s AND value = %s'\n            , (field_name, archive_id, field_value))\n        row = c.fetchone()\n        self.assertIsNotNone(row)\n        value = row[0]\n        self.assertEquals(value, field_value)\n"
}