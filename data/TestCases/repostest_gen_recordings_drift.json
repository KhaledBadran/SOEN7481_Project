{
    "functionName": "test_gen_recordings_drift",
    "className": "TestGenerators",
    "fileName": "/alejoe91_&_MEArec/MEArec_&_tests_&_test_generators.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "print('Test recording generation - drift')\nne = 1\nni = 1\nnum_chan = self.num_chan\nn_neurons = ne + ni\nrec_params = mr.get_default_recordings_params()\nrec_params['spiketrains']['n_exc'] = ne\nrec_params['spiketrains']['n_inh'] = ni\nrec_params['spiketrains']['duration'] = 5\nn_jitter = [1, 3]\nrec_params['recordings']['drifting'] = True\nrec_params['recordings']['drift_velocity'] = 500\nrec_params['templates']['min_dist'] = 1\nchunk_rec = [0, 2]\nmodulations = ['none', 'template', 'electrode']\nbursting = [False, True]\ndrift_modes = ['slow', 'fast', 'slow+fast']\nfor i, mod in enumerate(modulations):\n    for dm in drift_modes:\n        for b in bursting:\n            for j in n_jitter:\n                for ch in chunk_rec:\n                    print('Drifting: modulation', mod, 'bursting', b,\n                        'jitter', j, 'drift mode', dm, 'chunk', ch)\n                    rec_params['templates']['n_jitters'] = j\n                    rec_params['recordings']['modulation'] = mod\n                    rec_params['recordings']['bursting'] = b\n                    rec_params['recordings']['chunk_duration'] = ch\n                    rec_params['recordings']['drift_mode'] = dm\n                    if i == len(modulations) - 1:\n                        rec_params['recordings']['fs'] = 30000\n                        rec_params['recordings']['n_drifting'] = 1\n                    if mod == 'electrode' and b is True and j == 5:\n                        rec_params['cell_types'] = None\n                        rec_params['recordings']['shape_mod'] = True\n                    recgen_drift = mr.gen_recordings(params=rec_params,\n                        tempgen=self.tempgen_drift, verbose=False)\n                    assert recgen_drift.recordings.shape[0] == num_chan\n                    assert len(recgen_drift.spiketrains) == n_neurons\n                    assert recgen_drift.channel_positions.shape == (num_chan, 3\n                        )\n                    if j == 1:\n                        assert recgen_drift.templates.shape[0] == n_neurons\n                        assert recgen_drift.templates.shape[2] == num_chan\n                    else:\n                        assert recgen_drift.templates.shape[0] == n_neurons\n                        assert recgen_drift.templates.shape[2] == j\n                        assert recgen_drift.templates.shape[3] == num_chan\n                    assert len(recgen_drift.spike_traces) == n_neurons\n                    del recgen_drift\n"
}