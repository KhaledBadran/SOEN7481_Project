{
    "functionName": "test_remove_command_from_root",
    "className": "TestRecord",
    "fileName": "/Keeper-Security_&_Commander/unit-tests_&_test_command_record.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "params = get_synced_params()\ncmd = record.RecordRemoveCommand()\nrecord_uid = next(iter(params.subfolder_record_cache['']))\nrec = api.get_record(params, record_uid)\ndef pre_delete_command(rq):\n    self.assertEqual(rq['command'], 'pre_delete')\n    return {'pre_delete_response': {'would_delete': {'deletion_summary': [\n        'delete all']}, 'pre_delete_token': 'token'}}\nwith mock.patch('keepercommander.commands.record.user_choice') as choice_mock:\n    choice_mock.return_value = KeyboardInterrupt()\n    KeeperApiHelper.communicate_expect([pre_delete_command, 'delete'])\n    cmd.execute(params, force=True, record=rec.record_uid)\n    self.assertTrue(KeeperApiHelper.is_expect_empty())\n    KeeperApiHelper.communicate_expect([pre_delete_command, 'delete'])\n    cmd.execute(params, force=True, record=rec.title)\n    self.assertTrue(KeeperApiHelper.is_expect_empty())\n    with mock.patch('builtins.print'):\n        choice_mock.return_value = 'y'\n        KeeperApiHelper.communicate_expect([pre_delete_command, 'delete'])\n        cmd.execute(params, record=rec.record_uid)\n        self.assertTrue(KeeperApiHelper.is_expect_empty())\n        KeeperApiHelper.communicate_expect([pre_delete_command, 'delete'])\n        cmd.execute(params, record=rec.title)\n        self.assertTrue(KeeperApiHelper.is_expect_empty())\n        choice_mock.return_value = 'n'\n        KeeperApiHelper.communicate_expect([pre_delete_command])\n        cmd.execute(params, record=rec.record_uid)\n        self.assertTrue(KeeperApiHelper.is_expect_empty())\n        KeeperApiHelper.communicate_expect([pre_delete_command])\n        cmd.execute(params, record=rec.title)\n        self.assertTrue(KeeperApiHelper.is_expect_empty())\n"
}