{
    "functionName": "test_extract_from_calibration",
    "className": "TestTriggers",
    "fileName": "/BciPy_&_BciPy/bcipy_&_helpers_&_tests_&_test_triggers.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "trigger_seq = [('\"[\\'calibration_trigger\\', 2.039073024992831]\"', 'calib'),\n    ('J', 'first_pres_target'), ('+', 'fixation'), ('P', 'nontarget'), ('R',\n    'nontarget'), ('E', 'nontarget'), ('K', 'nontarget'), ('A', 'nontarget'\n    ), ('J', 'target'), ('X', 'nontarget'), ('F', 'nontarget'), ('<',\n    'nontarget'), ('S', 'nontarget'), ('E', 'first_pres_target'), ('+',\n    'fixation'), ('M', 'nontarget'), ('T', 'nontarget'), ('H', 'nontarget'),\n    ('W', 'nontarget'), ('Y', 'nontarget'), ('V', 'nontarget'), ('E',\n    'target'), ('L', 'nontarget'), ('_', 'nontarget'), ('J', 'nontarget')]\ncontent, trigger_times = sample_raw_data(trigger_seq)\nextracted = extract_from_calibration(StringIO(content), seq_len=10)\nself.assertEqual(len(trigger_seq), len(extracted))\nfor seq_i in range(len(trigger_seq)):\n    extracted_val, extracted_targetness, stamp = extracted[seq_i]\n    expected_trg, targetness = trigger_seq[seq_i]\n    if 'calibration' in expected_trg:\n        expected_trg = 'calibration_trigger'\n    self.assertEqual(expected_trg, extracted_val)\n    self.assertEqual(targetness, extracted_targetness)\n    self.assertEqual(trigger_times[seq_i], float(stamp))\n"
}