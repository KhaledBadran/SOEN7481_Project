{
    "functionName": "convertDataFile",
    "className": "DataSet",
    "fileName": "/jakob-lass_&_MJOLNIR/MJOLNIR_&_Data_&_DataSet.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"Conversion method for converting scan file(s) to hkl file. Converts the given hdf file into NXsqom format and saves in a file with same name, but of type .nxs.\n        Copies all of the old data file into the new to ensure complete redundancy. Determines the binning wanted from the file name of normalization file.\n\n        Kwargs:\n\n            - dataFiles (DataFile, string or list of): File path(s), file must be of hdf format (default self.dataFiles).\n\n            - binning (int): Binning to be used when converting files (default 8).\n\n            - saveLocation (string): File path to save location of data file(s) (defaults to same as raw file).\n\n            - saveFile (bool): If true, the file(s) will be saved as nxs-files. Otherwise they will only persis in memory.\n\n        Raises:\n\n            - IOError\n\n            - AttributeError\n            \n        \"\"\"\nif dataFiles is None:\n    if len(self.dataFiles) == 0:\n        raise AttributeError(\n            'No data files file provided either through input of in the DataSet object.'\n            )\nelse:\n    dataFiles = isListOfDataFiles(dataFiles)\ndataFiles = self.dataFiles\nconvertedFiles = []\nfor rawfile in dataFiles:\n    convFile = rawfile.convert(binning)\n    if saveFile:\n        if not saveLocation is None:\n            directory, file = os.path.split(saveLocation)\n            directory = os.path.abspath(directory)\n            if file == '':\n                file = os.path.split(rawfile.fileLocation)[1]\n            fileName = os.path.splitext(file)[0]\n            saveloc = os.path.join(directory, fileName + '.nxs')\n        else:\n            saveloc = rawfile.fileLocation.replace('.hdf', '.nxs')\n        convFile.saveNXsqom(saveloc)\n    convertedFiles.append(convFile)\nself._convertedFiles = []\nself.convertedFiles = convertedFiles\nself._getData()\n_tools.KwargChecker()"
}