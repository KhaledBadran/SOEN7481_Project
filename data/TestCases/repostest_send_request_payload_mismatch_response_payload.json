{
    "functionName": "test_send_request_payload_mismatch_response_payload",
    "className": "TestKMIPClient",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_services_&_test_kmip_client.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that an InvalidMessage error is raised when the wrong payload\n        is returned from the server.\n        \"\"\"\nresponse_payload = payloads.DestroyResponsePayload(unique_identifier='1')\nbatch_item = ResponseBatchItem(operation=Operation(OperationEnum.\n    DELETE_ATTRIBUTE), result_status=ResultStatus(ResultStatusEnum.SUCCESS),\n    response_payload=response_payload)\nbuild_mock.return_value = None\nsend_mock.return_value = ResponseMessage(batch_items=[batch_item])\nargs = OperationEnum.DELETE_ATTRIBUTE, payloads.DeleteAttributeRequestPayload(\n    unique_identifier='1', attribute_name='Object Group', attribute_index=2)\nself.assertRaisesRegex(exceptions.InvalidMessage,\n    'Invalid response payload received for the DeleteAttribute operation.',\n    self.client.send_request_payload, *args)\nbatch_item = ResponseBatchItem(operation=Operation(OperationEnum.\n    SET_ATTRIBUTE), result_status=ResultStatus(ResultStatusEnum.SUCCESS),\n    response_payload=response_payload)\nsend_mock.return_value = ResponseMessage(batch_items=[batch_item])\nargs = OperationEnum.SET_ATTRIBUTE, payloads.SetAttributeRequestPayload(\n    unique_identifier='1', new_attribute=objects.NewAttribute(attribute=\n    primitives.Boolean(value=True, tag=enums.Tags.SENSITIVE)))\nself.assertRaisesRegex(exceptions.InvalidMessage,\n    'Invalid response payload received for the SetAttribute operation.',\n    self.client.send_request_payload, *args)\nbatch_item = ResponseBatchItem(operation=Operation(OperationEnum.\n    MODIFY_ATTRIBUTE), result_status=ResultStatus(ResultStatusEnum.SUCCESS),\n    response_payload=response_payload)\nsend_mock.return_value = ResponseMessage(batch_items=[batch_item])\nargs = OperationEnum.MODIFY_ATTRIBUTE, payloads.ModifyAttributeRequestPayload(\n    unique_identifier='1', new_attribute=objects.NewAttribute(attribute=\n    primitives.Boolean(value=True, tag=enums.Tags.SENSITIVE)))\nself.assertRaisesRegex(exceptions.InvalidMessage,\n    'Invalid response payload received for the ModifyAttribute operation.',\n    self.client.send_request_payload, *args)\nmock.patch('kmip.services.kmip_client.KMIPProxy._build_request_message')mock.patch('kmip.services.kmip_client.KMIPProxy._send_and_receive_message')"
}