{
    "functionName": "test_run_TPI_extra",
    "className": null,
    "fileName": "/open-source-economics_&_OG-USA/ogusa_&_tests_&_test_TPI.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n    Test TPI.run_TPI function.  Provide inputs to function and\n    ensure that output returned matches what it has been before.\n    \"\"\"\nbaseline_dir = os.path.join(CUR_PATH, 'baseline')\noutput_base = baseline_dir\np = Specifications(baseline=True, baseline_dir=baseline_dir, output_base=\n    output_base, test=True, client=dask_client, num_workers=NUM_WORKERS)\np.update_specifications(param_updates)\np.maxiter = 2\np.get_tax_function_parameters(None, run_micro=False, tax_func_path=os.path.\n    join(CUR_PATH, '..', 'data', 'tax_functions', 'TxFuncEst_baseline_CPS.pkl')\n    )\nSS.ENFORCE_SOLUTION_CHECKS = False\nss_outputs = SS.run_SS(p, None)\nif p.baseline:\n    utils.mkdirs(os.path.join(p.baseline_dir, 'SS'))\n    ss_dir = os.path.join(p.baseline_dir, 'SS', 'SS_vars.pkl')\n    with open(ss_dir, 'wb') as f:\n        pickle.dump(ss_outputs, f)\nelse:\n    utils.mkdirs(os.path.join(p.output_base, 'SS'))\n    ss_dir = os.path.join(p.output_base, 'SS', 'SS_vars.pkl')\n    with open(ss_dir, 'wb') as f:\n        pickle.dump(ss_outputs, f)\nTPI.ENFORCE_SOLUTION_CHECKS = False\ntest_dict = TPI.run_TPI(p, None)\nexpected_dict = utils.safe_read_pickle(filename)\nfor k, v in expected_dict.items():\n    try:\n        assert np.allclose(test_dict[k][:p.T], v[:p.T], rtol=0.0001, atol=\n            0.0001)\n    except ValueError:\n        assert np.allclose(test_dict[k][:p.T, :, :], v[:p.T, :, :], rtol=\n            0.0001, atol=0.0001)\npytest.mark.full_runpytest.mark.parametrize('baseline,param_updates,filename', [(True,\n    param_updates5, filename5), (True, param_updates6, filename6), (True,\n    param_updates7, filename7)], ids=['Baseline, small open',\n    'Baseline, small open for some periods', 'Baseline, delta_tau = 0'])"
}