{
    "functionName": "test_content_asymmetric_encrypt_small",
    "className": "TestEncryptor",
    "fileName": "/named-data_&_PyNDN2/tests_&_unit_tests_&_test_encryptor.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "for input in encryptorRsaTestInputs:\n    rawContent = Blob(bytearray([1, 35, 69, 103, 137, 171, 205, 239, 254, \n        220, 186, 152, 118, 84, 50, 16, 99, 111, 110, 116, 101, 110, 116, \n        115]), False)\n    data = Data()\n    rsaParams = RsaKeyParams(1024)\n    keyName = Name('test')\n    decryptKey = RsaAlgorithm.generateKey(rsaParams)\n    encryptKey = RsaAlgorithm.deriveEncryptKey(decryptKey.getKeyBits())\n    eKey = encryptKey.getKeyBits()\n    dKey = decryptKey.getKeyBits()\n    encryptParams = EncryptParams(input.type)\n    Encryptor.encryptData(data, rawContent, keyName, eKey, encryptParams)\n    self.assertTrue(data.getName().equals(Name('/FOR').append(keyName)),\n        input.testName)\n    extractContent = EncryptedContent()\n    extractContent.wireDecode(data.getContent())\n    self.assertTrue(keyName.equals(extractContent.getKeyLocator().\n        getKeyName()), input.testName)\n    self.assertEqual(extractContent.getInitialVector().size(), 0, input.\n        testName)\n    self.assertEqual(extractContent.getAlgorithmType(), input.type, input.\n        testName)\n    recovered = extractContent.getPayload()\n    decrypted = RsaAlgorithm.decrypt(dKey, recovered, encryptParams)\n    self.assertTrue(rawContent.equals(decrypted), input.testName)\n"
}