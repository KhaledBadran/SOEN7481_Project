{
    "functionName": "test_save_spectrum_as_csv_1",
    "className": null,
    "fileName": "/NSLS-II_&_PyXRF/pyxrf_&_xanes_maps_&_tests_&_test_xanes_maps_api.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"Save data file, then read it and verify that the data match\"\"\"\nfln = 'output.csv'\nos.chdir(tmp_path)\nfln_full = fln\nif 'wd' in kwargs and kwargs['wd'] is not None:\n    if isinstance(kwargs['wd'], tuple):\n        kwargs['wd'] = os.path.join(*kwargs['wd'])\n    fln_full = os.path.join(kwargs['wd'], fln)\nfln_full = os.path.abspath(fln_full)\nn_pts = 50\nenergy = np.random.rand(n_pts)\nspectrum = np.random.rand(n_pts)\ncaplog.set_level(logging.INFO)\n_save_spectrum_as_csv(fln=fln, energy=energy, spectrum=spectrum, **kwargs)\nassert f\"Selected spectrum was saved to file '{fln_full}'\" in str(caplog.text\n    ), 'Incorrect reporting of the event of the correctly saved file'\ncaplog.clear()\nwith open(fln_full, 'r') as f:\n    s = f.read()\nif 'msg_info' in kwargs:\n    for s_msg in kwargs['msg_info'].split('\\n'):\n        assert f'# {s_msg}' in s, 'Mismatch between original and loaded comment lines'\ns = '\\n'.join([_ for _ in s.split('\\n') if not _.strip().startswith('#')])\ndframe = pd.read_csv(StringIO(s))\nassert tuple(dframe.columns) == ('Incident Energy, keV', 'XANES spectrum'\n    ), f'Incorrect column labels: {tuple(dframe.columns)}'\ndata = dframe.values\nenergy2, spectrum2 = data[:, (0)], data[:, (1)]\nnpt.assert_array_almost_equal(energy, energy2, err_msg=\n    'Recovered energy array is different from the original')\nnpt.assert_array_almost_equal(spectrum, spectrum2, err_msg=\n    'Recovered spectrum array is different from the original')\npytest.mark.parametrize('kwargs', [{}, {'wd': None, 'msg_info':\n    'header line 1'}, {'wd': '.', 'msg_info': 'line1\\nline2'}, {'wd':\n    'test_dir', 'msg_info': 'line1\\n  line2'}, {'wd': ('test_dir1',\n    'test_dir2'), 'msg_info': 'line1\\n line2'}])"
}