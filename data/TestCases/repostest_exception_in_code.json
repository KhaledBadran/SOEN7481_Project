{
    "functionName": "test_exception_in_code",
    "className": "TestDisableVarSubst",
    "fileName": "/alex-ber_&_AlexBerUtils/tests_&_utils_&_ymlparsers_test.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "logger.info(f'{request._pyfuncitem.name}()')\nmock_lock = create_mock_lock(mocker)\norig_jinja2ctx = HiYaPyCo.jinja2ctx\nmocker.patch.object(HiYaPyCo, 'jinja2Lock', new=mock_lock, spec_set=True)\njinja2ctx_mock = mocker.patch.object(HiYaPyCo, 'jinja2ctx', spec_set=True)\nmock_variable_start_string = mocker.PropertyMock(return_value=\n    orig_jinja2ctx.variable_start_string)\ntype(jinja2ctx_mock).variable_start_string = mock_variable_start_string\nmock_variable_end_string = mocker.PropertyMock(return_value=orig_jinja2ctx.\n    variable_end_string)\ntype(jinja2ctx_mock).variable_end_string = mock_variable_end_string\nmock_block_start_string = mocker.PropertyMock(return_value=orig_jinja2ctx.\n    block_start_string)\ntype(jinja2ctx_mock).block_start_string = mock_block_start_string\nmock_block_end_string = mocker.PropertyMock(return_value=orig_jinja2ctx.\n    block_end_string)\ntype(jinja2ctx_mock).block_end_string = mock_block_end_string\nmocks = [mock_variable_start_string, mock_variable_end_string,\n    mock_block_start_string, mock_block_end_string]\nwith pytest.raises(ValueError):\n    with ymlparsers.DisableVarSubst():\n        raise ValueError\npytest.assume(mock_lock.acquire.call_count > 0)\npytest.assume(mock_lock.release.call_count == mock_lock.acquire.call_count)\nsetter_called = None\nfor mock in mocks:\n    setter_called = None\n    pytest.assume(mock.call_count > 0)\n    for kall in mock.call_args_list:\n        args, _ = kall\n        if not is_empty(args) and '|' in args[0]:\n            setter_called = True\n            break\n    pytest.assume(setter_called)\npytest.assume(jinja2ctx_mock.variable_start_string == orig_jinja2ctx.\n    variable_start_string)\npytest.assume(jinja2ctx_mock.variable_end_string == orig_jinja2ctx.\n    variable_end_string)\npytest.assume(jinja2ctx_mock.block_start_string == orig_jinja2ctx.\n    block_start_string)\npytest.assume(jinja2ctx_mock.block_end_string == orig_jinja2ctx.\n    block_end_string)\npytest.mark.yml"
}