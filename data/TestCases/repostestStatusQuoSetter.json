{
    "functionName": "testStatusQuoSetter",
    "className": "ExperimentTest",
    "fileName": "/facebook_&_Ax/ax_&_core_&_tests_&_test_experiment.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "sq_parameters = self.experiment.status_quo.parameters\nself.experiment.status_quo = None\nself.assertIsNone(self.experiment.status_quo)\nsq_parameters['w'] = 3.5\nself.experiment.status_quo = Arm(sq_parameters)\nself.assertEqual(self.experiment.status_quo.parameters['w'], 3.5)\nself.assertEqual(self.experiment.status_quo.name, 'status_quo')\nself.assertTrue('status_quo' in self.experiment.arms_by_name)\nself.experiment.status_quo = Arm({n: None for n in sq_parameters.keys()})\nself.assertIsNone(self.experiment.status_quo.parameters['w'])\nsq_parameters['a'] = 4\nwith self.assertRaises(ValueError):\n    self.experiment.status_quo = Arm(sq_parameters)\nsq_parameters.pop('a')\nsq_parameters['w'] = 'hello'\nwith self.assertRaises(ValueError):\n    self.experiment.status_quo = Arm(sq_parameters)\nself.assertEqual(len(self.experiment.arms_by_signature), 1)\nself.assertEqual(len(self.experiment.arms_by_name), 1)\nsq_parameters['w'] = 3.6\nself.experiment.status_quo = Arm(sq_parameters)\nself.assertEqual(len(self.experiment.arms_by_signature), 1)\nself.assertEqual(len(self.experiment.arms_by_name), 1)\nbatch = self.experiment.new_batch_trial()\nbatch.set_status_quo_with_weight(self.experiment.status_quo, 1)\nsq_parameters['w'] = 3.7\nself.experiment.status_quo = Arm(sq_parameters)\nself.assertEqual(len(self.experiment.arms_by_signature), 2)\nself.assertEqual(len(self.experiment.arms_by_name), 2)\nself.assertEqual(self.experiment.status_quo.name, 'status_quo_e0')\nself.assertTrue('status_quo_e0' in self.experiment.arms_by_name)\nsq_parameters.pop('w')\nwith self.assertRaises(ValueError):\n    self.experiment.status_quo = Arm(sq_parameters)\nexp = Experiment(name='test3', search_space=get_branin_search_space(),\n    tracking_metrics=[BraninMetric(name='b', param_names=['x1', 'x2'])],\n    runner=SyntheticRunner())\nbatch = exp.new_batch_trial()\narms = get_branin_arms(n=1, seed=0)\nbatch.add_arms_and_weights(arms=arms)\nself.assertIsNone(exp.status_quo)\nexp.status_quo = arms[0]\nself.assertEqual(exp.status_quo.name, '0_0')\nwith self.assertRaises(ValueError):\n    exp.status_quo = Arm(arms[0].parameters, name='new_name')\n"
}