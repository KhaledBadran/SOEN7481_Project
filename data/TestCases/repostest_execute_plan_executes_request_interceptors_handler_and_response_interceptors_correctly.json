{
    "functionName": "test_execute_plan_executes_request_interceptors_handler_and_response_interceptors_correctly",
    "className": "TestPlanExecutor",
    "fileName": "/cbefus_&_Eynnyd/tests_&_plan_execution_&_test_plan_executor.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "class FakeRequest(AbstractRequest):\n\n    def __init__(self, http_method):\n        self._http_method = http_method\n\n    @property\n    def http_method(self):\n        return self._http_method\n\n    @property\n    def request_uri(self):\n        pass\n\n    @property\n    def forwarded_request_uri(self):\n        pass\n\n    @property\n    def headers(self):\n        pass\n\n    @property\n    def client_ip_address(self):\n        pass\n\n    @property\n    def cookies(self):\n        pass\n\n    @property\n    def query_parameters(self):\n        pass\n\n    @property\n    def path_parameters(self):\n        pass\n\n    @property\n    def byte_body(self):\n        pass\n\n    @property\n    def utf8_body(self):\n        pass\ndef fake_request_interceptor_first(request):\n    self.assertEqual('GET', request.http_method)\n    return FakeRequest('POST')\ndef fake_request_interceptor_second(request):\n    self.assertEqual('POST', request.http_method)\n    return FakeRequest('PUT')\ndef fake_handler(request):\n    self.assertEqual('PUT', request.http_method)\n    return ResponseBuilder().set_status(HTTPStatus.OK).build()\ndef fake_response_interceptor_first(request, response):\n    self.assertEqual('PUT', request.http_method)\n    self.assertEqual(HTTPStatus.OK.value, response.status.code)\n    return ResponseBuilder().set_status(HTTPStatus.ACCEPTED).build()\ndef fakse_response_interceptor_second(request, response):\n    self.assertEqual('PUT', request.http_method)\n    self.assertEqual(HTTPStatus.ACCEPTED.value, response.status.code)\n    return ResponseBuilder().set_status(HTTPStatus.CREATED).build()\nplan_executor = PlanExecutor(ErrorHandlersBuilder().build())\nplan = ExecutionPlan([fake_request_interceptor_first,\n    fake_request_interceptor_second], fake_handler, [\n    fakse_response_interceptor_second, fake_response_interceptor_first], {})\nresponse = plan_executor.execute_plan(plan, FakeRequest('GET'))\nself.assertEqual(HTTPStatus.CREATED.value, response.status.code)\n"
}