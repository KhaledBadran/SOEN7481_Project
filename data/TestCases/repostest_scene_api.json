{
    "functionName": "test_scene_api",
    "className": null,
    "fileName": "/AO-StreetArt_&_PyAesel/test_&_test_transaction.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "print('Testing Scene API')\nprint('Create Scene')\nscn = AeselScene()\nscn.name = 'test'\nscn.region = 'US-MD'\nscn.latitude = 100.0\nscn.longitude = 100.0\nscn.tags = []\nscn.devices = []\nscn_crt_resp = None\ntry:\n    scn_crt_resp = transaction_client.create_scene('123', scn)\nexcept Exception as e:\n    print(e)\n    assert False\nprint(scn_crt_resp)\nprint('Get Scene')\nscn_get_resp = None\ntry:\n    scn_get_resp = transaction_client.get_scene('123')\nexcept Exception as e:\n    print(e)\n    assert False\nprint(scn_get_resp)\nassert len(scn_get_resp['scenes']) > 0\nprint('Update Scene')\nscn_upd = AeselScene()\nscn_upd.region = 'US-GA'\nscn_upd_resp = None\ntry:\n    scn_upd_resp = transaction_client.update_scene('123', scn_upd)\nexcept Exception as e:\n    print(e)\n    assert False\nprint(scn_upd_resp)\nprint('Query Scenes')\nscn_query = AeselScene()\nscn_query.region = 'US-GA'\nscn_query_resp = None\ntry:\n    scn_query_resp = transaction_client.scene_query(scn_query)\nexcept Exception as e:\n    print(e)\n    assert False\nprint(scn_query_resp)\nassert len(scn_query_resp['scenes']) > 0\nprint('Scene Registration')\nud = AeselUserDevice()\nud.key = 'testDevice'\nud.hostname = 'localhost'\nud.port = 8080\nud.connection_string = 'http://localhost:8080'\nregister_resp = None\ntry:\n    register_resp = transaction_client.register('123', ud)\nexcept Exception as e:\n    print(e)\n    assert False\nprint(register_resp)\nassert len(register_resp['scenes']) > 0\nprint('Scene Synchronization')\ntransform = AeselSceneTransform()\ntransform.rotation = [0.0, 0.0, 0.0]\ntransform.translation = [1.0, 1.0, 1.0]\ntry:\n    sync_resp = transaction_client.synchronize('123', 'testDevice', transform)\nexcept Exception as e:\n    print(e)\n    assert False\nprint(sync_resp)\nassert len(sync_resp['scenes']) > 0\nprint('Scene Deregistration')\nderegister_resp = None\ntry:\n    deregister_resp = transaction_client.deregister('123', 'testDevice')\nexcept Exception as e:\n    print(e)\n    assert False\nprint(deregister_resp)\nprint('Delete Scene')\ndelete_resp = None\ntry:\n    delete_resp = transaction_client.delete_scene('123')\nexcept Exception as e:\n    print(e)\n    assert False\nprint(delete_resp)\n"
}