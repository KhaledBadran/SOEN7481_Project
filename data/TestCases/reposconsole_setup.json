{
    "functionName": "console_setup",
    "className": null,
    "fileName": "/fabioz_&_PyDev.Debugger/tests_python_&_test_console.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "server_queue = queue.Queue()\ndef notify_finished(more):\n    server_queue.put(('notify_finished', more))\n    return ''\nclass ConsoleRunner(DebuggerRunnerSimple):\n\n    @overrides(DebuggerRunnerSimple.add_command_line_args)\n    def add_command_line_args(self, args):\n        port, client_port = get_socket_names(2, close=True)\n        args.extend((writer.get_pydevconsole_file(), str(port[1]), str(\n            client_port[1])))\n        self.port = port\n        self.client_port = client_port\n        server = SimpleXMLRPCServer(client_port)\n        server.register_function(notify_finished, 'NotifyFinished')\n        start_in_daemon_thread(server.serve_forever, [])\n        self.proxy = xmlrpclib.ServerProxy('http://%s:%s/' % port)\n        return args\nclass WriterThread(AbstractWriterThread):\n    if IS_JYTHON:\n        EXPECTED_RETURNCODE = 'any'\n\n    @overrides(AbstractWriterThread.additional_output_checks)\n    def additional_output_checks(self, stdout, stderr):\n        print('output found: %s - %s' % (stdout, stderr))\n\n    @overrides(AbstractWriterThread.write_dump_threads)\n    def write_dump_threads(self):\n        pass\n\n    def execute_line(self, command, more=False):\n        runner.proxy.execLine(command)\n        assert server_queue.get(timeout=5.0) == ('notify_finished', more)\n\n    def hello(self):\n\n        def _hello():\n            try:\n                msg = runner.proxy.hello('ignored')\n                if msg is not None:\n                    if isinstance(msg, (list, tuple)):\n                        msg = next(iter(msg))\n                    if msg.lower().startswith('hello'):\n                        return True\n            except:\n                pass\n            return False\n        wait_for_condition(_hello)\n\n    def close(self):\n        try:\n            runner.proxy.close()\n        except:\n            pass\n\n    def connect_to_debugger(self, debugger_port):\n        runner.proxy.connectToDebugger(debugger_port)\nrunner = ConsoleRunner(tmpdir)\nwriter = WriterThread()\nclass CaseSetup(object):\n\n    @contextmanager\n    def check_console(self, **kwargs):\n        for key, value in kwargs.items():\n            assert hasattr(WriterThread, key)\n            setattr(WriterThread, key, value)\n        self.writer = writer\n        args = runner.get_command_line()\n        args = runner.add_command_line_args(args)\n        if SHOW_OTHER_DEBUG_INFO:\n            print('executing: %s' % (' '.join(args),))\n        try:\n            with runner.run_process(args, writer) as dct_with_stdout_stder:\n                writer.get_stdout = lambda : ''.join(dct_with_stdout_stder[\n                    'stdout'])\n                writer.get_stderr = lambda : ''.join(dct_with_stdout_stder[\n                    'stderr'])\n                writer.hello()\n                yield writer\n        finally:\n            writer.log = []\n        stdout = dct_with_stdout_stder['stdout']\n        stderr = dct_with_stdout_stder['stderr']\n        writer.additional_output_checks(''.join(stdout), ''.join(stderr))\nreturn CaseSetup()\npytest.fixture"
}