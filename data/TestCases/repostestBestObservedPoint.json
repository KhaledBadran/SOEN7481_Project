{
    "functionName": "testBestObservedPoint",
    "className": "ModelUtilsTest",
    "fileName": "/facebook_&_Ax/ax_&_models_&_tests_&_test_model_utils.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "model = MagicMock()\nX1 = np.array(list(product(np.arange(0.0, 10.0), np.arange(0.0, 10.0))))\nX2 = np.array(list(product(np.arange(5.0, 15.0), np.arange(5.0, 15.0))))\nX3 = np.array(list(product(np.arange(20.0, 30.0), np.arange(20.0, 30.0))))\nmodel.Xs = [X1, X2, X3]\nbounds = [(0.0, 8.0), (0.0, 8.0)]\nfixed_features = {(1): 6.0}\nlinear_constraints = np.array([[2.0, 2.0], [0.0, 1.0]]), np.array([[27.0],\n    [7.0]])\nobjective_weights = np.array([-1.0, 1.0, 0.0])\noutcome_constraints = np.array([[0.0, 1.0, 0.0], [1.0, 1.0, 0.0]]), np.array([\n    [10.0], [24.0]])\nf = np.array([[1.0, 1.0, -1.0], [6.0, 10.0, -1.0], [5.0, 11.0, -1.0]])\ncov = np.tile(np.diag([1, 1, 1]), (3, 1, 1))\nmodel.predict.return_value = f, cov\nxbest = best_observed_point(model=model, bounds=bounds, objective_weights=\n    objective_weights, outcome_constraints=outcome_constraints,\n    linear_constraints=linear_constraints, fixed_features=fixed_features)\nX_obs = model.predict.mock_calls[0][1][0]\nself.assertEqual(X_obs.shape, (3, 2))\nself.assertTrue(np.array_equal(X_obs[(1), :], xbest))\nxbest = best_observed_point(model=model, bounds=bounds, objective_weights=\n    objective_weights, outcome_constraints=outcome_constraints,\n    linear_constraints=linear_constraints, fixed_features=fixed_features,\n    options={'utility_baseline': 4.0})\nX_obs = model.predict.mock_calls[1][1][0]\nself.assertEqual(X_obs.shape, (3, 2))\nself.assertTrue(np.array_equal(X_obs[(2), :], xbest))\nxbest = best_observed_point(model=model, bounds=bounds, objective_weights=\n    objective_weights, outcome_constraints=outcome_constraints,\n    linear_constraints=linear_constraints, fixed_features=fixed_features,\n    options={'best_point_method': 'feasible_threshold'})\nX_obs = model.predict.mock_calls[2][1][0]\nself.assertEqual(X_obs.shape, (3, 2))\nself.assertTrue(np.array_equal(X_obs[(0), :], xbest))\nxbest = best_observed_point(model=model, bounds=bounds, objective_weights=\n    objective_weights, outcome_constraints=outcome_constraints,\n    linear_constraints=linear_constraints, fixed_features={(1): 100},\n    options={'best_point_method': 'feasible_threshold'})\nself.assertIsNone(xbest)\nxbest = best_observed_point(model=model, bounds=bounds, objective_weights=\n    objective_weights, outcome_constraints=(np.array([[1.0, 0.0, 0.0]]), np\n    .array([[-100.0]])), linear_constraints=linear_constraints,\n    fixed_features=fixed_features, options={'best_point_method':\n    'feasible_threshold'})\nself.assertIsNone(xbest)\nwith self.assertRaises(ValueError):\n    xbest = best_observed_point(model=model, bounds=bounds,\n        objective_weights=np.zeros(3), outcome_constraints=\n        outcome_constraints, linear_constraints=linear_constraints,\n        fixed_features={(1): 100}, options={'method': 'feasible_threshold'})\nwith self.assertRaises(ValueError):\n    delattr(model, 'Xs')\n    xbest = best_observed_point(model=model, bounds=bounds,\n        objective_weights=np.zeros(3), outcome_constraints=\n        outcome_constraints, linear_constraints=linear_constraints,\n        fixed_features={(1): 100}, options={'method': 'feasible_threshold'})\n"
}