{
    "functionName": "interleaving_test_iterator",
    "className": "TestLazySet",
    "fileName": "/AvivYaish_&_LazySet/lazy_set_&_tests_&_test_lazy_set.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"\n\n        Iterates on the test by alternatingly adding positive and negative sets\n\n        to the LazySet and yielding the according LazySet and regular set.\n\n        :param update: whether to use methods that update the LazySet in-place or not.\n\n        :param numeric_operations: whether to use numeric-operation-style methods (e.g. |, -, etc') when creating\n\n        the LazySet or not.\n\n        \"\"\"\nlazy_set = LazySet(base_set=base_set, negative_sets=negative_sets,\n    positive_sets=positive_sets)\nregular_set = base_set.difference(*negative_sets).union(*positive_sets)\nyield lazy_set, regular_set\nyield lazy_set.copy(), regular_set\nyield lazy_set.copy_to_set(), regular_set\nyield lazy_set.copy().flatten(), regular_set\nyield lazy_set.copy().flatten(True), regular_set\nindex = 0\nwhile index <= max(len(more_positive_sets), len(more_negative_sets)):\n    if index < len(more_negative_sets):\n        regular_set -= more_negative_sets[index]\n        if update:\n            if numeric_operations:\n                lazy_set -= more_negative_sets[index]\n            else:\n                lazy_set.difference_update(more_negative_sets[index])\n        elif numeric_operations:\n            lazy_set = lazy_set - more_negative_sets[index]\n        else:\n            lazy_set = lazy_set.difference(more_negative_sets[index])\n        yield lazy_set, regular_set\n        yield lazy_set.copy(), regular_set\n        yield lazy_set.copy_to_set(), regular_set\n        yield lazy_set.copy().flatten(), regular_set\n        yield lazy_set.copy().flatten(True), regular_set\n    if index < len(more_positive_sets):\n        regular_set |= more_positive_sets[index]\n        if update:\n            if numeric_operations:\n                lazy_set |= more_positive_sets[index]\n            else:\n                lazy_set.update(more_positive_sets[index])\n        elif numeric_operations:\n            lazy_set = lazy_set | more_positive_sets[index]\n        else:\n            lazy_set = lazy_set.union(more_positive_sets[index])\n        yield lazy_set, regular_set\n        yield lazy_set.copy(), regular_set\n        yield lazy_set.copy_to_set(), regular_set\n        yield lazy_set.copy().flatten(), regular_set\n        yield lazy_set.copy().flatten(True), regular_set\n    if index < len(intersection_sets):\n        regular_set &= intersection_sets[index]\n        if update:\n            if numeric_operations:\n                lazy_set &= intersection_sets[index]\n            else:\n                lazy_set.intersection_update(intersection_sets[index])\n        elif numeric_operations:\n            lazy_set = lazy_set & intersection_sets[index]\n        else:\n            lazy_set = lazy_set.intersection(intersection_sets[index])\n        yield lazy_set, regular_set\n        yield lazy_set.copy(), regular_set\n        yield lazy_set.copy_to_set(), regular_set\n        yield lazy_set.copy().flatten(), regular_set\n        yield lazy_set.copy().flatten(True), regular_set\n    if index < len(symmetric_difference_sets):\n        regular_set ^= symmetric_difference_sets[index]\n        if update:\n            if numeric_operations:\n                lazy_set ^= symmetric_difference_sets[index]\n            else:\n                lazy_set.symmetric_difference_update(symmetric_difference_sets\n                    [index])\n        elif numeric_operations:\n            lazy_set = lazy_set ^ symmetric_difference_sets[index]\n        else:\n            lazy_set = lazy_set.symmetric_difference(symmetric_difference_sets\n                [index])\n        yield lazy_set, regular_set\n        yield lazy_set.copy(), regular_set\n        yield lazy_set.copy_to_set(), regular_set\n        yield lazy_set.copy().flatten(), regular_set\n        yield lazy_set.copy().flatten(True), regular_set\n    index += 1\nlazy_set.clear()\nregular_set.clear()\nyield lazy_set, regular_set\nyield lazy_set.copy(), regular_set\nyield lazy_set.copy_to_set(), regular_set\nyield lazy_set.copy().flatten(), regular_set\nyield lazy_set.copy().flatten(True), regular_set\nstaticmethod"
}