{
    "functionName": "test_set_attribute_on_managed_object",
    "className": "TestKmipEngine",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_services_&_server_&_test_engine.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that various attributes can be set correctly on a given\n        managed object.\n        \"\"\"\ne = engine.KmipEngine()\ne._data_store = self.engine\ne._data_store_session_factory = self.session_factory\ne._data_session = e._data_store_session_factory()\ne._logger = mock.MagicMock()\nattribute_factory = factory.AttributeFactory()\nname = attribute_factory.create_attribute(enums.AttributeType.NAME,\n    attributes.Name.create('Test Symmetric Key', enums.NameType.\n    UNINTERPRETED_TEXT_STRING))\nalgorithm = attribute_factory.create_attribute(enums.AttributeType.\n    CRYPTOGRAPHIC_ALGORITHM, enums.CryptographicAlgorithm.AES)\nlength = attribute_factory.create_attribute(enums.AttributeType.\n    CRYPTOGRAPHIC_LENGTH, 0)\nmask = attribute_factory.create_attribute(enums.AttributeType.\n    CRYPTOGRAPHIC_USAGE_MASK, [enums.CryptographicUsageMask.ENCRYPT, enums.\n    CryptographicUsageMask.DECRYPT])\nsensitive = attribute_factory.create_attribute(enums.AttributeType.\n    SENSITIVE, True)\nmanaged_object = pie_objects.SymmetricKey(enums.CryptographicAlgorithm.AES,\n    0, b'')\nmanaged_object.names = []\nself.assertEqual([], managed_object.names)\nself.assertEqual(enums.CryptographicAlgorithm.AES, managed_object.\n    cryptographic_algorithm)\nself.assertEqual(0, managed_object.cryptographic_length)\nself.assertEqual([], managed_object.cryptographic_usage_masks)\nself.assertFalse(managed_object.sensitive)\ne._set_attribute_on_managed_object(managed_object, ('Name', [name.\n    attribute_value]))\nself.assertEqual(['Test Symmetric Key'], managed_object.names)\ne._set_attribute_on_managed_object(managed_object, (\n    'Cryptographic Algorithm', algorithm.attribute_value))\nself.assertEqual(enums.CryptographicAlgorithm.AES, managed_object.\n    cryptographic_algorithm)\ne._set_attribute_on_managed_object(managed_object, ('Cryptographic Length',\n    length.attribute_value))\nself.assertEqual(0, managed_object.cryptographic_length)\ne._set_attribute_on_managed_object(managed_object, (\n    'Cryptographic Usage Mask', mask.attribute_value))\nself.assertEqual([enums.CryptographicUsageMask.ENCRYPT, enums.\n    CryptographicUsageMask.DECRYPT], managed_object.cryptographic_usage_masks)\ne._set_attribute_on_managed_object(managed_object, ('Sensitive', sensitive.\n    attribute_value))\nself.assertTrue(managed_object.sensitive)\n"
}