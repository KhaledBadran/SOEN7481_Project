{
    "functionName": "test_DataSet_plotCutQELine",
    "className": null,
    "fileName": "/jakob-lass_&_MJOLNIR/MJOLNIR_&_Data_&_DataSet.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "Points = np.array([[0.7140393034102988, -0.4959224853328328], [\n    1.128363301356428, -1.6520150761601147], [1.9002545852012716, -\n    0.9393552598967219], [1.0432282332853056, -0.12375569239528339]], dtype\n    =float)\nQPoints = np.zeros((Points.shape[0], 3))\nQPoints[:, :2] = Points\nEnergyBins = np.linspace(1.7, 2.7, 11)\nminPixel = 0.001\nwidth = 0.1\nimport matplotlib\nmatplotlib.use('Agg')\nDataFile = ['Data/camea2018n000136.hdf', 'Data/camea2018n000137.hdf']\ndataset = DataSet(convertedFiles=DataFile)\ndataset.convertDataFile(saveFile=False)\ntry:\n    dataset.plotCutQELine([], EnergyBins, width=width, minPixel=minPixel,\n        rlu=False)\n    assert False\nexcept AttributeError:\n    assert True\ntry:\n    dataset.plotCutQELine(QPoints, EnergyBins + 100, width=width, minPixel=\n        minPixel, rlu=True, vmin=0.0, vmax=1.5e-06, ticks=10)\n    assert False\nexcept AttributeError:\n    assert True\ntry:\n    dataset.plotCutQELine(QPoints, EnergyBins, width=width, minPixel=\n        minPixel, rlu=False)\n    assert False\nexcept AttributeError:\n    assert True\ntry:\n    dataset.plotCutQELine(QPoints[:, :2], EnergyBins, width=width, minPixel\n        =minPixel, rlu=True)\n    assert False\nexcept AttributeError:\n    assert True\nfig = plt.figure()\nax = fig.gca()\nax, DataList, BinListTotal, centerPositionTotal, binDistanceTotal = (dataset\n    .plotCutQELine(QPoints[:, :2], EnergyBins, width=width, minPixel=\n    minPixel, rlu=False, ax=ax, vmin=0.0, vmax=1.5e-06, log=True,\n    seperatorWidth=3))\nHKLPoints = np.array([[1.0, 0.0, 0.0], [0.5, 1.5, 0.0], [1.7, -0.1, 0.0], [\n    1.0, 1.0, 0.0]])\nax, DataList, BinListTotal, centerPositionTotal, binDistanceTotal = (dataset\n    .plotCutQELine(HKLPoints, EnergyBins, width=width, minPixel=minPixel,\n    rlu=True, plotSeperator=False, ticks=1, tickRound=1, colorbar=True, log\n    =True))\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib.colors import ListedColormap\ncmap = plt.cm.coolwarm\nmy_cmap = cmap(np.arange(cmap.N))\nmy_cmap[:, (-1)] = np.linspace(0, 1, cmap.N)\nmy_cmap = ListedColormap(my_cmap)\nfig = plt.figure(figsize=(10, 11))\nax = fig.add_subplot(111, projection='3d')\nEnergies = np.concatenate(dataset.energy, axis=0)\nE = np.arange(Energies.min() + 0.35, Energies.max(), 0.35)\nax, DataList, BinListTotal, centerPositionTotal, binDistanceTotal = (dataset\n    .plotCutQELine(QPoints=HKLPoints, EnergyBins=E, ax=ax, width=0.05,\n    minPixel=0.01, vmin=7.5e-07, vmax=7e-06, cmap=cmap, rlu=True))\nplt.close('all')\n"
}