{
    "functionName": "testBatchLifecycle",
    "className": "BatchTrialTest",
    "fileName": "/facebook_&_Ax/ax_&_core_&_tests_&_test_batch_trial.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "trial_idcs_by_status = iter(self.experiment.trial_indices_by_status.values())\nself.assertEqual(next(trial_idcs_by_status), {0})\nself.assertTrue(all(len(idcs) == 0 for idcs in trial_idcs_by_status))\nstaging_mock = PropertyMock()\nwith patch.object(SyntheticRunner, 'staging_required', staging_mock):\n    mock_runner = SyntheticRunner()\n    staging_mock.return_value = True\n    self.batch.runner = mock_runner\n    self.batch.run()\n    self.assertEqual(self.batch.status, TrialStatus.STAGED)\n    self.assertEqual(self.experiment.trial_indices_by_status[TrialStatus.\n        STAGED], {0})\n    self.assertTrue(all(len(idcs) == 0) for status, idcs in self.experiment\n        .trial_indices_by_status.items() if status != TrialStatus.STAGED)\n    self.assertIsNotNone(self.batch.time_staged)\n    self.assertTrue(self.batch.status.is_deployed)\n    self.assertFalse(self.batch.status.expecting_data)\n    with self.assertRaises(ValueError):\n        self.batch.add_arms_and_weights(arms=self.arms, weights=self.weights)\n    with self.assertRaises(ValueError):\n        self.batch.runner = None\n    with self.assertRaises(ValueError):\n        self.batch.run()\n    self.batch.mark_running()\n    self.assertEqual(self.batch.status, TrialStatus.RUNNING)\n    self.assertEqual(self.experiment.trial_indices_by_status[TrialStatus.\n        RUNNING], {0})\n    self.assertTrue(all(len(idcs) == 0) for status, idcs in self.experiment\n        .trial_indices_by_status.items() if status != TrialStatus.RUNNING)\n    self.assertIsNotNone(self.batch.time_run_started)\n    self.assertTrue(self.batch.status.expecting_data)\n    self.batch.complete()\n    with self.assertRaises(ValueError):\n        self.batch.complete()\n    self.assertEqual(self.batch.status, TrialStatus.COMPLETED)\n    self.assertEqual(self.experiment.trial_indices_by_status[TrialStatus.\n        COMPLETED], {0})\n    self.assertTrue(all(len(idcs) == 0) for status, idcs in self.experiment\n        .trial_indices_by_status.items() if status != TrialStatus.COMPLETED)\n    self.assertIsNotNone(self.batch.time_completed)\n    self.assertTrue(self.batch.status.is_terminal)\n    with self.assertRaises(ValueError):\n        self.batch.mark_staged()\n    with self.assertRaises(ValueError):\n        self.batch.mark_completed()\n    with self.assertRaises(ValueError):\n        self.batch.mark_running()\n    with self.assertRaises(ValueError):\n        self.batch.mark_abandoned()\n    with self.assertRaises(ValueError):\n        self.batch.mark_failed()\n    self.batch._status = TrialStatus.CANDIDATE\n    self.assertEqual(self.experiment.trial_indices_by_status[TrialStatus.\n        CANDIDATE], {0})\n    self.assertTrue(all(len(idcs) == 0) for status, idcs in self.experiment\n        .trial_indices_by_status.items() if status != TrialStatus.CANDIDATE)\n"
}