{
    "functionName": "test_ensemble_generator",
    "className": null,
    "fileName": "/OMS-NetZero_&_FAIR/tests_&_unit_&_unit_test.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"This test determines whether the ensemble generator is behaving as\n    expected.\"\"\"\ninfile = os.path.join(os.path.dirname(__file__),\n    '../../fair/tools/tcrecs/cmip5tcrecs.csv')\ncmip5_tcrecs = np.loadtxt(infile, skiprows=3, delimiter=',')\ncmip5_tcr_mean = np.mean(cmip5_tcrecs[:, (0)])\ncmip5_ecs_mean = np.mean(cmip5_tcrecs[:, (1)])\ncmip5_tcr_std = np.std(cmip5_tcrecs[:, (0)])\ncmip5_ecs_std = np.std(cmip5_tcrecs[:, (1)])\ncmip5_corrcoef = np.corrcoef(cmip5_tcrecs[:, (0)], cmip5_tcrecs[:, (1)])[1, 0]\nensgen_tcrecs = ensemble.tcrecs_generate(seed=0, strip_ecs_lt_tcr=False)\nensgen_tcr_mean = np.mean(ensgen_tcrecs[:, (0)])\nensgen_ecs_mean = np.mean(ensgen_tcrecs[:, (1)])\nensgen_tcr_std = np.std(ensgen_tcrecs[:, (0)])\nensgen_ecs_std = np.std(ensgen_tcrecs[:, (1)])\nensgen_corrcoef = np.corrcoef(ensgen_tcrecs[:, (0)], ensgen_tcrecs[:, (1)])[\n    1, 0]\nassert 0.95 < ensgen_tcr_mean / cmip5_tcr_mean < 1.05\nassert 0.95 < ensgen_tcr_std / cmip5_tcr_std < 1.05\nassert 0.95 < ensgen_ecs_mean / cmip5_ecs_mean < 1.05\nassert 0.95 < ensgen_ecs_std / cmip5_ecs_std < 1.05\nassert 0.95 < ensgen_corrcoef / cmip5_corrcoef < 1.05\nensgen_tcrecs1 = ensemble.tcrecs_generate(seed=1, strip_ecs_lt_tcr=False)\nassert np.any(ensgen_tcrecs1 != ensgen_tcrecs)\nensgen_tcrecs = ensemble.tcrecs_generate(seed=0, correlated=False)\nassert 0.95 < ensgen_tcr_mean / cmip5_tcr_mean < 1.05\nassert 0.95 < ensgen_tcr_std / cmip5_tcr_std < 1.05\nassert 0.95 < ensgen_ecs_mean / cmip5_ecs_mean < 1.05\nassert 0.95 < ensgen_ecs_std / cmip5_ecs_std < 1.05\nassert -0.1 < np.corrcoef(ensgen_tcrecs[:, (0)], ensgen_tcrecs[:, (1)])[1, 0\n    ] < 0.1\nensgen_tcrecs = ensemble.tcrecs_generate(seed=0, strip_ecs_lt_tcr=False,\n    dist='norm')\nensgen_tcr_mean = np.mean(ensgen_tcrecs[:, (0)])\nensgen_ecs_mean = np.mean(ensgen_tcrecs[:, (1)])\nensgen_tcr_std = np.std(ensgen_tcrecs[:, (0)])\nensgen_ecs_std = np.std(ensgen_tcrecs[:, (1)])\nassert 0.95 < ensgen_tcr_mean / cmip5_tcr_mean < 1.05\nassert 0.95 < ensgen_tcr_std / cmip5_tcr_std < 1.05\nassert 0.95 < ensgen_ecs_mean / cmip5_ecs_mean < 1.05\nassert 0.95 < ensgen_ecs_std / cmip5_ecs_std < 1.05\nassert 0.95 < ensgen_corrcoef / cmip5_corrcoef < 1.05\nensgen_tcrecs = ensemble.tcrecs_generate(seed=0, correlated=False, dist='norm')\nassert 0.95 < ensgen_tcr_mean / cmip5_tcr_mean < 1.05\nassert 0.95 < ensgen_tcr_std / cmip5_tcr_std < 1.05\nassert 0.95 < ensgen_ecs_mean / cmip5_ecs_mean < 1.05\nassert 0.95 < ensgen_ecs_std / cmip5_ecs_std < 1.05\nassert -0.1 < np.corrcoef(ensgen_tcrecs[:, (0)], ensgen_tcrecs[:, (1)])[1, 0\n    ] < 0.1\nwith pytest.raises(ValueError):\n    ensemble.tcrecs_generate(tcrecs_in=np.zeros(10), dist='lognorm', n=1000,\n        correlated=True, strip_ecs_lt_tcr=True, seed=None)\nwith pytest.raises(ValueError):\n    ensemble.tcrecs_generate(tcrecs_in='cmip5', dist='gamma', n=1000,\n        correlated=True, strip_ecs_lt_tcr=True, seed=None)\n"
}