{
    "functionName": "test_at_commands",
    "className": "TestATCommands",
    "fileName": "/ChristianVisintin_&_ATtila/tests_&_test_atcommand.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "cmd = ATCommand('AT+CSQ', 'OK', 5, 1000, ['AT+CSQ=?{dbm},'], None)\nself.assertEqual(cmd.command, 'AT+CSQ', 'Expected command AT+CSQ, got %s' %\n    cmd.command)\nself.assertEqual(cmd.expected_response, 'OK', \n    'Expected response OK, got %s' % cmd.expected_response)\nself.assertEqual(cmd.timeout, 5, 'Expected timeout 5, got %d' % cmd.timeout)\nself.assertEqual(cmd.delay, 1000, 'Expected delay 1000, got %d' % cmd.delay)\nself.assertEqual(len(cmd.collectables), 1, \n    'Expected collectables length 1, got %d' % len(cmd.collectables))\nself.assertEqual(cmd.collectables[0], 'AT+CSQ=?{dbm},', \n    \"Expected collectable 'AT+CSQ=?{dbm},', got %s\" % cmd.collectables[0])\ncmd2 = ATCommand('AT+CSQ', 'OK', 5, 1000, 'AT+CSQ=?{dbm},', None)\nself.assertIsNone(cmd2.collectables,\n    'Collectables should be None, since a string has been provided')\ncmd3 = ATCommand('AT+CSQ', 'OK', 5, 1000, 'AT+CSQ=?{dbm},', ATCommand(\n    'AT+CSQ?'))\nself.assertIsNone(cmd3.collectables,\n    'Collectables should be None, since a string has been provided')\nself.assertIsNotNone(cmd3.doppel_ganger)\ncmd4 = ATCommand('AT+CSQ', 'OK', 5, 1000, 'AT+CSQ=?{dbm},', 'foobar')\nself.assertIsNone(cmd4.doppel_ganger,\n    'Doppelganger should be None, since a string has been provided')\ncmd = ATCommand('AT')\ncmd.command = 'ATE0'\nself.assertEqual(cmd.command, 'ATE0', 'Expected ATE0 as command, got %s' %\n    cmd.command)\ncmd.expected_response = 'OK'\nself.assertEqual(cmd.expected_response, 'OK', \n    'Expected OK as expected response, got %s' % cmd.expected_response)\ncmd.timeout = 10\nself.assertEqual(cmd.timeout, 10, 'Expected 10 as timeout, got %d' % cmd.\n    timeout)\ncmd.timeout = 0\nself.assertEqual(cmd.timeout, 1, 'Expected 1 as timeout, got %d' % cmd.timeout)\ncmd.delay = 5000\nself.assertEqual(cmd.delay, 5000, 'Expected 5000 as delay, got %d' % cmd.delay)\ncmd.delay = -1\nself.assertEqual(cmd.delay, 0, 'Expected 0 as delay, got %d' % cmd.delay)\ncmd.collectables = ['AT+CSQ=?{rssi::[0-9]{1,2}},',\n    'AT+CSQ=${rssi},?{ber::[0-9]{1,2}}']\nself.assertEqual(len(cmd.collectables), len(['AT+CSQ=?{rssi::[0-9]{1,2}},',\n    'AT+CSQ=${rssi},?{ber::[0-9]{1,2}}']), 'Bad collectables')\ncmd.collectables = 'foobar'\nself.assertIsNone(cmd.collectables,\n    \"Collectables should be None, since a string has been provided, but it's not\"\n    )\ncmd.doppel_ganger = cmd3\nself.assertEqual(cmd.doppel_ganger, cmd3)\nbad_doppelganger = 'foobar'\ncmd.doppel_ganger = bad_doppelganger\nself.assertIsNone(cmd.doppel_ganger,\n    \"Doppelganger should be None, since a string has been provided, but it's not\"\n    )\nresponse_ok = ATResponse('OK', ['+CSQ=32,99', '', 'OK'], cmd, 5000)\ncmd.response = response_ok\nself.assertEqual(cmd.response, response_ok,\n    'Response should be an ATResponse instance')\nresponse_nok = 'OK'\ncmd.response = response_nok\nself.assertIsNone(cmd.response,\n    'Response should be None, since a string has been passed')\n"
}