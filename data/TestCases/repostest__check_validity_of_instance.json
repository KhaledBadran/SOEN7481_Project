{
    "functionName": "test__check_validity_of_instance",
    "className": "Test_Oi2",
    "fileName": "/fraenkel-lab_&_OmicsIntegrator2/test_&_test_graph.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "print('test__check_validity_of_instance')\nedges = self.graph.edges\nprizes = self.graph.prizes\ncosts = self.graph.costs\nroot = 0\nnum_clusters = 1\npruning = 'strong'\nverbosity_level = 0\nfunc_params = [edges, prizes, costs, root, num_clusters, pruning,\n    verbosity_level]\nassert self.graph._check_validity_of_instance(*func_params)\ncheck = self.graph._check_validity_of_instance\nwith pytest.raises(ValueError):\n    check(edges.tolist(), *func_params[1:])\nwith pytest.raises(ValueError):\n    check(np.expand_dims(edges, 1), *func_params[1:])\nwith pytest.raises(ValueError):\n    check(edges[:, (1)], *func_params[1:])\nwith pytest.raises(ValueError):\n    check(edges, prizes.tolist(), *func_params[2:])\nwith pytest.raises(ValueError):\n    check(edges, np.expand_dims(prizes, 1), *func_params[2:])\nwith pytest.raises(ValueError):\n    check(edges, prizes[:-1], *func_params[2:])\nwith pytest.raises(ValueError):\n    check(*func_params[:2], costs.tolist(), *func_params[3:])\nwith pytest.raises(ValueError):\n    check(*func_params[:2], np.expand_dims(costs, 1), *func_params[3:])\nwith pytest.raises(ValueError):\n    check(*func_params[:2], costs[:-1], *func_params[3:])\nwith pytest.raises(ValueError):\n    check(*func_params[:3], -1, *func_params[4:])\nwith pytest.raises(ValueError):\n    check(*func_params[:3], self.number_of_nodes + 2, *func_params[4:])\nwith pytest.raises(ValueError):\n    check(*func_params[:3], '0', *func_params[4:])\nwith pytest.raises(ValueError):\n    check(*func_params[:4], 0, *func_params[5:])\nwith pytest.raises(ValueError):\n    check(*func_params[:4], -1, *func_params[5:])\nwith pytest.raises(ValueError):\n    check(*func_params[:4], prizes + 1, *func_params[5:])\nwith pytest.raises(ValueError):\n    check(*func_params[:4], '1', *func_params[5:])\nwith pytest.raises(ValueError):\n    check(*func_params[:4], None, *func_params[5:])\nwith pytest.raises(ValueError):\n    check(*func_params[:5], 'prune', verbosity_level)\nwith pytest.raises(ValueError):\n    check(*func_params[:5], 7, verbosity_level)\nwith pytest.raises(ValueError):\n    check(*func_params[:5], None, verbosity_level)\nwith pytest.raises(ValueError):\n    check(*func_params[:6], 4)\nwith pytest.raises(ValueError):\n    check(*func_params[:6], -1)\nwith pytest.raises(ValueError):\n    check(*func_params[:6], '1')\nprint('...pass')\n"
}