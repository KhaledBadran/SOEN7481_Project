{
    "functionName": "test_key_operation",
    "className": "TestPibIdentityImpl",
    "fileName": "/named-data_&_PyNDN2/tests_&_unit_tests_&_test_pib_identity_impl.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "fixture = self.fixture\npibImpl = PibMemory()\nidentity1 = PibIdentityImpl(fixture.id1, pibImpl, True)\ntry:\n    PibIdentityImpl(fixture.id1, pibImpl, False)\nexcept Exception as ex:\n    self.fail('Unexpected exception: ' + str(ex))\nself.assertEqual(0, identity1._keys.size())\ntry:\n    identity1.getKey(fixture.id1Key1Name)\n    self.fail('Did not throw the expected exception')\nexcept Pib.Error:\n    pass\nelse:\n    self.fail('Did not throw the expected exception')\ntry:\n    identity1.getDefaultKey()\n    self.fail('Did not throw the expected exception')\nexcept Pib.Error:\n    pass\nelse:\n    self.fail('Did not throw the expected exception')\ntry:\n    identity1.setDefaultKey(fixture.id1Key1Name)\n    self.fail('Did not throw the expected exception')\nexcept Pib.Error:\n    pass\nelse:\n    self.fail('Did not throw the expected exception')\nidentity1.addKey(fixture.id1Key1.toBytes(), fixture.id1Key1Name)\ntry:\n    identity1.getKey(fixture.id1Key1Name)\nexcept Exception as ex:\n    self.fail('Unexpected exception: ' + str(ex))\ntry:\n    identity1.getDefaultKey()\nexcept Exception as ex:\n    self.fail('Unexpected exception: ' + str(ex))\ndefaultKey0 = identity1.getDefaultKey()\nself.assertTrue(fixture.id1Key1Name.equals(defaultKey0.getName()))\nself.assertTrue(defaultKey0.getPublicKey().equals(fixture.id1Key1))\nidentity1.removeKey(fixture.id1Key1Name)\ntry:\n    identity1.setDefaultKey(fixture.id1Key1Name)\n    self.fail('Did not throw the expected exception')\nexcept Pib.Error:\n    pass\nelse:\n    self.fail('Did not throw the expected exception')\ntry:\n    identity1.getDefaultKey()\n    self.fail('Did not throw the expected exception')\nexcept Pib.Error:\n    pass\nelse:\n    self.fail('Did not throw the expected exception')\ntry:\n    identity1.setDefaultKey(fixture.id1Key1.toBytes(), fixture.id1Key1Name)\nexcept Exception as ex:\n    self.fail('Unexpected exception: ' + str(ex))\ntry:\n    identity1.getDefaultKey()\nexcept Exception as ex:\n    self.fail('Unexpected exception: ' + str(ex))\ntry:\n    identity1.getKey(fixture.id1Key1Name)\nexcept Exception as ex:\n    self.fail('Unexpected exception: ' + str(ex))\ndefaultKey1 = identity1.getDefaultKey()\nself.assertTrue(fixture.id1Key1Name.equals(defaultKey1.getName()))\nself.assertTrue(defaultKey1.getPublicKey().equals(fixture.id1Key1))\nidentity1.addKey(fixture.id1Key2.toBytes(), fixture.id1Key2Name)\nself.assertEqual(2, identity1._keys.size())\ntry:\n    identity1.setDefaultKey(fixture.id1Key2Name)\nexcept Exception as ex:\n    self.fail('Unexpected exception: ' + str(ex))\ntry:\n    identity1.getDefaultKey()\nexcept Exception as ex:\n    self.fail('Unexpected exception: ' + str(ex))\ndefaultKey2 = identity1.getDefaultKey()\nself.assertTrue(fixture.id1Key2Name.equals(defaultKey2.getName()))\nself.assertTrue(defaultKey2.getPublicKey().equals(fixture.id1Key2))\nidentity1.removeKey(fixture.id1Key1Name)\ntry:\n    identity1.getKey(fixture.id1Key1Name)\n    self.fail('Did not throw the expected exception')\nexcept Pib.Error:\n    pass\nelse:\n    self.fail('Did not throw the expected exception')\nself.assertEqual(1, identity1._keys.size())\ntry:\n    identity1.setDefaultKey(fixture.id1Key1.toBytes(), fixture.id1Key1Name)\nexcept Exception as ex:\n    self.fail('Unexpected exception: ' + str(ex))\ndefaultKey3 = identity1.getDefaultKey()\nself.assertTrue(fixture.id1Key1Name.equals(defaultKey3.getName()))\nself.assertTrue(defaultKey3.getPublicKey().equals(fixture.id1Key1))\nself.assertEqual(2, identity1._keys.size())\nidentity1.removeKey(fixture.id1Key1Name)\ntry:\n    identity1.getKey(fixture.id1Key1Name)\n    self.fail('Did not throw the expected exception')\nexcept Pib.Error:\n    pass\nelse:\n    self.fail('Did not throw the expected exception')\nself.assertEqual(1, identity1._keys.size())\nidentity1.removeKey(fixture.id1Key2Name)\ntry:\n    identity1.getKey(fixture.id1Key2Name)\n    self.fail('Did not throw the expected exception')\nexcept Pib.Error:\n    pass\nelse:\n    self.fail('Did not throw the expected exception')\nself.assertEqual(0, identity1._keys.size())\ntry:\n    identity1.getDefaultKey()\n    self.fail('Did not throw the expected exception')\nexcept Pib.Error:\n    pass\nelse:\n    self.fail('Did not throw the expected exception')\n"
}