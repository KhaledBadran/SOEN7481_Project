{
    "functionName": "ocr",
    "className": null,
    "fileName": "/konstantint_&_PassportEye/passporteye_&_util_&_ocr.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"Runs Tesseract on a given image. Writes an intermediate tempfile and then runs the tesseract command on the image.\n\n    This is a simplified modification of image_to_string from PyTesseract, which is adapted to SKImage rather than PIL.\n\n    In principle we could have reimplemented it just as well - there are some apparent bugs in PyTesseract, but it works so far :)\n\n    :param mrz_mode: when this is True (default) the tesseract is configured to recognize MRZs rather than arbitrary texts.\n                     When False, no specific configuration parameters are passed (and you are free to provide your own via `extra_cmdline_params`)\n    :param extra_cmdline_params: extra parameters passed to tesseract. When mrz_mode=True, these are appended to whatever is the\n                    \"best known\" configuration at the moment.\n                    \"--oem 0\" is the parameter you might want to pass. This selects the Tesseract's \"legacy\" OCR engine, which often seems\n                    to work better than the new LSTM-based one.\n    \"\"\"\nif img is None or img.shape[-1] == 0:\n    return ''\ninput_file_name = '%s.bmp' % _tempnam()\noutput_file_name_base = '%s' % _tempnam()\noutput_file_name = '%s.txt' % output_file_name_base\ntry:\n    if str(img.dtype).startswith('float') and np.nanmin(img\n        ) >= 0 and np.nanmax(img) <= 1:\n        img = img.astype(np.float64) * (np.power(2.0, 8) - 1) + 0.499999999\n        img = img.astype(np.uint8)\n    imwrite(input_file_name, img)\n    if mrz_mode:\n        config = (\n            '--psm 6 -c tessedit_char_whitelist=ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789>< -c load_system_dawg=F -c load_freq_dawg=F {}'\n            .format(extra_cmdline_params))\n    else:\n        config = '{}'.format(extra_cmdline_params)\n    pytesseract.run_tesseract(input_file_name, output_file_name_base, 'txt',\n        lang=None, config=config)\n    f = open(output_file_name, encoding='utf-8')\n    try:\n        return f.read().strip()\n    finally:\n        f.close()\nfinally:\n    pytesseract.cleanup(input_file_name)\n    pytesseract.cleanup(output_file_name)\n"
}