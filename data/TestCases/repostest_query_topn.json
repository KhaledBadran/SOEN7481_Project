{
    "functionName": "test_query_topn",
    "className": null,
    "fileName": "/Accenture_&_AmpliGraph/tests_&_ampligraph_&_discovery_&_test_discovery.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "X = np.array([['a', 'y', 'b'], ['b', 'y', 'a'], ['a', 'y', 'c'], ['c', 'y',\n    'a'], ['a', 'y', 'd'], ['c', 'x', 'd'], ['b', 'y', 'c'], ['f', 'y', 'e'\n    ], ['a', 'z', 'f'], ['c', 'z', 'f'], ['b', 'z', 'f']])\nmodel = ComplEx(k=2, batches_count=2)\nwith pytest.raises(ValueError):\n    query_topn(model, top_n=2)\nmodel.fit(X)\nwith pytest.raises(ValueError):\n    query_topn(model, top_n=2)\nwith pytest.raises(ValueError):\n    query_topn(model, top_n=2, head='a')\nwith pytest.raises(ValueError):\n    query_topn(model, top_n=2, relation='y')\nwith pytest.raises(ValueError):\n    query_topn(model, top_n=2, tail='e')\nwith pytest.raises(ValueError):\n    query_topn(model, top_n=2, head='a', relation='y', tail='e')\nwith pytest.raises(ValueError):\n    query_topn(model, top_n=2, head='xx', relation='y')\nwith pytest.raises(ValueError):\n    query_topn(model, top_n=2, head='a', relation='yakkety')\nwith pytest.raises(ValueError):\n    query_topn(model, top_n=2, head='a', tail='sax')\nwith pytest.raises(ValueError):\n    query_topn(model, top_n=2, head='a', relation='x', rels_to_consider=[\n        'y', 'z'])\nwith pytest.raises(ValueError):\n    query_topn(model, top_n=2, head='a', tail='f', rels_to_consider=['y',\n        'z', 'error'])\nwith pytest.raises(ValueError):\n    query_topn(model, top_n=2, head='a', tail='e', rels_to_consider='y')\nwith pytest.raises(ValueError):\n    query_topn(model, top_n=2, head='a', relation='x', ents_to_consider=[\n        'zz', 'top'])\nwith pytest.raises(ValueError):\n    query_topn(model, top_n=2, head='a', tail='e', ents_to_consider=['a', 'b'])\nsubj, pred, obj, top_n = 'a', 'x', 'e', 3\nY, S = query_topn(model, top_n=top_n, head=subj, relation=pred)\nassert len(Y) == len(S)\nassert len(Y) == top_n\nassert np.all(Y[:, (0)] == subj)\nassert np.all(Y[:, (1)] == pred)\nY, S = query_topn(model, top_n=top_n, relation=pred, tail=obj)\nassert np.all(Y[:, (1)] == pred)\nassert np.all(Y[:, (2)] == obj)\nents_to_con = ['a', 'b', 'c', 'd']\nY, S = query_topn(model, top_n=top_n, relation=pred, tail=obj,\n    ents_to_consider=ents_to_con)\nassert np.all([(x in ents_to_con) for x in Y[:, (0)]])\nrels_to_con = ['y', 'x']\nY, S = query_topn(model, top_n=10, head=subj, tail=obj, rels_to_consider=\n    rels_to_con)\nassert np.all([(x in rels_to_con) for x in Y[:, (1)]])\nY, S = query_topn(model, top_n=10, relation=pred, tail=obj)\nassert all(S[i] >= S[i + 1] for i in range(len(S) - 1))\n"
}