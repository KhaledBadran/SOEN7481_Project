{
    "functionName": "test_targetcoll_sent_data",
    "className": "TestTarget",
    "fileName": "/apmoore1_&_Bella/tests_&_test_data_types.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test the sentiment_data function of TargetCollection\n        \"\"\"\ntarget_example_0 = Target([(3, 5), (6, 8)], '1', 'Iphone',\n    'text with Iphone', 1)\ntarget_example_1 = Target([(1, 5)], '3', 'Iphone', 'text with Iphone', 1)\ntarget_example_2 = Target([(1, 2)], '2', 'Iphone', 'text with Iphone', -1)\ntarget_col_int = TargetCollection([target_example_0, target_example_1,\n    target_example_2])\ntarget_example_0 = Target([(3, 5), (6, 8)], '1', 'Iphone',\n    'text with Iphone', 'pos')\ntarget_example_1 = Target([(1, 5)], '3', 'Iphone', 'text with Iphone', 'pos')\ntarget_example_2 = Target([(1, 2)], '2', 'Iphone', 'text with Iphone', 'neg')\ntarget_col_str = TargetCollection([target_example_0, target_example_1,\n    target_example_2])\ntest_sentiments = target_col_int.sentiment_data()\nvalid_sentiments = [1, 1, -1]\nself.assertEqual(valid_sentiments, test_sentiments, msg=\n    'The Integer sentiments returned should be {} and not {}'.format(\n    valid_sentiments, test_sentiments))\ntest_sentiments = target_col_str.sentiment_data()\nvalid_sentiments = ['pos', 'pos', 'neg']\nself.assertEqual(valid_sentiments, test_sentiments, msg=\n    'The String sentiments returned should be {} and not {}'.format(\n    valid_sentiments, test_sentiments))\nstr_mapper = {'pos': 1, 'neg': -1}\ntest_sentiments = target_col_str.sentiment_data(mapper=str_mapper)\nvalid_sentiments = [1, 1, -1]\nself.assertEqual(valid_sentiments, test_sentiments, msg=\n    'The String sentiments should be mapped to Integers. Valid {} not {}'.\n    format(valid_sentiments, test_sentiments))\nint_mapper = {(1): 'pos', (-1): 'neg'}\ntest_sentiments = target_col_int.sentiment_data(mapper=int_mapper)\nvalid_sentiments = ['pos', 'pos', 'neg']\nself.assertEqual(valid_sentiments, test_sentiments, msg=\n    'The Integer sentiments should be mapped to String. Valid {} not {}'.\n    format(valid_sentiments, test_sentiments))\nwith self.assertRaises(TypeError, msg='Should only accept dict mapper'):\n    target_col_int.sentiment_data(mapper=[(1, 'pos'), (-1, 'neg')])\nwith self.assertRaises(ValueError, msg=\n    'Mapper should refuse dicts that may have valid mappings but not all the mappings'\n    ):\n    target_col_int.sentiment_data(mapper={(1): 'pos'})\nwith self.assertRaises(ValueError, msg=\n    'Mapper should refuse dicts that contain the correct number of mappings but not the correct mappings'\n    ):\n    target_col_int.sentiment_data({(0): 'pos', (-1): 'neg'})\nwith self.assertRaises(ValueError, msg=\n    'Mapper should refuse dicts that have all the correct mappings but contain some in-correct mappings'\n    ):\n    target_col_int.sentiment_data(mapper={(1): 'pos', (-1): 'neg', (0): 'neu'})\ntarget_example_0 = Target([(3, 5), (6, 8)], '1', 'Iphone',\n    'text with Iphone', 'pos', 'neg')\ntarget_example_1 = Target([(1, 5)], '3', 'Iphone', 'text with Iphone',\n    'pos', 'neu')\ntarget_example_2 = Target([(1, 2)], '2', 'Iphone', 'text with Iphone',\n    'neg', 'pos')\ntarget_col = TargetCollection([target_example_0, target_example_1,\n    target_example_2])\ntest_sentiments = target_col.sentiment_data(sentiment_field='predicted')\nvalid_sentiments = ['neg', 'neu', 'pos']\nself.assertEqual(valid_sentiments, test_sentiments, msg=\n    'The predicted sentiments returned should be {} and not {}'.format(\n    valid_sentiments, test_sentiments))\n"
}