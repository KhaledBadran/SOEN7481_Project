{
    "functionName": "test_create_response_read",
    "className": "TestResponseMessage",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_core_&_messages_&_test_messages.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "self.stream = BytearrayStream(self.create)\nresponse_message = messages.ResponseMessage()\nresponse_message.read(self.stream)\nresponse_header = response_message.response_header\nself.assertIsInstance(response_header, messages.ResponseHeader, self.msg.\n    format('response header', 'type', messages.ResponseHeader, type(\n    response_header)))\nprotocol_version = response_header.protocol_version\nself.assertIsInstance(protocol_version, contents.ProtocolVersion, self.msg.\n    format('response header', 'value', contents.ProtocolVersion, type(\n    protocol_version)))\nprotocol_version_major = protocol_version.major\nexp_type = int\nrcv_type = type(protocol_version_major)\nself.assertIsInstance(protocol_version_major, exp_type, self.msg.format(\n    'protocol version major', 'type', exp_type, rcv_type))\nself.assertEqual(1, protocol_version_major, self.msg.format(\n    'protocol version major', 'value', 1, protocol_version_major))\nprotocol_version_minor = protocol_version.minor\nexp_type = int\nrcv_type = type(protocol_version_minor)\nself.assertIsInstance(protocol_version_minor, int, self.msg.format(\n    'protocol version minor', 'type', exp_type, rcv_type))\nself.assertEqual(1, protocol_version_minor, self.msg.format(\n    'protocol version minor', 'value', 1, protocol_version_minor))\ntime_stamp = response_header.time_stamp\nvalue = 1335514341\nself.assertIsInstance(time_stamp, contents.TimeStamp, self.msg.format(\n    'time stamp', 'value', contents.TimeStamp, type(time_stamp)))\nself.assertEqual(time_stamp.value, value, self.msg.format('time stamp',\n    'value', time_stamp.value, value))\nbatch_count = response_header.batch_count\nself.assertIsInstance(batch_count, contents.BatchCount, self.msg.format(\n    'batch count', 'type', contents.BatchCount, type(batch_count)))\nself.assertEqual(1, batch_count.value, self.msg.format('batch count',\n    'value', 1, batch_count.value))\nbatch_items = response_message.batch_items\nself.assertIsInstance(batch_items, list, self.msg.format('batch items',\n    'type', list, type(batch_items)))\nfor batch_item in batch_items:\n    self.assertIsInstance(batch_item, messages.ResponseBatchItem, self.msg.\n        format('batch item', 'type', messages.ResponseBatchItem, type(\n        batch_item)))\n    operation = batch_item.operation\n    self.assertIsInstance(operation, contents.Operation, self.msg.format(\n        'operation', 'type', contents.Operation, type(operation)))\n    self.assertEqual(enums.Operation.CREATE, operation.value, self.msg.\n        format('operation', 'value', enums.Operation.CREATE, operation.value))\n    result_status = batch_item.result_status\n    self.assertIsInstance(result_status, contents.ResultStatus, self.msg.\n        format('result status', 'type', contents.ResultStatus, type(\n        result_status)))\n    self.assertEqual(enums.ResultStatus.SUCCESS, result_status.value, self.\n        msg.format('result status', 'value', enums.ResultStatus.SUCCESS,\n        result_status.value))\n    response_payload = batch_item.response_payload\n    exp_type = payloads.CreateResponsePayload\n    rcv_type = type(response_payload)\n    self.assertIsInstance(response_payload, exp_type, self.msg.format(\n        'response payload', 'type', exp_type, rcv_type))\n    object_type = response_payload.object_type\n    self.assertIsInstance(object_type, enums.ObjectType, self.msg.format(\n        'object type', 'type', enums.ObjectType, type(object_type)))\n    self.assertEqual(enums.ObjectType.SYMMETRIC_KEY, object_type, self.msg.\n        format('object type', 'value', enums.ObjectType.SYMMETRIC_KEY,\n        object_type))\n    unique_identifier = response_payload.unique_identifier\n    value = 'fb4b5b9c-6188-4c63-8142-fe9c328129fc'\n    self.assertIsInstance(unique_identifier, six.string_types, self.msg.\n        format('unique identifier', 'type', six.string_types, type(\n        unique_identifier)))\n    self.assertEqual(value, unique_identifier, self.msg.format(\n        'unique identifier', 'value', unique_identifier, value))\n"
}