{
    "functionName": "test_petsc_solver",
    "className": null,
    "fileName": "/AllenInstitute_&_EM_Aligner_python/integration_tests_&_test_petsc.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "parameters = copy.deepcopy(rough_parameters)\nparameters['hdf5_options']['output_dir'] = output_directory\nparameters['input_stack']['name'] = rough_input_stack\nparameters['pointmatch']['name'] = rough_pointmatches\nparameters['output_mode'] = 'hdf5'\nparameters['hdf5_options']['chunks_per_file'] = 10\nparameters['transformation'] = transform\nif transform == 'AffineModel':\n    parameters['regularization'] = {'default_lamda': 1000.0,\n        'translation_factor': 1e-10}\nmod = EMaligner.EMaligner(input_data=parameters, args=[])\nmod.run()\nindexfile = os.path.join(parameters['hdf5_options']['output_dir'],\n    'solution_input.h5')\nassert os.path.isfile(indexfile)\noutfile = os.path.join(parameters['hdf5_options']['output_dir'],\n    'solution_output.h5')\ncmd = ['singularity', 'run', './EMaligner/distributed/bin/petsc_solver.simf']\ncmd += ['-input', indexfile]\ncmd += ['-output', outfile]\ncmd += ['-ksp_type', 'preonly', '-pc_type', 'lu']\nsubprocess.call(cmd)\nassert os.path.isfile(outfile)\nparameters['ingest_from_file'] = outfile\nparameters['output_mode'] = 'stack'\nparameters['output_stack']['name'] = 'from_petsc'\nmod = EMaligner.EMaligner(input_data=parameters, args=[])\nmod.run()\npetsc_solved = renderapi.tilespec.get_tile_specs_from_stack(parameters[\n    'output_stack']['name'][0], render=render)\nparameters['ingest_from_file'] = ''\nparameters['output_mode'] = 'stack'\nparameters['output_stack']['name'] = 'from_scipy'\nsmod = EMaligner.EMaligner(input_data=parameters, args=[])\nsmod.run()\nscipy_solved = renderapi.tilespec.get_tile_specs_from_stack(parameters[\n    'output_stack']['name'][0], render=render)\nassert len(petsc_solved) == len(scipy_solved)\nassert np.all(np.isclose(mod.results['precision'], smod.results['precision'\n    ], rtol=10.0, atol=1e-10))\nassert np.all(np.isclose(mod.results['error'], smod.results['error'], rtol=\n    0.01, atol=1.0))\nassert np.all(np.isclose(mod.results['err'], smod.results['err'], rtol=0.01,\n    atol=0.2))\nptids = np.array([t.tileId for t in petsc_solved])\nstids = np.array([t.tileId for t in scipy_solved])\nin1d = np.intersect1d(ptids, stids)\nfor tid in in1d:\n    p = np.argwhere(ptids == tid).flatten()[0]\n    s = np.argwhere(stids == tid).flatten()[0]\n    ptf = petsc_solved[p].tforms[-1]\n    stf = scipy_solved[s].tforms[-1]\n    assert np.isclose(ptf.rotation, stf.rotation, rtol=10.0, atol=0.05)\n    assert np.all(np.isclose(ptf.scale, stf.scale, rtol=0.001, atol=0.001))\n    assert np.isclose(ptf.shear, stf.shear, rtol=0.1, atol=0.001)\n    assert np.all(np.isclose(ptf.translation, stf.translation, rtol=0.1,\n        atol=0.5))\npytest.mark.parametrize('transform', ['RotationModel', 'AffineModel'])"
}