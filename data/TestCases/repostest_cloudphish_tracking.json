{
    "functionName": "test_cloudphish_tracking",
    "className": "TestCase",
    "fileName": "/IntegralDefense_&_ACE/lib_&_saq_&_modules_&_test_cloudphish.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "from saq.modules.email import EmailAnalysis\nsaq.CONFIG['analysis_mode_email']['cleanup'] = 'no'\nself.start_api_server()\nroot = create_root_analysis(alert_type='mailbox', analysis_mode=\n    ANALYSIS_MODE_EMAIL)\nroot.initialize_storage()\nshutil.copy(os.path.join('test_data', 'emails',\n    'splunk_logging.email.rfc822'), os.path.join(root.storage_dir,\n    'email.rfc822'))\nfile_observable = root.add_observable(F_FILE, 'email.rfc822')\nfile_observable.add_directive(DIRECTIVE_ORIGINAL_EMAIL)\ntest_observable = root.add_observable(F_TEST, 'test_detection')\ntest_observable.add_directive(DIRECTIVE_TRACKED)\nroot.save()\nroot.schedule()\nanalysis_modes = [ANALYSIS_MODE_EMAIL, ANALYSIS_MODE_CLOUDPHISH,\n    ANALYSIS_MODE_CORRELATION]\nanalysis_modules = ['analysis_module_file_type',\n    'analysis_module_email_analyzer',\n    'analysis_module_mailbox_email_analyzer', 'analysis_module_cloudphish',\n    'analysis_module_cloudphish_request_analyzer',\n    'analysis_module_crawlphish', 'analysis_module_url_extraction']\nengine = TestEngine(local_analysis_modes=analysis_modes)\nengine.enable_alerting()\nfor module in analysis_modules:\n    engine.enable_module(module, analysis_modes)\nengine.enable_module('analysis_module_basic_test', ANALYSIS_MODE_CLOUDPHISH)\nengine.controlled_stop()\nengine.start()\nengine.wait()\nroot = RootAnalysis(storage_dir=storage_dir_from_uuid(root.uuid))\nroot.load()\nfile_observable = root.get_observable(file_observable.id)\nself.assertIsNotNone(file_observable)\nemail_analysis = file_observable.get_analysis(EmailAnalysis)\nself.assertTrue(bool(email_analysis))\nmessage_id = email_analysis.find_observable(lambda o: o.type == F_MESSAGE_ID)\nself.assertIsNotNone(message_id)\nc.execute(\"SELECT uuid FROM alerts WHERE tool != 'test_tool' LIMIT 1\")\nrow = c.fetchone()\ntarget_uuid = row[0]\nroot = RootAnalysis(storage_dir=storage_dir_from_uuid(target_uuid))\nroot.load()\nself.assertIsNotNone(root.find_observable(lambda o: o.type == F_MESSAGE_ID and\n    o.value == message_id.value and o.has_tag('tracked')))\nuse_db"
}