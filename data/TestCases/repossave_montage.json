{
    "functionName": "save_montage",
    "className": "Brain",
    "fileName": "/nipy_&_PySurfer/surfer_&_viz.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"Create a montage from a given order of images\n\n        Parameters\n        ----------\n        filename: string | None\n            path to final image. If None, the image will not be saved.\n        order: list\n            list of views: order of views to build montage (default\n            ``['lat', 'ven', 'med']``; nested list of views to specify\n            views in a 2-dimensional grid (e.g,\n            ``[['lat', 'ven'], ['med', 'fro']]``)\n        orientation: {'h' | 'v'}\n            montage image orientation (horizontal of vertical alignment; only\n            applies if ``order`` is a flat list)\n        border_size: int\n            Size of image border (more or less space between images)\n        colorbar: 'auto' | int | list of int | None\n            For 'auto', the colorbar is shown in the middle view (default).\n            For int or list of int, the colorbar is shown in the specified\n            views. For ``None``, no colorbar is shown.\n        row : int\n            row index of the brain to use\n        col : int\n            column index of the brain to use\n\n        Returns\n        -------\n        out : array\n            The montage image, usable with :func:`matplotlib.pyplot.imshow`.\n        \"\"\"\nassert orientation in ['h', 'v']\nif isinstance(order, (str, dict)):\n    views = [order]\nelif all(isinstance(x, (str, dict)) for x in order):\n    views = order\nelse:\n    views = []\n    orientation = []\n    for row_order in order:\n        if isinstance(row_order, (str, dict)):\n            orientation.append([len(views)])\n            views.append(row_order)\n        else:\n            orientation.append([])\n            for view in row_order:\n                orientation[-1].append(len(views))\n                views.append(view)\nif colorbar == 'auto':\n    colorbar = [len(views) // 2]\nelif isinstance(colorbar, int):\n    colorbar = [colorbar]\nbrain = self.brain_matrix[row, col]\nwith warnings.catch_warnings(record=True):\n    current_view = mlab.view(figure=brain._f)\ncolorbars = self._get_colorbars(row, col)\ncolorbars_visibility = dict()\nfor cb in colorbars:\n    if cb is not None:\n        colorbars_visibility[cb] = cb.visible\nimages = self.save_imageset(None, views, colorbar=colorbar, row=row, col=col)\nout = make_montage(filename, images, orientation, colorbar, border_size)\nif current_view is not None:\n    with warnings.catch_warnings(record=True):\n        mlab.view(*current_view, figure=brain._f)\nfor cb in colorbars:\n    if cb is not None:\n        cb.visible = colorbars_visibility[cb]\nreturn out\n"
}