{
    "functionName": "test_without_nodata",
    "className": "TestConstStrideTiles",
    "fileName": "/vfdev-5_&_ImageTilingUtils/tests_&_test_const_stride.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "def _test(im_size, ts, scale, stride, origin):\n    debug_msg = 'im_size={} ts={} scale={} stride={} origin={}\\n'.format(\n        im_size, ts, scale, stride, origin)\n    tiles = ConstStrideTiles((im_size, im_size), ts, stride=stride, scale=\n        scale, origin=(origin, origin), include_nodata=False)\n    debug_msg += 'n={}\\n'.format(len(tiles))\n    self.assertGreater(len(tiles), 0, debug_msg)\n    self.assertLess(math.sqrt(len(tiles)), 1 + (im_size - origin) * 1.0 /\n        tiles.stride[0], debug_msg)\n    extent0, out_size0 = tiles[0]\n    if origin < 0:\n        debug_msg += 'extent0={}, out_size0={}\\n'.format(extent0, out_size0)\n        self.assertEqual((extent0[0], extent0[1]), (0, 0), debug_msg)\n        self.assertLessEqual((out_size0[0], out_size0[1]), (ts, ts), debug_msg)\n        self.assertLessEqual((extent0[2], extent0[3]), (ts / scale, ts /\n            scale), debug_msg)\n    else:\n        debug_msg += 'extent0={}, out_size0={}\\n'.format(extent0, out_size0)\n        self.assertEqual((extent0[0], extent0[1]), (origin, origin), debug_msg)\n        if extent0[0] + extent0[2] < im_size:\n            self.assertEqual(out_size0[0], ts, debug_msg)\n        else:\n            pass\n        if extent0[1] + extent0[3] < im_size:\n            self.assertEqual(out_size0[1], ts, debug_msg)\n        else:\n            pass\n        self.assertLessEqual((extent0[2], extent0[3]), (ts / scale, ts /\n            scale), debug_msg)\n    for i in range(1, len(tiles)):\n        extent, _ = tiles[i]\n        prev_extent, out_size = tiles[i - 1]\n        var_debug_msg = 'i={} extent={} out_size={}\\n'.format(i, extent, _)\n        var_debug_msg += 'prev_extent={} out_size={}\\n'.format(prev_extent,\n            out_size)\n        if prev_extent[2] == tiles.tile_extent[0]:\n            if extent[0] - prev_extent[0] > 0:\n                self.assertEqual(tiles.stride[0], extent[0] - prev_extent[0\n                    ], debug_msg + var_debug_msg)\n            self.assertEqual(out_size[0], ts, debug_msg + var_debug_msg)\n        elif extent[0] - prev_extent[0] > 0:\n            if prev_extent[0] == 0 and extent[0] + extent[2] < im_size:\n                self.assertEqual(tiles.stride[1], extent[0] + extent[2] -\n                    prev_extent[0] - prev_extent[2], debug_msg + var_debug_msg)\n            elif prev_extent[0] > 0 and extent[0] + extent[2] == im_size:\n                self.assertEqual(tiles.stride[0], extent[0] - prev_extent[0\n                    ], debug_msg + var_debug_msg)\n        if prev_extent[3] == tiles.tile_extent[1]:\n            if extent[1] - prev_extent[1] > 0:\n                self.assertEqual(tiles.stride[1], extent[1] - prev_extent[1\n                    ], debug_msg + var_debug_msg)\n            else:\n                self.assertEqual(0, extent[1] - prev_extent[1], debug_msg +\n                    var_debug_msg)\n            self.assertEqual(out_size[1], ts, debug_msg + var_debug_msg)\n        elif extent[1] - prev_extent[1] > 0:\n            if prev_extent[1] == 0 and extent[1] + extent[3] < im_size:\n                self.assertEqual(tiles.stride[1], extent[1] + extent[3] -\n                    prev_extent[1] - prev_extent[3], debug_msg + var_debug_msg)\n            elif prev_extent[1] > 0 and extent[1] + extent[3] == im_size:\n                self.assertEqual(tiles.stride[1], extent[1] - prev_extent[1\n                    ], debug_msg + var_debug_msg)\n    extent, _ = tiles[-1]\n    debug_msg += 'extent={}, out_size={}\\n'.format(extent, _)\n    self.assertLess(extent[0], im_size, debug_msg)\n    self.assertLess(extent[1], im_size, debug_msg)\n    if tiles.stride[0] < tiles.tile_extent[0]:\n        self.assertEqual(extent[0] + extent[2], im_size, debug_msg)\n    else:\n        self.assertLessEqual(extent[0] + extent[2], im_size, debug_msg)\n    if tiles.stride[1] < tiles.tile_extent[1]:\n        self.assertEqual(extent[1] + extent[3], im_size, debug_msg)\n    else:\n        self.assertLessEqual(extent[1] + extent[3], im_size, debug_msg)\nfor scale in [0.7, 0.89, 0.99, 1.0, 1.78, 2.12]:\n    for im_size in range(100, 120):\n        for ext in range(32, int(im_size * scale) - 1, 3):\n            for stride in range(int(ext * scale) // 2, int(ext * scale) + 10, 5\n                ):\n                for origin in range(-5, 5):\n                    _test(im_size, ext, scale, stride, origin)\n"
}