{
    "functionName": "test_create_key_pair",
    "className": "TestProxyKmipClient",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_pie_&_test_client.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that an asymmetric key pair can be created with proper inputs\n        and that the UIDs of the public and private keys are returned\n        properly.\n        \"\"\"\nalgorithm = enums.CryptographicAlgorithm.RSA\nlength = 2048\nalgorithm_attribute = self.attribute_factory.create_attribute(enums.\n    AttributeType.CRYPTOGRAPHIC_ALGORITHM, algorithm)\nlength_attribute = self.attribute_factory.create_attribute(enums.\n    AttributeType.CRYPTOGRAPHIC_LENGTH, length)\nattributes = [algorithm_attribute, length_attribute]\ntemplate = obj.TemplateAttribute(attributes=attributes, tag=enums.Tags.\n    COMMON_TEMPLATE_ATTRIBUTE)\nstatus = enums.ResultStatus.SUCCESS\nresult = results.CreateKeyPairResult(contents.ResultStatus(status),\n    public_key_uuid='aaaaaaaa-1111-2222-3333-ffffffffffff',\n    private_key_uuid='ffffffff-3333-2222-1111-aaaaaaaaaaaa')\nwith ProxyKmipClient() as client:\n    client.proxy.create_key_pair.return_value = result\n    public_uid, private_uid = client.create_key_pair(enums.\n        CryptographicAlgorithm.RSA, 2048)\n    kwargs = {'common_template_attribute': template,\n        'private_key_template_attribute': None,\n        'public_key_template_attribute': None}\n    client.proxy.create_key_pair.assert_called_with(**kwargs)\n    self.assertIsInstance(public_uid, six.string_types)\n    self.assertIsInstance(private_uid, six.string_types)\nmock.patch('kmip.pie.client.KMIPProxy', mock.MagicMock(spec_set=KMIPProxy))"
}