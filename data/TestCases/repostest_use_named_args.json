{
    "functionName": "test_use_named_args",
    "className": null,
    "fileName": "/bytesandbrains_&_ProcessOptimizer/ProcessOptimizer_&_tests_&_test_utils.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n    Test the function wrapper @use_named_args which is used\n    for wrapping an objective function with named args so it\n    can be called by the optimizers which only pass a single\n    list as the arg.\n\n    This test does not actually use the optimizers but merely\n    simulates how they would call the function.\n    \"\"\"\ndim1 = Real(name='foo', low=0.0, high=1.0)\ndim2 = Real(name='bar', low=0.0, high=1.0)\ndim3 = Real(name='baz', low=0.0, high=1.0)\ndimensions = [dim1, dim2, dim3]\ndefault_parameters = [0.5, 0.6, 0.8]\n@use_named_args(dimensions=dimensions)\ndef func(foo, bar, baz):\n    assert foo == default_parameters[0]\n    assert bar == default_parameters[1]\n    assert baz == default_parameters[2]\n    return foo ** 2 + bar ** 4 + baz ** 8\nres = func(x=default_parameters)\nassert isinstance(res, float)\nres = func(default_parameters)\nassert isinstance(res, float)\nres = func(x=np.array(default_parameters))\nassert isinstance(res, float)\nres = func(np.array(default_parameters))\nassert isinstance(res, float)\npytest.mark.fast_test"
}