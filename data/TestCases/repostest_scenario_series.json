{
    "functionName": "test_scenario_series",
    "className": "TestScenarios",
    "fileName": "/JohnVolk_&_PRMS-Python/test_&_test_prms_python.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"create_many_simulations should create many simulation directories and correct data\"\"\"\ns = ScenarioSeries(self.test_model_data_dir, self.scenarios_dir, title=\n    'scenario series uno', description=\n    \"\"\"\nEach scenario is given a title with the schema\n'\"<param_name1>\":<scale_value1>|\"<param_name2>\":<scale_value2>', which can be\neasily parsed into a Python dictionary later. We use the pipe instead of\ncomma for easier visual inspection, though this is entirely up to the\nuser/developer. The scenario consists of parameters scaled for each of the\nspecified parameters.\n\"\"\"\n    )\ndef _scale_param(val):\n\n    def scale_by_val(x):\n        return x * val\n    return scale_by_val\nscale_arange = np.arange(0.7, 0.9, 0.1)\nseries_funs = [{'title': '\"rad_trncf\":{0:.1f}|\"snow_adj\":{0:.1f}'.format(\n    val), 'rad_trncf': _scale_param(val), 'snow_adj': _scale_param(val)} for\n    val in scale_arange]\ns.build(series_funs)\ng_series = glob.glob(os.path.join(self.scenarios_dir, '*'))\nassert len(g_series) == 5, g_series\nuuid_pattern = re.compile(\n    '^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$')\nuuid_dir_count = 0\nnon_uuid_dir_count = 0\nseries_dirs = []\nfound_metadata = False\nfor d in g_series:\n    if os.path.isdir(d):\n        assert_valid_input_dir(self, os.path.join(d))\n        if re.match(uuid_pattern, os.path.basename(d)):\n            uuid_dir_count += 1\n            assert re.match(uuid_pattern, os.path.basename(d)\n                ), os.path.basename(d)\n        else:\n            non_uuid_dir_count += 1\n    else:\n        found_metadata = True\n        series_dirs.append(d)\nassert uuid_dir_count == 3\nassert non_uuid_dir_count == 1\nassert found_metadata\ns.run()\ng_series = glob.glob(os.path.join(self.scenarios_dir, '*'))\nseries_md_path = os.path.join(self.scenarios_dir, 'series_metadata.json')\nself.assertIn(series_md_path, g_series)\nseries_md = json.loads(open(series_md_path).read())\ndir_titles = series_md['uuid_title_map']\ntitles = dir_titles.values()\nassert '\"rad_trncf\":0.7|\"snow_adj\":0.7' in titles\nassert '\"rad_trncf\":0.8|\"snow_adj\":0.8' in titles\nassert '\"rad_trncf\":0.9|\"snow_adj\":0.9' in titles\np_base = Parameters(os.path.join(self.test_model_data_dir, 'parameters'))\nfor g in g_series:\n    if os.path.isdir(g) and 'input' not in g:\n        assert_valid_output_dir(self, os.path.join(g, 'outputs'))\n        md = json.loads(open(os.path.join(g, 'metadata.json')).read())\n        title = md['title']\n        scale_vals = eval('{' + title.replace('|', ',') + '}')\n        p_scen = Parameters(os.path.join(g, 'inputs', 'parameters'))\n        rad_base = p_base['rad_trncf']\n        rad_scen = p_scen['rad_trncf']\n        snow_base = p_base['snow_adj']\n        snow_scen = p_scen['snow_adj']\n        assert_array_almost_equal(rad_base * scale_vals['rad_trncf'], rad_scen)\n        assert_array_almost_equal(snow_base * scale_vals['snow_adj'], snow_scen\n            )\n"
}