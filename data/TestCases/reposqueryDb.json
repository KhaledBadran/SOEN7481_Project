{
    "functionName": "queryDb",
    "className": null,
    "fileName": "/FaradayRF_&_Faraday-Software/faraday_&_telemetry.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"\n    Takes in parameters to query the SQLite database, returns the results\n\n    Performs a SQL query to retrieve data from specific times, stations, or\n    ranges of time. Returns all results as a list of JSON dictionaries.\n    Parameters:\n    \"CALLSIGN\":Uppercase callsign\n    \"NODEID\": Node ID\n    \"LIMIT\": Number of SQL rows to return\n    \"DIRECTION\": Specify if callsign-nodeid to search is local (0) or remote (1)\n    \"STARTTIME\": ISO8601 time to start search\n    \"ENDTIME\": ISO8601 time to end search\n    \"TIMESPAN\": Number of seconds to search over, ending at current time\n\n    :param parameters: Search parameter dictionary\n    :return: List of SQL output where each item is a dictionary, empty list when error\n    \"\"\"\nsqlData = []\ntimeTuple = generateStartStopTimes(parameters)\ncallsign = parameters['CALLSIGN']\nnodeid = parameters['NODEID']\nlimit = parameters['LIMIT']\ntry:\n    if timeTuple is None:\n        raise StandardError('Start and Stop times caused and error')\nexcept StandardError as e:\n    logger.error('StandardError: ' + str(e))\n    return sqlData\nif parameters['DIRECTION'] == 0:\n    sqlWhereCall = 'WHERE SOURCECALLSIGN LIKE ? '\n    sqlWhereID = 'AND SOURCEID LIKE ? '\nelse:\n    sqlWhereCall = 'WHERE DESTINATIONCALLSIGN LIKE ? '\n    sqlWhereID = 'AND DESTINATIONID LIKE ? '\nsqlBeg = 'SELECT * FROM TELEMETRY '\nsqlEpoch = 'AND EPOCH BETWEEN ? AND ? '\nsqlEnd = 'ORDER BY KEYID DESC'\nif limit is not None:\n    sqlEnd = sqlEnd + ' LIMIT ?'\n    paramTuple = (callsign, nodeid) + timeTuple + (limit,)\nelse:\n    paramTuple = (callsign, nodeid) + timeTuple\nsql = sqlBeg + sqlWhereCall + sqlWhereID + sqlEpoch + sqlEnd\nlogger.debug(sql)\ntry:\n    queryConn = openDB()\nexcept sqlite3.Error as e:\n    logger.error('Sqlite3.Error: ' + str(e))\n    logger.error(paramTuple)\n    return sqlData\nqueryConn.row_factory = sqlite3.Row\ncur = queryConn.cursor()\ntry:\n    cur.execute(sql, paramTuple)\nexcept sqlite3.Error as e:\n    logger.error('Sqlite3.Error: ' + str(e))\n    logger.error(paramTuple)\n    queryConn.close()\n    return sqlData\ntry:\n    rows = cur.fetchall()\n    for row in rows:\n        rowData = {}\n        for parameter in row.keys():\n            rowData[parameter] = row[parameter]\n        sqlData.append(rowData)\nexcept StandardError as e:\n    logger.error('StandardError: ' + str(e))\n    queryConn.close()\n    return sqlData\nqueryConn.close()\nreturn sqlData\n"
}