{
    "functionName": "test_delete_attribute_with_kmip_2_0",
    "className": "TestKmipEngine",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_services_&_server_&_test_engine.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that a DeleteAttribute request can be processed correctly\n        when using KMIP 2.0 payload features.\n        \"\"\"\ne = engine.KmipEngine()\ne._protocol_version = contents.ProtocolVersion(2, 0)\ne._data_store = self.engine\ne._data_store_session_factory = self.session_factory\ne._data_session = e._data_store_session_factory()\ne._is_allowed_by_operation_policy = mock.Mock(return_value=True)\ne._logger = mock.MagicMock()\nattribute_factory = factory.AttributeFactory()\nsecret = pie_objects.SymmetricKey(enums.CryptographicAlgorithm.AES, 0, b'')\nobject_group = attribute_factory.create_attribute(enums.AttributeType.\n    OBJECT_GROUP, 'Object Group 1')\ne._data_session.add(secret)\ne._set_attribute_on_managed_object(secret, ('Object Group', [object_group.\n    attribute_value]))\ne._data_session.commit()\ne._data_session = e._data_store_session_factory()\nmanaged_object = e._get_object_with_access_controls('1', enums.Operation.\n    DELETE_ATTRIBUTE)\nself.assertEqual(1, len(managed_object.names))\nself.assertEqual(1, len(managed_object.object_groups))\npayload = payloads.DeleteAttributeRequestPayload(unique_identifier='1',\n    current_attribute=objects.CurrentAttribute(attribute=primitives.\n    TextString(value='Object Group 1', tag=enums.Tags.OBJECT_GROUP)),\n    attribute_reference=objects.AttributeReference(vendor_identification=\n    'Vendor 1', attribute_name='Object Group'))\nresponse_payload = e._process_delete_attribute(payload)\ne._data_session.commit()\ne._data_session = e._data_store_session_factory()\ne._logger.info.assert_any_call('Processing operation: DeleteAttribute')\nself.assertEqual('1', response_payload.unique_identifier)\nself.assertIsNone(response_payload.attribute)\nmanaged_object = e._get_object_with_access_controls(response_payload.\n    unique_identifier, enums.Operation.DELETE_ATTRIBUTE)\nself.assertEqual(0, len(managed_object.object_groups))\npayload = payloads.DeleteAttributeRequestPayload(unique_identifier='1',\n    attribute_reference=objects.AttributeReference(vendor_identification=\n    'Vendor 1', attribute_name='Name'))\nresponse_payload = e._process_delete_attribute(payload)\ne._data_session.commit()\ne._data_session = e._data_store_session_factory()\ne._logger.info.assert_any_call('Processing operation: DeleteAttribute')\nself.assertEqual('1', response_payload.unique_identifier)\nself.assertIsNone(response_payload.attribute)\nmanaged_object = e._get_object_with_access_controls(response_payload.\n    unique_identifier, enums.Operation.DELETE_ATTRIBUTE)\nself.assertEqual(0, len(managed_object.names))\n"
}