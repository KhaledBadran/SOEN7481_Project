{
    "functionName": "test_move_and_merge_fasta",
    "className": "TestMEME",
    "fileName": "/Sung-Huan_&_ANNOgesic/tests_&_test_meme.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "me.del_repeat_fasta = Mock_func().mock_del_repeat_fasta\nif not os.path.exists('tmp'):\n    os.mkdir('tmp')\ngen_file('tmp/primary.fa', 'primary')\ngen_file('tmp/secondary.fa', 'secondary')\ngen_file('tmp/internal.fa', 'internal')\ngen_file('tmp/antisense.fa', 'antisense')\ngen_file('tmp/orphan.fa', 'orphan')\nself.meme._move_and_merge_fasta(self.test_folder, 'test')\nself.assertTrue(os.path.exists(os.path.join(self.test_folder,\n    'test_allgenome_all_types.fa')))\nself.assertTrue(os.path.exists(os.path.join(self.test_folder,\n    'test_allgenome_primary.fa')))\nself.assertTrue(os.path.exists(os.path.join(self.test_folder,\n    'test_allgenome_secondary.fa')))\nself.assertTrue(os.path.exists(os.path.join(self.test_folder,\n    'test_allgenome_internal.fa')))\nself.assertTrue(os.path.exists(os.path.join(self.test_folder,\n    'test_allgenome_antisense.fa')))\nself.assertTrue(os.path.exists(os.path.join(self.test_folder,\n    'test_allgenome_orphan.fa')))\nself.assertTrue(os.path.exists(os.path.join(self.test_folder,\n    'test_allgenome_without_orphan.fa')))\n"
}