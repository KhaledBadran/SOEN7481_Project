{
    "functionName": "_test_load_file",
    "className": "LoadAzureTestCase",
    "fileName": "/joshuaprince_&_Contrail/test_&_loader_&_loaders_&_azure_&_test_load_azure.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Helper function to the two above tests. Actually runs the test on the data specified.\n\n        Sample file contains 7 meters: 1 is a SQL Database (not loaded), 6 are the following:\n          - F2/F2s Windows Low Priority in US West 2 @ 0.0766\n          - M32s Linux Low Priority (does not have a corresponding Capability info, not loaded)\n          - A6 Windows in AP Southeast @ 0.64\n          - F2s v2 Linux Low Priority in US West 2 @ 0.017\n          - D32 v3/D32s v3 Linux Low Priority in US Central @ 0.352\n          - F4/F4s Linux in US Gov AZ @ 0.239\n\n        :param file: The file to load, as a dict. May or may not contain Capability information\n        \"\"\"\nAzureLoader.load(filename='Azure/US/2019-05-06T03:55:18.174709.json.gz',\n    json=file, last_modified='2019-04-15T03:55:18.174709', db=self.test_db)\nself.assertEqual(InstanceData.objects_in(self.test_db).filter(provider=\n    'Azure').count(), 5)\nself.assertEqual(InstanceData.objects_in(self.test_db).filter(instanceType=\n    'F2/F2s').count(), 1)\nself.assertEqual(InstanceData.objects_in(self.test_db).filter(instanceType=\n    'S3 Secondary DTUs').count(), 0)\nself.assertEqual(InstanceData.objects_in(self.test_db).filter(instanceType=\n    'M32s').count(), 0)\nself.assertEqual(InstanceData.objects_in(self.test_db).filter(instanceType=\n    'A6 Basic').count(), 1)\nself.assertEqual(InstanceData.objects_in(self.test_db).filter(instanceType=\n    'F2s v2').count(), 1)\nself.assertEqual(InstanceData.objects_in(self.test_db).filter(instanceType=\n    'D32 v3/D32s v3').count(), 1)\nself.assertEqual(InstanceData.objects_in(self.test_db).filter(instanceType=\n    'F4/F4s').count(), 1)\nf2s = InstanceData.objects_in(self.test_db).filter(instanceType='F2s v2')[0]\nself.assertEqual(f2s.pricePerHour, 0.017)\nself.assertEqual(f2s.priceUpfront, 0)\nself.assertEqual(f2s.region, 'US West 2')\nself.assertEqual(f2s.priceType, 'Spot')\nself.assertEqual(f2s.vcpu, 2)\nself.assertEqual(f2s.memory, 4)\nif 'Capabilities' in file:\n    self.assertEqual(f2s.maxResourceVolumeMb, 16384)\n    self.assertEqual(f2s.osVhdSizeMb, 1047552)\n    self.assertEqual(f2s.hyperVGenerations, 'V1,V2')\n    self.assertEqual(f2s.maxDataDiskCount, 4)\n    self.assertTrue(f2s.lowPriorityCapable)\n    self.assertTrue(f2s.premiumIo)\n    self.assertEqual(f2s.vcpusAvailable, 2)\n    self.assertEqual(f2s.acus, 195)\nd32 = InstanceData.objects_in(self.test_db).filter(instanceType=\n    'D32 v3/D32s v3')[0]\nself.assertEqual(d32.pricePerHour, 0.352)\nself.assertEqual(d32.vcpu, 32)\nself.assertEqual(d32.memory, 128)\nself.assertFalse(d32.premiumIo)\n"
}