{
    "functionName": "__test_dict",
    "className": "RedisDictTestCase",
    "fileName": "/wo1fsea_&_PyEasyRPC/tests_&_test_redis_collections_&_test_dict.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "data = {'int': 1, 'float': 2.0, 'string': 'string', 'dict': {'int': 1,\n    'float': 2.0, 'string': 'string'}, 'list': [0, '1', 2.0, 3], 'tuple': (\n    0, '1', 2.0, 3) if packer is PicklePacker else [0, '1', 2.0, 3]}\nd = Dict(redis_key, packer)\nd2 = Dict(redis_key, packer)\nd.clear()\nself.assertEqual(len(d), 0)\nd['int'] = data['int']\nd['float'] = data['float']\nd['string'] = data['string']\nself.assertEqual(len(d), 3)\nd['dict'] = data['dict']\nd['list'] = data['list']\nd['tuple'] = data['tuple']\nself.assertEqual(len(d), 6)\nself.assertEqual(d.get('not found'), None)\nself.assertEqual(d.get('not found', None), None)\nself.assertEqual(d.get('not found', 1), 1)\nd['found'] = 'found'\nself.assertEqual('found' in d, True)\nself.assertEqual('found' not in d, False)\nself.assertEqual(d.get('found'), 'found')\nself.assertEqual(d.setdefault('found', None), 'found')\nself.assertEqual(d.setdefault('not found', 'not found'), 'not found')\nself.assertEqual(d.get('not found'), 'not found')\ndel d['not found']\ndel d['found']\nwith self.assertRaises(KeyError) as context:\n    del d['not found']\nself.assertEqual('found' in d, False)\nself.assertEqual('found' not in d, True)\nself.assertEqual(d.get('found'), None)\nself.assertEqual(d['int'], data['int'])\nself.assertEqual(d['float'], data['float'])\nself.assertEqual(d['string'], data['string'])\nself.assertEqual(d['dict'], data['dict'])\nself.assertSequenceEqual(d['list'], data['list'])\nself.assertSequenceEqual(d['tuple'], data['tuple'])\nself.assertSequenceEqual(sorted(d.keys()), sorted(data.keys()))\nself.assertSequenceEqual(sorted(d), sorted(data.keys()))\nself.assertTrue(all(map(lambda x: x in data.values(), d.values())))\nself.assertTrue(all(map(lambda x: x in d.values(), data.values())))\nself.assertTrue(all(map(lambda x: x in data.items(), d.items())))\nself.assertTrue(all(map(lambda x: x in d.items(), data.items())))\nself.assertEqual(d.Redis_Type, d.get_type())\nself.assertEqual(d2['int'], data['int'])\nself.assertEqual(d2['float'], data['float'])\nself.assertEqual(d2['string'], data['string'])\nself.assertEqual(d2['dict'], data['dict'])\nself.assertSequenceEqual(d2['list'], data['list'])\nself.assertSequenceEqual(d2['tuple'], data['tuple'])\nself.assertEqual(d.pop('int'), 1)\nwith self.assertRaises(KeyError) as context:\n    d.pop('int')\nself.assertTrue(isinstance(context.exception, KeyError))\nself.assertEqual(d.pop('int', None), None)\nself.assertEqual(d2, d.data)\nd.set_raw('count', 1)\nd.increase_by('count', 10)\nself.assertEqual(int(d.get_raw('count')), 11)\nd.increase_by('count', 0.5)\nself.assertEqual(float(d.get_raw('count')), 11.5)\nwith self.assertRaises(TypeError) as context:\n    d.increase_by('count', '1')\nself.assertEqual(d, d.copy())\nd2.clear()\nself.assertEqual(len(d), 0)\n"
}