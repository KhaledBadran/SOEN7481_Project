{
    "functionName": "test_public_key_register_get_destroy",
    "className": "TestIntegration",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_integration_&_services_&_test_integration.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Tests that public keys are properly registered, retrieved,\n        and destroyed.\n        \"\"\"\npub_key_object_type = ObjectType.PUBLIC_KEY\nmask_flags = [CryptographicUsageMask.ENCRYPT, CryptographicUsageMask.DECRYPT]\nattribute_type = AttributeType.CRYPTOGRAPHIC_USAGE_MASK\nusage_mask = self.attr_factory.create_attribute(attribute_type, mask_flags)\nname = Attribute.AttributeName('Name')\nkey_name = 'Integration Test - Register-Get-Destroy Key -'\npub_name_value = Name.NameValue(key_name + ' Public')\nname_type = Name.NameType(NameType.UNINTERPRETED_TEXT_STRING)\npub_value = Name(name_value=pub_name_value, name_type=name_type)\npub_name = Attribute(attribute_name=name, attribute_value=pub_value)\npub_key_attributes = [usage_mask, pub_name]\npublic_template_attribute = TemplateAttribute(attributes=pub_key_attributes)\nkey_format_type = KeyFormatType(KeyFormatTypeEnum.RAW)\nkey_data = (\n    b\"0\\x81\\x9f0\\r\\x06\\t*\\x86H\\x86\\xf7\\r\\x01\\x01\\x01\\x05\\x00\\x03\\x81\\x8d\\x000\\x81\\x89\\x02\\x81\\x81\\x00\\x93\\x04Q\\xc9\\xec\\xd9O[\\xb9\\xda\\x17\\xdd\\t8\\x1b\\xd2;\\xe4>\\xca\\x8cu9\\xf3\\x01\\xfc\\x8a\\x8c\\xd5\\xd5'L>v\\x99\\xdb\\xdcq\\x1c\\x97\\xa7\\xaa\\x91\\xe2\\xc5\\n\\x82\\xbd\\x0b\\x104\\xf0\\xdfI=\\xec\\x166$'\\xe5\\x8a\\xcc\\xe7\\xf6\\xce\\x0f\\x9b\\xcca{\\xbd\\x8c\\x90\\xd0\\tJ'\\x03\\xba\\r\\t\\xeb\\x19\\xd1\\x00_/\\xb2eRj\\xacu\\xaf2\\xf8\\xbcx,\\xde\\xd2\\xa5\\x7f\\x81\\x1e\\x03\\xea\\xf6z\\x94M\\xe5\\xe7\\x84\\x13\\xdc\\xa8\\xf22\\xd0t\\xe6\\xdc\\xeaL\\xec\\x9f\\x02\\x03\\x01\\x00\\x01\"\n    )\nkey_material = KeyMaterial(key_data)\nkey_value = KeyValue(key_material)\nalgorithm_value = CryptoAlgorithmEnum.RSA\ncryptographic_algorithm = CryptographicAlgorithm(algorithm_value)\ncryptographic_length = CryptographicLength(2048)\nkey_block = KeyBlock(key_format_type=key_format_type, key_compression_type=\n    None, key_value=key_value, cryptographic_algorithm=\n    cryptographic_algorithm, cryptographic_length=cryptographic_length,\n    key_wrapping_data=None)\npub_secret = PublicKey(key_block)\npub_key_result = self.client.register(pub_key_object_type,\n    public_template_attribute, pub_secret, credential=None)\nself._check_result_status(pub_key_result, ResultStatus, ResultStatus.SUCCESS)\npub_uuid = pub_key_result.uuid\npub_key_result = self.client.get(uuid=pub_uuid, credential=None)\nself._check_result_status(pub_key_result, ResultStatus, ResultStatus.SUCCESS)\nself._check_object_type(pub_key_result.object_type, ObjectType, ObjectType.\n    PUBLIC_KEY)\nself._check_uuid(pub_key_result.uuid, str)\npub_secret = pub_key_result.secret\npub_expected = PublicKey\nself.assertIsInstance(pub_secret, pub_expected)\npub_key_block = pub_key_result.secret.key_block\npub_key_value = pub_key_block.key_value\npub_key_material = pub_key_value.key_material\nexpected = key_data\npub_observed = pub_key_material.value\nself.assertEqual(expected, pub_observed)\nself.logger.debug('Destroying key: ' + key_name + ' Public' +\n    '\\nWith \" \"UUID: ' + pub_key_result.uuid)\npub_result = self.client.destroy(pub_key_result.uuid)\nself._check_result_status(pub_result, ResultStatus, ResultStatus.SUCCESS)\nself._check_uuid(pub_result.uuid.value, str)\npub_key_destroyed_result = self.client.get(uuid=pub_uuid, credential=None)\nself._check_result_status(pub_key_destroyed_result, ResultStatus,\n    ResultStatus.OPERATION_FAILED)\nexpected = ResultReason\npub_observed = type(pub_key_destroyed_result.result_reason.value)\nself.assertEqual(expected, pub_observed)\n"
}