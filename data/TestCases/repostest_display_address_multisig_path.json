{
    "functionName": "test_display_address_multisig_path",
    "className": "TestDisplayAddress",
    "fileName": "/bitcoin-core_&_HWI/test_&_test_device.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "supports_multisig = {'trezor_1', 'keepkey', 'coldcard', 'trezor_t'}\nif self.full_type not in supports_multisig:\n    return\nkeypool_desc = self.do_command(self.dev_args + ['getkeypool', '--sh_wpkh',\n    '40', '50'])\nimport_result = self.wrpc.importmulti(keypool_desc)\nself.assertTrue(import_result[0]['success'])\nkeypool_desc = self.do_command(self.dev_args + ['getkeypool', '--sh_wpkh',\n    '--internal', '40', '50'])\nimport_result = self.wrpc.importmulti(keypool_desc)\nself.assertTrue(import_result[0]['success'])\nsh_wpkh_addr = self.wrpc.getnewaddress('', 'p2sh-segwit')\nwpkh_addr = self.wrpc.getnewaddress('', 'bech32')\npkh_addr = self.wrpc.getnewaddress('', 'legacy')\nself.wrpc.importaddress(wpkh_addr)\nself.wrpc.importaddress(pkh_addr)\nsh_wpkh_info = self.wrpc.getaddressinfo(sh_wpkh_addr)\nwpkh_info = self.wrpc.getaddressinfo(wpkh_addr)\npkh_info = self.wrpc.getaddressinfo(pkh_addr)\npubkeys = [sh_wpkh_info['desc'][8:-11], wpkh_info['desc'][5:-10], pkh_info[\n    'desc'][4:-10]]\nsh_multi_desc = self.wrpc.getdescriptorinfo('sh(sortedmulti(2,' + pubkeys[0\n    ] + ',' + pubkeys[1] + ',' + pubkeys[2] + '))')['descriptor']\nsh_wsh_multi_desc = self.wrpc.getdescriptorinfo('sh(wsh(sortedmulti(2,' +\n    pubkeys[0] + ',' + pubkeys[1] + ',' + pubkeys[2] + ')))')['descriptor']\nwsh_multi_desc = self.wrpc.getdescriptorinfo('wsh(sortedmulti(2,' + pubkeys\n    [2] + ',' + pubkeys[1] + ',' + pubkeys[0] + '))')['descriptor']\nsh_multi_import = {'desc': sh_multi_desc, 'timestamp': 'now', 'label':\n    'shmulti-display'}\nsh_wsh_multi_import = {'desc': sh_wsh_multi_desc, 'timestamp': 'now',\n    'label': 'shwshmulti-display'}\nwsh_multi_import = {'desc': wsh_multi_desc, 'timestamp': 'now', 'label':\n    'wshmulti-display'}\nmulti_result = self.wrpc.importmulti([sh_multi_import, sh_wsh_multi_import,\n    wsh_multi_import])\nself.assertTrue(multi_result[0]['success'])\nself.assertTrue(multi_result[1]['success'])\nself.assertTrue(multi_result[2]['success'])\nsh_multi_addr = self.wrpc.getaddressesbylabel('shmulti-display').popitem()[0]\nsh_wsh_multi_addr = self.wrpc.getaddressesbylabel('shwshmulti-display'\n    ).popitem()[0]\nwsh_multi_addr = self.wrpc.getaddressesbylabel('wshmulti-display').popitem()[0]\nsh_multi_addr_redeem_script = self.wrpc.getaddressinfo(sh_multi_addr)['hex']\nsh_wsh_multi_addr_redeem_script = self.wrpc.getaddressinfo(sh_multi_addr)['hex'\n    ]\nwsh_multi_addr_redeem_script = self.wrpc.getaddressinfo(sh_multi_addr)['hex']\npath = pubkeys[2][1:24] + ',' + pubkeys[1][1:24] + ',' + pubkeys[0][1:24]\npath = path.replace(\"'\", 'h')\nresult = self.do_command(self.dev_args + ['displayaddress', '--path', path,\n    '--redeem_script', sh_multi_addr_redeem_script])\nself.assertNotIn('error', result)\nself.assertNotIn('code', result)\nself.assertIn('address', result)\nself.assertEqual(sh_multi_addr, result['address'])\nresult = self.do_command(self.dev_args + ['displayaddress', '--sh_wpkh',\n    '--path', path, '--redeem_script', sh_wsh_multi_addr_redeem_script])\nself.assertNotIn('error', result)\nself.assertNotIn('code', result)\nself.assertIn('address', result)\nself.assertEqual(sh_wsh_multi_addr, result['address'])\nresult = self.do_command(self.dev_args + ['displayaddress', '--wpkh',\n    '--path', path, '--redeem_script', wsh_multi_addr_redeem_script])\nself.assertNotIn('error', result)\nself.assertNotIn('code', result)\nself.assertIn('address', result)\nself.assertEqual(wsh_multi_addr[4:58], result['address'][2:56])\n"
}