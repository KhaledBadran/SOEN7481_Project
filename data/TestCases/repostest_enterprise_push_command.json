{
    "functionName": "test_enterprise_push_command",
    "className": "TestEnterprise",
    "fileName": "/Keeper-Security_&_Commander/unit-tests_&_test_command_enterprise.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "params = get_connected_params()\napi.query_enterprise(params)\ncmd = enterprise.EnterprisePushCommand()\ntemplate_body = \"\"\"\n[\n    {\n        \"title\": \"Record For ${user_name}\",\n        \"login\": \"${user_email}\",\n        \"password\": \"${generate_password}\",\n        \"login_url\": \"https://keepersecurity.com\",\n        \"notes\": \"notes\",\n        \"custom_fields\": {\n            \"key1\": \"value1\",\n            \"key2\": \"${user_email}\"\n        }\n    },\n    {\n        \"title\": \"Empty record\"\n    }\n\n]\"\"\"\ntemplates = json.loads(template_body)\nvalues = {'user_name': api.generate_record_uid(), 'generate_password': api.\n    generate_record_uid(), 'user_email': api.generate_record_uid()}\ncmd.enumerate_and_substitute_dict_fields(templates[0], values)\ncmd.enumerate_and_substitute_dict_fields(templates[1], values)\nself.assertEqual(templates[0]['title'], 'Record For {0}'.format(values[\n    'user_name']))\nself.assertEqual(templates[0]['password'], values['generate_password'])\nself.assertEqual(templates[0]['custom_fields']['key2'], values['user_email'])\nself.assertEqual(templates[1]['title'], 'Empty record')\nwith self.assertRaises(CommandError):\n    cmd.execute(params, file='template.json')\nwith self.assertRaises(CommandError):\n    cmd.execute(params, user=[ent_env.user2_email])\ndef get_public_keys(_params, emails):\n    for email in emails:\n        emails[email] = vault_env.public_key\nwith mock.patch('builtins.open', mock.mock_open(read_data=template_body)\n    ), mock.patch('os.path.abspath', return_value='template.json'), mock.patch(\n    'os.path.isfile', return_value=True), mock.patch(\n    'keepercommander.commands.enterprise.EnterpriseCommand.get_public_keys'\n    ) as m_pk:\n    m_pk.side_effect = get_public_keys\n    TestEnterprise.expected_commands = ['execute']\n    cmd.execute(params, file='template.json', team=[ent_env.team1_name])\n    self.assertEqual(len(TestEnterprise.expected_commands), 0)\n    TestEnterprise.expected_commands = ['execute']\n    cmd.execute(params, file='template.json', user=[ent_env.user2_email])\n    self.assertEqual(len(TestEnterprise.expected_commands), 0)\n"
}