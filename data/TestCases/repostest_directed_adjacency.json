{
    "functionName": "test_directed_adjacency",
    "className": null,
    "fileName": "/Silmathoron_&_NNGT/testing_&_test_basics.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\" Check directed adjacency matrix \"\"\"\nnum_nodes = 5\nedge_list = [(0, 1), (0, 3), (1, 3), (2, 0), (3, 2), (3, 4), (4, 2)]\nweights = [0.54881, 0.71518, 0.60276, 0.54488, 0.42365, 0.64589, 0.43758]\netypes = [-1, 1, 1, -1, -1, 1, 1]\ng = nngt.Graph(num_nodes)\ng.new_edges(edge_list, attributes={'weight': weights})\ng.new_edge_attribute('type', 'int', values=etypes)\nadj_mat = np.array([[0, 1, 0, 1, 0], [0, 0, 0, 1, 0], [1, 0, 0, 0, 0], [0, \n    0, 1, 0, 1], [0, 0, 1, 0, 0]])\nassert np.all(np.isclose(g.adjacency_matrix(weights=False).todense(), adj_mat))\nw_mat = np.array([[0, 0.54881, 0, 0.71518, 0], [0, 0, 0, 0.60276, 0], [\n    0.54488, 0, 0, 0, 0], [0, 0, 0.42365, 0, 0.64589], [0, 0, 0.43758, 0, 0]])\nassert np.all(np.isclose(g.adjacency_matrix(weights=True).todense(), w_mat))\ntpd_mat = np.array([[0, -1, 0, 1, 0], [0, 0, 0, 1, 0], [-1, 0, 0, 0, 0], [0,\n    0, -1, 0, 1], [0, 0, 1, 0, 0]])\nassert np.all(np.isclose(g.adjacency_matrix(types=True).todense(), tpd_mat))\nwt_mat = np.array([[0, -0.54881, 0, 0.71518, 0], [0, 0, 0, 0.60276, 0], [-\n    0.54488, 0, 0, 0, 0], [0, 0, -0.42365, 0, 0.64589], [0, 0, 0.43758, 0, 0]])\nassert np.all(np.isclose(g.adjacency_matrix(types=True, weights=True).\n    todense(), wt_mat))\nnum_nodes = 5\nedge_list = [(0, 1), (0, 3), (1, 3), (2, 0), (3, 2), (3, 4), (4, 2)]\nweights = [0.54881, 0.71518, 0.60276, 0.54488, 0.42365, 0.64589, 0.43758]\ninh = nngt.NeuralGroup([0, 2, 4], neuron_type=-1, name='inh')\nexc = nngt.NeuralGroup([1, 3], neuron_type=1, name='exc')\npop = nngt.NeuralPop.from_groups((inh, exc), with_models=False)\nnet = nngt.Network(population=pop)\nnet.new_edges(edge_list, attributes={'weight': weights})\ng = nngt.Graph(num_nodes)\ng.new_node_attribute('type', 'int', values=[-1, 1, -1, 1, -1])\ng.new_edges(edge_list, attributes={'weight': weights})\ntpd_mat = np.array([[0, -1, 0, -1, 0], [0, 0, 0, 1, 0], [-1, 0, 0, 0, 0], [\n    0, 0, 1, 0, 1], [0, 0, -1, 0, 0]])\nassert np.all(np.isclose(net.adjacency_matrix(types=True).todense(), tpd_mat))\nassert np.all(np.isclose(g.adjacency_matrix(types=True).todense(), tpd_mat))\nwt_mat = np.array([[0, -0.54881, 0, -0.71518, 0], [0, 0, 0, 0.60276, 0], [-\n    0.54488, 0, 0, 0, 0], [0, 0, 0.42365, 0, 0.64589], [0, 0, -0.43758, 0, 0]])\nassert np.all(np.isclose(net.adjacency_matrix(types=True, weights=True).\n    todense(), wt_mat))\nassert np.all(np.isclose(g.adjacency_matrix(types=True, weights=True).\n    todense(), wt_mat))\n"
}