{
    "functionName": "test_r_dist",
    "className": "TestCellListSTORM",
    "fileName": "/Jhsmit_&_ColiCoords/test_&_test_cell.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "stop = 15\nstep = 0.5\nwith self.assertRaises(IndexError):\n    x, y = self.empty_cell.r_dist(stop, step)\nwith self.assertRaises(ValueError):\n    x, y = self.cell.r_dist(stop, step, data_name='notexisting')\nwith self.assertRaises(ValueError):\n    x, y = self.cell.r_dist(stop, step, method='notexisting')\nstop = 15\nstep = 0.5\nbins_box = np.arange(0, stop + step, step) + 0.5 * step\nbins = np.arange(0, stop + step, step)\nstorm_int_sum = np.sum(self.cell.data.data_dict['storm']['intensity'])\nx, y = self.cell.r_dist(data_name='storm', stop=stop, step=step)\nself.assertArrayEqual(bins_box, x)\nself.assertEqual(np.sum(y), storm_int_sum)\nx, y = self.cell.r_dist(data_name='storm', stop=stop, step=step,\n    storm_weight=True)\nself.assertArrayEqual(bins_box, x)\nself.assertEqual(np.sum(y), storm_int_sum)\nx, y = self.cell.r_dist(stop, step, data_name='fluorescence')\nself.assertArrayEqual(bins, x)\nx, y = self.cell.r_dist(stop, step, data_name='fluorescence', limit_l='full')\nx, y = self.cell.r_dist(stop, step, data_name='fluorescence', limit_l='poles')\nwith self.assertRaises(AssertionError):\n    x, y = self.cell.r_dist(stop, step, data_name='fluorescence', limit_l=0)\nwith self.assertRaises(AssertionError):\n    x, y = self.cell.r_dist(stop, step, data_name='fluorescence', limit_l=1)\nx, y = self.cell.r_dist(stop, step, data_name='fluorescence', limit_l=0.5)\nself.assertArrayEqual(bins, x)\nx, y = self.cell.r_dist(stop, step, data_name='fluorescence', limit_l=0.001)\nself.assertArrayEqual(bins, x)\nx, y = self.cell.r_dist(stop, step, data_name='fluorescence', limit_l=1e-10)\nself.assertArrayEqual(bins, x)\nx, y = self.cell.r_dist(stop, step, data_name='fluorescence', limit_l=1 - 1e-10\n    )\nself.assertArrayEqual(bins, x)\n"
}