{
    "functionName": "test_big_to_small_3d",
    "className": null,
    "fileName": "/CCampJr_&_CRIkit2/crikit_&_data_&_tests_&_test_mosaic.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "orig_data = np.random.randn(40, 5, 3)\nmos = Mosaic()\nm_unit_size = 10\nn_unit_size = 5\nm_ct = orig_data.shape[0] // m_unit_size\nn_ct = orig_data.shape[1] // n_unit_size\nfor ct in range(m_ct):\n    mos.append(orig_data[ct * m_unit_size:(ct + 1) * m_unit_size, (...)])\nmos.parameters['Order'] = 'R'\nassert np.allclose(mos.mosaic2d(shape=(m_ct, n_ct), idx=0), orig_data[..., 0])\nassert np.allclose(mos.mosaic2d(shape=(m_ct, n_ct), idx=1), orig_data[..., 1])\nassert np.allclose(mos.mosaic2d(shape=(m_ct, n_ct), idx=2), orig_data[..., 2])\nassert np.allclose(mos.mosaicfull(shape=(m_ct, n_ct)), orig_data)\nmos.parameters['Order'] = 'C'\nassert np.allclose(mos.mosaic2d(shape=(m_ct, n_ct), idx=0), orig_data[..., 0])\nassert np.allclose(mos.mosaic2d(shape=(m_ct, n_ct), idx=1), orig_data[..., 1])\nassert np.allclose(mos.mosaic2d(shape=(m_ct, n_ct), idx=2), orig_data[..., 2])\nassert np.allclose(mos.mosaicfull(shape=(m_ct, n_ct)), orig_data)\n"
}