{
    "functionName": "test_key_pair_create_get_destroy",
    "className": "TestIntegration",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_integration_&_services_&_test_integration.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that key pairs are properly created, retrieved, and destroyed.\n        \"\"\"\nkey_name = 'Integration Test - Create-Get-Destroy Key Pair -'\nresult = self._create_key_pair(key_name=key_name)\nself._check_result_status(result, ResultStatus, ResultStatus.SUCCESS)\nself._check_uuid(result.private_key_uuid, str)\nself._check_uuid(result.public_key_uuid, str)\npriv_key_uuid = result.private_key_uuid\npub_key_uuid = result.public_key_uuid\npriv_key_result = self.client.get(uuid=priv_key_uuid, credential=None)\npub_key_result = self.client.get(uuid=pub_key_uuid, credential=None)\nself._check_result_status(priv_key_result, ResultStatus, ResultStatus.SUCCESS)\nself._check_object_type(priv_key_result.object_type, ObjectType, ObjectType\n    .PRIVATE_KEY)\nself._check_uuid(priv_key_result.uuid, str)\nself._check_result_status(pub_key_result, ResultStatus, ResultStatus.SUCCESS)\nself._check_object_type(pub_key_result.object_type, ObjectType, ObjectType.\n    PUBLIC_KEY)\nself._check_uuid(pub_key_result.uuid, str)\npriv_secret = priv_key_result.secret\npub_secret = pub_key_result.secret\npriv_expected = PrivateKey\npub_expected = PublicKey\nself.assertIsInstance(priv_secret, priv_expected)\nself.assertIsInstance(pub_secret, pub_expected)\nself.logger.debug('Destroying key: ' + key_name + ' Private' +\n    '\\n With UUID: ' + result.private_key_uuid)\ndestroy_priv_key_result = self.client.destroy(result.private_key_uuid)\nself._check_result_status(destroy_priv_key_result, ResultStatus,\n    ResultStatus.SUCCESS)\nself.logger.debug('Destroying key: ' + key_name + ' Public' +\n    '\\n With UUID: ' + result.public_key_uuid)\ndestroy_pub_key_result = self.client.destroy(result.public_key_uuid)\nself._check_result_status(destroy_pub_key_result, ResultStatus,\n    ResultStatus.SUCCESS)\npriv_key_uuid = destroy_priv_key_result.uuid.value\npub_key_uuid = destroy_pub_key_result.uuid.value\nself._check_uuid(priv_key_uuid, str)\nself._check_uuid(pub_key_uuid, str)\npriv_key_destroyed_result = self.client.get(uuid=priv_key_uuid)\npub_key_destroyed_result = self.client.get(uuid=pub_key_uuid)\nself._check_result_status(priv_key_destroyed_result, ResultStatus,\n    ResultStatus.OPERATION_FAILED)\nself._check_result_status(pub_key_destroyed_result, ResultStatus,\n    ResultStatus.OPERATION_FAILED)\nexpected = ResultReason\nobserved_priv = type(priv_key_destroyed_result.result_reason.value)\nobserved_pub = type(pub_key_destroyed_result.result_reason.value)\nself.assertEqual(expected, observed_priv)\nself.assertEqual(expected, observed_pub)\n"
}