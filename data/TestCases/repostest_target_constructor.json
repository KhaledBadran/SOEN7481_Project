{
    "functionName": "test_target_constructor",
    "className": "TestTarget",
    "fileName": "/apmoore1_&_Bella/tests_&_test_data_types.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that target constructor\n        \"\"\"\nwith self.assertRaises(TypeError, msg='Spans should be of type list'):\n    Target('span', '1', 'Iphone', 'text with Iphone', 'Pos')\nwith self.assertRaises(TypeError, msg='Spans should be list of tuples'):\n    Target([1, 2], '1', 'Iphone', 'text with Iphone', 'Pos')\nwith self.assertRaises(ValueError, msg=\n    'Spans should contain tuples of length 2'):\n    Target([(1, 2, 3), (3, 4, 5)], '1', 'Iphone', 'text with Iphone', 'Pos')\nwith self.assertRaises(ValueError, msg=\n    'Spans should contain tuples of length 2'):\n    Target([(1, 2), (3, 4, 5)], '1', 'Iphone', 'text with Iphone', 'Pos')\nwith self.assertRaises(TypeError, msg=\n    'Spans should contain tuples of length 2 and are Ints'):\n    Target([('1', '2')], '1', 'Iphone', 'text with Iphone', 'Pos')\nwith self.assertRaises(TypeError, msg=\n    'Spans should contain tuples of length 2 and are Ints'):\n    Target([(1, '2')], '1', 'Iphone', 'text with Iphone', 'Pos')\nwith self.assertRaises(TypeError, msg=\n    'Spans should contain tuples of length 2 and are Ints'):\n    Target([('1', 2)], '1', 'Iphone', 'text with Iphone', 'Pos')\nwith self.assertRaises(ValueError, msg=\n    'Spans should contain tuples of Ints where the first Int < second Int'):\n    Target([(7, 5)], '1', 'Iphone', 'text with Iphone', 'Pos')\nwith self.assertRaises(ValueError, msg=\n    'Spans should contain tuples of Ints where the first Int < second Int'):\n    Target([(3, 5), (6, 6)], '1', 'Iphone', 'text with Iphone', 'Pos')\nTarget([(3, 5), (6, 8)], '1', 'Iphone', 'text with Iphone', 'Pos')\nwith self.assertRaises(TypeError, msg='Target ID should be a String'):\n    Target([(3, 5), (6, 8)], 1, 'Iphone', 'text with Iphone', 'Pos')\nwith self.assertRaises(TypeError, msg='Target should be a String'):\n    Target([(3, 5), (6, 8)], '1', ('Iphone',), 'text with Iphone', 'Pos')\nwith self.assertRaises(TypeError, msg='Text should be a String'):\n    Target([(3, 5), (6, 8)], '1', 'Iphone', ('text with Iphone',), 'Pos')\nwith self.assertRaises(TypeError, msg='Sentiment should be a String or Int'):\n    Target([(3, 5), (6, 8)], '1', 'Iphone', 'text with Iphone', ('Pos',))\nwith self.assertRaises(TypeError, msg='sentence_id should be a String'):\n    Target([(3, 5), (6, 8)], '1', 'Iphone', 'text with Iphone', 'pos',\n        sentence_id=1)\nspan = [(3, 5)]\ntarget = 'Iphone'\nsentiment = 1\ntext = 'text with Iphone'\ntarget_id = '210#1'\npredicted = 0\nsentence_id = '210'\ntarget_example = Target(span, target_id, target, text, sentiment, predicted,\n    sentence_id)\nself.assertEqual(target_id, target_example['target_id'], msg=\n    'The target ID should {} and not {}'.format(target_id, target_example[\n    'target_id']))\nself.assertEqual(text, target_example['text'], msg=\n    'The text should be {} and not {}'.format(text, target_example['text']))\nself.assertEqual(sentiment, target_example['sentiment'], msg=\n    'The sentiment should be {} and not {}'.format(sentiment,\n    target_example['sentiment']))\nself.assertEqual(target, target_example['target'], msg=\n    'The target should be {} and not {}'.format(target, target_example[\n    'target']))\nself.assertEqual(span, target_example['spans'], msg=\n    'The spans should be {} and not {}'.format(span, target_example['spans']))\nself.assertEqual(predicted, target_example['predicted'], msg=\n    'The predicted sentiment should be {} and not {}'.format(predicted,\n    target_example['predicted']))\nself.assertEqual(sentence_id, target_example['sentence_id'], msg=\n    'The sentence_id should be {} and not {}'.format(sentence_id,\n    target_example['sentence_id']))\n"
}