{
    "functionName": "test_email_pivot",
    "className": "TestCase",
    "fileName": "/IntegralDefense_&_ACE/lib_&_saq_&_modules_&_test_email.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "root = create_root_analysis(uuid=str(uuid.uuid4()), alert_type='mailbox')\nroot.initialize_storage()\nshutil.copy(os.path.join('test_data', 'emails',\n    'splunk_logging.email.rfc822'), os.path.join(root.storage_dir,\n    'email.rfc822'))\nfile_observable = root.add_observable(F_FILE, 'email.rfc822')\nfile_observable.add_directive(DIRECTIVE_ORIGINAL_EMAIL)\nfile_observable.add_directive(DIRECTIVE_ARCHIVE)\nroot.save()\nroot.schedule()\nengine = TestEngine()\nengine.enable_module('analysis_module_file_type', 'test_groups')\nengine.enable_module('analysis_module_file_hash_analyzer', 'test_groups')\nengine.enable_module('analysis_module_email_analyzer', 'test_groups')\nengine.enable_module('analysis_module_email_archiver', 'test_groups')\nengine.enable_module('analysis_module_url_extraction', 'test_groups')\nengine.controlled_stop()\nengine.start()\nengine.wait()\nsaq.load_configuration()\nroot = create_root_analysis(uuid=str(uuid.uuid4()), alert_type='cloudphish')\nroot.initialize_storage()\nroot.details = {'alertable': 1, 'context': {'c':\n    '1c38af75-0c42-4ae3-941d-de3975f68602', 'd': '1', 'i': 'ashland', 's':\n    'email_scanner'}, 'sha256_url':\n    '0061537d578e4f65d13e31e190e1079e00dadd808e9fa73f77e3308fdb0e1485',\n    'url': 'https://www.alienvault.com'}\nurl_observable = root.add_observable(F_URL, 'https://www.alienvault.com')\nroot.save()\nroot.schedule()\nengine = TestEngine()\nengine.enable_module('analysis_module_url_email_pivot_analyzer', 'test_groups')\nengine.controlled_stop()\nengine.start()\nengine.wait()\nroot.load()\nurl_observable = root.get_observable(url_observable.id)\nfrom saq.modules.email import URLEmailPivotAnalysis_v2\nanalysis = url_observable.get_analysis(URLEmailPivotAnalysis_v2)\nself.assertIsNotNone(analysis)\nself.assertEquals(analysis.count, 1)\nself.assertIsNotNone(analysis.emails)\nself.assertTrue('email_archive' in analysis.emails)\narchive_id = list(analysis.emails['email_archive'].keys())[0]\nentry = analysis.emails['email_archive'][archive_id]\nself.assertEquals(int(archive_id), entry['archive_id'])\nself.assertEquals('canary #3', entry['subject'])\nself.assertEquals('jwdavison@company.com', entry['recipient'])\nself.assertEquals(\n    '<CANTOGZsMiMb+7aB868zXSen_fO=NS-qFTUMo9h2eHtOexY8Qhw@mail.gmail.com>',\n    entry['message_id'])\nself.assertEquals('unixfreak0037@gmail.com', entry['sender'])\nself.assertEquals(len(entry['remediation_history']), 0)\nself.assertFalse(entry['remediated'])\n"
}