{
    "functionName": "test_genomic_interval_batch_generator",
    "className": null,
    "fileName": "/goeckslab_&_Galaxy-ML/galaxy_ml_&_tests_&_test_sequences.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "ref_genome_path = (\n    '/projects/selene/manuscript/case1/data/GRCh38_no_alt_analysis_set_GCA_000001405.15.fasta'\n    )\nintervals_path = './tools/test-data/hg38_TF_intervals_2000.txt'\ntarget_path = '/projects/selene/manuscript/case1/data/GATA1_proery_bm.bed.gz'\nseed = 42\nrandom_state = 0\ngenerator = GenomicIntervalBatchGenerator(ref_genome_path=ref_genome_path,\n    intervals_path=intervals_path, target_path=target_path, seed=seed,\n    features=['Proery_BM|GATA1'], random_state=random_state)\ngenerator1 = clone(generator)\ngot = list(generator1.get_params().keys())\nexpect = ['blacklist_regions', 'center_bin_to_predict',\n    'feature_thresholds', 'features', 'intervals_path', 'random_state',\n    'ref_genome_path', 'seed', 'seq_length', 'shuffle', 'target_path']\nassert got == expect, got\ngenerator1.set_processing_attrs()\nfeatures_ = generator1.features_\nn_features_ = generator1.n_features_\nbin_radius_ = generator1.bin_radius_\nstart_radius_ = generator1.start_radius_\nend_radius_ = generator1.end_radius_\nsurrounding_sequence_radius_ = generator1.surrounding_sequence_radius_\ntarget_ = generator1.target_\nsample_from_intervals_ = generator1.sample_from_intervals_\nintervals_lengths_ = generator1.interval_lengths_\nassert features_ == ['Proery_BM|GATA1'], features_\nassert n_features_ == 1, n_features_\nassert bin_radius_ == 100, bin_radius_\nassert start_radius_ == 100, start_radius_\nassert end_radius_ == 100, end_radius_\nassert surrounding_sequence_radius_ == 400, surrounding_sequence_radius_\nassert target_.__class__.__name__ == 'GenomicFeatures', target_.__class__.__name__\nassert target_._feature_thresholds_vec == [0.5\n    ], target_._feature_thresholds_vec\nassert target_.feature_thresholds == {'Proery_BM|GATA1': 0.5\n    }, target_.feature_thresholds\nassert len(sample_from_intervals_) == 1878, len(sample_from_intervals_)\nassert sample_from_intervals_[0] == ('chr16', 19859514, 19860150\n    ), sample_from_intervals_[0]\nassert len(intervals_lengths_) == 1878, len(intervals_lengths_)\nassert intervals_lengths_[0] == 636, intervals_lengths_[0]\nX = np.arange(2, 10)[:, (np.newaxis)]\nindices, weights = generator1.get_indices_and_probabilities(X)\nassert np.array_equal(indices, np.array([2, 3, 4, 5, 6, 7, 8, 9])), indices\nassert [round(w, 3) for w in weights] == [0.193, 0.023, 0.132, 0.049, 0.065,\n    0.195, 0.284, 0.058], weights\ngen_flow = generator1.flow(X, batch_size=4)\nbatch_X, batch_y = next(gen_flow)\nassert len(gen_flow) == 2, len(gen_flow)\nassert batch_X.shape == (4, 1000, 4), batch_X.shape\nassert batch_X[0][2].tolist() == [0, 0, 1, 0], batch_X[0][2]\nassert batch_X[2][4].tolist() == [0, 1, 0, 0], batch_X[2][4]\nassert batch_X[3][5].tolist() == [1, 0, 0, 0], batch_X[3][5]\nassert batch_y.tolist() == [[0], [0], [1], [0]], batch_y\nbatch_X, batch_y = next(gen_flow)\nassert batch_X.shape == (4, 1000, 4), batch_X.shape\nassert batch_X[0][2].tolist() == [1, 0, 0, 0], batch_X[0][2]\nassert batch_X[2][4].tolist() == [0, 0, 0, 1], batch_X[2][4]\nassert batch_X[3][5].tolist() == [0, 0, 1, 0], batch_X[3][5]\nassert batch_y.tolist() == [[0], [0], [0], [1]], batch_y\nretrieved_seq_encodings, targets = generator1.sample(X, sample_size=10)\nassert retrieved_seq_encodings.shape == (10, 1000, 4\n    ), retrieved_seq_encodings.shape\nassert retrieved_seq_encodings[0][2].tolist() == [0, 1, 0, 0\n    ], retrieved_seq_encodings[0][2]\nassert retrieved_seq_encodings[1][4].tolist() == [0, 0, 0, 1\n    ], retrieved_seq_encodings[1][4]\nassert retrieved_seq_encodings[2][5].tolist() == [1, 0, 0, 0\n    ], retrieved_seq_encodings[2][5]\nassert targets.tolist() == [[0], [1], [0], [0], [0], [0], [0], [0], [0], [1]\n    ], targets\ngenerator1.close()\ngenerator2 = clone(generator)\ngenerator2.set_processing_attrs()\ngen_flow2 = generator2.flow(X, batch_size=2)\nindex_arr = next(gen_flow2.index_generator)\nassert index_arr.tolist() == [3, 7], index_arr\ngenerator2.close()\nnottest"
}