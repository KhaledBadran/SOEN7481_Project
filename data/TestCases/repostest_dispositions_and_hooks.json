{
    "functionName": "test_dispositions_and_hooks",
    "className": null,
    "fileName": "/PlaidWeb_&_Authl/tests_&_test_flask_wrapper.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "class InvalidDisposition(disposition.Disposition):\n    pass\nclass Dispositioner(TestHandler):\n\n    def handles_url(self, url):\n        return url\n\n    @property\n    def cb_id(self):\n        return 'hi'\n\n    def initiate_auth(self, id_url, callback_uri, redir):\n        if id_url == 'redirect':\n            return disposition.Redirect('http://example.com/')\n        if id_url == 'verify':\n            return disposition.Verified('verified://', redir)\n        if id_url == 'notify':\n            return disposition.Notify(redir)\n        if id_url == 'error':\n            return disposition.Error('something', redir)\n        if id_url == 'invalid':\n            return InvalidDisposition()\n        raise ValueError('nope')\nnotify_render = mocker.Mock(return_value='notified')\nlogin_render = mocker.Mock(return_value='login form')\non_verified = mocker.Mock(return_value='verified')\napp = flask.Flask(__name__)\napp.secret_key = __name__\ninstance = authl.flask.setup(app, {}, session_auth_name=None,\n    notify_render_func=notify_render, login_render_func=login_render,\n    on_verified=on_verified)\ninstance.add_handler(Dispositioner())\nwith app.test_request_context('http://example.site/'):\n    login_url = flask.url_for('authl.login', _external=True)\nwith app.test_client() as client:\n    assert client.get(login_url + '?me=redirect').headers['Location'\n        ] == 'http://example.com/'\nwith app.test_client() as client:\n    assert client.get(login_url + '/blob?me=verify').data == b'verified'\nwith app.test_client() as client:\n    assert client.get(login_url + '/bobble?me=notify').data == b'notified'\n    notify_render.assert_called_with('/bobble')\nwith app.test_client() as client:\n    assert client.get(login_url + '/chomp?me=error').data == b'login form'\n    login_render.assert_called_with(login_url=flask.url_for('authl.login',\n        redir='chomp'), test_url=None, auth=instance, id_url='error', error\n        ='something', redir='/chomp')\nwith app.test_client() as client:\n    assert client.get(login_url + '/chomp?me=invalid').status_code == 500\n"
}