{
    "functionName": "test_glob_matching",
    "className": null,
    "fileName": "/fabioz_&_PyDev.Debugger/tests_python_&_test_pydevd_filtering.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "from _pydevd_bundle.pydevd_filtering import glob_matches_path\nfor sep, altsep in (('\\\\', '/'), ('/', None)):\n\n    def build(path):\n        if sep == '/':\n            return path\n        else:\n            return ('c:' + path).replace('/', '\\\\')\n    assert glob_matches_path(build('/a'), '*', sep, altsep)\n    assert not glob_matches_path(build('/a/b/c/some.py'), '/a/**/c/so?.py',\n        sep, altsep)\n    assert glob_matches_path('/a/b/c', '/a/b/*')\n    assert not glob_matches_path('/a/b', '/*')\n    assert glob_matches_path('/a/b', '/*/b')\n    assert glob_matches_path('/a/b', '**/*')\n    assert not glob_matches_path('/a/b', '**/a')\n    assert glob_matches_path(build('/a/b/c/d'), '**/d', sep, altsep)\n    assert not glob_matches_path(build('/a/b/c/d'), '**/c', sep, altsep)\n    assert glob_matches_path(build('/a/b/c/d'), '**/c/d', sep, altsep)\n    assert glob_matches_path(build('/a/b/c/d'), '**/b/c/d', sep, altsep)\n    assert glob_matches_path(build('/a/b/c/d'), '/*/b/*/d', sep, altsep)\n    assert glob_matches_path(build('/a/b/c/d'), '**/c/*', sep, altsep)\n    assert glob_matches_path(build('/a/b/c/d'), '/a/**/c/*', sep, altsep)\n    assert glob_matches_path(build('/a/b/c/d.py'), '/a/**/c/*', sep, altsep)\n    assert glob_matches_path(build('/a/b/c/d.py'), '/a/**/c/*.py', sep, altsep)\n    assert glob_matches_path(build('/a/b/c/some.py'), '/a/**/c/so*.py', sep,\n        altsep)\n    assert glob_matches_path(build('/a/b/c/some.py'), '/a/**/c/som?.py',\n        sep, altsep)\n    assert glob_matches_path(build('/a/b/c/d'), '/**', sep, altsep)\n    assert glob_matches_path(build('/a/b/c/d'), '/**/d', sep, altsep)\n    assert glob_matches_path(build('/a/b/c/d.py'), '/**/*.py', sep, altsep)\n    assert glob_matches_path(build('/a/b/c/d.py'), '**/c/*.py', sep, altsep)\n    if IS_WINDOWS:\n        assert glob_matches_path(build('/a/b/c/d.py'), '**/C/*.py', sep, altsep\n            )\n        assert glob_matches_path(build('/a/b/C/d.py'), '**/c/*.py', sep, altsep\n            )\n    assert not glob_matches_path(build('/a/b/c/d'), '/**/d.py', sep, altsep)\n    assert not glob_matches_path(build('/a/b/c/d.pyx'), '/a/**/c/*.py', sep,\n        altsep)\n    assert not glob_matches_path(build('/a/b/c/d'), '/*/d', sep, altsep)\n    if sep == '/':\n        assert not glob_matches_path(build('/a/b/c/d'), '**\\\\d', sep, altsep)\n        assert not glob_matches_path(build('/a/b/c/d'), 'c:\\\\**\\\\d', sep,\n            altsep)\n    else:\n        assert glob_matches_path(build('/a/b/c/d'), '**\\\\d', sep, altsep)\n        assert glob_matches_path(build('/a/b/c/d'), 'c:\\\\**\\\\d', sep, altsep)\n    assert not glob_matches_path(build('/'), '', sep, altsep)\n    assert glob_matches_path(build(''), '', sep, altsep)\n    assert not glob_matches_path(build(''), '**', sep, altsep)\n    assert glob_matches_path(build('/'), '**', sep, altsep)\n    assert glob_matches_path(build('/'), '*', sep, altsep)\n"
}