{
    "functionName": "test_space_api",
    "className": null,
    "fileName": "/bytesandbrains_&_ProcessOptimizer/ProcessOptimizer_&_tests_&_test_space.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "space = Space([(0.0, 1.0), (-5, 5), ('a', 'b', 'c'), (1.0, 5.0,\n    'log-uniform'), ('e', 'f')])\ncat_space = Space([(1, 'r'), (1.0, 'r')])\nassert isinstance(cat_space.dimensions[0], Categorical)\nassert isinstance(cat_space.dimensions[1], Categorical)\nassert_equal(len(space.dimensions), 5)\nassert_true(isinstance(space.dimensions[0], Real))\nassert_true(isinstance(space.dimensions[1], Integer))\nassert_true(isinstance(space.dimensions[2], Categorical))\nassert_true(isinstance(space.dimensions[3], Real))\nassert_true(isinstance(space.dimensions[4], Categorical))\nsamples = space.rvs(n_samples=10, random_state=0)\nassert_equal(len(samples), 10)\nassert_equal(len(samples[0]), 5)\nassert_true(isinstance(samples, list))\nfor n in range(4):\n    assert_true(isinstance(samples[n], list))\nassert_true(isinstance(samples[0][0], numbers.Real))\nassert_true(isinstance(samples[0][1], numbers.Integral))\nassert_true(isinstance(samples[0][2], str))\nassert_true(isinstance(samples[0][3], numbers.Real))\nassert_true(isinstance(samples[0][4], str))\nsamples_transformed = space.transform(samples)\nassert_equal(samples_transformed.shape[0], len(samples))\nassert_equal(samples_transformed.shape[1], 1 + 1 + 3 + 1 + 1)\nfor orig, round_trip in zip(samples, space.inverse_transform(\n    samples_transformed)):\n    assert space.distance(orig, round_trip) < 1e-08\nsamples = space.inverse_transform(samples_transformed)\nassert_true(isinstance(samples[0][0], numbers.Real))\nassert_true(isinstance(samples[0][1], numbers.Integral))\nassert_true(isinstance(samples[0][2], str))\nassert_true(isinstance(samples[0][3], numbers.Real))\nassert_true(isinstance(samples[0][4], str))\nfor b1, b2 in zip(space.bounds, [(0.0, 1.0), (-5, 5), np.asarray(['a', 'b',\n    'c']), (1.0, 5.0), np.asarray(['e', 'f'])]):\n    assert_array_equal(b1, b2)\nfor b1, b2 in zip(space.transformed_bounds, [(0.0, 1.0), (-5, 5), (0.0, 1.0\n    ), (0.0, 1.0), (0.0, 1.0), (np.log10(1.0), np.log10(5.0)), (0.0, 1.0)]):\n    assert_array_equal(b1, b2)\npytest.mark.fast_test"
}