{
    "functionName": "test_create_omitting_attributes",
    "className": "TestKmipEngine",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_services_&_server_&_test_engine.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that InvalidField errors are generated when trying to create\n        a symmetric key without required attributes.\n        \"\"\"\ne = engine.KmipEngine()\ne._data_store = self.engine\ne._data_store_session_factory = self.session_factory\ne._data_session = e._data_store_session_factory()\ne._logger = mock.MagicMock()\nattribute_factory = factory.AttributeFactory()\nobject_type = enums.ObjectType.SYMMETRIC_KEY\ntemplate_attribute = objects.TemplateAttribute(attributes=[\n    attribute_factory.create_attribute(enums.AttributeType.NAME, attributes\n    .Name.create('Test Symmetric Key', enums.NameType.\n    UNINTERPRETED_TEXT_STRING)), attribute_factory.create_attribute(enums.\n    AttributeType.CRYPTOGRAPHIC_LENGTH, 256), attribute_factory.\n    create_attribute(enums.AttributeType.CRYPTOGRAPHIC_USAGE_MASK, [enums.\n    CryptographicUsageMask.ENCRYPT, enums.CryptographicUsageMask.DECRYPT])])\npayload = payloads.CreateRequestPayload(object_type, template_attribute)\nargs = payload,\nregex = 'The cryptographic algorithm must be specified as an attribute.'\nsix.assertRaisesRegex(self, exceptions.InvalidField, regex, e.\n    _process_create, *args)\ne._logger.info.assert_any_call('Processing operation: Create')\ne._logger.reset_mock()\nobject_type = enums.ObjectType.SYMMETRIC_KEY\ntemplate_attribute = objects.TemplateAttribute(attributes=[\n    attribute_factory.create_attribute(enums.AttributeType.NAME, attributes\n    .Name.create('Test Symmetric Key', enums.NameType.\n    UNINTERPRETED_TEXT_STRING)), attribute_factory.create_attribute(enums.\n    AttributeType.CRYPTOGRAPHIC_ALGORITHM, enums.CryptographicAlgorithm.AES\n    ), attribute_factory.create_attribute(enums.AttributeType.\n    CRYPTOGRAPHIC_USAGE_MASK, [enums.CryptographicUsageMask.ENCRYPT, enums.\n    CryptographicUsageMask.DECRYPT])])\npayload = payloads.CreateRequestPayload(object_type, template_attribute)\nargs = payload,\nregex = 'The cryptographic length must be specified as an attribute.'\nsix.assertRaisesRegex(self, exceptions.InvalidField, regex, e.\n    _process_create, *args)\ne._logger.info.assert_any_call('Processing operation: Create')\ne._logger.reset_mock()\nobject_type = enums.ObjectType.SYMMETRIC_KEY\ntemplate_attribute = objects.TemplateAttribute(attributes=[\n    attribute_factory.create_attribute(enums.AttributeType.NAME, attributes\n    .Name.create('Test Symmetric Key', enums.NameType.\n    UNINTERPRETED_TEXT_STRING)), attribute_factory.create_attribute(enums.\n    AttributeType.CRYPTOGRAPHIC_ALGORITHM, enums.CryptographicAlgorithm.AES\n    ), attribute_factory.create_attribute(enums.AttributeType.\n    CRYPTOGRAPHIC_LENGTH, 256)])\npayload = payloads.CreateRequestPayload(object_type, template_attribute)\nargs = payload,\nregex = 'The cryptographic usage mask must be specified as an attribute.'\nsix.assertRaisesRegex(self, exceptions.InvalidField, regex, e.\n    _process_create, *args)\ne._logger.info.assert_any_call('Processing operation: Create')\ne._logger.reset_mock()\n"
}