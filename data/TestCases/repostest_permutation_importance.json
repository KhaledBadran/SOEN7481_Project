{
    "functionName": "test_permutation_importance",
    "className": null,
    "fileName": "/gelijergensen_&_PermutationImportance/test_&_test_permutation_importance.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "A = [1, 0, 0]\nB = [0, 1, 0]\nC = [0, 0, 1]\nD = [0, 0, 0]\ninputs = pd.DataFrame({'A': A, 'B': B, 'C': C})\noutputs = pd.DataFrame({'D': D})\nscoring_data = inputs, outputs\ndef scoring_fn(training_data, scoring_data):\n    return scoring_data[0].values.sum()\nexpected = ImportanceResult('Permutation Importance', ['A', 'B', 'C'], 3)\nexpected.add_new_results({'A': (0, 3), 'B': (1, 3), 'C': (2, 3)})\nexpected.add_new_results({'B': (0, 3), 'C': (1, 3)})\nexpected.add_new_results({'C': (0, 3)})\nresult = permutation_importance(scoring_data, scoring_fn, 'argmin', njobs=2)\nassert expected.method == result.method\nassert expected.original_score == result.original_score\nassert (expected.variable_names == result.variable_names).all()\nassert expected.retrieve_singlepass() == result.retrieve_singlepass()\nassert expected.retrieve_multipass() == result.retrieve_multipass()\nfor (exp_context, exp_result), (true_context, true_result) in zip(expected,\n    result):\n    assert exp_context == true_context\n    assert exp_result == true_result\n"
}