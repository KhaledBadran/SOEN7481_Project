{
    "functionName": "test_full_svd",
    "className": null,
    "fileName": "/DTUComputeStatisticsAndDataAnalysis_&_MBPLS/mbpls_&_tests_&_test_mbpls.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "np.random.seed(rand_seed)\nloading1 = np.expand_dims(np.random.randint(0, 10, num_vars_x1), 1)\nloading2 = np.expand_dims(np.sin(np.linspace(0, 5, num_vars_x2)), 1)\nfrom scipy.stats import ortho_group\ny = ortho_group.rvs(num_samples, random_state=rand_seed)[:, :2]\nx1 = np.dot(y[:, 0:1], loading1.T)\nx2 = np.dot(y[:, 1:2], loading2.T)\nx1 = np.random.normal(x1, 0.05 * noise)\nx2 = np.random.normal(x2, 0.05 * noise)\nindices = np.random.choice(np.arange(num_samples), num_samples, replace=False)\ntrain, test = indices[:round(num_samples * 8 / 10)], indices[round(\n    num_samples * 8 / 10):]\nx1_train, x2_train = x1[(train), :], x2[(train), :]\nx1_test, x2_test = x1[(test), :], x2[(test), :]\ny_train, y_test = y[(train), :], y[(test), :]\nfrom mbpls.mbpls import MBPLS\npredictions = []\nmethods = ['UNIPALS', 'NIPALS', 'KERNEL', 'SIMPLS']\nfor method in methods:\n    mbpls_model = MBPLS(n_components=2, method=method, standardize=True,\n        full_svd=True)\n    mbpls_model.fit([x1_train, x2_train], y_train)\n    if method is not 'SIMPLS':\n        T = np.concatenate(mbpls_model.T_, axis=1)\n        T_ref = np.genfromtxt(os.path.join(test_dir, 'test_data', \n            'T_%s.csv' % method), delimiter=',')\n        assert np.allclose(abs(T), abs(T_ref))\n        A = mbpls_model.A_\n        A_ref = np.genfromtxt(os.path.join(test_dir, 'test_data', \n            'A_%s.csv' % method), delimiter=',')\n        assert np.allclose(A, A_ref)\n        Ts_test, T_test, U_test = mbpls_model.transform([x1_test, x2_test],\n            y_test, return_block_scores=True)\n        T_test_ref = np.genfromtxt(os.path.join(test_dir, 'test_data', \n            'T_test_%s.csv' % method), delimiter=',')\n        T_test = np.concatenate(T_test, axis=1)\n        assert np.allclose(abs(T_test), abs(T_test_ref))\n    else:\n        Ts_test, U_test = mbpls_model.transform([x1_test, x2_test], y_test)\n    Ts_test_ref = np.genfromtxt(os.path.join(test_dir, 'test_data', \n        'Ts_test_%s.csv' % method), delimiter=',')\n    assert np.allclose(abs(Ts_test), abs(Ts_test_ref))\n    U_test_ref = np.genfromtxt(os.path.join(test_dir, 'test_data', \n        'U_test_%s.csv' % method), delimiter=',')\n    assert np.allclose(abs(U_test), abs(U_test_ref))\n    P1 = mbpls_model.P_[0]\n    P1_ref = np.genfromtxt(os.path.join(test_dir, 'test_data', 'P1_%s.csv' %\n        method), delimiter=',')\n    assert np.allclose(abs(P1), abs(P1_ref))\n    P2 = mbpls_model.P_[1]\n    P2_ref = np.genfromtxt(os.path.join(test_dir, 'test_data', 'P2_%s.csv' %\n        method), delimiter=',')\n    assert np.allclose(abs(P2), abs(P2_ref))\n    Ts = mbpls_model.Ts_\n    Ts_ref = np.genfromtxt(os.path.join(test_dir, 'test_data', 'Ts_%s.csv' %\n        method), delimiter=',')\n    assert np.allclose(abs(Ts), abs(Ts_ref))\n    U = mbpls_model.U_\n    U_ref = np.genfromtxt(os.path.join(test_dir, 'test_data', 'U_%s.csv' %\n        method), delimiter=',')\n    assert np.allclose(abs(U), abs(U_ref))\n    V = mbpls_model.V_\n    V_ref = np.genfromtxt(os.path.join(test_dir, 'test_data', 'V_%s.csv' %\n        method), delimiter=',')\n    assert np.allclose(abs(V), abs(V_ref))\n    beta = mbpls_model.beta_\n    beta_ref = np.genfromtxt(os.path.join(test_dir, 'test_data', \n        'beta_%s.csv' % method), delimiter=',')\n    assert np.allclose(beta, beta_ref)\n    y_predict = mbpls_model.predict([x1_test, x2_test])\n    y_predict_ref = np.genfromtxt(os.path.join(test_dir, 'test_data', \n        'Y_predict_test_%s.csv' % method), delimiter=',')\n    assert np.allclose(y_predict, y_predict_ref)\n    predictions.append(y_predict)\nfor prediction in predictions:\n    assert np.allclose(predictions[0], prediction, atol=0.001)\n"
}