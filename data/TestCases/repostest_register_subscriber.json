{
    "functionName": "test_register_subscriber",
    "className": "RegistrationIntegrationTests",
    "fileName": "/collective_&_Products.EasyNewsletter/src_&_Products_&_EasyNewsletter_&_tests_&_test_registration.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "self.assertSequenceEqual(self.mailhost.messages, [])\nself.portal.REQUEST.form.update({'newsletter': '/enl1', 'salutation': u'mr',\n    'firstname': 'Max', 'name': 'Mustermann', 'subscriber': 'max@example.com'})\nview = getMultiAdapter((self.portal, self.portal.REQUEST), name=\n    'register-subscriber')\nview.__call__()\nself.assertEqual(len(self.mailhost.messages), 1)\nself.assertTrue(self.mailhost.messages[0])\nmsg = self.mailhost.messages[0]\nparsed_payloads = parsed_payloads_from_msg(msg)\nself.assertIn('To: max@example.com', msg)\nself.assertIn('From: portal@plone.test', msg)\nself.assertIn('confirm-subscriber?hkey=', safe_unicode(parsed_payloads[\n    'text/plain']))\nenl_reg_entry = self.enl_reg_tool.values()[0]\nself.assertEqual(enl_reg_entry.firstname, 'Max')\nself.assertTrue(enl_reg_entry.id)\nself.assertEqual(enl_reg_entry.lastname, 'Mustermann')\nself.assertEqual(enl_reg_entry.name_prefix, '')\nself.assertEqual(enl_reg_entry.nl_language, 'en')\nself.assertEqual(enl_reg_entry.organization, '')\nself.assertEqual(enl_reg_entry.path_to_easynewsletter, 'enl1')\nself.assertEqual(enl_reg_entry.salutation, 'mr')\nself.assertEqual(enl_reg_entry.subscriber, 'max@example.com')\n"
}