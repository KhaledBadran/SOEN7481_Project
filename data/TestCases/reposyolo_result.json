{
    "functionName": "yolo_result",
    "className": "TestKeras",
    "fileName": "/Microsoft_&_MMdnn/mmdnn_&_conversion_&_examples_&_keras_&_imagenet_test.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "image = Image.fromarray(np.uint8(np.squeeze(self.data)))\nself.sess = K.get_session()\nself.boxes, self.scores, self.classes = self.generate()\nout_boxes, out_scores, out_classes = self.sess.run([self.boxes, self.scores,\n    self.classes], feed_dict={self.model.input: self.data / 255.0, self.\n    input_image_shape: [608, 608], K.learning_phase(): 0})\nprint('Found {} boxes for {}'.format(len(out_boxes), 'img'))\nthickness = (image.size[0] + image.size[1]) // 300\nfor i, c in reversed(list(enumerate(out_classes))):\n    predicted_class = self.class_names[c]\n    box = out_boxes[i]\n    score = out_scores[i]\n    label = '{} {:.2f}'.format(predicted_class, score)\n    draw = ImageDraw.Draw(image)\n    label_size = draw.textsize(label)\n    top, left, bottom, right = box\n    top = max(0, np.floor(top + 0.5).astype('int32'))\n    left = max(0, np.floor(left + 0.5).astype('int32'))\n    bottom = min(image.size[1], np.floor(bottom + 0.5).astype('int32'))\n    right = min(image.size[0], np.floor(right + 0.5).astype('int32'))\n    print(label, (left, top), (right, bottom))\n    if top - label_size[1] >= 0:\n        text_origin = np.array([left, top - label_size[1]])\n    else:\n        text_origin = np.array([left, top + 1])\n    self.colors = []\n    C = list(np.random.random_integers(255, size=(len(self.class_names), 3)))\n    for i in C:\n        self.colors.append(tuple(i))\n    for i in range(thickness):\n        draw.rectangle([left + i, top + i, right - i, bottom - i], outline=\n            self.colors[c])\n    draw.rectangle([tuple(text_origin), tuple(text_origin + label_size)],\n        fill=self.colors[c])\n    draw.text(tuple(text_origin), label, fill=(0, 0, 0))\n    del draw\nimage.save('{}.jpg'.format(path), 'JPEG')\n"
}