{
    "functionName": "test_process_request",
    "className": "TestKmipEngine",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_services_&_server_&_test_engine.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that a basic request is processed correctly.\n        \"\"\"\ne = engine.KmipEngine()\ne._logger = mock.MagicMock()\nprotocol = contents.ProtocolVersion(1, 1)\nheader = messages.RequestHeader(protocol_version=protocol,\n    maximum_response_size=contents.MaximumResponseSize(2 ** 20),\n    authentication=contents.Authentication(), batch_error_cont_option=\n    contents.BatchErrorContinuationOption(enums.\n    BatchErrorContinuationOption.STOP), batch_order_option=contents.\n    BatchOrderOption(True), time_stamp=contents.TimeStamp(int(time.time())),\n    batch_count=contents.BatchCount(1))\npayload = payloads.DiscoverVersionsRequestPayload()\nbatch = list([messages.RequestBatchItem(operation=contents.Operation(enums.\n    Operation.DISCOVER_VERSIONS), request_payload=payload)])\nrequest = messages.RequestMessage(request_header=header, batch_items=batch)\nresponse, max_size, protocol_version = e.process_request(request)\ne._logger.info.assert_any_call(MockRegexString('Received request at time:'))\ne._logger.info.assert_any_call('Processing operation: DiscoverVersions')\nself.assertIsInstance(response, messages.ResponseMessage)\nself.assertEqual(2 ** 20, max_size)\nself.assertIsNotNone(response.response_header)\nheader = response.response_header\nself.assertIsNotNone(header)\nself.assertEqual(contents.ProtocolVersion(1, 1), header.protocol_version)\nself.assertIsInstance(header.time_stamp, contents.TimeStamp)\nself.assertIsInstance(header.batch_count, contents.BatchCount)\nself.assertEqual(1, header.batch_count.value)\nbatch = response.batch_items\nself.assertNotEqual(list(), batch)\nbatch_item = batch[0]\nself.assertIsInstance(batch_item.operation, contents.Operation)\nself.assertEqual(enums.Operation.DISCOVER_VERSIONS, batch_item.operation.value)\nself.assertIsNone(batch_item.unique_batch_item_id)\nself.assertEqual(enums.ResultStatus.SUCCESS, batch_item.result_status.value)\nself.assertIsNone(batch_item.result_reason)\nself.assertIsNone(batch_item.result_message)\nself.assertIsNone(batch_item.async_correlation_value)\nself.assertIsInstance(batch_item.response_payload, payloads.\n    DiscoverVersionsResponsePayload)\nself.assertIsNone(batch_item.message_extension)\n"
}