{
    "functionName": "add_param",
    "className": "Layer",
    "fileName": "/Lasagne_&_Lasagne/lasagne_&_layers_&_base.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"\n        Register and possibly initialize a parameter tensor for the layer.\n\n        When defining a layer class, this method is called in the constructor\n        to define which parameters the layer has, what their shapes are, how\n        they should be initialized and what tags are associated with them.\n        This allows layer classes to transparently support parameter\n        initialization from numpy arrays and callables, as well as setting\n        parameters to existing Theano shared variables or Theano expressions.\n\n        All registered parameters are stored along with their tags in the\n        ordered dictionary :attr:`Layer.params`, and can be retrieved with\n        :meth:`Layer.get_params()`, optionally filtered by their tags.\n\n        Parameters\n        ----------\n        spec : Theano shared variable, expression, numpy array or callable\n            initial value, expression or initializer for this parameter.\n            See :func:`lasagne.utils.create_param` for more information.\n\n        shape : tuple of int\n            a tuple of integers representing the desired shape of the\n            parameter tensor.\n\n        name : str (optional)\n            a descriptive name for the parameter variable. This will be passed\n            to ``theano.shared`` when the variable is created, prefixed by the\n            layer's name if any (in the form ``'layer_name.param_name'``). If\n            ``spec`` is already a shared variable or expression, this parameter\n            will be ignored to avoid overwriting an existing name.\n\n        **tags (optional)\n            tags associated with the parameter can be specified as keyword\n            arguments. To associate the tag ``tag1`` with the parameter, pass\n            ``tag1=True``.\n\n            By default, the tags ``regularizable`` and ``trainable`` are\n            associated with the parameter. Pass ``regularizable=False`` or\n            ``trainable=False`` respectively to prevent this.\n\n        Returns\n        -------\n        Theano shared variable or Theano expression\n            the resulting parameter variable or parameter expression\n\n        Notes\n        -----\n        It is recommended to assign the resulting parameter variable/expression\n        to an attribute of the layer for easy access, for example:\n\n        >>> self.W = self.add_param(W, (2, 3), name='W')  #doctest: +SKIP\n        \"\"\"\nif name is not None:\n    if self.name is not None:\n        name = '%s.%s' % (self.name, name)\nparam = utils.create_param(spec, shape, name)\ntags['trainable'] = tags.get('trainable', True)\ntags['regularizable'] = tags.get('regularizable', True)\nself.params[param] = set(tag for tag, value in tags.items() if value)\nreturn param\n"
}