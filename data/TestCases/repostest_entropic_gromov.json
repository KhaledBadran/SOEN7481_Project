{
    "functionName": "test_entropic_gromov",
    "className": null,
    "fileName": "/PythonOT_&_POT/test_&_test_gromov.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "n_samples = 50\nmu_s = np.array([0, 0])\ncov_s = np.array([[1, 0], [0, 1]])\nxs = ot.datasets.make_2D_samples_gauss(n_samples, mu_s, cov_s, random_state=42)\nxt = xs[::-1].copy()\np = ot.unif(n_samples)\nq = ot.unif(n_samples)\nC1 = ot.dist(xs, xs)\nC2 = ot.dist(xt, xt)\nC1 /= C1.max()\nC2 /= C2.max()\nG = ot.gromov.entropic_gromov_wasserstein(C1, C2, p, q, 'square_loss',\n    epsilon=0.0005, verbose=True)\nnp.testing.assert_allclose(p, G.sum(1), atol=0.0001)\nnp.testing.assert_allclose(q, G.sum(0), atol=0.0001)\ngw, log = ot.gromov.entropic_gromov_wasserstein2(C1, C2, p, q, 'kl_loss',\n    epsilon=0.01, log=True)\nG = log['T']\nnp.testing.assert_allclose(gw, 0, atol=0.1, rtol=0.1)\nnp.testing.assert_allclose(p, G.sum(1), atol=0.0001)\nnp.testing.assert_allclose(q, G.sum(0), atol=0.0001)\n"
}