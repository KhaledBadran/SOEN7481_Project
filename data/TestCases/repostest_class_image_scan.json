{
    "functionName": "test_class_image_scan",
    "className": null,
    "fileName": "/mdbloice_&_Augmentor/tests_&_test_load.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "num_of_sub_dirs = random.randint(1, 10)\nnum_of_im_files = random.randint(1, 10)\noutput_directory = 'some_folder'\ninitial_temp_directory = tempfile.mkdtemp()\nsub_dirs = []\nfor _ in range(num_of_sub_dirs):\n    sub_dirs.append(tempfile.mkdtemp(dir=initial_temp_directory))\ntmp_files = []\nimage_counter = 0\nsuffix_filetypes = [('.PNG', 'PNG'), ('.JPEG', 'JPEG'), ('.GIF', 'GIF'), (\n    '.JPG', 'JPEG'), ('.png', 'PNG'), ('.jpeg', 'JPEG'), ('.gif', 'GIF'), (\n    '.jpg', 'JPEG')]\nfor sub_dir in sub_dirs:\n    for iterator in range(num_of_im_files):\n        suffix_filetype = random.choice(suffix_filetypes)\n        tmp_files.append(tempfile.NamedTemporaryFile(dir=os.path.abspath(\n            sub_dir), suffix=suffix_filetype[0]))\n        im = Image.fromarray(np.uint8(np.random.rand(80, 80, 3) * 255))\n        im.save(tmp_files[image_counter].name, suffix_filetype[1])\n        image_counter += 1\nos.mkdir(os.path.join(initial_temp_directory, output_directory))\ndef run():\n    p = Augmentor.Pipeline(initial_temp_directory, output_directory=\n        output_directory)\n    assert len(p.augmentor_images) == num_of_sub_dirs * num_of_im_files\n    assert len(p.class_labels) == num_of_sub_dirs\n    class_label_strings = [x[0] for x in p.class_labels]\n    for sub_dir in sub_dirs:\n        assert os.path.basename(sub_dir) in class_label_strings\n    unique_class_labels = [x.class_label for x in p.augmentor_images]\n    unique_class_labels = set(unique_class_labels)\n    unique_class_labels = list(unique_class_labels)\n    assert len(unique_class_labels) == num_of_sub_dirs\n    for unique_class_label in unique_class_labels:\n        assert unique_class_label in class_label_strings\n    for class_label_string in class_label_strings:\n        assert class_label_string in unique_class_labels\n    assert set(class_label_strings) == set(unique_class_labels)\n    labels_int = [x.class_label_int for x in p.augmentor_images]\n    bins = np.bincount(labels_int)\n    for bin in bins:\n        assert bin == num_of_im_files\n    labels = [x.class_label for x in p.augmentor_images]\n    for sub_dir in sub_dirs:\n        assert labels.count(os.path.basename(sub_dir)) == num_of_im_files\nrun()\ntemp_file_in_root_dir1 = tempfile.NamedTemporaryFile(dir=\n    initial_temp_directory, suffix='.PNG')\ntemp_file_in_root_dir2 = tempfile.NamedTemporaryFile(dir=\n    initial_temp_directory, suffix='.PNG')\nrun()\nr1 = random.randint(0, len(sub_dirs) - 1)\nr2 = random.randint(0, len(sub_dirs) - 1)\nos.mkdir(os.path.join(initial_temp_directory, sub_dirs[r1], output_directory))\nos.mkdir(os.path.join(initial_temp_directory, sub_dirs[r2], 'ignore_me'))\ntemp_to_ignore = tempfile.NamedTemporaryFile(dir=os.path.join(\n    initial_temp_directory, sub_dirs[r1], output_directory), suffix='.JPEG')\nim = Image.fromarray(np.uint8(np.random.rand(80, 80, 3) * 255))\nim.save(temp_to_ignore.name, 'JPEG')\nrun()\nfor tmp_file in tmp_files:\n    tmp_file.close()\ntemp_file_in_root_dir1.close()\ntemp_file_in_root_dir2.close()\ntemp_to_ignore.close()\nshutil.rmtree(os.path.join(initial_temp_directory, sub_dirs[r1],\n    output_directory))\nshutil.rmtree(os.path.join(initial_temp_directory, sub_dirs[r2], 'ignore_me'))\nfor sub_dir in sub_dirs:\n    shutil.rmtree(sub_dir)\nshutil.rmtree(os.path.join(initial_temp_directory, output_directory))\nshutil.rmtree(initial_temp_directory)\n"
}