{
    "functionName": "test_class_weight",
    "className": "TestSklearn",
    "fileName": "/microsoft_&_LightGBM/tests_&_python_package_test_&_test_sklearn.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "X, y = load_digits(n_class=10, return_X_y=True)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,\n    random_state=42)\ny_train_str = y_train.astype('str')\ny_test_str = y_test.astype('str')\ngbm = lgb.LGBMClassifier(n_estimators=10, class_weight='balanced', silent=True)\ngbm.fit(X_train, y_train, eval_set=[(X_train, y_train), (X_test, y_test), (\n    X_test, y_test), (X_test, y_test), (X_test, y_test)], eval_class_weight\n    =['balanced', None, 'balanced', {(1): 10, (4): 20}, {(5): 30, (2): 40}],\n    verbose=False)\nfor eval_set1, eval_set2 in itertools.combinations(gbm.evals_result_.keys(), 2\n    ):\n    for metric in gbm.evals_result_[eval_set1]:\n        np.testing.assert_raises(AssertionError, np.testing.assert_allclose,\n            gbm.evals_result_[eval_set1][metric], gbm.evals_result_[\n            eval_set2][metric])\ngbm_str = lgb.LGBMClassifier(n_estimators=10, class_weight='balanced',\n    silent=True)\ngbm_str.fit(X_train, y_train_str, eval_set=[(X_train, y_train_str), (X_test,\n    y_test_str), (X_test, y_test_str), (X_test, y_test_str), (X_test,\n    y_test_str)], eval_class_weight=['balanced', None, 'balanced', {'1': 10,\n    '4': 20}, {'5': 30, '2': 40}], verbose=False)\nfor eval_set1, eval_set2 in itertools.combinations(gbm_str.evals_result_.\n    keys(), 2):\n    for metric in gbm_str.evals_result_[eval_set1]:\n        np.testing.assert_raises(AssertionError, np.testing.assert_allclose,\n            gbm_str.evals_result_[eval_set1][metric], gbm_str.evals_result_\n            [eval_set2][metric])\nfor eval_set in gbm.evals_result_:\n    for metric in gbm.evals_result_[eval_set]:\n        np.testing.assert_allclose(gbm.evals_result_[eval_set][metric],\n            gbm_str.evals_result_[eval_set][metric])\n"
}