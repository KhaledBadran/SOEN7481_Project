{
    "functionName": "_receiver",
    "className": "SerialHardwareAdapter",
    "fileName": "/PRIArobotics_&_HedgehogServer/hedgehog_&_server_&_hardware_&_serial_&___init__.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "read = trio_asyncio.aio_as_trio(self.reader.read)\ndecoders = Registry()\n@decoders.register(Reply.SHUTDOWN)\ndef decode_shutdown(cmd: List[int]) ->HardwareUpdate:\n    return ShutdownUpdate()\n@decoders.register(Reply.EMERGENCY_STOP)\ndef decode_emergency_stop(cmd: List[int]) ->HardwareUpdate:\n    return EmergencyStopUpdate()\n@decoders.register(Reply.MOTOR_DONE_UPDATE)\ndef decode_motor_done_update(cmd: List[int]) ->HardwareUpdate:\n    raise NotImplementedError\n@decoders.register(Reply.UART_UPDATE)\ndef decode_uart_update(cmd: List[int]) ->HardwareUpdate:\n    raise NotImplementedError\nasync def read_command() ->List[int]:\n    cmd = await read(1)\n    with trio.move_on_after(0.5):\n        if cmd[0\n            ] not in Reply.SUCCESS_REPLIES | Reply.ERROR_REPLIES | Reply.UPDATES:\n            raise RuntimeError(\n                f\"HWC speaks a language we don't understand: 0x{cmd[0]:02X}\")\n        if cmd[0] in Reply.LENGTHS:\n            length = Reply.LENGTHS[cmd[0]]\n        else:\n            cmd += await read(1)\n            length = cmd[1] + 2\n        while len(cmd) < length:\n            cmd += await read(length - len(cmd))\n        return list(cmd)\n    raise TruncatedCommandError(\n        f\"HWC sent a truncated response: {' '.join(f'{b:02X}' for b in cmd)}\")\ntask_status.started()\nwhile True:\n    logger.debug(f'Listening for HWC message')\n    try:\n        cmd = await read_command()\n    except TruncatedCommandError as err:\n        logger.warning(f'{err}')\n        await self._replies_in.send(err)\n    else:\n        if cmd[0] in Reply.ERROR_REPLIES:\n            logger.info(f\"Got HWC message: {' '.join(f'{b:02X}' for b in cmd)}\"\n                )\n        else:\n            logger.debug(\n                f\"Got HWC message: {' '.join(f'{b:02X}' for b in cmd)}\")\n        if cmd[0] in Reply.UPDATES:\n            decode = decoders[cmd[0]]\n            self._enqueue_update(decode(cmd))\n        else:\n            await self._replies_in.send(cmd)\n"
}