{
    "functionName": "test_pull_account_rolls",
    "className": "TestMonitorRollsService",
    "fileName": "/AndreMiras_&_EtherollApp/src_&_etherollapp_&_tests_&_service_&_test_main.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Makes sure the merged logs are fetched and cached.\n        Also checks were're notifying on merged logs changes.\n        \"\"\"\nservice = MonitorRollsService()\naddress = '46044beAa1E985C67767E04dE58181de5DAAA00F'\nm_account = mock.MagicMock()\nm_account.address = binascii.unhexlify(address)\nassert service.merged_logs == {}\nassert service.last_roll_activity is None\nmerged_logs = []\nwith self.patch_get_merged_logs() as m_get_merged_logs, patch_get_abi(\n    ) as m_get_abi:\n    m_get_merged_logs.return_value = merged_logs\n    service.pull_account_rolls(m_account)\nassert m_get_merged_logs.mock_calls == [mock.call(address=\n    f'0x{address.lower()}')]\nassert m_get_abi.mock_calls == [mock.call()]\nassert service.merged_logs == {f'0x{address.lower()}': merged_logs}\nassert service.last_roll_activity is None\nmerged_logs = ['something else']\nwith self.patch_get_merged_logs() as m_get_merged_logs, mock.patch.object(\n    MonitorRollsService, 'do_notify') as m_do_notify:\n    m_get_merged_logs.return_value = merged_logs\n    service.pull_account_rolls(m_account)\nassert m_get_merged_logs.mock_calls == [mock.call(address=\n    f'0x{address.lower()}')]\nassert m_do_notify.call_args_list == [mock.call(merged_logs)]\n"
}