{
    "functionName": "test_split_key_register_get_destroy",
    "className": "TestIntegration",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_integration_&_services_&_test_integration.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Tests that split keys are properly registered, retrieved, and\n        destroyed.\n        \"\"\"\nusage_mask = self.attr_factory.create_attribute(AttributeType.\n    CRYPTOGRAPHIC_USAGE_MASK, [CryptographicUsageMask.ENCRYPT,\n    CryptographicUsageMask.DECRYPT])\nkey_name = 'Integration Test - Register-Get-Destroy Split Key'\nname = self.attr_factory.create_attribute(AttributeType.NAME, key_name)\ntemplate_attribute = TemplateAttribute(attributes=[usage_mask, name])\nkey_data = b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\nkey_block = KeyBlock(key_format_type=KeyFormatType(KeyFormatTypeEnum.RAW),\n    key_compression_type=None, key_value=KeyValue(KeyMaterial(key_data)),\n    cryptographic_algorithm=CryptographicAlgorithm(CryptoAlgorithmEnum.AES),\n    cryptographic_length=CryptographicLength(128), key_wrapping_data=None)\nsecret = SplitKey(split_key_parts=3, key_part_identifier=1,\n    split_key_threshold=2, split_key_method=enums.SplitKeyMethod.XOR,\n    prime_field_size=None, key_block=key_block)\nresult = self.client.register(ObjectType.SPLIT_KEY, template_attribute,\n    secret, credential=None)\nself._check_result_status(result, ResultStatus, ResultStatus.SUCCESS)\nself._check_uuid(result.uuid, str)\nuuid = result.uuid\nresult = self.client.get(uuid=uuid, credential=None)\nself._check_result_status(result, ResultStatus, ResultStatus.SUCCESS)\nself._check_object_type(result.object_type, ObjectType, ObjectType.SPLIT_KEY)\nself._check_uuid(result.uuid, str)\nself.assertEqual(3, result.secret.split_key_parts)\nself.assertEqual(1, result.secret.key_part_identifier)\nself.assertEqual(2, result.secret.split_key_threshold)\nself.assertEqual(enums.SplitKeyMethod.XOR, result.secret.split_key_method)\nself.assertIsNone(result.secret.prime_field_size)\nself.assertIsInstance(result.secret, SplitKey)\nself.assertEqual(key_data, result.secret.key_block.key_value.key_material.value\n    )\nself.logger.debug('Destroying key: ' + key_name + '\\nWith UUID: ' + result.uuid\n    )\nresult = self.client.destroy(result.uuid)\nself._check_result_status(result, ResultStatus, ResultStatus.SUCCESS)\nself._check_uuid(result.uuid.value, str)\nresult = self.client.get(uuid=uuid, credential=None)\nself._check_result_status(result, ResultStatus, ResultStatus.OPERATION_FAILED)\nself.assertIsInstance(result.result_reason.value, ResultReason)\nself.assertEqual(ResultReason.ITEM_NOT_FOUND, result.result_reason.value)\n"
}