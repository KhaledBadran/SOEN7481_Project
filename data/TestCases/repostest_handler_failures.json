{
    "functionName": "test_handler_failures",
    "className": null,
    "fileName": "/PlaidWeb_&_Authl/tests_&_handlers_&_test_indieauth.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "store = {}\nhandler = indieauth.IndieAuth('http://client/', tokens.DictStore(store), 10)\nrequests_mock.get('http://no-endpoint/', text='hello')\nresponse = handler.initiate_auth('http://no-endpoint/', 'http://cb/', 'bogus')\nassert isinstance(response, disposition.Error)\nassert 'endpoint' in response.message\nassert len(store) == 0\nresponse = handler.check_callback('http://no-transaction', {}, {})\nassert isinstance(response, disposition.Error)\nassert 'No transaction' in response.message\nassert len(store) == 0\nresponse = handler.check_callback('http://bogus-transaction', {'state':\n    'bogus'}, {})\nassert isinstance(response, disposition.Error)\nassert 'Invalid token' in response.message\nassert len(store) == 0\nrequests_mock.get('http://example.user/', text='hello', headers={'Link':\n    '<http://endpoint/>; rel=\"authorization_endpoint\"'})\nresponse = handler.initiate_auth('http://example.user', 'http://client/cb',\n    '/dest')\nassert isinstance(response, disposition.Redirect)\ndata = {'state': parse_args(response.url)['state']}\nassert len(store) == 1\nassert \"Missing 'code'\" in handler.check_callback('http://client/cb', data, {}\n    ).message\nassert len(store) == 0\ndef check_failure(message):\n    assert len(store) == 0\n    response = handler.initiate_auth('http://example.user',\n        'http://client/cb', '/dest')\n    assert isinstance(response, disposition.Redirect)\n    assert len(store) == 1\n    data = {'state': parse_args(response.url)['state'], 'code': 'bogus'}\n    response = handler.check_callback('http://client/cb', data, {})\n    assert isinstance(response, disposition.Error)\n    assert message in response.message\n    assert len(store) == 0\nrequests_mock.post('http://endpoint/', status_code=400)\ncheck_failure('returned 400')\nrequests_mock.post('http://endpoint/', text='invalid json')\ncheck_failure('invalid response JSON')\nrequests_mock.post('http://endpoint/', text=json.dumps({'me':\n    'http://whitehouse.gov'}))\nrequests_mock.get('http://whitehouse.gov', text='hello there')\ncheck_failure('Domain mismatch')\n"
}