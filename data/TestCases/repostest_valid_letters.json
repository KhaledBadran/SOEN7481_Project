{
    "functionName": "test_valid_letters",
    "className": "TestSignalModelRelated",
    "fileName": "/BciPy_&_BciPy/bcipy_&_helpers_&_tests_&_test_signal_model.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "alp = alphabet()\ncp = CopyPhraseWrapper(min_num_seq=1, max_num_seq=50, signal_model=None, fs\n    =25, k=2, alp=alp, task_list=[('HELLO_WORLD', 'HE')], is_txt_stim=True,\n    device_name='LSL', evidence_names=['LM', 'ERP'], device_channels=['ch1',\n    'ch2', 'ch3', 'ch4', 'ch5', 'ch6', 'ch7', 'ch8', 'ch9', 'ch10', 'ch11',\n    'ch12', 'ch13', 'ch14', 'ch15', 'ch16', 'TRG'], stimuli_timing=[0.5, 0.25])\ntriggers = [('+', 0.0), ('H', 0.5670222830376588), ('D', 0.8171830819919705\n    ), ('J', 1.0843321380089037), ('B', 1.3329724550130777), ('C', \n    1.5825864360085689), ('A', 1.833380013005808), ('F', 2.083211077027954),\n    ('G', 2.333359022042714), ('I', 2.583265081048012), ('E', \n    2.833274284028448)]\ntarget_info = ['nontarget', 'nontarget', 'nontarget', 'nontarget',\n    'nontarget', 'nontarget', 'nontarget', 'nontarget', 'nontarget',\n    'nontarget', 'nontarget']\nletters, timings, labels = cp.letter_info(triggers, target_info)\nexpected_letters = ['H', 'D', 'J', 'B', 'C', 'A', 'F', 'G', 'I', 'E']\nexpected_time = [0.5670222830376588, 0.8171830819919705, 1.0843321380089037,\n    1.3329724550130777, 1.5825864360085689, 1.833380013005808, \n    2.083211077027954, 2.333359022042714, 2.583265081048012, 2.833274284028448]\nself.assertEqual(expected_letters, letters)\nself.assertEqual(expected_time, timings)\nself.assertEqual(len(letters), len(labels))\ntriggers = [('calibration_trigger', 0.0), ('+', 0.1), ('H', \n    0.5670222830376588), ('D', 0.8171830819919705), ('J', \n    1.0843321380089037), ('B', 1.3329724550130777), ('C', \n    1.5825864360085689), ('A', 1.833380013005808), ('F', 2.083211077027954),\n    ('G', 2.333359022042714), ('I', 2.583265081048012), ('E', \n    2.833274284028448)]\ntarget_info = ['calib', 'fixation', 'nontarget', 'nontarget', 'nontarget',\n    'nontarget', 'nontarget', 'nontarget', 'nontarget', 'nontarget',\n    'nontarget', 'nontarget']\nletters, timings, labels = cp.letter_info(triggers, target_info)\nself.assertEqual(expected_letters, letters)\nself.assertEqual(expected_time, timings)\nself.assertEqual(['nontarget'] * len(letters), labels)\nwith self.assertRaises(Exception):\n    cp.letter_info([('A', 0.0), ('*', 1.0)], ['nontarget', 'nontarget'])\n"
}