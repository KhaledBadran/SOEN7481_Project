{
    "functionName": "stitch",
    "className": null,
    "fileName": "/pmeal_&_OpenPNM/openpnm_&_topotools_&_topotools.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"\n    Stitches a second a network to the current network.\n\n    Parameters\n    ----------\n    network : OpenPNM Network Object\n        The Network to which to donor Network will be attached\n\n    donor : OpenPNM Network Object\n        The Network to stitch on to the current Network\n\n    P_network : array_like\n        The pores on the current Network\n\n    P_donor : array_like\n        The pores on the donor Network\n\n    label_suffix : str or None\n        Some text to append to each label in the donor Network before\n        inserting them into the recipient.  The default is to append no\n        text, but a common option would be to append the donor Network's\n        name. To insert none of the donor labels, use ``None``.\n\n    label_stitches : str or list of strings\n        The label to apply to the newly created 'stitch' throats.  The\n        defaul is 'stitched'.  If performing multiple stitches in a row it\n        might be helpful to the throats created during each step uniquely\n        for later identification.\n\n    len_max : float\n        Set a length limit on length of new throats\n\n    method : string (default = 'nearest')\n        The method to use when making pore to pore connections. Options are:\n\n        - 'radius' : Connects each pore on the recipient network to the\n                     nearest pores on the donor network, within ``len_max``\n        - 'nearest' : Connects each pore on the recipienet network to the\n                      nearest pore on the donor network.\n\n    Notes\n    -----\n    Before stitching it is necessary to translate the pore coordinates of\n    one of the Networks so that it is positioned correctly relative to the\n    other.\n\n    Examples\n    --------\n    >>> import openpnm as op\n    >>> pn = op.network.Cubic(shape=[5, 5, 5])\n    >>> pn2 = op.network.Cubic(shape=[5, 5, 5])\n    >>> [pn.Np, pn.Nt]\n    [125, 300]\n    >>> [pn2.Np, pn2.Nt]\n    [125, 300]\n    >>> pn2['pore.coords'][:, 2] += 5.0\n    >>> op.topotools.stitch(network=pn, donor=pn2, P_network=pn.pores('top'),\n    ...                     P_donor=pn2.pores('bottom'), method='radius',\n    ...                     len_max=1.0)\n    >>> [pn.Np, pn.Nt]\n    [250, 625]\n\n    \"\"\"\nif len(network.project) > 1 or len(donor.project) > 1:\n    raise Exception('Cannot stitch a Network with active objects')\nif isinstance(label_stitches, str):\n    label_stitches = [label_stitches]\nfor s in label_stitches:\n    if s not in network.keys():\n        network['throat.' + s] = False\nN_init = {}\nN_init['pore'] = network.Np\nN_init['throat'] = network.Nt\nif method == 'nearest':\n    P1 = P_network\n    P2 = P_donor + N_init['pore']\n    C1 = network['pore.coords'][P_network]\n    C2 = donor['pore.coords'][P_donor]\n    D = sp.spatial.distance.cdist(C1, C2)\n    [P1_ind, P2_ind] = np.where(D == D.min(axis=0))\n    conns = np.vstack((P1[P1_ind], P2[P2_ind])).T\nelif method == 'radius':\n    P1 = P_network\n    P2 = P_donor + N_init['pore']\n    C1 = network['pore.coords'][P_network]\n    C2 = donor['pore.coords'][P_donor]\n    D = sp.spatial.distance.cdist(C1, C2)\n    [P1_ind, P2_ind] = np.where(D <= len_max)\n    conns = np.vstack((P1[P1_ind], P2[P2_ind])).T\nelse:\n    raise Exception('<{}> method not supported'.format(method))\nextend(network=network, pore_coords=donor['pore.coords'])\nextend(network=network, throat_conns=donor['throat.conns'] + N_init['pore'])\nif label_suffix is not None:\n    if label_suffix != '':\n        label_suffix = '_' + label_suffix\n    for label in donor.labels():\n        element = label.split('.')[0]\n        locations = np.where(network._get_indices(element) >= N_init[element])[\n            0]\n        if label + label_suffix not in network.keys():\n            network[label + label_suffix] = False\n        network[label + label_suffix][locations] = donor[label]\nextend(network=network, throat_conns=conns, labels=label_stitches)\nfor sim in list(ws.values()):\n    if donor in sim:\n        del ws[sim.name]\n"
}