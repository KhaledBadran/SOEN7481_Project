{
    "functionName": "test_ie_buttons",
    "className": "TestDemagGUI",
    "fileName": "/PmagPy_&_PmagPy/pmagpy_tests_&_test_demag_gui.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "self.mark_all_meas_good(self.frame)\nself.assertFalse(self.frame.ie_open)\nself.frame.on_menu_edit_interpretations(-1)\nself.assertTrue(self.frame.ie_open)\nie = self.frame.ie\ntmin = self.frame.Data[self.frame.s]['zijdblock_steps'][0]\ntmax = self.frame.Data[self.frame.s]['zijdblock_steps'][-1]\nfor i in range(2, len(self.frame.Data[self.frame.s]['zijdblock_steps'])):\n    if tmin != tmax:\n        break\n    else:\n        tmax = self.frame.Data[self.frame.s]['zijdblock_steps'][-i]\ntmin_index, tmax_index = self.frame.get_indices(None, tmin, tmax, self.frame.s)\nie.tmin_box.SetValue(tmin)\nie.tmax_box.SetValue(tmax)\nie.name_box.WriteText('Test')\nif 'goldenrod' in list(ie.color_dict.keys()):\n    ie.color_box.SetValue('goldenrod')\nself.assertEqual(ie.tmin_box.GetValue(), tmin)\nself.assertEqual(ie.tmax_box.GetValue(), tmax)\nself.assertEqual(ie.name_box.GetValue(), 'Test')\naddall_evt = wx.PyCommandEvent(wx.EVT_BUTTON.typeId, ie.add_all_button.GetId())\naddhighlight_evt = wx.PyCommandEvent(wx.EVT_BUTTON.typeId, ie.\n    add_fit_button.GetId())\ndelete_evt = wx.PyCommandEvent(wx.EVT_BUTTON.typeId, ie.delete_fit_button.\n    GetId())\napply_change_evt = wx.PyCommandEvent(wx.EVT_BUTTON.typeId, ie.\n    apply_changes_button.GetId())\nie.ProcessEvent(addall_evt)\nself.assertEqual(self.frame.current_fit, self.frame.pmag_results_data[\n    'specimens'][self.frame.s][0])\nvalid_specs = 0\nfor speci in self.frame.specimens:\n    if tmin not in self.frame.Data[speci]['zijdblock_steps'\n        ] or tmax not in self.frame.Data[speci]['zijdblock_steps'\n        ] or speci not in self.frame.pmag_results_data['specimens'] or len(self\n        .frame.pmag_results_data['specimens'][speci]) < 1:\n        continue\n    fit = self.frame.pmag_results_data['specimens'][speci][0]\n    tmin_index, tmax_index = self.frame.get_indices(fit, tmin, tmax, speci)\n    if tmin_index < 0:\n        self.assertEqual(fit.tmin, self.frame.Data[speci]['zijdblock_steps'][0]\n            )\n    elif tmin in self.frame.Data[speci]['zijdblock_steps']:\n        self.assertEqual(fit.tmin, tmin)\n    else:\n        self.assertEqual(fit.tmin, self.frame.Data[speci]['zijdblock_steps'\n            ][tmin_index])\n    if tmax_index > len(self.frame.Data[speci]['zijdblock_steps']) - 1:\n        self.assertEqual(fit.tmax, self.frame.Data[speci]['zijdblock_steps'\n            ][-1])\n    elif tmax in self.frame.Data[speci]['zijdblock_steps']:\n        if fit.tmax != tmax:\n            import pdb\n            pdb.set_trace()\n        self.assertEqual(fit.tmax, tmax)\n    else:\n        self.assertEqual(fit.tmax, self.frame.Data[speci]['zijdblock_steps'\n            ][tmax_index])\n    self.assertEqual(fit.name, 'Test')\n    valid_specs += 1\nfor fit, speci in ie.fit_list:\n    tmin_index, tmax_index = self.frame.get_indices(fit, tmin, tmax, speci)\n    if tmin_index < 0:\n        self.assertEqual(fit.tmin, self.frame.Data[speci]['zijdblock_steps'][0]\n            )\n    elif tmin in self.frame.Data[speci]['zijdblock_steps']:\n        self.assertEqual(fit.tmin, tmin)\n    else:\n        self.assertEqual(fit.tmin, self.frame.Data[speci]['zijdblock_steps'\n            ][tmin_index])\n    if tmax_index > len(self.frame.Data[speci]['zijdblock_steps']) - 1:\n        self.assertEqual(fit.tmax, self.frame.Data[speci]['zijdblock_steps'\n            ][-1])\n    elif tmax in self.frame.Data[speci]['zijdblock_steps']:\n        self.assertEqual(fit.tmax, tmax)\n    else:\n        self.assertEqual(fit.tmax, self.frame.Data[speci]['zijdblock_steps'\n            ][tmax_index])\n    self.assertEqual(fit.name, 'Test')\nie.ProcessEvent(addhighlight_evt)\nself.assertEqual(self.frame.total_num_of_interpertations(), valid_specs)\nie.name_box.SetValue('HighlightedTest')\nif 'green' in list(ie.color_dict.keys()):\n    ie.color_box.SetValue('green')\nie.logger.SetItemState(0, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)\nie.logger.SetItemState(1, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)\nie.ProcessEvent(addhighlight_evt)\nself.assertEqual(self.frame.total_num_of_interpertations(), valid_specs + 2)\nk0, k1 = ie.fit_list[0][1], ie.fit_list[1][1]\nnew_fits = [[self.frame.pmag_results_data['specimens'][k0][1], k0]]\nnew_fits.append([self.frame.pmag_results_data['specimens'][k1][1], k1])\nfor fit, speci in new_fits:\n    tmin_index, tmax_index = self.frame.get_indices(fit, tmin, tmax, speci)\n    if tmin_index < 0:\n        self.assertEqual(fit.tmin, self.frame.Data[speci]['zijdblock_steps'][0]\n            )\n    elif tmin in self.frame.Data[speci]['zijdblock_steps']:\n        self.assertEqual(fit.tmin, tmin)\n    else:\n        self.assertEqual(fit.tmin, self.frame.Data[speci]['zijdblock_steps'\n            ][tmin_index])\n    if tmax_index > len(self.frame.Data[speci]['zijdblock_steps']) - 1:\n        self.assertEqual(fit.tmax, self.frame.Data[speci]['zijdblock_steps'\n            ][-1])\n    elif tmax in self.frame.Data[speci]['zijdblock_steps']:\n        self.assertEqual(fit.tmax, tmax)\n    else:\n        self.assertEqual(fit.tmax, self.frame.Data[speci]['zijdblock_steps'\n            ][tmax_index])\n    self.assertEqual(fit.name, 'HighlightedTest')\nie.ProcessEvent(delete_evt)\nie.logger.SetItemState(1, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)\nie.logger.SetItemState(3, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)\nie.ProcessEvent(delete_evt)\nwx.CallAfter(self.assertEqual, (self.frame.total_num_of_interpertations(),\n    valid_specs))\nie.ProcessEvent(apply_change_evt)\nfor speci in self.frame.specimens:\n    if len(self.frame.pmag_results_data['specimens'][speci]) == 0:\n        continue\n    fit = self.frame.pmag_results_data['specimens'][speci][0]\n    tmin_index, tmax_index = self.frame.get_indices(fit, tmin, tmax, speci)\n    if tmin_index < 0:\n        self.assertEqual(fit.tmin, self.frame.Data[speci]['zijdblock_steps'][0]\n            )\n    elif tmin in self.frame.Data[speci]['zijdblock_steps']:\n        self.assertEqual(fit.tmin, tmin)\n    else:\n        self.assertEqual(fit.tmin, self.frame.Data[speci]['zijdblock_steps'\n            ][tmin_index])\n    if tmax_index > len(self.frame.Data[speci]['zijdblock_steps']) - 1:\n        self.assertEqual(fit.tmax, self.frame.Data[speci]['zijdblock_steps'\n            ][-1])\n    elif tmax in self.frame.Data[speci]['zijdblock_steps']:\n        self.assertEqual(fit.tmax, tmax)\n    else:\n        self.assertEqual(fit.tmax, self.frame.Data[speci]['zijdblock_steps'\n            ][tmax_index])\n    self.assertEqual(fit.name, 'Test')\nfor fit, speci in ie.fit_list:\n    tmin_index, tmax_index = self.frame.get_indices(fit, tmin, tmax, speci)\n    if tmin_index < 0:\n        self.assertEqual(fit.tmin, self.frame.Data[speci]['zijdblock_steps'][0]\n            )\n    elif tmin in self.frame.Data[speci]['zijdblock_steps']:\n        self.assertEqual(fit.tmin, tmin)\n    else:\n        self.assertEqual(fit.tmin, self.frame.Data[speci]['zijdblock_steps'\n            ][tmin_index])\n    if tmax_index > len(self.frame.Data[speci]['zijdblock_steps']) - 1:\n        self.assertEqual(fit.tmax, self.frame.Data[speci]['zijdblock_steps'\n            ][-1])\n    elif tmax in self.frame.Data[speci]['zijdblock_steps']:\n        self.assertEqual(fit.tmax, tmax)\n    else:\n        self.assertEqual(fit.tmax, self.frame.Data[speci]['zijdblock_steps'\n            ][tmax_index])\n    self.assertEqual(fit.name, 'Test')\nie.tmin_box.SetValue(tmin)\nie.tmax_box.SetValue(tmax)\nie.name_box.SetValue('Test')\nif 'goldenrod' in list(ie.color_dict.keys()):\n    ie.color_box.SetValue('goldenrod')\nself.assertEqual(ie.tmin_box.GetValue(), tmin)\nself.assertEqual(ie.tmax_box.GetValue(), tmax)\nself.assertEqual(ie.name_box.GetValue(), 'Test')\nfor i in range(ie.logger.GetItemCount()):\n    ie.logger.SetItemState(i, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)\nie.ProcessEvent(apply_change_evt)\nfor speci in self.frame.specimens:\n    if tmin not in self.frame.Data[speci]['zijdblock_steps'\n        ] or tmax not in self.frame.Data[speci]['zijdblock_steps'\n        ] or speci not in self.frame.pmag_results_data['specimens'] or len(self\n        .frame.pmag_results_data['specimens'][speci]) < 1:\n        continue\n    fit = self.frame.pmag_results_data['specimens'][speci][0]\n    tmin_index, tmax_index = self.frame.get_indices(fit, tmin, tmax, speci)\n    if tmin_index < 0:\n        self.assertEqual(fit.tmin, self.frame.Data[speci]['zijdblock_steps'][0]\n            )\n    elif tmin in self.frame.Data[speci]['zijdblock_steps']:\n        self.assertEqual(fit.tmin, tmin)\n    else:\n        self.assertEqual(fit.tmin, self.frame.Data[speci]['zijdblock_steps'\n            ][tmin_index])\n    if tmax_index > len(self.frame.Data[speci]['zijdblock_steps']) - 1:\n        self.assertEqual(fit.tmax, self.frame.Data[speci]['zijdblock_steps'\n            ][-1])\n    elif tmax in self.frame.Data[speci]['zijdblock_steps']:\n        self.assertEqual(fit.tmax, tmax)\n    else:\n        self.assertEqual(fit.tmax, self.frame.Data[speci]['zijdblock_steps'\n            ][tmax_index])\n    self.assertEqual(fit.name, 'Test')\nfor fit, speci in ie.fit_list:\n    tmin_index, tmax_index = self.frame.get_indices(fit, tmin, tmax, speci)\n    if tmin_index < 0:\n        self.assertEqual(fit.tmin, self.frame.Data[speci]['zijdblock_steps'][0]\n            )\n    elif tmin in self.frame.Data[speci]['zijdblock_steps']:\n        self.assertEqual(fit.tmin, tmin)\n    else:\n        self.assertEqual(fit.tmin, self.frame.Data[speci]['zijdblock_steps'\n            ][tmin_index])\n    if tmax_index > len(self.frame.Data[speci]['zijdblock_steps']) - 1:\n        self.assertEqual(fit.tmax, self.frame.Data[speci]['zijdblock_steps'\n            ][-1])\n    elif tmax in self.frame.Data[speci]['zijdblock_steps']:\n        self.assertEqual(fit.tmax, tmax)\n    else:\n        self.assertEqual(fit.tmax, self.frame.Data[speci]['zijdblock_steps'\n            ][tmax_index])\n    self.assertEqual(fit.name, 'Test')\ntmin = self.frame.Data[self.frame.s]['zijdblock_steps'][1]\ntmax = self.frame.Data[self.frame.s]['zijdblock_steps'][-2]\ntmin_index, tmax_index = self.frame.get_indices(None, tmin, tmax, self.frame.s)\nie.tmin_box.SetValue(tmin)\nie.tmax_box.SetValue(tmax)\nie.name_box.SetValue('OtherTest')\nif 'pink' in list(ie.color_dict.keys()):\n    ie.color_box.SetValue('pink')\nself.assertEqual(ie.tmin_box.GetValue(), tmin)\nself.assertEqual(ie.tmax_box.GetValue(), tmax)\nself.assertEqual(ie.name_box.GetValue(), 'OtherTest')\nfor i in range(ie.logger.GetItemCount()):\n    ie.logger.SetItemState(i, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)\nie.ProcessEvent(apply_change_evt)\nfor fit, speci in ie.fit_list:\n    tmin_index, tmax_index = self.frame.get_indices(fit, tmin, tmax, speci)\n    gui_fit = self.frame.pmag_results_data['specimens'][speci][0]\n    if tmin_index < 0:\n        self.assertEqual(fit.tmin, self.frame.Data[speci]['zijdblock_steps'][0]\n            )\n        self.assertEqual(gui_fit.tmin, self.frame.Data[speci][\n            'zijdblock_steps'][0])\n    elif tmin in self.frame.Data[speci]['zijdblock_steps']:\n        self.assertEqual(fit.tmin, tmin)\n        self.assertEqual(gui_fit.tmin, tmin)\n    else:\n        self.assertEqual(fit.tmin, self.frame.Data[speci]['zijdblock_steps'\n            ][tmin_index])\n        self.assertEqual(gui_fit.tmin, self.frame.Data[speci][\n            'zijdblock_steps'][tmin_index])\n    if tmax_index > len(self.frame.Data[speci]['zijdblock_steps']) - 1:\n        self.assertEqual(fit.tmax, self.frame.Data[speci]['zijdblock_steps'\n            ][-1])\n        self.assertEqual(gui_fit.tmax, self.frame.Data[speci][\n            'zijdblock_steps'][-1])\n    elif tmax in self.frame.Data[speci]['zijdblock_steps']:\n        self.assertEqual(fit.tmax, tmax)\n        self.assertEqual(gui_fit.tmax, tmax)\n    else:\n        self.assertEqual(fit.tmax, self.frame.Data[speci]['zijdblock_steps'\n            ][tmax_index])\n        self.assertEqual(gui_fit.tmax, self.frame.Data[speci][\n            'zijdblock_steps'][tmax_index])\n    self.assertEqual(fit.name, 'OtherTest')\n"
}