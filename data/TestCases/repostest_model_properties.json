{
    "functionName": "test_model_properties",
    "className": "TestMPI",
    "fileName": "/Silmathoron_&_NNGT/testing_&_test_mpi.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        When generating graphs from on of the preconfigured models, check that\n        the expected properties are indeed obtained.\n        \"\"\"\nif nngt.get_config('backend') != 'nngt' and nngt.on_master_process():\n    graph_type = instructions['graph_type']\n    ref_result = self.theo_prop[graph_type](instructions)\n    computed_result = self.exp_prop[graph_type](graph, instructions)\n    if graph_type == 'distance_rule':\n        self.assertTrue(ref_result[0] == computed_result[0],\n            \"\"\"Avg. deg. for graph {} failed:\nref = {} vs exp {}                    \"\"\"\n            .format(graph.name, ref_result[0], computed_result[0]))\n        sqd = np.square(np.subtract(ref_result[1:], computed_result[1:]))\n        avg_sqd = sqd / np.square(computed_result[1:])\n        err = np.sqrt(avg_sqd).mean()\n        tolerance = self.tolerance if instructions['rule'] == 'lin' else 0.25\n        self.assertTrue(err <= tolerance,\n            \"\"\"Distance distribution for graph {} failed:\nerr = {} > {}                    \"\"\"\n            .format(graph.name, err, tolerance))\nelif nngt.get_config('backend') == 'nngt':\n    from mpi4py import MPI\n    comm = MPI.COMM_WORLD\n    num_proc = comm.Get_size()\n    graph_type = instructions['graph_type']\n    ref_result = self.theo_prop[graph_type](instructions)\n    computed_result = self.exp_prop[graph_type](graph, instructions)\n    if graph_type == 'distance_rule':\n        self.assertTrue(ref_result[0] == computed_result[0] * num_proc,\n            \"\"\"Avg. deg. for graph {} failed:\nref = {} vs exp {}                    \"\"\"\n            .format(graph.name, ref_result[0], computed_result[0]))\n        sqd = np.square(np.subtract(ref_result[1:], computed_result[1:]))\n        avg_sqd = sqd / np.square(computed_result[1:])\n        err = np.sqrt(avg_sqd).mean()\n        tolerance = self.tolerance if instructions['rule'] == 'lin' else 0.25\n        self.assertTrue(err <= tolerance,\n            \"\"\"Distance distribution for graph {} failed:\nerr = {} > {}                    \"\"\"\n            .format(graph.name, err, tolerance))\nforeach_graph"
}