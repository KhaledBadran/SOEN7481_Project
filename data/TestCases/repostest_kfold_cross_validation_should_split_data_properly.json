{
    "functionName": "test_kfold_cross_validation_should_split_data_properly",
    "className": null,
    "fileName": "/Neuraxio_&_Neuraxle/testing_&_metaopt_&_test_automl.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "data_inputs = np.random.random((4, 2, 2048, 6)).astype(np.float32)\nexpected_outputs = np.random.random((4, 2, 2048, 1)).astype(np.float32)\nsplitter = KFoldCrossValidationSplitter(k_fold=4)\nvalidation_splits = splitter.split_data_container(DataContainer(data_inputs\n    =data_inputs, expected_outputs=expected_outputs))\ntrain_di, train_eo, validation_di, validation_eo = (\n    extract_validation_split_data(validation_splits))\nassert len(train_di[0]) == 3\nassert np.array_equal(np.array(train_di[0]), data_inputs[1:])\nassert len(train_eo[0]) == 3\nassert np.array_equal(np.array(train_eo[0]), expected_outputs[1:])\nassert len(train_di[1]) == 3\nassert np.array_equal(np.array(train_di[1]), np.concatenate((np.expand_dims\n    (data_inputs[0], axis=0), data_inputs[2:]), axis=0))\nassert len(train_eo[1]) == 3\nassert np.array_equal(np.array(train_eo[1]), np.concatenate((np.expand_dims\n    (expected_outputs[0], axis=0), expected_outputs[2:]), axis=0))\nassert len(train_di[2]) == 3\nassert np.array_equal(np.array(train_di[2]), np.concatenate((data_inputs[0:\n    2], np.expand_dims(data_inputs[3], axis=0)), axis=0))\nassert len(train_eo[2]) == 3\nassert np.array_equal(np.array(train_eo[2]), np.concatenate((\n    expected_outputs[0:2], np.expand_dims(expected_outputs[3], axis=0)),\n    axis=0))\nassert len(train_di[3]) == 3\nassert np.array_equal(np.array(train_di[3]), data_inputs[0:3])\nassert len(train_eo[3]) == 3\nassert np.array_equal(np.array(train_eo[3]), expected_outputs[0:3])\nassert len(validation_di[0]) == 1\nassert np.array_equal(validation_di[0][0], data_inputs[0])\nassert len(validation_eo[0]) == 1\nassert np.array_equal(validation_eo[0][0], expected_outputs[0])\nassert len(validation_di[1]) == 1\nassert np.array_equal(validation_di[1][0], data_inputs[1])\nassert len(validation_eo[1]) == 1\nassert np.array_equal(validation_eo[1][0], expected_outputs[1])\nassert len(validation_di[2]) == 1\nassert np.array_equal(validation_di[2][0], data_inputs[2])\nassert len(validation_eo[2]) == 1\nassert np.array_equal(validation_eo[2][0], expected_outputs[2])\nassert len(validation_di[3]) == 1\nassert np.array_equal(validation_di[3][0], data_inputs[3])\nassert len(validation_eo[3]) == 1\nassert np.array_equal(validation_eo[3][0], expected_outputs[3])\n"
}