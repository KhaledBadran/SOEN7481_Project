{
    "functionName": "test_crop_works",
    "className": "TestCropping",
    "fileName": "/ornlneutronimaging_&_NeuNorm/tests_&_NeuNorm_&_cropping_test.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"assert crop of sample and ob works correctly\"\"\"\nx0, y0, x1, y1 = 0, 0, 2, 2\n_roi = ROI(x0=x0, y0=y0, x1=x1, y1=y1)\no_norm = Normalization()\nsample_path = self.data_path + '/tif/sample'\no_norm.load(folder=sample_path, auto_gamma_filter=False)\nob_path = self.data_path + '/tif/ob'\no_norm.load(folder=ob_path, data_type='ob', auto_gamma_filter=False)\no_norm.normalization()\n_expected_sample = o_norm.data['sample']['data'][0]\n_expected_sample = _expected_sample[y0:y1 + 1, x0:x1 + 1]\n_expected_ob = o_norm.data['ob']['data'][0]\n_expected_ob = _expected_ob[y0:y1 + 1, x0:x1 + 1]\no_norm.crop(roi=_roi)\n_returned_sample = o_norm.data['sample']['data'][0]\n_returned_ob = o_norm.data['ob']['data'][0]\nself.assertTrue((_expected_sample == _returned_sample).all())\nself.assertTrue((_expected_ob == _returned_ob).all())\n"
}