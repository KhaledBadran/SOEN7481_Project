{
    "functionName": "test_xml_rpc_communication",
    "className": "RunfilesTest",
    "fileName": "/fabioz_&_PyDev.Debugger/tests_runfiles_&_test_runfiles.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "import sys\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), 'samples'))\nnotifications = []\nclass Server:\n\n    def __init__(self, notifications):\n        self.notifications = notifications\n\n    def notifyConnected(self):\n        raise AssertionError('Should not be called from the run tests.')\n\n    def notifyTestsCollected(self, number_of_tests):\n        self.notifications.append(('notifyTestsCollected', number_of_tests))\n\n    def notifyStartTest(self, file, test):\n        pass\n\n    def notifyTest(self, cond, captured_output, error_contents, file, test,\n        time):\n        try:\n            captured_output = captured_output.data\n        except:\n            pass\n        try:\n            error_contents = error_contents.data\n        except:\n            pass\n        if error_contents:\n            error_contents = error_contents.splitlines()[-1].strip()\n        self.notifications.append(('notifyTest', cond, captured_output.\n            strip(), error_contents, file, test))\n\n    def notifyTestRunFinished(self, total_time):\n        self.notifications.append(('notifyTestRunFinished',))\nserver = Server(notifications)\npydev_runfiles_xml_rpc.set_server(server)\nsimple_test = os.path.join(self.file_dir[0], 'simple_test.py')\nsimple_test2 = os.path.join(self.file_dir[0], 'simple2_test.py')\nsimpleClass_test = os.path.join(self.file_dir[0], 'simpleClass_test.py')\nsimpleModule_test = os.path.join(self.file_dir[0], 'simpleModule_test.py')\nfiles_to_tests = {}\nfiles_to_tests.setdefault(simple_test, []).append('SampleTest.test_xxxxxx1')\nfiles_to_tests.setdefault(simple_test, []).append('SampleTest.test_xxxxxx2')\nfiles_to_tests.setdefault(simple_test, []).append(\n    'SampleTest.test_non_unique_name')\nfiles_to_tests.setdefault(simple_test2, []).append(\n    'YetAnotherSampleTest.test_abc')\nfiles_to_tests.setdefault(simpleClass_test, []).append(\n    'SetUpClassTest.test_blank')\nfiles_to_tests.setdefault(simpleModule_test, []).append(\n    'SetUpModuleTest.test_blank')\nself._setup_scenario(None, files_to_tests=files_to_tests)\nself.MyTestRunner.verbosity = 2\nbuf = pydevd_io.start_redirect(keep_original_redirection=False)\ntry:\n    self.MyTestRunner.run_tests()\n    self.assertEqual(8, len(notifications))\n    if sys.version_info[:2] <= (2, 6):\n        expected = [('notifyTest', 'fail', '',\n            'AssertionError: Fail test 2', simple_test,\n            'SampleTest.test_xxxxxx1'), ('notifyTest', 'ok', '', '',\n            simple_test2, 'YetAnotherSampleTest.test_abc'), ('notifyTest',\n            'ok', '', '', simpleClass_test, 'SetUpClassTest.test_blank'), (\n            'notifyTest', 'ok', '', '', simpleModule_test,\n            'SetUpModuleTest.test_blank'), ('notifyTest', 'ok', '', '',\n            simple_test, 'SampleTest.test_xxxxxx2'), ('notifyTest', 'ok',\n            'non unique name ran', '', simple_test,\n            'SampleTest.test_non_unique_name'), ('notifyTestRunFinished',),\n            ('notifyTestsCollected', 6)]\n    else:\n        expected = [('notifyTestsCollected', 6), ('notifyTest', 'ok',\n            'non unique name ran', '', simple_test,\n            'SampleTest.test_non_unique_name'), ('notifyTest', 'fail', '',\n            'AssertionError: Fail test 2', simple_test,\n            'SampleTest.test_xxxxxx1'), ('notifyTest', 'ok', '', '',\n            simple_test, 'SampleTest.test_xxxxxx2'), ('notifyTest', 'ok',\n            '', '', simple_test2, 'YetAnotherSampleTest.test_abc')]\n        if not IS_JYTHON:\n            if 'samples.simpleClass_test' in str(notifications):\n                expected.append(('notifyTest', 'error', '',\n                    'ValueError: This is an INTENTIONAL value error in setUpClass.'\n                    , simpleClass_test.replace('/', os.path.sep),\n                    'samples.simpleClass_test.SetUpClassTest <setUpClass>'))\n                expected.append(('notifyTest', 'error', '',\n                    'ValueError: This is an INTENTIONAL value error in setUpModule.'\n                    , simpleModule_test.replace('/', os.path.sep),\n                    'samples.simpleModule_test <setUpModule>'))\n            else:\n                expected.append(('notifyTest', 'error', '',\n                    'ValueError: This is an INTENTIONAL value error in setUpClass.'\n                    , simpleClass_test.replace('/', os.path.sep),\n                    'simpleClass_test.SetUpClassTest <setUpClass>'))\n                expected.append(('notifyTest', 'error', '',\n                    'ValueError: This is an INTENTIONAL value error in setUpModule.'\n                    , simpleModule_test.replace('/', os.path.sep),\n                    'simpleModule_test <setUpModule>'))\n        else:\n            expected.append(('notifyTest', 'ok', '', '', simpleClass_test,\n                'SetUpClassTest.test_blank'))\n            expected.append(('notifyTest', 'ok', '', '', simpleModule_test,\n                'SetUpModuleTest.test_blank'))\n        expected.append(('notifyTestRunFinished',))\n    expected.sort()\n    new_notifications = []\n    for notification in expected:\n        try:\n            if len(notification) == 6:\n                new_notifications.append((notification[0], notification[1],\n                    notification[2].encode('latin1'), notification[3].\n                    encode('latin1'), notification[4], notification[5]))\n            else:\n                new_notifications.append(notification)\n        except:\n            raise\n    expected = new_notifications\n    notifications.sort()\n    if not IS_JYTHON:\n        self.assertEqual(expected, notifications)\nfinally:\n    pydevd_io.end_redirect()\nb = buf.getvalue()\nif sys.version_info[:2] > (2, 6):\n    self.assertTrue(b.find('Ran 4 tests in ') != -1, 'Found: ' + b)\nelse:\n    self.assertTrue(b.find('Ran 6 tests in ') != -1, 'Found: ' + b)\n"
}