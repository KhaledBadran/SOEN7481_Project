{
    "functionName": "test_fit_and_transform_ordinal",
    "className": "TestFeatureBinarizerFromTrees",
    "fileName": "/IBM_&_AIX360/tests_&_rbm_&_test_Feature_Binarizer_From_Trees.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "fbt = FeatureBinarizerFromTrees(treeNum=1, treeDepth=1, randomState=self.\n    random_state)\nfbt.fit(self.X_train[self.col_ordinal], self.y_train)\ntemp = [('mean concave points', '<=', 0.04892), ('mean concave points', '>',\n    0.04892)]\nself.assertListEqual(fbt.features.to_list(), temp)\nself.assertDictEqual(fbt.thresh, {'mean concave points': np.array([0.04892])})\nT = fbt.transform(self.X_test)\nself.assertListEqual(T.columns.to_list(), temp)\nfbt = FeatureBinarizerFromTrees(treeNum=1, treeDepth=1, randomState=self.\n    random_state, threshStr=True)\nfbt.fit(self.X_train[self.col_ordinal], self.y_train)\nself.assertDictEqual(fbt.thresh, {'mean concave points': np.array([0.04892])})\nT = fbt.transform(self.X_test)\ntemp = [('mean concave points', '<=', '0.04892'), ('mean concave points',\n    '>', '0.04892')]\nself.assertListEqual(T.columns.to_list(), temp)\nfbt = FeatureBinarizerFromTrees(treeNum=1, treeDepth=1, threshRound=2,\n    randomState=self.random_state)\nfbt.fit(self.X_train[self.col_ordinal], self.y_train)\ntemp = [('mean concave points', '<=', 0.05), ('mean concave points', '>', 0.05)\n    ]\nself.assertListEqual(fbt.features.to_list(), temp)\nself.assertDictEqual(fbt.thresh, {'mean concave points': np.array([0.05])})\nfbt = FeatureBinarizerFromTrees(treeNum=1, treeDepth=None, randomState=self\n    .random_state)\nfbt.fit(self.X_train[self.col_ordinal], self.y_train)\ntemp = {'area error': np.array([46.315001]), 'concavity error': np.array([\n    0.016965]), 'mean area': np.array([995.5]), 'mean concave points': np.\n    array([0.04892]), 'mean texture': np.array([19.9]), 'smoothness error':\n    np.array([0.003299, 0.005083]), 'texture error': np.array([0.51965]),\n    'worst area': np.array([785.799988]), 'worst compactness': np.array([\n    0.4508]), 'worst concavity': np.array([0.3655]), 'worst texture': np.\n    array([23.47, 32.779999, 33.805])}\nfor k, v in fbt.thresh.items():\n    self.assertTrue(np.all(temp[k] == v))\ntemp = [('area error', '<=', 46.315001), ('area error', '>', 46.315001), (\n    'concavity error', '<=', 0.016965), ('concavity error', '>', 0.016965),\n    ('mean area', '<=', 995.5), ('mean area', '>', 995.5), (\n    'mean concave points', '<=', 0.04892), ('mean concave points', '>', \n    0.04892), ('mean texture', '<=', 19.9), ('mean texture', '>', 19.9), (\n    'smoothness error', '<=', 0.003299), ('smoothness error', '<=', \n    0.005083), ('smoothness error', '>', 0.003299), ('smoothness error',\n    '>', 0.005083), ('texture error', '<=', 0.51965), ('texture error', '>',\n    0.51965), ('worst area', '<=', 785.799988), ('worst area', '>', \n    785.799988), ('worst compactness', '<=', 0.4508), ('worst compactness',\n    '>', 0.4508), ('worst concavity', '<=', 0.3655), ('worst concavity',\n    '>', 0.3655), ('worst texture', '<=', 23.47), ('worst texture', '<=', \n    32.779999), ('worst texture', '<=', 33.805), ('worst texture', '>', \n    23.47), ('worst texture', '>', 32.779999), ('worst texture', '>', 33.805)]\nself.assertListEqual(fbt.features.to_list(), temp)\n"
}