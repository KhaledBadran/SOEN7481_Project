{
    "functionName": "test_default_generation_strategy_continuous",
    "className": "TestAxClient",
    "fileName": "/facebook_&_Ax/ax_&_service_&_tests_&_test_ax_client.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"Test that Sobol+GPEI is used if no GenerationStrategy is provided.\"\"\"\nax_client = AxClient()\nax_client.create_experiment(parameters=[{'name': 'x', 'type': 'range',\n    'bounds': [-5.0, 10.0]}, {'name': 'y', 'type': 'range', 'bounds': [0.0,\n    15.0]}], objective_name='a', minimize=True)\nself.assertEqual([s.model for s in not_none(ax_client.generation_strategy).\n    _steps], [Models.SOBOL, Models.GPEI])\nwith self.assertRaisesRegex(ValueError, '.* no trials'):\n    ax_client.get_optimization_trace(objective_optimum=branin.fmin)\nfor i in range(6):\n    parameterization, trial_index = ax_client.get_next_trial()\n    x, y = parameterization.get('x'), parameterization.get('y')\n    ax_client.complete_trial(trial_index, raw_data={'a': (checked_cast(\n        float, branin(checked_cast(float, x), checked_cast(float, y))), 0.0\n        )}, sample_size=i)\nself.assertEqual(ax_client.generation_strategy.model._model_key, 'GPEI')\nax_client.get_optimization_trace(objective_optimum=branin.fmin)\nax_client.get_contour_plot()\nax_client.get_feature_importances()\nself.assertIn('x', ax_client.get_trials_data_frame())\nself.assertIn('y', ax_client.get_trials_data_frame())\nself.assertIn('a', ax_client.get_trials_data_frame())\nself.assertEqual(len(ax_client.get_trials_data_frame()), 6)\npatch('ax.modelbridge.base.observations_from_data', autospec=True,\n    return_value=[get_observation1()])patch('ax.modelbridge.random.RandomModelBridge.get_training_data', autospec\n    =True, return_value=[get_observation1()])patch('ax.modelbridge.random.RandomModelBridge._predict', autospec=True,\n    return_value=[get_observation1trans().data])patch('ax.modelbridge.random.RandomModelBridge.feature_importances',\n    autospec=True, return_value={'x': 0.9, 'y': 1.1})"
}