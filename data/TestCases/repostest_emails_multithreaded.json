{
    "functionName": "test_emails_multithreaded",
    "className": null,
    "fileName": "/alex-ber_&_AlexBerUtils/tests_&_utils_&_emails_test.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "logger.info(f'{request._pyfuncitem.name}()')\nstop = 10\ndef _run_successfuly(stop):\n    for i in range(stop):\n        with EmailStatus(emailLogger=emailLogger, logger=None, faildargs={\n            'status': 'Failed'}, successargs={'status': 'Done'}):\n            run_successfuly()\n    time.sleep(1)\ndef _run_with_failure(stop):\n    for i in range(stop):\n        with EmailStatus(emailLogger=emailLogger, logger=None, faildargs={\n            'status': 'Failed'}, successargs={'status': 'Done'}):\n            run_with_failure()\nth1 = threading.Thread(name='run_successfuly', target=_run_successfuly,\n    args=(stop,))\nth2 = threading.Thread(name='run_with_failure', target=_run_with_failure,\n    args=(stop,))\nth1.start()\nth2.start()\nth1.join()\nth2.join()\nmock_log = emailsFixture.emit\npytest.assume(mock_log.call_count == 2 * stop)\nfor kall in mock_log.call_args_list:\n    (logrecord,), _ = kall\n    if is_failed(logrecord):\n        check_failed(logrecord)\n    else:\n        check_sucess(logrecord)\npytest.mark.parametrize('emailsFixture', [False], indirect=True)"
}