{
    "functionName": "test_register_response_read",
    "className": "TestResponseMessage",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_core_&_messages_&_test_messages.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "self.stream = BytearrayStream(self.register)\nresponse_message = messages.ResponseMessage()\nresponse_message.read(self.stream)\nresponse_header = response_message.response_header\nmsg = 'Bad response header type: expected {0}, received{1}'\nself.assertIsInstance(response_header, messages.ResponseHeader, msg.format(\n    messages.ResponseHeader, type(response_header)))\nprotocol_version = response_header.protocol_version\nmsg = 'Bad protocol version type: expected {0}, received {1}'\nself.assertIsInstance(protocol_version, contents.ProtocolVersion, msg.\n    format(contents.ProtocolVersion, type(protocol_version)))\nprotocol_version_major = protocol_version.major\nmsg = 'Bad protocol version major type: expected {0}, received {1}'\nexp_type = int\nrcv_type = type(protocol_version_major)\nself.assertIsInstance(protocol_version_major, exp_type, msg.format(exp_type,\n    rcv_type))\nmsg = 'Bad protocol version major value: expected {0}, received {1}'\nself.assertEqual(1, protocol_version_major, msg.format(1,\n    protocol_version_major))\nprotocol_version_minor = protocol_version.minor\nmsg = 'Bad protocol version minor type: expected {0}, received {1}'\nexp_type = int\nrcv_type = type(protocol_version_minor)\nself.assertIsInstance(protocol_version_minor, exp_type, msg.format(exp_type,\n    rcv_type))\nmsg = 'Bad protocol version minor value: expected {0}, received {1}'\nself.assertEqual(1, protocol_version_minor, msg.format(1,\n    protocol_version_minor))\ntime_stamp = response_header.time_stamp\nvalue = 1335514341\nself.assertIsInstance(time_stamp, contents.TimeStamp, self.msg.format(\n    'time stamp', 'value', contents.TimeStamp, type(time_stamp)))\nself.assertEqual(time_stamp.value, value, self.msg.format('time stamp',\n    'value', time_stamp.value, value))\nbatch_count = response_header.batch_count\nmsg = 'Bad batch count type: expected {0}, received {1}'\nself.assertIsInstance(batch_count, contents.BatchCount, msg.format(contents\n    .BatchCount, type(batch_count)))\nmsg = 'Bad batch count value: expected {0}, received {1}'\nself.assertEqual(1, batch_count.value, msg.format(1, batch_count.value))\nbatch_items = response_message.batch_items\nmsg = 'Bad batch items type: expected {0}, received {1}'\nself.assertIsInstance(batch_items, list, msg.format(list, type(batch_items)))\nself.assertEquals(1, len(batch_items), self.msg.format('batch items',\n    'length', 1, len(batch_items)))\nfor batch_item in batch_items:\n    msg = 'Bad batch item type: expected {0}, received {1}'\n    self.assertIsInstance(batch_item, messages.ResponseBatchItem, msg.\n        format(messages.ResponseBatchItem, type(batch_item)))\n    operation = batch_item.operation\n    msg = 'Bad operation type: expected {0}, received {1}'\n    self.assertIsInstance(operation, contents.Operation, msg.format(\n        contents.Operation, type(operation)))\n    msg = 'Bad operation value: expected {0}, received {1}'\n    exp_value = enums.Operation.REGISTER\n    rcv_value = operation.value\n    self.assertEqual(exp_value, rcv_value, msg.format(exp_value, rcv_value))\n    result_status = batch_item.result_status\n    self.assertIsInstance(result_status, contents.ResultStatus, self.msg.\n        format('result status', 'type', contents.ResultStatus, type(\n        result_status)))\n    self.assertEqual(enums.ResultStatus.SUCCESS, result_status.value, self.\n        msg.format('result status', 'value', enums.ResultStatus.SUCCESS,\n        result_status.value))\n    response_payload = batch_item.response_payload\n    msg = 'Bad response payload type: expected {0}, received {1}'\n    exp_type = payloads.RegisterResponsePayload\n    rcv_type = type(response_payload)\n    self.assertIsInstance(response_payload, exp_type, msg.format(exp_type,\n        rcv_type))\n    unique_identifier = response_payload.unique_identifier\n    msg = 'Bad unique identifier type: expected {0}, received {1}'\n    self.assertIsInstance(unique_identifier, six.string_types, msg.format(\n        six.string_types, type(unique_identifier)))\n    msg = 'Bad unique identifier value: expected {0}, received {1}'\n    exp_value = '5c9b81ef-4ee5-42cd-ba2d-c002fdd0c7b3'\n    rcv_value = unique_identifier\n    self.assertEqual(exp_value, rcv_value, msg.format(exp_value, rcv_value))\n"
}