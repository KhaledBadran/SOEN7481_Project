{
    "functionName": "test_DataSet_plotQPlane",
    "className": null,
    "fileName": "/jakob-lass_&_MJOLNIR/MJOLNIR_&_Data_&_DataSet.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "plt.ioff()\nimport matplotlib\nmatplotlib.use('Agg')\nconvertFiles = ['Data/camea2018n000137.hdf']\nDatset = DataSet(dataFiles=convertFiles)\nDatset.convertDataFile(saveFile=True)\nEmptyDS = DataSet()\ntry:\n    Datset.plotQPlane()\n    assert False\nexcept AttributeError:\n    assert True\ntry:\n    Datset.plotQPlane(EBins=[10])\n    assert False\nexcept AttributeError:\n    assert True\ntry:\n    Datset.plotQPlane(EMin=20, EMax=10)\n    assert False\nexcept AttributeError:\n    assert True\ntry:\n    EmptyDS.plotQPlane(EMin=2, EMax=3)\n    assert False\nexcept AttributeError:\n    assert True\nEMin = np.min(Datset.energy)\nEMax = EMin + 0.5\nData, [Qx, Qy], ax1 = Datset.plotQPlane(EMin, EMax, binning='xy',\n    xBinTolerance=0.05, yBinTolerance=0.05, enlargen=True, log=False, rlu=True)\nData, [Qx, Qy], ax2 = Datset.plotQPlane(EMin, EMax, binning='polar',\n    xBinTolerance=0.05, yBinTolerance=0.05, enlargen=False, log=True, rlu=True)\nfig, AX = plt.subplots()\nData, [Qx, Qy], ax3 = Datset.plotQPlane(EMin, EMax, binning='xy',\n    xBinTolerance=0.05, yBinTolerance=0.05, enlargen=False, ax=AX, colorbar\n    =True, vmin=0, vmax=1e-06, zorder=10)\nax1.set_clim(-20, -15)\nax2.set_clim(0, 1e-06)\nData, [Qx, Qy], ax3 = Datset.plotQPlane(EMin, EMax, binning='xy',\n    xBinTolerance=0.05, yBinTolerance=0.05)\ncmap = plt.cm.coolwarm\nDataset = DataSet(dataFiles=convertFiles)\nfor d in Dataset.dataFiles:\n    d.A3Off += 90\nData, [Qx, Qy], ax2 = Datset.plotQPlane(EMin, EMax, binning='polar',\n    xBinTolerance=0.05, yBinTolerance=0.05, enlargen=False, log=True, rlu=\n    True, cmap=cmap)\nQxShape = np.array(Qx[0]).shape\nQyShape = np.array(Qy[0]).shape\nassert QxShape == QyShape\nassert np.all(np.array(Data[0][0]).shape == np.array(QxShape) - np.array([1,\n    1]))\ntry:\n    Datset.plotQPlane(EMin, EMax, binning='notABinningMethod')\n    assert False\nexcept:\n    assert True\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib.colors import ListedColormap\ncmap = plt.cm.coolwarm\nmy_cmap = cmap(np.arange(cmap.N))\nmy_cmap[:, (-1)] = np.linspace(0, 1, cmap.N)\nmy_cmap = ListedColormap(my_cmap)\nfig = plt.figure(figsize=(10, 11))\nax = fig.add_subplot(111, projection='3d')\nEnergies = np.concatenate(Datset.energy, axis=0)\nE = np.arange(Energies.min() + 0.35, Energies.max(), 0.35)\n[I, Monitor, Norm, NormCount], [xBins, yBins], ax = Datset.plotQPlane(EBins\n    =E, ax=ax, xBinTolerance=0.03, yBinTolerance=0.03, binning='polar',\n    vmin=7.5e-07, vmax=7e-06, antialiased=True, cmap=cmap, rlu=True, extend\n    ='max')\nplt.close('all')\n"
}