{
    "functionName": "test_sensor_subscription",
    "className": null,
    "fileName": "/PRIArobotics_&_HedgehogServer/tests_&_test_server.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "async with conn_dealer() as socket:\n    hardware_adapter.set_analog(0, 0.1, 100)\n    hardware_adapter.set_analog(0, 2.1, 0)\n    hardware_adapter.set_analog(0, 3.1, 100)\n    hardware_adapter.set_analog(0, 7.1, 0)\n    sub = Subscription()\n    sub.subscribe = True\n    sub.timeout = 1000\n    unsub = Subscription()\n    unsub.subscribe = False\n    unsub.timeout = 1000\n    with assertImmediate():\n        await assertReplyDealer(socket, analog.Subscribe(0, sub), ack.OK)\n        _, update = await socket.recv_msg()\n        assert update == analog.Update(0, 0, sub)\n    with assertPassed(1):\n        _, update = await socket.recv_msg()\n        assert update == analog.Update(0, 100, sub)\n    with assertPassed(2):\n        _, update = await socket.recv_msg()\n        assert update == analog.Update(0, 0, sub)\n    with assertImmediate():\n        await assertReplyDealer(socket, analog.Subscribe(0, sub), ack.OK)\n        _, update = await socket.recv_msg()\n        assert update == analog.Update(0, 0, sub)\n    await assertReplyDealer(socket, analog.Subscribe(0, unsub), ack.OK)\n    sub2 = Subscription()\n    sub2.subscribe = True\n    sub2.timeout = 1500\n    unsub2 = Subscription()\n    unsub2.subscribe = False\n    unsub2.timeout = 1500\n    with assertImmediate():\n        await assertReplyDealer(socket, analog.Subscribe(0, sub2), ack.OK)\n        _, update = await socket.recv_msg()\n        assert update == analog.Update(0, 0, sub2)\n    with assertPassed(1):\n        _, update = await socket.recv_msg()\n        assert update == analog.Update(0, 100, sub)\n    with assertPassed(0.5):\n        _, update = await socket.recv_msg()\n        assert update == analog.Update(0, 100, sub2)\n    with assertPassed(3.5):\n        _, update = await socket.recv_msg()\n        _, update2 = await socket.recv_msg()\n        assert analog.Update(0, 0, sub) in [update, update2]\n        assert analog.Update(0, 0, sub2) in [update, update2]\n    await assertReplyDealer(socket, analog.Subscribe(0, unsub2), ack.OK)\n    await assertReplyDealer(socket, analog.Subscribe(0, unsub), ack.OK)\n    with assertTimeoutTrio(2):\n        await socket.recv_multipart()\npytest.mark.trio"
}