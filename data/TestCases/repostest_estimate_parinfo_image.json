{
    "functionName": "test_estimate_parinfo_image",
    "className": null,
    "fileName": "/PaulHancock_&_Aegean/tests_&_test_source_finder.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"Test\"\"\"\nlog = logging.getLogger('Aegean')\nwcshelper = WCSHelper.from_file(filename='tests/test_files/1904-66_SIN.fits')\nim = np.zeros(shape=(10, 10), dtype=np.float32) * np.nan\nbkg = np.zeros_like(im)\nrms = np.ones_like(im)\nim[2:5, 2:5] = 6.0\nim[3, 3] = 8.0\nislands = sf.find_islands(im, bkg, rms, log=log)\nsources = sf.estimate_parinfo_image(islands, im=im, rms=rms, wcshelper=\n    wcshelper, log=log)\nif len(sources) != 1:\n    raise AssertionError('Incorrect number of sources found {0}, expecting 1'\n        .format(len(sources)))\nif not sources[0]['components'].value == 1:\n    raise AssertionError('Found {0} components, expecting 1'.format(sources\n        [0]['components'].value))\nif not sources[0]['c0_amp'].value == 8.0:\n    raise AssertionError('c0_amp is not 8.0 (is {0})'.format(sources[0][\n        'c0_amp'].value))\nim *= -1.0\nislands = sf.find_islands(im, bkg, rms, log=log)\nsources = sf.estimate_parinfo_image(islands, im=im, rms=rms, wcshelper=\n    wcshelper, log=log)\nif len(sources) != 1:\n    raise AssertionError('Incorrect number of sources found {0}, expecting 1'\n        .format(len(sources)))\nif not sources[0]['components'].value == 1:\n    raise AssertionError('Found {0} components, expecting 1'.format(sources\n        [0]['components'].value))\nif not sources[0]['c0_amp'].value == -8.0:\n    raise AssertionError('c0_amp is not -8.0 (is {0})'.format(sources[0][\n        'c0_amp'].value))\nim[:, :] = np.nan\nim[2:4, 2:4] = 6.0\nim[3, 3] = 8.0\nislands = sf.find_islands(im, bkg, rms, log=log)\nsources = sf.estimate_parinfo_image(islands, im=im, rms=rms, wcshelper=\n    wcshelper, log=log)\nif len(sources) != 1:\n    raise AssertionError('Incorrect number of sources found {0}, expecting 1'\n        .format(len(sources)))\nif not sources[0]['components'].value == 1:\n    raise AssertionError('Found {0} components, expecting 1'.format(sources\n        [0]['components'].value))\nif not sources[0]['c0_flags'].value & flags.FIXED2PSF:\n    raise AssertionError('FIXED2PSF flag not detected')\n"
}