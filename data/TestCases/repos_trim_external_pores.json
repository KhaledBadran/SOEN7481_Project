{
    "functionName": "_trim_external_pores",
    "className": "DelaunayVoronoiDual",
    "fileName": "/pmeal_&_OpenPNM/openpnm_&_network_&_DelaunayVoronoiDual.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"\n        \"\"\"\nPs = topotools.isoutside(coords=self['pore.coords'], shape=shape)\nself['pore.external'] = False\nself['pore.external'][Ps] = True\nPs = ~self['pore.external'] * self['pore.delaunay']\nPs = self.find_neighbor_pores(pores=Ps, include_input=True)\nself['pore.keep'] = False\nself['pore.keep'][Ps] = True\ntopotools.trim(network=self, pores=~self['pore.keep'])\nself['pore.boundary'] = False\nself['pore.boundary'] = self['pore.delaunay'] * self['pore.external']\nPs = self.find_neighbor_pores(pores=self.pores('boundary'))\nPs = self['pore.voronoi'] * self.tomask(pores=Ps)\nself['pore.boundary'][Ps] = True\nself['throat.boundary'] = False\nPs = self.pores('boundary')\nTs = self.find_neighbor_throats(pores=Ps, mode='xnor')\nself['throat.boundary'][Ts] = True\nPs = self.pores(labels=['boundary', 'delaunay'], mode='xnor')\nTs = self.find_neighbor_throats(pores=Ps, mode='xnor')\ntopotools.trim(network=self, throats=Ts)\nPs = self.pores(labels=['boundary', 'delaunay'], mode='xnor')\nfor P in Ps:\n    Ns = self.find_neighbor_pores(pores=P)\n    Ns = Ps = self['pore.voronoi'] * self.tomask(pores=Ns)\n    coords = np.mean(self['pore.coords'][Ns], axis=0)\n    self['pore.coords'][P] = coords\nself['pore.internal'] = ~self['pore.boundary']\nPs = self.pores('internal')\nTs = self.find_neighbor_throats(pores=Ps, mode='xnor')\nself['throat.internal'] = False\nself['throat.internal'][Ts] = True\nTs = self.throats(['boundary', 'internal'], mode='not')\nself['throat.surface'] = False\nself['throat.surface'][Ts] = True\nsurf_pores = self['throat.conns'][Ts].flatten()\nsurf_pores = np.unique(surf_pores[~self['pore.boundary'][surf_pores]])\nself['pore.surface'] = False\nself['pore.surface'][surf_pores] = True\ndel self['pore.external']\ndel self['pore.keep']\n"
}