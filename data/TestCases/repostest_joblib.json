{
    "functionName": "test_joblib",
    "className": "TestSklearn",
    "fileName": "/microsoft_&_LightGBM/tests_&_python_package_test_&_test_sklearn.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "X, y = load_boston(return_X_y=True)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1,\n    random_state=42)\ngbm = lgb.LGBMRegressor(n_estimators=10, objective=custom_asymmetric_obj,\n    silent=True, importance_type='split')\ngbm.fit(X_train, y_train, eval_set=[(X_train, y_train), (X_test, y_test)],\n    eval_metric=mse, early_stopping_rounds=5, verbose=False, callbacks=[lgb\n    .reset_parameter(learning_rate=list(np.arange(1, 0, -0.1)))])\njoblib.dump(gbm, 'lgb.pkl')\ngbm_pickle = joblib.load('lgb.pkl')\nself.assertIsInstance(gbm_pickle.booster_, lgb.Booster)\nself.assertDictEqual(gbm.get_params(), gbm_pickle.get_params())\nnp.testing.assert_array_equal(gbm.feature_importances_, gbm_pickle.\n    feature_importances_)\nself.assertAlmostEqual(gbm_pickle.learning_rate, 0.1)\nself.assertTrue(callable(gbm_pickle.objective))\nfor eval_set in gbm.evals_result_:\n    for metric in gbm.evals_result_[eval_set]:\n        np.testing.assert_allclose(gbm.evals_result_[eval_set][metric],\n            gbm_pickle.evals_result_[eval_set][metric])\npred_origin = gbm.predict(X_test)\npred_pickle = gbm_pickle.predict(X_test)\nnp.testing.assert_allclose(pred_origin, pred_pickle)\n"
}