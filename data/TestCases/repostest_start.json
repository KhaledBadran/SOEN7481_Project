{
    "functionName": "test_start",
    "className": "TestKmipServer",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_services_&_server_&_test_server.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that starting the KmipServer either runs as expected or generates\n        the expected error.\n        \"\"\"\nmonitor_instance_mock = mock.MagicMock()\nmonitor_mock.return_value = monitor_instance_mock\ndict_mock = mock.MagicMock()\nmanager_instance_mock = mock.MagicMock()\nmanager_instance_mock.dict.return_value = dict_mock\nmanager_mock.return_value = manager_instance_mock\na_mock = mock.MagicMock()\nb_mock = mock.MagicMock()\ns = server.KmipServer(hostname='127.0.0.1', port=5696, auth_suite='Basic',\n    config_path=None, policy_path=None, tls_cipher_suites=\n    'TLS_RSA_WITH_AES_128_CBC_SHA')\ns._logger = mock.MagicMock()\nself.assertFalse(s._is_serving)\nwith mock.patch('socket.socket') as socket_mock:\n    with mock.patch('ssl.wrap_socket') as ssl_mock:\n        socket_mock.return_value = a_mock\n        ssl_mock.return_value = b_mock\n        manager_mock.assert_not_called()\n        monitor_mock.assert_not_called()\n        s.start()\n        manager_mock.assert_called_once_with()\n        monitor_mock.assert_called_once_with(None, dict_mock, False)\n        self.assertIsNotNone(s._engine)\n        s._logger.info.assert_any_call('Starting server socket handler.')\n        s._logger.debug.assert_any_call('Configured cipher suites: 1')\n        s._logger.debug.assert_any_call('TLS_RSA_WITH_AES_128_CBC_SHA')\n        s._logger.debug.assert_any_call(\n            'Authentication suite ciphers to use: 1')\n        s._logger.debug.assert_any_call('AES128-SHA')\n        socket_mock.assert_called_once_with(socket.AF_INET, socket.SOCK_STREAM)\n        a_mock.setsockopt.assert_called_once_with(socket.SOL_SOCKET, socket\n            .SO_REUSEADDR, 1)\n        self.assertTrue(ssl_mock.called)\n        b_mock.bind.assert_called_once_with(('127.0.0.1', 5696))\n        s._logger.info.assert_called_with(\n            'Server successfully bound socket handler to 127.0.0.1:5696')\nmonitor_instance_mock.stop.assert_not_called()\nhandler = signal.getsignal(signal.SIGINT)\nhandler(None, None)\nmonitor_instance_mock.stop.assert_called_once_with()\nmonitor_instance_mock.stop.reset_mock()\nmonitor_instance_mock.stop.assert_not_called()\nhandler = signal.getsignal(signal.SIGTERM)\nhandler(None, None)\nmonitor_instance_mock.stop.assert_called_once_with()\nself.assertTrue(s._is_serving)\nmanager_mock.reset_mock()\nmonitor_mock.reset_mock()\na_mock.reset_mock()\nb_mock.reset_mock()\nwith mock.patch('socket.socket') as socket_mock:\n    with mock.patch('ssl.wrap_socket') as ssl_mock:\n        socket_mock.return_value = a_mock\n        ssl_mock.return_value = b_mock\n        test_exception = Exception()\n        b_mock.bind.side_effect = test_exception\n        manager_mock.assert_not_called()\n        monitor_mock.assert_not_called()\n        regex = 'Server failed to bind socket handler to 127.0.0.1:5696'\n        self.assertRaisesRegex(exceptions.NetworkingError, regex, s.start)\n        manager_mock.assert_called_once_with()\n        monitor_mock.assert_called_once_with(None, dict_mock, False)\n        s._logger.info.assert_any_call('Starting server socket handler.')\n        s._logger.exception.assert_called_once_with(test_exception)\nmock.patch('multiprocessing.Manager')mock.patch('kmip.services.server.monitor.PolicyDirectoryMonitor')mock.patch('kmip.services.server.engine.KmipEngine')mock.patch('kmip.services.server.server.KmipServer._setup_logging')"
}