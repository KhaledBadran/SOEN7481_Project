{
    "functionName": "test_derive_key_on_operation_failure",
    "className": "TestProxyKmipClient",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_pie_&_test_client.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that a KmipOperationFailure exception is raised when the\n        backend fails to derive a key.\n        \"\"\"\nstatus = enums.ResultStatus.OPERATION_FAILED\nreason = enums.ResultReason.GENERAL_FAILURE\nmessage = 'Test failure message'\nresult = {'result_status': status, 'result_reason': reason,\n    'result_message': message}\nerror_message = str(KmipOperationFailure(status, reason, message))\nclient = ProxyKmipClient()\nclient.open()\nclient.proxy.derive_key.return_value = result\nargs = [enums.ObjectType.SYMMETRIC_KEY, ['2', '3'], enums.DerivationMethod.\n    ENCRYPT, {'cryptographic_parameters': {'cryptographic_algorithm': enums\n    .CryptographicAlgorithm.AES, 'block_cipher_mode': enums.BlockCipherMode\n    .CBC, 'padding_method': enums.PaddingMethod.PKCS1v15},\n    'initialization_vector': b'\\x01\\x02\\x03\\x04', 'derivation_data':\n    b'\\xff\\xfe\\xfe\\xfc'}]\nkwargs = {'cryptographic_length': 128, 'cryptographic_algorithm': enums.\n    CryptographicAlgorithm.AES}\nself.assertRaisesRegex(KmipOperationFailure, error_message, client.\n    derive_key, *args, **kwargs)\nmock.patch('kmip.pie.client.KMIPProxy', mock.MagicMock(spec_set=KMIPProxy))"
}