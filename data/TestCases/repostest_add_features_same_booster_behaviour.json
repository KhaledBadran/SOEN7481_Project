{
    "functionName": "test_add_features_same_booster_behaviour",
    "className": "TestBasic",
    "fileName": "/microsoft_&_LightGBM/tests_&_python_package_test_&_test_basic.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "self.maxDiff = None\nX = np.random.random((100, 5))\nX[:, ([1, 3])] = 0\nnames = [('col_%d' % i) for i in range(5)]\nfor j in range(1, 5):\n    d1 = lgb.Dataset(X[:, :j], feature_name=names[:j]).construct()\n    d2 = lgb.Dataset(X[:, j:], feature_name=names[j:]).construct()\n    d1.add_features_from(d2)\n    d = lgb.Dataset(X, feature_name=names).construct()\n    y = np.random.random(100)\n    d1.set_label(y)\n    d.set_label(y)\n    b1 = lgb.Booster(train_set=d1)\n    b = lgb.Booster(train_set=d)\n    for k in range(10):\n        b.update()\n        b1.update()\n    with tempfile.NamedTemporaryFile() as df:\n        dname = df.name\n    with tempfile.NamedTemporaryFile() as d1f:\n        d1name = d1f.name\n    b1.save_model(d1name)\n    b.save_model(dname)\n    with open(dname, 'rt') as df:\n        dtxt = df.read()\n    with open(d1name, 'rt') as d1f:\n        d1txt = d1f.read()\n    self.assertEqual(dtxt, d1txt)\n"
}