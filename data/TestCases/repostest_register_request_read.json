{
    "functionName": "test_register_request_read",
    "className": "TestRequestMessage",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_core_&_messages_&_test_messages.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "self.stream = BytearrayStream(self.register)\nrequest_message = messages.RequestMessage()\nrequest_message.read(self.stream)\nrequest_header = request_message.request_header\nmsg = 'Bad request header type: expected {0}, received{0}'\nself.assertIsInstance(request_header, messages.RequestHeader, msg.format(\n    messages.RequestHeader, type(request_header)))\nprotocol_version = request_header.protocol_version\nmsg = 'Bad protocol version type: expected {0}, received {1}'\nself.assertIsInstance(protocol_version, contents.ProtocolVersion, msg.\n    format(contents.ProtocolVersion, type(protocol_version)))\nprotocol_version_major = protocol_version.major\nmsg = 'Bad protocol version major type: expected {0}, received {1}'\nexp_type = int\nrcv_type = type(protocol_version_major)\nself.assertIsInstance(protocol_version_major, exp_type, msg.format(exp_type,\n    rcv_type))\nmsg = 'Bad protocol version major value: expected {0}, received {1}'\nself.assertEqual(1, protocol_version_major, msg.format(1,\n    protocol_version_major))\nprotocol_version_minor = protocol_version.minor\nmsg = 'Bad protocol version minor type: expected {0}, received {1}'\nexp_type = int\nrcv_type = type(protocol_version_minor)\nself.assertIsInstance(protocol_version_minor, exp_type, msg.format(exp_type,\n    rcv_type))\nmsg = 'Bad protocol version minor value: expected {0}, received {1}'\nself.assertEqual(1, protocol_version_minor, msg.format(1,\n    protocol_version_minor))\nbatch_count = request_header.batch_count\nmsg = 'Bad batch count type: expected {0}, received {1}'\nself.assertIsInstance(batch_count, contents.BatchCount, msg.format(contents\n    .BatchCount, type(batch_count)))\nmsg = 'Bad batch count value: expected {0}, received {1}'\nself.assertEqual(1, batch_count.value, msg.format(1, batch_count.value))\nbatch_items = request_message.batch_items\nmsg = 'Bad batch items type: expected {0}, received {1}'\nself.assertIsInstance(batch_items, list, msg.format(list, type(batch_items)))\nself.assertEquals(1, len(batch_items), self.msg.format('batch items',\n    'length', 1, len(batch_items)))\nfor batch_item in batch_items:\n    msg = 'Bad batch item type: expected {0}, received {1}'\n    self.assertIsInstance(batch_item, messages.RequestBatchItem, msg.format\n        (messages.RequestBatchItem, type(batch_item)))\n    operation = batch_item.operation\n    msg = 'Bad operation type: expected {0}, received {1}'\n    self.assertIsInstance(operation, contents.Operation, msg.format(\n        contents.Operation, type(operation)))\n    msg = 'Bad operation value: expected {0}, received {1}'\n    exp_value = enums.Operation.REGISTER\n    rcv_value = operation.value\n    self.assertEqual(exp_value, rcv_value, msg.format(exp_value, rcv_value))\n    request_payload = batch_item.request_payload\n    msg = 'Bad request payload type: expected {0}, received {1}'\n    exp_type = payloads.RegisterRequestPayload\n    rcv_type = type(request_payload)\n    self.assertIsInstance(request_payload, exp_type, msg.format(exp_type,\n        rcv_type))\n    object_type = request_payload.object_type\n    msg = 'Bad object type type: expected {0}, received {1}'\n    self.assertIsInstance(object_type, enums.ObjectType, msg.format(enums.\n        ObjectType, type(object_type)))\n    msg = 'Bad object type value: expected {0}, received {1}'\n    exp_value = enums.ObjectType.TEMPLATE\n    rcv_value = object_type\n    self.assertEqual(exp_value, rcv_value, msg.format(exp_value, rcv_value))\n    template_attribute = request_payload.template_attribute\n    msg = 'Bad template attribute type: expected {0}, received {1}'\n    exp_type = objects.TemplateAttribute\n    rcv_type = type(template_attribute)\n    self.assertIsInstance(template_attribute, exp_type, msg.format(exp_type,\n        rcv_type))\n    names = template_attribute.names\n    exp_type = list\n    rcv_type = type(names)\n    msg = exceptions.ErrorStrings.BAD_EXP_RECV.format('TemplateAttribute.names'\n        , 'type', '{0}', '{0}')\n    self.assertIsInstance(names, exp_type, msg.format(exp_type, rcv_type))\n    exp_length = 0\n    rcv_length = len(names)\n    msg = exceptions.ErrorStrings.BAD_EXP_RECV.format('TemplateAttribute.names'\n        , 'length', '{0}', '{0}')\n    self.assertEqual(exp_length, rcv_length, msg.format(exp_length, rcv_length)\n        )\n    attributes = template_attribute.attributes\n    exp_type = list\n    rcv_type = type(attributes)\n    msg = exceptions.ErrorStrings.BAD_EXP_RECV.format(\n        'TemplateAttribute.attributes', 'type', '{0}', '{1}')\n    self.assertIsInstance(names, exp_type, msg.format(exp_type, rcv_type))\n    exp_length = 0\n    rcv_length = len(attributes)\n    msg = exceptions.ErrorStrings.BAD_EXP_RECV.format(\n        'TemplateAttribute.attributes', 'length', '{0}', '{1}')\n    self.assertEqual(exp_length, rcv_length, msg.format(exp_length, rcv_length)\n        )\n"
}