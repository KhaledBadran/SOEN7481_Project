{
    "functionName": "test_init_full",
    "className": "SpecifierTests",
    "fileName": "/NCAR_&_PyReshaper/source_&_test_&_specificationTests.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "in_list = ['a', 'b', 'c']\nfmt = 'netcdf4c'\ncl = 4\nprefix = 'pre.'\nsuffix = '.suf.nc'\ntseries = ['1', '2']\nmetadata = ['x', 'y', 'z']\nxlist = ['g', 'h']\nmeta1d = True\nmetafile = 'd'\nbackend = 'Nio'\nlsigfig = 3\nspec = specification.Specifier(infiles=in_list, ncfmt=fmt, compression=cl,\n    prefix=prefix, suffix=suffix, timeseries=tseries, metadata=metadata,\n    meta1d=meta1d, metafile=metafile, backend=backend,\n    least_significant_digit=lsigfig, exclude_list=xlist)\nfor i1, i2 in zip(spec.input_file_list, in_list):\n    self.assertEqual(i1, i2, 'Input file list not initialized properly')\nself.assertEqual(spec.io_backend, backend,\n    'NetCDF I/O backend not set properly')\nself.assertEqual(spec.metadata_filename, metafile,\n    'Metadata filename not set properly')\nself.assertEqual(spec.netcdf_format, fmt,\n    'NetCDF format not initialized properly')\nself.assertEqual(spec.compression_level, cl,\n    'NetCDF compression level not initialized properly')\nself.assertEqual(spec.output_file_prefix, prefix,\n    'Output file prefix not initialized properly')\nself.assertEqual(spec.output_file_suffix, suffix,\n    'Output file prefix not initialized properly')\nself.assertEqual(spec.exclude_list, xlist,\n    'Exclude list not initialized properly')\nself.assertEqual(spec.least_significant_digit, lsigfig,\n    'Output file prefix not initialized properly')\nfor i1, i2 in zip(spec.time_series, tseries):\n    self.assertEqual(i1, i2, 'Time-series list not initialized properly')\nfor i1, i2 in zip(spec.time_variant_metadata, metadata):\n    self.assertEqual(i1, i2,\n        'Time-variant metadata list not initialized properly')\nself.assertEqual(spec.assume_1d_time_variant_metadata, meta1d,\n    '1D metadata flag not initialized properly')\n"
}