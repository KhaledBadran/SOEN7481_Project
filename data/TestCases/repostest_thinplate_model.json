{
    "functionName": "test_thinplate_model",
    "className": null,
    "fileName": "/AllenInstitute_&_EM_Aligner_python/integration_tests_&_test_transforms.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "rt = renderapi.transform.Polynomial2DTransform()\nwith pytest.raises(AlignerTransformException):\n    t = AlignerThinPlateSplineTransform(transform=rt)\nwith pytest.raises(AlignerTransformException):\n    t = AlignerTransform(name='ThinPlateSplineTransform')\nhw = 5000\nx = y = np.linspace(0, hw, 4)\nxt, yt = np.meshgrid(x, y)\nsrc = np.vstack((xt.flatten(), yt.flatten())).transpose()\ndst = src + np.random.randn(src.shape[0], src.shape[1]) * 50\nrt = renderapi.transform.ThinPlateSplineTransform()\nrt.estimate(src, dst, computeAffine=computeAffine)\nt = AlignerTransform(name='ThinPlateSplineTransform', transform=rt)\nassert t.__class__ == AlignerThinPlateSplineTransform\nnmatch = 100\nmatch = example_match(nmatch, fac=hw)\nncol = 1000\nicol = 73\nblock, weights, rhs = t.block_from_pts(np.array(match['matches']['p']).\n    transpose(), np.array(match['matches']['w']), icol, ncol)\nassert rhs.shape == (nmatch, 2)\nassert block.check_format() is None\nassert weights.size == nmatch * t.rows_per_ptmatch\nassert block.shape == (nmatch * t.rows_per_ptmatch, ncol)\nif computeAffine:\n    assert block.nnz == nmatch * (t.srcPts.shape[1] + 3)\nelse:\n    assert block.nnz == nmatch * t.srcPts.shape[1]\nv = t.to_solve_vec()\nif computeAffine:\n    assert v.shape == (t.srcPts.shape[1] + 3, 2)\nelse:\n    assert v.shape == (t.srcPts.shape[1], 2)\nntiles = 6\nvec = np.tile(v, (ntiles, 1))\nvec = vec.reshape(-1, 2)\nindex = 0\norig = renderapi.transform.ThinPlateSplineTransform()\norig.estimate(src, dst, computeAffine=computeAffine)\nfor i in range(ntiles):\n    index += t.from_solve_vec(vec[index:, :])\n    assert np.all(np.isclose(orig.dMtxDat, t.dMtxDat))\n    if computeAffine:\n        assert np.all(np.isclose(orig.aMtx, t.aMtx))\n        assert np.all(np.isclose(orig.bVec, t.bVec))\nrdict = {'default_lambda': 1.2345, 'translation_factor': 0.1,\n    'thinplate_factor': 1000}\nr = t.regularization(rdict)\nn0 = 0\nif computeAffine:\n    assert np.isclose(r[0], rdict['default_lambda'] * rdict[\n        'translation_factor'])\n    assert np.all(np.isclose(r[1:3], rdict['default_lambda']))\n    n0 += 3\nassert np.all(np.isclose(r[n0:], rdict['default_lambda'] * rdict[\n    'thinplate_factor']))\nassert isinstance(t.scale, tuple)\nassert len(t.scale) == 2\npytest.mark.parametrize('computeAffine', [True, False])"
}