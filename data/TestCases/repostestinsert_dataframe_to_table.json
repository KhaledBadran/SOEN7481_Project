{
    "functionName": "testinsert_dataframe_to_table",
    "className": null,
    "fileName": "/capitalone_&_Data-Load-and-Copy-using-Python/tests_&_test_redshift.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "import pandas as pd\ntest_df = pd.read_csv(os.path.join(CURR_DIR, 'data', 'mock_dataframe.txt'),\n    sep=',')\nwith mock.patch(dbapi.__name__ + '.connect') as mock_connect:\n    r = locopy.Redshift(dbapi=dbapi, **credentials)\n    r.connect()\n    r.insert_dataframe_to_table(test_df, 'database.schema.test')\n    mock_connect.return_value.cursor.return_value.execute.assert_called_with(\n        \"INSERT INTO database.schema.test (a,b,c) VALUES ('1', 'x', '2011-01-01'), ('2', 'y', '2001-04-02')\"\n        , ())\n    r.insert_dataframe_to_table(test_df, 'database.schema.test', create=True)\n    mock_connect.return_value.cursor.return_value.execute.assert_any_call(\n        'CREATE TABLE database.schema.test (a int,b varchar,c date)', ())\n    mock_connect.return_value.cursor.return_value.execute.assert_called_with(\n        \"INSERT INTO database.schema.test (a,b,c) VALUES ('1', 'x', '2011-01-01'), ('2', 'y', '2001-04-02')\"\n        , ())\n    r.insert_dataframe_to_table(test_df, 'database.schema.test', columns=[\n        'a', 'b'])\n    mock_connect.return_value.cursor.return_value.execute.assert_called_with(\n        \"INSERT INTO database.schema.test (a,b) VALUES ('1', 'x'), ('2', 'y')\",\n        ())\n    r.insert_dataframe_to_table(test_df, 'database.schema.test', create=\n        True, metadata=OrderedDict([('col1', 'int'), ('col2', 'varchar'), (\n        'col3', 'date')]))\n    mock_connect.return_value.cursor.return_value.execute.assert_any_call(\n        'CREATE TABLE database.schema.test (col1 int,col2 varchar,col3 date)',\n        ())\n    mock_connect.return_value.cursor.return_value.execute.assert_called_with(\n        \"INSERT INTO database.schema.test (col1,col2,col3) VALUES ('1', 'x', '2011-01-01'), ('2', 'y', '2001-04-02')\"\n        , ())\n    r.insert_dataframe_to_table(test_df, 'database.schema.test', create=\n        False, batch_size=1)\n    mock_connect.return_value.cursor.return_value.execute.assert_any_call(\n        \"INSERT INTO database.schema.test (a,b,c) VALUES ('1', 'x', '2011-01-01')\"\n        , ())\n    mock_connect.return_value.cursor.return_value.execute.assert_any_call(\n        \"INSERT INTO database.schema.test (a,b,c) VALUES ('2', 'y', '2001-04-02')\"\n        , ())\npytest.mark.parametrize('dbapi', DBAPIS)mock.patch('locopy.s3.Session')"
}