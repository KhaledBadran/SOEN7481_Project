{
    "functionName": "from_dict",
    "className": "Dict",
    "fileName": "/pmeal_&_OpenPNM/openpnm_&_io_&_Dict.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"\n        This method converts a correctly formatted dictionary into OpenPNM\n        objects, and returns a handle to the *project* containing them.\n\n        Parameters\n        ----------\n        dct : dictionary\n            The Python dictionary containing the data.  The nesting and\n            labeling of the dictionary is used to create the appropriate\n            OpenPNM objects.\n\n        project : OpenPNM Project Object\n            The project with which the created objects should be associated.\n            If not supplied, one will be created.\n\n        Returns\n        -------\n        An OpenPNM Project containing the objects created to store the given\n        data.\n\n        Notes\n        -----\n        The requirement of a *correctly formed* dictionary is rather strict,\n        and essentially means a dictionary produced by the ``to_dict`` method\n        of this class.\n\n        \"\"\"\nif project is None:\n    project = ws.new_project()\nfd = FlatDict(dct, delimiter=delim)\nif delim == '.':\n    delim = ' | '\n    for key in list(fd.keys()):\n        new_key = key.replace('.', delim)\n        fd[new_key] = fd.pop(key)\nd = FlatDict(delimiter=delim)\nfor key in list(fd.keys()):\n    new_key = key.replace('pore' + delim, 'pore.')\n    new_key = new_key.replace('throat' + delim, 'throat.')\n    new_key = new_key.replace('labels' + delim, '')\n    new_key = new_key.replace('properties' + delim, '')\n    d[new_key] = fd.pop(key)\nobjs = {'network': NestedDict(), 'geometry': NestedDict(), 'physics':\n    NestedDict(), 'phase': NestedDict(), 'algorithm': NestedDict(), 'base':\n    NestedDict()}\nfor item in d.keys():\n    path = item.split(delim)\n    if len(path) > 2:\n        if path[-3] in objs.keys():\n            objs[path[-3]][path[-2]][path[-1]] = d[item]\n        else:\n            objs['base'][path[-2]][path[-1]] = d[item]\n    else:\n        objs['base'][path[-2]][path[-1]] = d[item]\nfor objtype in objs.keys():\n    for name in objs[objtype].keys():\n        obj = project._new_object(objtype=objtype, name='')\n        obj._set_name(name=name, validate=False)\n        obj.update(objs[objtype][name])\nreturn project\nclassmethod"
}