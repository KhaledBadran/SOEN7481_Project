{
    "functionName": "test_complete_lattice_rewire",
    "className": null,
    "fileName": "/Silmathoron_&_NNGT/testing_&_test_rewire.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\" Check lattice rewiring method.\"\"\"\nnum_nodes = 10\ndegree = 4\ng = ng.fixed_degree(degree, 'total', nodes=num_nodes)\ng.new_node_attribute('random_int', 'int', values=[2, 5, 33, 6, 4, 1, 98, 45,\n    30, 10])\ng.new_node_attribute('attr2', 'float', values=nngt._rng.uniform(size=num_nodes)\n    )\nww = nngt._rng.uniform(1, 5, size=g.edge_nb())\ng.set_weights(ww)\ng.new_edge_attribute('my-edge-attr', 'int', values=-ww.astype(int))\nl1 = ng.lattice_rewire(g, weight='weight', node_attr_constraints='preserve')\nassert g.node_nb() == l1.node_nb()\nassert g.edge_nb() == l1.edge_nb()\nassert g.node_attributes == l1.node_attributes\nassert np.array_equal(g.node_attributes['random_int'], l1.node_attributes[\n    'random_int'])\nassert np.array_equal(g.node_attributes['attr2'], l1.node_attributes['attr2'])\nsrt = np.sort(l1.get_weights())[::-1]\nfor i in range(num_nodes - 1):\n    assert l1.get_edge_attributes((i, i + 1), name='weight') == srt[2 * i]\n    assert l1.get_edge_attributes((i + 1, i), name='weight') == srt[2 * i + 1]\npytest.mark.mpi_skip"
}