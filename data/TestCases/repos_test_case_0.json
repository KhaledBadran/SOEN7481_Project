{
    "functionName": "_test_case_0",
    "className": null,
    "fileName": "/david-leon_&_Dandelion/test_&_test_VGG16_weights.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "import numpy as np, pickle\nfrom lasagne_ext.utils import get_layer_by_name, set_weights, get_all_layers\nmodel_D = build_model_D()\nmodel_L = build_model_L()\nweight_file = (\n    'C:\\\\Users\\\\dawei\\\\Work\\\\Code\\\\Git\\\\Reference Codes\\\\Lasagne_Recipes\\\\modelzoo\\\\vgg16.pkl'\n    )\nwith open(weight_file, mode='rb') as f:\n    weights = pickle.load(f, encoding='latin1')\nlasagne.layers.set_all_param_values(model_L['prob'], weights['param values'])\nfor layer_name in ['conv1_1', 'conv1_2', 'conv2_1', 'conv2_2', 'conv3_1',\n    'conv3_2', 'conv3_3', 'conv4_1', 'conv4_2', 'conv4_3', 'conv5_1',\n    'conv5_2', 'conv5_3']:\n    print('processing layer = ', layer_name)\n    W = model_L[layer_name].W.get_value()\n    b = model_L[layer_name].b.get_value()\n    print('W.shape=', W.shape)\n    print('b.shape=', b.shape)\n    model_D.__getattribute__(layer_name).W.set_value(W)\n    model_D.__getattribute__(layer_name).b.set_value(b)\nfor layer_name in ['fc6', 'fc7', 'fc8']:\n    print('processing layer = ', layer_name)\n    W = model_L[layer_name].W.get_value()\n    b = model_L[layer_name].b.get_value()\n    print('W.shape=', W.shape)\n    print('b.shape=', b.shape)\n    model_D.__getattribute__(layer_name).W.set_value(W)\n    model_D.__getattribute__(layer_name).b.set_value(b)\ngpickle.dump((model_D.get_weights(), None), 'VGG16_weights.gpkl')\nprint('compiling...')\nX = model_L['input'].input_var\ny_D = model_D.predict(X)\ny_L = get_output(model_L['prob'], deterministic=True)\nfn_D = theano.function([X], y_D, no_default_updates=True)\nfn_L = theano.function([X], y_L, no_default_updates=True)\nprint('run test...')\nfor i in range(20):\n    B, C, H, W = 4, 3, 224, 224\n    x = np.random.rand(B, C, H, W).astype('float32')\n    y_D = fn_D(x)\n    y_L = fn_L(x)\n    diff = np.sum(np.abs(y_D - y_L))\n    print('i=%d, diff=%0.6f' % (i, diff))\n    if diff > 0.0001:\n        raise ValueError('diff is too big')\n"
}