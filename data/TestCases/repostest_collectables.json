{
    "functionName": "test_collectables",
    "className": "TestSession",
    "fileName": "/ChristianVisintin_&_ATtila/tests_&_test_session.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test collectables feature in ATSession using AT+CSQ\n        \"\"\"\nsession = ATSession([])\ncsq_command = ATCommand('AT+CSQ', 'OK', 10, 0, ['AT+CSQ=?{rssi},'])\nsession.add_command(csq_command)\nnext_command = session.get_next_command()\nserial_response = ['AT+CSQ=31,1', 'OK']\nresponse = session.validate_response(serial_response, 50)\nprint('%s (expected %s) has response: %s' % (next_command.command,\n    next_command.expected_response, response.full_response))\nself.assertFalse(session.last_command_failed)\ntry:\n    rssi = session.get_session_value('rssi')\n    self.assertEqual(rssi, 31, 'rssi should be 31, but is %s' % rssi)\nexcept KeyError as err:\n    raise err\nprint('RSSI from AT+CSQ: %d' % rssi)\nimei_command = ATCommand('AT+CGSN', 'OK', 10, 0, ['?{IMEI::^[0-9]{15}$}'])\nsession.add_command(imei_command)\nnext_command = session.get_next_command()\nserial_response = ['AT+CGSN', '123456789012345', 'OK']\nresponse = session.validate_response(serial_response, 50)\nprint('%s (expected %s) has response: %s' % (next_command.command,\n    next_command.expected_response, response.full_response))\nself.assertFalse(session.last_command_failed)\ntry:\n    imei = session.get_session_value('IMEI')\n    self.assertEqual(imei, 123456789012345, \n        \"rssi should be '123456789012345', but is %s\" % imei)\nexcept KeyError as err:\n    raise err\nprint('IMEI from AT+CGSN: %d' % imei)\ncsq_command = ATCommand('AT+CSQ', 'OK', 10, 0, [\n    'AT+CSQ=?{rssi::[0-9]{1,2}},', 'AT+CSQ=${rssi},?{ber::[0-9]{1,2}}'])\nsession.add_command(csq_command)\nnext_command = session.get_next_command()\nserial_response = ['AT+CSQ=31,2', 'OK']\nresponse = session.validate_response(serial_response, 50)\nprint('%s (expected %s) has response: %s' % (next_command.command,\n    next_command.expected_response, response.full_response))\nself.assertFalse(session.last_command_failed)\ntry:\n    rssi = session.get_session_value('rssi')\n    self.assertEqual(rssi, 31, 'rssi should be 31, but is %s' % rssi)\n    ber = session.get_session_value('ber')\n    self.assertEqual(ber, 2, 'ber should be 2, but is %s' % ber)\nexcept KeyError as err:\n    raise err\nprint('RSSI from AT+CSQ: %d; ber from AT+CSQ: %d' % (rssi, ber))\ncsq_command = ATCommand('AT+CSQ', 'OK', 10, 0, [\n    'AT+CSQ=?{RSSI::[0-9]{1,2}},', 'AT+CSQ=${RSSI},?{ber::[0-9]{1,2}}'])\nsession.add_command(csq_command)\nnext_command = session.get_next_command()\nserial_response = ['AT+CSQDAFAQ', 'OK']\nresponse = session.validate_response(serial_response, 50)\nprint('%s (expected %s) has response: %s' % (next_command.command,\n    next_command.expected_response, response.full_response))\nself.assertFalse(session.last_command_failed)\nwith self.assertRaises(KeyError):\n    session.get_session_value('RSSI')\n"
}