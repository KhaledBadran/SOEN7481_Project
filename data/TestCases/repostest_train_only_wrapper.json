{
    "functionName": "test_train_only_wrapper",
    "className": null,
    "fileName": "/Neuraxio_&_Neuraxle/testing_&_steps_&_test_train_only_wrapper.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "test_case.pipeline.set_train(test_case.more_arguments['set_train'])\nprocessed_outputs = test_case.execute()\ntest_case.assert_expected_processed_outputs(processed_outputs)\ntest_case.assert_callback_data_is_as_expected()\npytest.mark.parametrize('test_case', [NeuraxleTestCase(pipeline=\n    TrainOrTestOnlyWrapper(FitTransformCallbackStep(tape_transform,\n    tape_fit, transform_function=lambda di: di * 2)), more_arguments={\n    'set_train': True}, callbacks=[tape_transform, tape_fit],\n    expected_callbacks_data=[[DATA_INPUTS]], data_inputs=DATA_INPUTS,\n    expected_processed_outputs=DATA_INPUTS * 2, execution_mode=\n    ExecutionMode.TRANSFORM), NeuraxleTestCase(pipeline=\n    TrainOrTestOnlyWrapper(FitTransformCallbackStep(tape_transform,\n    tape_fit, transform_function=lambda di: di * 2)), more_arguments={\n    'set_train': True}, callbacks=[tape_transform, tape_fit], data_inputs=\n    DATA_INPUTS, expected_outputs=EXPECTED_OUTPUTS, expected_callbacks_data\n    =[[DATA_INPUTS], [(DATA_INPUTS, EXPECTED_OUTPUTS)]],\n    expected_processed_outputs=DATA_INPUTS * 2, execution_mode=\n    ExecutionMode.FIT_TRANSFORM), NeuraxleTestCase(pipeline=\n    TrainOrTestOnlyWrapper(FitTransformCallbackStep(tape_transform,\n    tape_fit, transform_function=lambda di: di * 2)), more_arguments={\n    'set_train': True}, callbacks=[tape_transform, tape_fit], data_inputs=\n    DATA_INPUTS, expected_outputs=EXPECTED_OUTPUTS, expected_callbacks_data\n    =[[], [(DATA_INPUTS, EXPECTED_OUTPUTS)]], execution_mode=ExecutionMode.\n    FIT), NeuraxleTestCase(pipeline=TrainOrTestOnlyWrapper(\n    FitTransformCallbackStep(tape_transform, tape_fit, transform_function=\n    lambda di: di * 2)), more_arguments={'set_train': False}, callbacks=[\n    tape_transform, tape_fit], expected_callbacks_data=[[], []],\n    data_inputs=DATA_INPUTS, expected_processed_outputs=DATA_INPUTS,\n    execution_mode=ExecutionMode.TRANSFORM), NeuraxleTestCase(pipeline=\n    TrainOrTestOnlyWrapper(FitTransformCallbackStep(tape_transform,\n    tape_fit, transform_function=lambda di: di * 2)), more_arguments={\n    'set_train': False}, callbacks=[tape_transform, tape_fit], data_inputs=\n    DATA_INPUTS, expected_outputs=EXPECTED_OUTPUTS, expected_callbacks_data\n    =[[], []], expected_processed_outputs=DATA_INPUTS, execution_mode=\n    ExecutionMode.FIT_TRANSFORM), NeuraxleTestCase(pipeline=\n    TrainOrTestOnlyWrapper(FitTransformCallbackStep(tape_transform,\n    tape_fit, transform_function=lambda di: di * 2)), more_arguments={\n    'set_train': False}, callbacks=[tape_transform, tape_fit], data_inputs=\n    DATA_INPUTS, expected_outputs=EXPECTED_OUTPUTS, expected_callbacks_data\n    =[[], []], execution_mode=ExecutionMode.FIT), NeuraxleTestCase(pipeline\n    =TrainOrTestOnlyWrapper(FitTransformCallbackStep(tape_transform,\n    tape_fit, transform_function=lambda di: di * 2), is_train_only=False),\n    more_arguments={'set_train': False}, callbacks=[tape_transform,\n    tape_fit], expected_callbacks_data=[[DATA_INPUTS]], data_inputs=\n    DATA_INPUTS, expected_processed_outputs=DATA_INPUTS * 2, execution_mode\n    =ExecutionMode.TRANSFORM), NeuraxleTestCase(pipeline=\n    TrainOrTestOnlyWrapper(FitTransformCallbackStep(tape_transform,\n    tape_fit, transform_function=lambda di: di * 2), is_train_only=False),\n    more_arguments={'set_train': False}, callbacks=[tape_transform,\n    tape_fit], data_inputs=DATA_INPUTS, expected_outputs=EXPECTED_OUTPUTS,\n    expected_callbacks_data=[[DATA_INPUTS], [(DATA_INPUTS, EXPECTED_OUTPUTS\n    )]], expected_processed_outputs=DATA_INPUTS * 2, execution_mode=\n    ExecutionMode.FIT_TRANSFORM), NeuraxleTestCase(pipeline=\n    TrainOrTestOnlyWrapper(FitTransformCallbackStep(tape_transform,\n    tape_fit, transform_function=lambda di: di * 2), is_train_only=False),\n    more_arguments={'set_train': False}, callbacks=[tape_transform,\n    tape_fit], data_inputs=DATA_INPUTS, expected_outputs=EXPECTED_OUTPUTS,\n    expected_callbacks_data=[[], [(DATA_INPUTS, EXPECTED_OUTPUTS)]],\n    execution_mode=ExecutionMode.FIT), NeuraxleTestCase(pipeline=\n    TrainOrTestOnlyWrapper(FitTransformCallbackStep(tape_transform,\n    tape_fit, transform_function=lambda di: di * 2), is_train_only=False),\n    more_arguments={'set_train': True}, callbacks=[tape_transform, tape_fit\n    ], expected_callbacks_data=[[], []], data_inputs=DATA_INPUTS,\n    expected_processed_outputs=DATA_INPUTS, execution_mode=ExecutionMode.\n    TRANSFORM), NeuraxleTestCase(pipeline=TrainOrTestOnlyWrapper(\n    FitTransformCallbackStep(tape_transform, tape_fit, transform_function=\n    lambda di: di * 2), is_train_only=False), more_arguments={'set_train': \n    True}, callbacks=[tape_transform, tape_fit], data_inputs=DATA_INPUTS,\n    expected_outputs=EXPECTED_OUTPUTS, expected_callbacks_data=[[], []],\n    expected_processed_outputs=DATA_INPUTS, execution_mode=ExecutionMode.\n    FIT_TRANSFORM), NeuraxleTestCase(pipeline=TrainOrTestOnlyWrapper(\n    FitTransformCallbackStep(tape_transform, tape_fit, transform_function=\n    lambda di: di * 2), is_train_only=False), more_arguments={'set_train': \n    True}, callbacks=[tape_transform, tape_fit], data_inputs=DATA_INPUTS,\n    expected_outputs=EXPECTED_OUTPUTS, expected_callbacks_data=[[], []],\n    execution_mode=ExecutionMode.FIT), NeuraxleTestCase(pipeline=\n    TestOnlyWrapper(FitTransformCallbackStep(tape_transform, tape_fit,\n    transform_function=lambda di: di * 2)), more_arguments={'set_train': \n    False}, callbacks=[tape_transform, tape_fit], data_inputs=DATA_INPUTS,\n    expected_outputs=EXPECTED_OUTPUTS, expected_callbacks_data=[[], [(\n    DATA_INPUTS, EXPECTED_OUTPUTS)]], execution_mode=ExecutionMode.FIT)])"
}