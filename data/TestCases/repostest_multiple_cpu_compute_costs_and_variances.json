{
    "functionName": "test_multiple_cpu_compute_costs_and_variances",
    "className": null,
    "fileName": "/NASA_&_MLMCPy/tests_&_mlmc_&_test_MLMCSimulator.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n    Tests simulator's computation of costs and initial variances in an MPI\n    environment for various numbers of initial sample sizes vs single cpu case.\n    Also tests to ensure consistency of sampling.\n    \"\"\"\nsim = MLMCSimulator(data=data_input, models=models_from_data)\nnum_cpu_samples = sim._determine_num_cpu_samples(num_samples)\ncache = np.zeros((3, num_cpu_samples, 1))\ntest_input_samples = np.zeros_like(cache)\nfor level in range(3):\n    test_input_samples[level] = sim._draw_samples(num_samples)\n    lower_level_outputs = np.zeros((num_cpu_samples, 1))\n    for i, sample in enumerate(test_input_samples[level]):\n        cache[level, i] = models_from_data[level].evaluate(sample)\n        if level > 0:\n            lower_level_outputs[i] = models_from_data[level - 1].evaluate(\n                sample)\n    cache[level] -= lower_level_outputs\ngathered_test_input_samples = sim._gather_arrays(test_input_samples, axis=1)\ngathered_test_outputs = sim._gather_arrays(cache, axis=1)\nexpected_outputs = np.zeros((3, num_samples, 1))\nexpected_input_samples = np.zeros((3, num_samples, 1))\ndata_input.reset_sampling()\nfor level in range(3):\n    expected_input_samples[level] = data_input.draw_samples(num_samples)\n    lower_level_outputs = np.zeros((num_samples, 1))\n    for i, sample in enumerate(expected_input_samples[level]):\n        expected_outputs[level, i] = models_from_data[level].evaluate(sample)\n        if level > 0:\n            lower_level_outputs[i] = models_from_data[level - 1].evaluate(\n                sample)\n    expected_outputs[level] -= lower_level_outputs\nassert gathered_test_input_samples.shape == expected_input_samples.shape\nassert np.array_equal(gathered_test_input_samples, expected_input_samples)\nassert gathered_test_outputs.shape == expected_outputs.shape\nassert np.array_equal(gathered_test_outputs, expected_outputs)\npytest.mark.parametrize('num_samples', [2, 3, 5, 7, 11, 23, 101])"
}