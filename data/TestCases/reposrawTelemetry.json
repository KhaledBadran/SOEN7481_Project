{
    "functionName": "rawTelemetry",
    "className": null,
    "fileName": "/FaradayRF_&_Faraday-Software/faraday_&_telemetry.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"\n    Provides a RESTful interface to the decoded raw telemetry at URL '/raw'\n\n    The rawTelemetry() function is run when the URL \"/raw\" is queried. It\n    provides non-SQLite database dequeu results. Each query can pop data off of\n    a queu, thus ensuring there are no duplicates and acting like a proxy with\n    decoded data instead of BASE64 encoded data.\n\n    :return: JSON formatted string with data or error. HTTP204 if no data\n    \"\"\"\nstationData = []\ntry:\n    callsign = request.args.get('callsign', None)\n    nodeId = request.args.get('nodeid', None)\n    limit = request.args.get('limit', None)\nexcept IOError as e:\n    logger.error('IOError: ' + str(e))\n    return json.dumps({'error': str(e)}), 400\ntry:\n    if callsign is not None:\n        if nodeId is None:\n            raise ValueError(\"Missing 'nodeid' parameter\")\n        else:\n            nodeId = int(nodeId)\n            callsign = str(callsign).upper()\n            if nodeId > 255 or nodeId < 0:\n                raise ValueError(\n                    \"Faraday Node ID's valid integer between 0-255\")\n    else:\n        pass\n    if limit is None:\n        temp = []\n        for key, value in telemetryDicts.iteritems():\n            temp.append(len(value))\n        limit = int(max(temp))\n    else:\n        limit = int(limit)\n        if limit <= 0:\n            message = \"Error: Limit '{0}' is invalid\".format(limit)\n            raise ValueError(message)\nexcept ValueError as e:\n    logger.error('ValueError: ' + str(e))\n    return json.dumps({'error': str(e)}), 400\nexcept IndexError as e:\n    logger.error('IndexError: ' + str(e))\n    return json.dumps({'error': str(e)}), 400\nexcept KeyError as e:\n    logger.error('KeyError: ' + str(e))\n    return json.dumps({'error': str(e)}), 400\nexcept StandardError as e:\n    logger.error('StandardError: ' + str(e))\n    return json.dumps({'error': str(e)}), 400\ntry:\n    data = []\n    if callsign is None and nodeId is None:\n        for key, value in telemetryDicts.iteritems():\n            if len(value) > 0:\n                station = {}\n                while value:\n                    packet = []\n                    packet = value.pop()\n                    if len(stationData) >= limit:\n                        break\n                    stationData.append(packet)\n                station[key] = stationData\n                data.append(station)\n    else:\n        stationData = []\n        station = {}\n        if len(telemetryDicts[str(callsign) + str(nodeId)]) > 0:\n            while telemetryDicts[str(callsign) + str(nodeId)]:\n                packet = telemetryDicts[str(callsign) + str(nodeId)].pop()\n                stationData.append(packet)\n                station[str(callsign) + str(nodeId)] = stationData\n                if len(stationData) >= limit:\n                    break\n            data.append(station)\nexcept ValueError as e:\n    logger.error('ValueError: ' + str(e))\n    return json.dumps({'error': str(e)}), 400\nexcept IndexError as e:\n    logger.error('IndexError: ' + str(e))\n    return json.dumps({'error': str(e)}), 400\nexcept KeyError as e:\n    logger.error('KeyError: ' + str(e))\n    return json.dumps({'error': str(e)}), 400\nexcept StandardError as e:\n    logger.error('StandardError: ' + str(e))\n    return json.dumps({'error': str(e)}), 400\nif len(stationData) == 0:\n    logger.info('No station data is in queue')\n    return '', 204\nreturn json.dumps(data, indent=1), 200, {'Content-Type': 'application/json'}\napp.route('/raw', methods=['GET'])"
}