{
    "functionName": "testAcq",
    "className": "ALEBOTest",
    "fileName": "/facebook_&_Ax/ax_&_models_&_tests_&_test_alebo.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "B = torch.tensor([[1.0, 2.0, 3.0, 4.0, 5.0], [2.0, 3.0, 4.0, 5.0, 6.0]],\n    dtype=torch.double)\ntrain_X = torch.tensor([[1.0, 2.0], [3.0, 4.0], [5.0, 6.0]], dtype=torch.double\n    )\ntrain_Y = torch.tensor([[1.0], [2.0], [3.0]], dtype=torch.double)\ntrain_Yvar = 0.1 * torch.ones(3, 1, dtype=torch.double)\nm = ALEBOGP(B=B, train_X=train_X, train_Y=train_Y, train_Yvar=train_Yvar)\nm.eval()\nobjective_weights = torch.tensor([1.0], dtype=torch.double)\nacq = ei_or_nei(model=m, objective_weights=objective_weights,\n    outcome_constraints=None, X_observed=train_X, X_pending=None, q=1,\n    noiseless=True)\nself.assertIsInstance(acq, ExpectedImprovement)\nself.assertEqual(acq.best_f.item(), 3.0)\nobjective_weights = torch.tensor([-1.0], dtype=torch.double)\nacq = ei_or_nei(model=m, objective_weights=objective_weights,\n    outcome_constraints=None, X_observed=train_X, X_pending=None, q=1,\n    noiseless=True)\nself.assertEqual(acq.best_f.item(), 1.0)\nacq = ei_or_nei(model=m, objective_weights=objective_weights,\n    outcome_constraints=None, X_observed=train_X, X_pending=None, q=1,\n    noiseless=False)\nself.assertIsInstance(acq, qNoisyExpectedImprovement)\nwith mock.patch('ax.models.torch.alebo.optimize_acqf', autospec=True,\n    return_value=(train_X, train_Y)) as optim_mock:\n    alebo_acqf_optimizer(acq_function=acq, bounds=None, n=2,\n        inequality_constraints=5.0, fixed_features=None, rounding_func=None,\n        raw_samples=100, num_restarts=5, B=B)\nself.assertEqual(optim_mock.call_count, 2)\nself.assertIsInstance(optim_mock.mock_calls[0][2]['acq_function'],\n    qNoisyExpectedImprovement)\nself.assertEqual(optim_mock.mock_calls[0][2]['num_restarts'], 5)\nself.assertEqual(optim_mock.mock_calls[0][2]['inequality_constraints'], 5.0)\nX = optim_mock.mock_calls[0][2]['batch_initial_conditions']\nself.assertEqual(X.shape, torch.Size([5, 1, 2]))\nZ = (B @ torch.pinverse(B) @ X[:, (0), :].t()).t()\nself.assertTrue(torch.allclose(Z, X[:, (0), :]))\n"
}