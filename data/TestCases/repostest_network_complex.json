{
    "functionName": "test_network_complex",
    "className": "TestDucoInterface",
    "fileName": "/SteinHeselmans_&_DucoBox/tests_&_test_ducointerface.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "serial_mock_object = MagicMock(spec=Serial)\nserial_mock.return_value = serial_mock_object\nitf = dut.DucoInterface(self.MOCK_PORT_NAME)\nself.assertFalse(itf.is_online())\nwith open('tests/cmd_network_complex.txt') as cmdfile:\n    serial_mock_object.readline.return_value = cmdfile.read().replace('\\n',\n        '\\r')\nitf.find_nodes()\nself.assertTrue(itf.is_online())\nnode = itf.get_node('1')\nself.assertIsInstance(node, dut.DucoBox)\nself.assertEqual(node.number, '1')\nself.assertEqual(node.address, '1')\nnode = itf.get_node('2')\nself.assertIsInstance(node, dut.DucoValveHumiditySensor)\nself.assertEqual(node.number, '2')\nself.assertEqual(node.address, '2')\nnode = itf.get_node('3')\nself.assertIsInstance(node, dut.DucoValve)\nself.assertEqual(node.number, '3')\nself.assertEqual(node.address, '3')\nnode = itf.get_node('4')\nself.assertIsInstance(node, dut.DucoValveHumiditySensor)\nself.assertEqual(node.number, '4')\nself.assertEqual(node.address, '4')\nnode = itf.get_node('5')\nself.assertIsInstance(node, dut.DucoValve)\nself.assertEqual(node.number, '5')\nself.assertEqual(node.address, '5')\nnode = itf.get_node('6')\nself.assertIsInstance(node, dut.DucoValveCO2Sensor)\nself.assertEqual(node.number, '6')\nself.assertEqual(node.address, '6')\nnode = itf.get_node('7')\nself.assertIsInstance(node, dut.DucoValve)\nself.assertEqual(node.number, '7')\nself.assertEqual(node.address, '7')\nnode = itf.get_node('8')\nself.assertIsInstance(node, dut.DucoValveHumiditySensor)\nself.assertEqual(node.number, '8')\nself.assertEqual(node.address, '8')\nnode = itf.get_node('9')\nself.assertIsInstance(node, dut.DucoUserControlHumiditySensor)\nself.assertEqual(node.number, '9')\nself.assertEqual(node.address, '102')\nnode = itf.get_node('10')\nself.assertIsInstance(node, dut.DucoUserControlCO2Sensor)\nself.assertEqual(node.number, '10')\nself.assertEqual(node.address, '103')\nnode = itf.get_node('11')\nself.assertIsInstance(node, dut.DucoSwitch)\nself.assertEqual(node.number, '11')\nself.assertEqual(node.address, '104')\nnode = itf.get_node('12')\nself.assertIsInstance(node, dut.DucoUserControlHumiditySensor)\nself.assertEqual(node.number, '12')\nself.assertEqual(node.address, '105')\nnode = itf.get_node('13')\nself.assertIsInstance(node, dut.DucoUserControlCO2Sensor)\nself.assertEqual(node.number, '13')\nself.assertEqual(node.address, '106')\nnode = itf.get_node('14')\nself.assertIsInstance(node, dut.DucoUserControlCO2Sensor)\nself.assertEqual(node.number, '14')\nself.assertEqual(node.address, '107')\nnode = itf.get_node('15')\nself.assertIsInstance(node, dut.DucoSwitch)\nself.assertEqual(node.number, '15')\nself.assertEqual(node.address, '108')\nnode = itf.get_node('16')\nself.assertIsInstance(node, dut.DucoUserControlCO2Sensor)\nself.assertEqual(node.number, '16')\nself.assertEqual(node.address, '109')\nnode = itf.get_node('17')\nself.assertIsInstance(node, dut.DucoGrille)\nself.assertEqual(node.number, '17')\nself.assertEqual(node.address, '110')\nnode = itf.get_node('18')\nself.assertIsInstance(node, dut.DucoUserControl)\nself.assertEqual(node.number, '18')\nself.assertEqual(node.address, '111')\nnode = itf.get_node('19')\nself.assertIsInstance(node, dut.DucoGrille)\nself.assertEqual(node.number, '19')\nself.assertEqual(node.address, '112')\nnode = itf.get_node('20')\nself.assertIsInstance(node, dut.DucoGrille)\nself.assertEqual(node.number, '20')\nself.assertEqual(node.address, '113')\nnode = itf.get_node('133')\nself.assertIsInstance(node, dut.DucoSwitch)\nself.assertEqual(node.number, '133')\nself.assertEqual(node.address, '132')\npatch('duco.ducobox.Serial', autospec=True)"
}