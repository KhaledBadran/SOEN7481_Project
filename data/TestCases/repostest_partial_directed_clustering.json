{
    "functionName": "test_partial_directed_clustering",
    "className": null,
    "fileName": "/Silmathoron_&_NNGT/testing_&_test_analysis.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "num_nodes = 3\nedge_list = [(0, 1), (1, 2), (2, 0)]\ng = nngt.Graph(num_nodes)\ng.new_edges(edge_list)\nfor m in ('continuous', 'barrat', 'onnela'):\n    assert np.array_equal(nngt.analysis.local_clustering(g, mode='cycle',\n        method=m), [1, 1, 1])\n    assert np.array_equal(nngt.analysis.local_clustering(g, mode='cycle',\n        method=m, weights='weight'), [1, 1, 1])\nnum_nodes = 3\nedge_list = [(0, 1), (0, 2), (1, 2)]\ng = nngt.Graph(num_nodes)\ng.new_edges(edge_list)\nfor m in ('continuous', 'barrat', 'onnela'):\n    assert np.array_equal(nngt.analysis.local_clustering(g, mode='cycle',\n        method=m), [0, 0, 0])\n    assert np.array_equal(nngt.analysis.local_clustering(g, mode='cycle',\n        method=m, weights='weight'), [0, 0, 0])\n    assert np.array_equal(nngt.analysis.local_clustering(g, mode=\n        'middleman', method=m), [0, 1, 0])\n    assert np.array_equal(nngt.analysis.local_clustering(g, mode=\n        'middleman', method=m, weights='weight'), [0, 1, 0])\n    assert np.array_equal(nngt.analysis.local_clustering(g, mode='fan-in',\n        method=m), [0, 0, 0.5])\n    assert np.array_equal(nngt.analysis.local_clustering(g, mode='fan-in',\n        method=m, weights='weight'), [0, 0, 0.5])\n    assert np.array_equal(nngt.analysis.local_clustering(g, mode='fan-out',\n        method=m), [0.5, 0, 0])\n    assert np.array_equal(nngt.analysis.local_clustering(g, mode='fan-out',\n        method=m, weights='weight'), [0.5, 0, 0])\ng = nngt.Graph(4)\ng.new_edges([(0, 3), (1, 0), (1, 2), (1, 3), (2, 1), (3, 2)])\nfor m in ('continuous', 'barrat', 'onnela'):\n    assert np.array_equal(nngt.analysis.local_clustering(g, mode='cycle',\n        method=m), [0, 0.5, 1, 0.5])\n    assert np.array_equal(nngt.analysis.local_clustering(g, mode=\n        'middleman', method=m), [1, 0, 0, 0.5])\n    assert np.array_equal(nngt.analysis.local_clustering(g, mode='fan-in',\n        method=m), [0, 0, 0.5, 0.5])\n    assert np.array_equal(nngt.analysis.local_clustering(g, mode='fan-out',\n        method=m), [0, 1 / 3, 0, 0])\ng.set_weights([1, 0.5, 0.4, 1, 0.6, 1])\nassert np.all(np.isclose(nngt.analysis.local_clustering(g, mode='fan-out',\n    weights='weight', method='barrat'), [0, 1.45 / 3.8, 0, 0]))\nassert np.array_equal(nngt.analysis.local_clustering(g, mode='fan-in',\n    weights='weight', method='barrat'), [0, 0, 0.5, 0.5])\nassert np.all(np.isclose(nngt.analysis.local_clustering(g, mode='cycle',\n    weights='weight', method='barrat'), [0, 0.8 / 1.35, 1, 0.5]))\nassert np.array_equal(nngt.analysis.local_clustering(g, mode='middleman',\n    weights='weight', method='barrat'), [1, 0, 0, 0.5])\ng.set_weights([1, 1 / 8, 1, 1, 1, 1 / 8])\nassert np.array_equal(nngt.analysis.local_clustering(g, mode='middleman',\n    weights='weight', method='onnela'), [0.5, 0, 0, 0.25])\nassert np.array_equal(nngt.analysis.local_clustering(g, mode='cycle',\n    weights='weight', method='onnela'), [0, 0.25, 0.5, 0.25])\nassert np.all(np.isclose(nngt.analysis.local_clustering(g, mode='fan-out',\n    weights='weight', method='onnela'), [0, 1 / 6, 0, 0]))\nassert np.array_equal(nngt.analysis.local_clustering(g, mode='fan-in',\n    weights='weight', method='onnela'), [0, 0, 0.25, 0.25])\ng.set_weights([1, 1 / 64, 1 / 64, 1, 1, 1])\nassert np.all(np.isclose(nngt.analysis.local_clustering(g, mode='fan-out',\n    weights='weight'), [0, 4 / 17, 0, 0]))\nassert np.all(np.isclose(nngt.analysis.local_clustering(g, mode='fan-in',\n    weights='weight'), [0, 0, 0.25, 1 / 32]))\nassert np.all(np.isclose(nngt.analysis.local_clustering(g, mode='cycle',\n    weights='weight'), [0, 8 / 9, 1, 0.5]))\nassert np.all(np.isclose(nngt.analysis.local_clustering(g, mode='middleman',\n    weights='weight'), [0.5, 0, 0, 1 / 32]))\npytest.mark.mpi_skip"
}