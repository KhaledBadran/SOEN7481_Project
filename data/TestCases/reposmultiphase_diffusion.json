{
    "functionName": "multiphase_diffusion",
    "className": null,
    "fileName": "/pmeal_&_OpenPNM/openpnm_&_models_&_physics_&_diffusive_conductance.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"\n    Similar to ordinary_diffusion, except it also accounts for Henry's law\n    partitioning.\n\n    Notes\n    -----\n    This method assumes that phase[\"partition_coef\"] contains information on\n    binary phase partitioning. See ``MultiPhase`` class documentation for more\n    information.\n\n    \"\"\"\nnetwork = target.project.network\nthroats = network.map_throats(throats=target.Ts, origin=target)\nphase = target.project.find_phase(target)\ncn = network['throat.conns'][throats]\nA1 = network[pore_area][cn[:, (0)]]\nAt = network[throat_area][throats]\nA2 = network[pore_area][cn[:, (1)]]\nL1 = network[conduit_lengths + '.pore1'][throats]\nLt = network[conduit_lengths + '.throat'][throats]\nL2 = network[conduit_lengths + '.pore2'][throats]\ntry:\n    SF1 = phase[conduit_shape_factors + '.pore1'][throats]\n    SFt = phase[conduit_shape_factors + '.throat'][throats]\n    SF2 = phase[conduit_shape_factors + '.pore2'][throats]\nexcept KeyError:\n    SF1 = SF2 = SFt = 1.0\nD1, D2 = phase[pore_diffusivity][cn].T\nDt = phase.interpolate_data(propname=pore_diffusivity)[throats]\ng1 = D1 * A1 / L1 * SF1\ng2 = D2 * A2 / L2 * SF2\ngt = Dt * At / Lt * SFt\ng1[L1 == 0] = _np.inf\ng2[L2 == 0] = _np.inf\ngt[Lt == 0] = _np.inf\npartition_coef = phase.settings['partition_coef']\nK12 = phase[partition_coef][throats]\nG12 = K12 * (1.0 / g1 + 0.5 / gt + K12 * (1.0 / g2 + 0.5 / gt)) ** -1\nG21 = 1.0 / K12 * (1.0 / g2 + 0.5 / gt + 1.0 / K12 * (1.0 / g1 + 0.5 / gt)\n    ) ** -1\nreturn _np.vstack((G12, G21)).T\n"
}