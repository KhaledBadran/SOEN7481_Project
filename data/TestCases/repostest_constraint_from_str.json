{
    "functionName": "test_constraint_from_str",
    "className": "TestInstantiationtUtils",
    "fileName": "/facebook_&_Ax/ax_&_service_&_tests_&_test_instantiation_utils.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "with self.assertRaisesRegex(ValueError, 'Bound for the constraint'):\n    constraint_from_str('x1 + x2 <= not_numerical_bound', {'x1': None, 'x2':\n        None})\nwith self.assertRaisesRegex(ValueError, 'Outcome constraint bound'):\n    outcome_constraint_from_str('m1 <= not_numerical_bound')\nthree_val_constaint = constraint_from_str('x1 + x2 + x3 <= 3', {'x1':\n    RangeParameter(name='x1', parameter_type=ParameterType.FLOAT, lower=0.1,\n    upper=2.0), 'x2': RangeParameter(name='x2', parameter_type=\n    ParameterType.FLOAT, lower=0.1, upper=2.0), 'x3': RangeParameter(name=\n    'x3', parameter_type=ParameterType.FLOAT, lower=0.1, upper=2.0)})\nself.assertEqual(three_val_constaint.bound, 3.0)\nwith self.assertRaisesRegex(ValueError, 'Parameter constraint should'):\n    constraint_from_str('x1 + x2 + <= 3', {'x1': None, 'x2': None, 'x3': None})\nwith self.assertRaisesRegex(ValueError, 'Parameter constraint should'):\n    constraint_from_str('x1 + x2 + x3 = 3', {'x1': None, 'x2': None, 'x3':\n        None})\nthree_val_constaint2 = constraint_from_str('-x1 + 2.1*x2 - 4*x3 <= 3', {\n    'x1': RangeParameter(name='x1', parameter_type=ParameterType.FLOAT,\n    lower=0.1, upper=4.0), 'x2': RangeParameter(name='x2', parameter_type=\n    ParameterType.FLOAT, lower=0.1, upper=4.0), 'x3': RangeParameter(name=\n    'x3', parameter_type=ParameterType.FLOAT, lower=0.1, upper=4.0)})\nself.assertEqual(three_val_constaint2.bound, 3.0)\nself.assertEqual(three_val_constaint2.constraint_dict, {'x1': -1.0, 'x2': \n    2.1, 'x3': -4.0})\nwith self.assertRaisesRegex(ValueError, 'Multiplier should be float'):\n    constraint_from_str('x1 - e*x2 + x3 <= 3', {'x1': None, 'x2': None,\n        'x3': None})\nwith self.assertRaisesRegex(ValueError, 'A linear constraint should be'):\n    constraint_from_str('x1 - 2 *x2 + 3 *x3 <= 3', {'x1': None, 'x2': None,\n        'x3': None})\nwith self.assertRaisesRegex(ValueError, 'A linear constraint should be'):\n    constraint_from_str('x1 - 2* x2 + 3* x3 <= 3', {'x1': None, 'x2': None,\n        'x3': None})\nwith self.assertRaisesRegex(ValueError, 'A linear constraint should be'):\n    constraint_from_str('x1 - 2 * x2 + 3*x3 <= 3', {'x1': None, 'x2': None,\n        'x3': None})\n"
}