{
    "functionName": "testALEBOKernel",
    "className": "ALEBOTest",
    "fileName": "/facebook_&_Ax/ax_&_models_&_tests_&_test_alebo.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "B = torch.tensor([[1.0, 2.0, 3.0, 4.0, 5.0], [2.0, 3.0, 4.0, 5.0, 6.0]],\n    dtype=torch.double)\nk = ALEBOKernel(B=B, batch_shape=torch.Size([]))\nself.assertEqual(k.d, 2)\nself.assertTrue(torch.equal(B, k.B))\nself.assertTrue(torch.equal(k.triu_indx[0], torch.tensor([0, 0, 1], dtype=\n    torch.long)))\nself.assertTrue(torch.equal(k.triu_indx[1], torch.tensor([0, 1, 1], dtype=\n    torch.long)))\nself.assertEqual(k.Uvec.shape, torch.Size([3]))\nk.Uvec.requires_grad_(False)\nk.Uvec.copy_(torch.tensor([1.0, 2.0, 3.0], dtype=torch.double))\nk.Uvec.requires_grad_(True)\nx1 = torch.tensor([[0.0, 0.0], [1.0, 1.0]], dtype=torch.double)\nx2 = torch.tensor([[1.0, 1.0], [0.0, 0.0]], dtype=torch.double)\nK = k.forward(x1, x2)\nKtrue = torch.tensor([[np.exp(-0.5 * 18), 1.0], [1.0, np.exp(-0.5 * 18)]],\n    dtype=torch.double)\nself.assertTrue(torch.equal(K, Ktrue))\n"
}