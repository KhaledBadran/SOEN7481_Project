{
    "functionName": "bench",
    "className": null,
    "fileName": "/jonwright_&_ImageD11/test_&_test_overlapimage.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "im = int_im\nfloat_im = int_im.astype(np.float32)\nlabelc = np.zeros(im.shape, np.int32)\nlabelm = np.zeros(im.shape, np.int32)\nwork = np.zeros(im.shape, np.int8)\nend0 = time.time()\nnc = cImageD11.connectedpixels(float_im, labelc, 1000)\nend1 = time.time()\nrc = cImageD11.blobproperties(float_im, labelc, nc, 0)\ncImageD11.blob_moments(rc)\nend2 = time.time()\nprint('cptime', nc, '%.3f %.3f' % ((end1 - end0) * 1000, (end2 - end1) * 1000))\nwfloatim = np.where(float_im > 1000, float_im, 0)\nend0 = time.time()\nnw = cImageD11.localmaxlabel(wfloatim, labelm, work)\nend1 = time.time()\nrw = cImageD11.blobproperties(wfloatim, labelm, nw, 0)\ncImageD11.blob_moments(rw)\nend2 = time.time()\nprint('lmtime', nw, '%.3f %.3f' % ((end1 - end0) * 1000, (end2 - end1) * 1000))\nif 0:\n    pks = np.array(pks).T\n    import pylab as pl\n    pl.imshow(pl.log(float_im), origin='lower', interpolation='nearest',\n        aspect='auto')\n    pl.plot(pks[1], pks[0], 'r+', label='ideal')\n    pl.plot(rc[:, (cImageD11.f_raw)], rc[:, (cImageD11.s_raw)], 'wx', label\n        ='connect')\n    pl.plot(rw[:, (cImageD11.f_raw)], rw[:, (cImageD11.s_raw)], 'ko', label\n        ='watershed', markerfacecolor='None')\n    pl.legend()\n    pl.figure()\n    dci = [np.sqrt(np.min((pks[1] - x) ** 2 + (pks[0] - y) ** 2)) for x, y in\n        zip(rc[:, (cImageD11.f_raw)], rc[:, (cImageD11.s_raw)])]\n    pl.subplot(121)\n    pl.plot(rc[:, (cImageD11.s_raw)], dci, '.', label='sconnected')\n    pl.plot(rc[:, (cImageD11.f_raw)], dci, '.', label='fconnected')\n    dwi = [np.sqrt(np.min((pks[1] - x) ** 2 + (pks[0] - y) ** 2)) for x, y in\n        zip(rw[:, (cImageD11.f_raw)], rw[:, (cImageD11.s_raw)])]\n    pl.subplot(122)\n    pl.plot(rw[:, (cImageD11.s_raw)], dwi, '.', label='slocalmax')\n    pl.plot(rw[:, (cImageD11.f_raw)], dwi, '.', label='flocalmax')\n    pl.legend()\n    pl.show()\n"
}