{
    "functionName": "test_trial_completion",
    "className": "TestAxClient",
    "fileName": "/facebook_&_Ax/ax_&_service_&_tests_&_test_ax_client.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "ax_client = AxClient()\nax_client.create_experiment(parameters=[{'name': 'x', 'type': 'range',\n    'bounds': [-5.0, 10.0]}, {'name': 'y', 'type': 'range', 'bounds': [0.0,\n    15.0]}], minimize=True)\nparams, idx = ax_client.get_next_trial()\nwith self.assertRaisesRegex(ValueError, '.* not yet'):\n    ax_client.update_trial_data(trial_index=idx, raw_data={'objective': (0,\n        0.0)})\nax_client.complete_trial(trial_index=idx, raw_data={'objective': (0, 0.0)})\nwith self.assertRaisesRegex(ValueError, '.* already been completed'):\n    ax_client.complete_trial(trial_index=idx, raw_data={'objective': (0, 0.0)})\nwith self.assertRaisesRegex(ValueError, '.* contained an observation'):\n    ax_client.update_trial_data(trial_index=idx, raw_data={'objective': (0,\n        0.0)})\nwith self.assertRaisesRegex(ValueError, '.* contained an observation'):\n    ax_client.update_trial_data(trial_index=idx, raw_data=1.0)\nax_client.update_trial_data(trial_index=idx, raw_data={'m1': (1, 0.0)})\nmetrics_in_data = ax_client.experiment.fetch_data().df['metric_name'].values\nself.assertIn('m1', metrics_in_data)\nself.assertIn('objective', metrics_in_data)\nself.assertEqual(ax_client.get_best_parameters()[0], params)\nparams2, idy = ax_client.get_next_trial()\nax_client.complete_trial(trial_index=idy, raw_data=(-1, 0.0))\nself.assertEqual(ax_client.get_best_parameters()[0], params2)\nparams3, idx3 = ax_client.get_next_trial()\nax_client.complete_trial(trial_index=idx3, raw_data=-2, metadata={'dummy':\n    'test'})\nself.assertEqual(ax_client.get_best_parameters()[0], params3)\nself.assertEqual(ax_client.experiment.trials.get(2).run_metadata.get(\n    'dummy'), 'test')\nbest_trial_values = ax_client.get_best_parameters()[1]\nself.assertEqual(best_trial_values[0], {'objective': -2.0})\nself.assertTrue(math.isnan(best_trial_values[1]['objective']['objective']))\n"
}