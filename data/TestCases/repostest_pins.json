{
    "functionName": "test_pins",
    "className": "TestTrezorManCommands",
    "fileName": "/bitcoin-core_&_HWI/test_&_test_trezor.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "result = self.do_command(self.dev_args + ['--debug', 'promptpin'])\nself.assertEqual(result['error'], 'This device does not need a PIN')\nself.assertEqual(result['code'], -11)\nresult = self.do_command(self.dev_args + ['sendpin', '1234'])\nself.assertEqual(result['error'], 'This device does not need a PIN')\nself.assertEqual(result['code'], -11)\nresult = self.do_command(self.dev_args + ['enumerate'])\nfor dev in result:\n    if dev['type'] == 'trezor' and dev['path'] == 'udp:127.0.0.1:21324':\n        self.assertFalse(dev['needs_pin_sent'])\ndevice.wipe(self.client)\nload_device_by_mnemonic(client=self.client, mnemonic=\n    'alcohol woman abuse must during monitor noble actual mixed trade anger aisle'\n    , pin='1234', passphrase_protection=False, label='test')\nself.client.call(messages.ClearSession())\nresult = self.do_command(self.dev_args + ['enumerate'])\nfor dev in result:\n    if dev['type'] == 'trezor' and dev['path'] == 'udp:127.0.0.1:21324':\n        self.assertTrue(dev['needs_pin_sent'])\nresult = self.do_command(self.dev_args + ['promptpin'])\nself.assertTrue(result['success'])\nresult = self.do_command(self.dev_args + ['sendpin', 'notnum'])\nself.assertEqual(result['error'], 'Non-numeric PIN provided')\nself.assertEqual(result['code'], -7)\nresult = self.do_command(self.dev_args + ['sendpin', '1111'])\nself.assertFalse(result['success'])\nresult = self.do_command(self.dev_args + ['getxpub', 'm/0h'])\nself.assertEqual(result['code'], -12)\nself.assertEqual(result['error'],\n    \"Trezor is locked. Unlock by using 'promptpin' and then 'sendpin'.\")\nself.client.call(messages.ClearSession())\nresult = self.do_command(self.dev_args + ['promptpin'])\nself.assertTrue(result['success'])\nself.client.open()\npin = self.client.debug.encode_pin('1234')\nresult = self.do_command(self.dev_args + ['sendpin', pin])\nself.assertTrue(result['success'])\nresult = self.do_command(self.dev_args + ['enumerate'])\nfor dev in result:\n    if dev['type'] == 'trezor' and dev['path'] == 'udp:127.0.0.1:21324':\n        self.assertFalse(dev['needs_pin_sent'])\nresult = self.do_command(self.dev_args + ['promptpin'])\nself.assertEqual(result['error'],\n    'The PIN has already been sent to this device')\nself.assertEqual(result['code'], -11)\nresult = self.do_command(self.dev_args + ['sendpin', '1234'])\nself.assertEqual(result['error'],\n    'The PIN has already been sent to this device')\nself.assertEqual(result['code'], -11)\n"
}