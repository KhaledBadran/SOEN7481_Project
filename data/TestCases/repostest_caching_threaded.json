{
    "functionName": "test_caching_threaded",
    "className": "TestCase",
    "fileName": "/IntegralDefense_&_ACE/lib_&_saq_&_test_database.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"Cached database connections for threads.\"\"\"\nenable_cached_db_connections()\ne = threading.Event()\nwith get_db_connection() as conn_1:\n    self.assertEquals(len(saq.database._global_db_cache), 1)\n    conn_1_id = id(conn_1)\n\n    def f():\n        enable_cached_db_connections()\n        with get_db_connection() as conn_2:\n            self.assertEquals(len(saq.database._global_db_cache), 2)\n            self.assertNotEquals(conn_1, conn_2)\n            conn_2_id = id(conn_2)\n        with get_db_connection() as conn_3:\n            self.assertEquals(len(saq.database._global_db_cache), 2)\n            self.assertEquals(conn_2_id, id(conn_3))\n        e.set()\n        disable_cached_db_connections()\n        self.assertEquals(len(saq.database._global_db_cache), 1)\n    t = threading.Thread(target=f)\n    t.start()\n    e.wait()\nwith get_db_connection() as conn_4:\n    self.assertEquals(len(saq.database._global_db_cache), 1)\n    self.assertEquals(conn_1_id, id(conn_4))\ndisable_cached_db_connections()\nself.assertEquals(len(saq.database._global_db_cache), 0)\n"
}