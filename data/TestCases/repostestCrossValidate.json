{
    "functionName": "testCrossValidate",
    "className": "CrossValidationTest",
    "fileName": "/facebook_&_Ax/ax_&_modelbridge_&_tests_&_test_cross_validation.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "ma = mock.MagicMock()\nma.get_training_data = mock.MagicMock(\n    'ax.modelbridge.base.ModelBridge.get_training_data', autospec=True,\n    return_value=self.training_data)\nma.cross_validate = mock.MagicMock(\n    'ax.modelbridge.base.ModelBridge.cross_validate', autospec=True,\n    return_value=self.observation_data)\nwith self.assertRaises(ValueError):\n    cross_validate(model=ma, folds=4)\nwith self.assertRaises(ValueError):\n    cross_validate(model=ma, folds=0)\nresult = cross_validate(model=ma, folds=2)\nself.assertEqual(len(result), 4)\nz = ma.cross_validate.mock_calls\nself.assertEqual(len(z), 2)\ntrain = [[obs.features.parameters['x'] for obs in r[2]['cv_training_data']] for\n    r in z]\ntest = [[obsf.parameters['x'] for obsf in r[2]['cv_test_points']] for r in z]\nfor i in range(2):\n    self.assertEqual(len(set(train[i]).intersection(test[i])), 0)\n    self.assertEqual(len(train[i]) + len(test[i]), 4)\nall_test = np.hstack(test)\nself.assertTrue(np.array_equal(sorted(all_test), np.array([2.0, 2.0, 3.0, \n    4.0])))\nresult = cross_validate(model=ma, folds=-1)\nself.assertEqual(len(result), 4)\nz = ma.cross_validate.mock_calls[2:]\nself.assertEqual(len(z), 3)\ntrain = [[obs.features.parameters['x'] for obs in r[2]['cv_training_data']] for\n    r in z]\ntest = [[obsf.parameters['x'] for obsf in r[2]['cv_test_points']] for r in z]\nfor i in range(3):\n    self.assertEqual(len(set(train[i]).intersection(test[i])), 0)\n    self.assertEqual(len(train[i]) + len(test[i]), 4)\nall_test = np.hstack(test)\nself.assertTrue(np.array_equal(sorted(all_test), np.array([2.0, 2.0, 3.0, \n    4.0])))\ndef test_selector(obs):\n    return obs.features.parameters['x'] != 4.0\nresult = cross_validate(model=ma, folds=-1, test_selector=test_selector)\nself.assertEqual(len(result), 3)\nz = ma.cross_validate.mock_calls[5:]\nself.assertEqual(len(z), 2)\nall_test = np.hstack([[obsf.parameters['x'] for obsf in r[2][\n    'cv_test_points']] for r in z])\nself.assertTrue(np.array_equal(sorted(all_test), np.array([2.0, 2.0, 3.0])))\n"
}