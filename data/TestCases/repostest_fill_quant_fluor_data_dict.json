{
    "functionName": "test_fill_quant_fluor_data_dict",
    "className": null,
    "fileName": "/NSLS-II_&_PyXRF/pyxrf_&_core_&_tests_&_test_quant_analysis.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"Test for 'fill_quant_fluor_data_dict': testing basic functionality\"\"\"\nfluor_standard = copy.deepcopy(_xrf_standard_fluor_sample)\nnx = map_dims['nx']\nny = map_dims['ny']\nimg = gen_xrf_map_dict(nx=nx, ny=ny)\nif nx < 3:\n    nx_min, nx_max = 0, nx\nelse:\n    nx_min, nx_max = 1, -1\nif ny < 3:\n    ny_min, ny_max = 0, nx\nelse:\n    ny_min, ny_max = 1, -1\nmap_S_K_fluor = np.mean(img['S_K'][ny_min:ny_max, nx_min:nx_max])\nmap_Au_M_fluor = np.mean(img['Au_M'][ny_min:ny_max, nx_min:nx_max])\nv_sclr = np.mean(img['sclr'][ny_min:ny_max, nx_min:nx_max])\nfill_quant_fluor_data_dict(fluor_standard, xrf_map_dict=img, scaler_name='sclr'\n    )\nnpt.assert_almost_equal(fluor_standard['element_lines']['S_K'][\n    'fluorescence'], map_S_K_fluor / v_sclr, err_msg=\n    \"Fluorescence of 'S_K' is estimated incorrectly\")\nnpt.assert_almost_equal(fluor_standard['element_lines']['Au_M'][\n    'fluorescence'], map_Au_M_fluor / v_sclr, err_msg=\n    \"Fluorescence of 'Au_M' is estimated incorrectly\")\nfor eline, param in fluor_standard['element_lines'].items():\n    assert eline in img or param['fluorescence'\n        ] is None, f'Fluorescence line {eline} is not present in the dataset and it was not reset to None'\nfill_quant_fluor_data_dict(fluor_standard, xrf_map_dict=img, scaler_name='abc')\nnpt.assert_almost_equal(fluor_standard['element_lines']['S_K'][\n    'fluorescence'], map_S_K_fluor, err_msg=\n    \"Fluorescence of 'S_K' is estimated incorrectly\")\nfill_quant_fluor_data_dict(fluor_standard, xrf_map_dict=img, scaler_name=None)\nnpt.assert_almost_equal(fluor_standard['element_lines']['S_K'][\n    'fluorescence'], map_S_K_fluor, err_msg=\n    \"Fluorescence of 'S_K' is estimated incorrectly\")\npytest.mark.parametrize('map_dims', [{'nx': 10, 'ny': 5}, {'nx': 1, 'ny': 5\n    }, {'nx': 2, 'ny': 5}, {'nx': 3, 'ny': 5}, {'nx': 10, 'ny': 1}, {'nx': \n    10, 'ny': 2}, {'nx': 10, 'ny': 3}])"
}