{
    "functionName": "test_ray_simple",
    "className": null,
    "fileName": "/apetri_&_LensTools/lenstools_&_tests_&_test_ray.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "z_final = 2.0\nstart = time.time()\nlast_timestamp = start\nb = np.linspace(0.0, tracer.lens[0].side_angle.to(deg).value, 512)\nxx, yy = np.meshgrid(b, b)\npos = np.array([xx, yy]) * deg\nfin = tracer.shoot(pos, z=z_final)\nnow = time.time()\nlogging.info('Ray tracing completed in {0:.3f}s'.format(now - last_timestamp))\nlast_timestamp = now\ndfl = DeflectionPlane(fin.value - pos.value, angle=tracer.lens[0].\n    side_angle, redshift=tracer.redshift[-1], cosmology=tracer.lens[0].\n    cosmology, unit=pos.unit)\nconv = dfl.convergence()\nshear = dfl.shear()\nomega = dfl.omega()\nconv_ks = shear.convergence()\nnow = time.time()\nlogging.info('Weak lensing calculations completed in {0:.3f}s'.format(now -\n    last_timestamp))\nlast_timestamp = now\nconv.visualize(colorbar=True)\nconv.savefig('raytraced_convergence.png')\nconv_ks.visualize(colorbar=True)\nconv_ks.savefig('raytraced_convergence_ks.png')\nomega.visualize(colorbar=True)\nomega.savefig('raytraced_omega.png')\nshear.visualize(colorbar=True)\nshear.savefig('raytraced_shear.png')\nfig, ax = plt.subplots()\nl_edges = np.arange(200.0, 10000.0, 100.0)\nl, Pl = conv.powerSpectrum(l_edges)\nax.plot(l, l * (l + 1) * Pl / (2.0 * np.pi), label='From ray positions')\nfigEB, axEB = plt.subplots()\nl, EEl, BBl, EBl = shear.decompose(l_edges)\naxEB.plot(l, l * (l + 1) * EEl / (2.0 * np.pi), label=\n    'EE From ray positions', color='black')\naxEB.plot(l, l * (l + 1) * BBl / (2.0 * np.pi), label=\n    'BB From ray positions', color='green')\naxEB.plot(l, l * (l + 1) * np.abs(EBl) / (2.0 * np.pi), label=\n    'EB From ray positions', color='blue')\nfinJ = tracer.shoot(pos, z=z_final, kind='jacobians')\nconv = ConvergenceMap(data=1.0 - 0.5 * (finJ[0] + finJ[3]), angle=conv.\n    side_angle)\nshear = ShearMap(data=np.array([0.5 * (finJ[3] - finJ[0]), -0.5 * (finJ[1] +\n    finJ[2])]), angle=shear.side_angle)\nnow = time.time()\nlogging.info('Jacobian ray tracing completed in {0:.3f}s'.format(now -\n    last_timestamp))\nlast_timestamp = now\nconv.visualize(colorbar=True)\nconv.savefig('raytraced_convergence_jacobian.png')\nshear.visualize(colorbar=True)\nshear.savefig('raytraced_shear_jacobian.png')\nl, Pl = conv.powerSpectrum(l_edges)\nax.plot(l, l * (l + 1) * Pl / (2.0 * np.pi), label='From Jacobians')\nax.set_xlabel('$l$')\nax.set_ylabel('$l(l+1)P_l/2\\\\pi$')\nax.set_xscale('log')\nax.set_yscale('log')\nax.legend()\nfig.savefig('raytracing_conv_power.png')\naxEB.plot(l, l * (l + 1) * EEl / (2.0 * np.pi), label='EE From jacobians',\n    color='black', linestyle='--')\naxEB.plot(l, l * (l + 1) * BBl / (2.0 * np.pi), label='BB From jacobians',\n    color='green', linestyle='--')\naxEB.plot(l, l * (l + 1) * np.abs(EBl) / (2.0 * np.pi), label=\n    'EB From jacobians', color='blue', linestyle='--')\naxEB.set_xlabel('$l$')\naxEB.set_ylabel('$l(l+1)P_l/2\\\\pi$')\naxEB.set_xscale('log')\naxEB.set_yscale('log')\naxEB.legend(loc='lower right', prop={'size': 10})\nfigEB.savefig('raytracing_shear_power.png')\nnow = time.time()\nlogging.info('Total runtime {0:.3f}s'.format(now - start))\n"
}