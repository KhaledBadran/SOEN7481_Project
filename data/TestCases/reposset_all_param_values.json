{
    "functionName": "set_all_param_values",
    "className": null,
    "fileName": "/Lasagne_&_Lasagne/lasagne_&_layers_&_helper.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"\n    Given a list of numpy arrays, this function sets the parameters of all\n    layers below one or more given :class:`Layer` instances (including the\n    layer(s) itself) to the given values.\n\n    This function can be used in conjunction with get_all_param_values to save\n    and restore model parameters.\n\n    Parameters\n    ----------\n    layer : Layer or list\n        The :class:`Layer` instance for which to set all parameter values, or a\n        list of :class:`Layer` instances.\n\n    values : list of numpy.array\n        A list of numpy arrays representing the parameter values, must match\n        the number of parameters.\n        Every parameter's shape must match the shape of its new value.\n\n    **tags (optional)\n        tags can be specified to filter the list of parameters to be set.\n        Specifying ``tag1=True`` will limit the list to parameters that are\n        tagged with ``tag1``.\n        Specifying ``tag1=False`` will limit the list to parameters that\n        are not tagged with ``tag1``. Commonly used tags are\n        ``regularizable`` and ``trainable``.\n\n    Raises\n    ------\n    ValueError\n        If the number of values is not equal to the number of params, or\n        if a parameter's shape does not match the shape of its new value.\n\n    Examples\n    --------\n    >>> from lasagne.layers import InputLayer, DenseLayer\n    >>> l_in = InputLayer((100, 20))\n    >>> l1 = DenseLayer(l_in, num_units=50)\n    >>> all_param_values = get_all_param_values(l1)\n    >>> # all_param_values is now [l1.W.get_value(), l1.b.get_value()]\n    >>> # ...\n    >>> set_all_param_values(l1, all_param_values)\n    >>> # the parameter values are restored.\n    \"\"\"\nparams = get_all_params(layer, **tags)\nif len(params) != len(values):\n    raise ValueError('mismatch: got %d values to set %d parameters' % (len(\n        values), len(params)))\nfor p, v in zip(params, values):\n    if p.get_value().shape != v.shape:\n        raise ValueError(\n            'mismatch: parameter has shape %r but value to set has shape %r' %\n            (p.get_value().shape, v.shape))\n    else:\n        p.set_value(v)\n"
}