{
    "functionName": "ledger_test_suite",
    "className": null,
    "fileName": "/bitcoin-core_&_HWI/test_&_test_ledger.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "class TestLedgerDisabledCommands(DeviceTestCase):\n\n    def test_pin(self):\n        result = self.do_command(self.dev_args + ['promptpin'])\n        self.assertIn('error', result)\n        self.assertIn('code', result)\n        self.assertEqual(result['error'],\n            'The Ledger Nano S and X do not need a PIN sent from the host')\n        self.assertEqual(result['code'], -9)\n        result = self.do_command(self.dev_args + ['sendpin', '1234'])\n        self.assertIn('error', result)\n        self.assertIn('code', result)\n        self.assertEqual(result['error'],\n            'The Ledger Nano S and X do not need a PIN sent from the host')\n        self.assertEqual(result['code'], -9)\n\n    def test_setup(self):\n        result = self.do_command(self.dev_args + ['-i', 'setup'])\n        self.assertIn('error', result)\n        self.assertIn('code', result)\n        self.assertEqual(result['error'],\n            'The Ledger Nano S and X do not support software setup')\n        self.assertEqual(result['code'], -9)\n\n    def test_wipe(self):\n        result = self.do_command(self.dev_args + ['wipe'])\n        self.assertIn('error', result)\n        self.assertIn('code', result)\n        self.assertEqual(result['error'],\n            'The Ledger Nano S and X do not support wiping via software')\n        self.assertEqual(result['code'], -9)\n\n    def test_restore(self):\n        result = self.do_command(self.dev_args + ['-i', 'restore'])\n        self.assertIn('error', result)\n        self.assertIn('code', result)\n        self.assertEqual(result['error'],\n            'The Ledger Nano S and X do not support restoring via software')\n        self.assertEqual(result['code'], -9)\n\n    def test_backup(self):\n        result = self.do_command(self.dev_args + ['backup'])\n        self.assertIn('error', result)\n        self.assertIn('code', result)\n        self.assertEqual(result['error'],\n            'The Ledger Nano S and X do not support creating a backup via software'\n            )\n        self.assertEqual(result['code'], -9)\nclass TestLedgerGetXpub(DeviceTestCase):\n\n    def test_getxpub(self):\n        result = self.do_command(self.dev_args + ['--expert', 'getxpub',\n            'm/44h/0h/0h/3'])\n        self.assertEqual(result['xpub'],\n            'xpub6DqTtMuqBiBsSPb5UxB1qgJ3ViXuhoyZYhw3zTK4MywLB6psioW4PN1SAbhxVVirKQojnTBsjG5gXiiueRBgWmUuN43dpbMSgMCQHVqx2bR'\n            )\n        self.assertFalse(result['testnet'])\n        self.assertFalse(result['private'])\n        self.assertEqual(result['depth'], 4)\n        self.assertEqual(result['parent_fingerprint'], '2930ce56')\n        self.assertEqual(result['child_num'], 3)\n        self.assertEqual(result['chaincode'],\n            'a3cd503ab3ffd3c31610a84307f141528c7e9b8416e10980ced60d1868b463e2')\n        self.assertEqual(result['pubkey'],\n            '03d5edb7c091b5577e1e2e6493b34e602b02547518222e26472cfab1745bb5977d'\n            )\ndevice_model = 'ledger_nano_s_simulator'\npath = 'tcp:127.0.0.1:9999'\nmaster_xpub = (\n    'xpub6Cak8u8nU1evR4eMoz5UX12bU9Ws5RjEgq2Kq1RKZrsEQF6Cvecoyr19ZYRikWoJo16SXeft5fhkzbXcmuPfCzQKKB9RDPWT8XnUM62ieB9'\n    )\nfingerprint = 'f5acc2fd'\ndev_emulator = LedgerEmulator(emulator)\ndev_emulator.start()\natexit.register(dev_emulator.stop)\nsuite = unittest.TestSuite()\nsuite.addTest(DeviceTestCase.parameterize(TestLedgerDisabledCommands, rpc,\n    userpass, device_model, 'ledger', path, fingerprint, master_xpub,\n    interface=interface))\nsuite.addTest(DeviceTestCase.parameterize(TestLedgerGetXpub, rpc, userpass,\n    device_model, 'ledger', path, fingerprint, master_xpub, interface=\n    interface))\nsuite.addTest(DeviceTestCase.parameterize(TestDeviceConnect, rpc, userpass,\n    device_model, 'ledger', path, fingerprint, master_xpub, interface=\n    interface))\nsuite.addTest(DeviceTestCase.parameterize(TestGetDescriptors, rpc, userpass,\n    device_model, 'ledger', path, fingerprint, master_xpub, interface=\n    interface))\nsuite.addTest(DeviceTestCase.parameterize(TestGetKeypool, rpc, userpass,\n    device_model, 'ledger', path, fingerprint, master_xpub, interface=\n    interface))\nsuite.addTest(DeviceTestCase.parameterize(TestDisplayAddress, rpc, userpass,\n    device_model, 'ledger', path, fingerprint, master_xpub, interface=\n    interface))\nsuite.addTest(DeviceTestCase.parameterize(TestSignMessage, rpc, userpass,\n    device_model, 'ledger', path, fingerprint, master_xpub, interface=\n    interface))\nsuite.addTest(DeviceTestCase.parameterize(TestSignTx, rpc, userpass,\n    device_model, 'ledger', path, fingerprint, master_xpub, interface=\n    interface))\nresult = unittest.TextTestRunner(stream=sys.stdout, verbosity=2).run(suite)\ndev_emulator.stop()\natexit.unregister(dev_emulator.stop)\nreturn result.wasSuccessful()\n"
}