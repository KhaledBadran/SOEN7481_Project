{
    "functionName": "test_register_service",
    "className": "RPCManagerTestCase",
    "fileName": "/wo1fsea_&_PyEasyRPC/tests_&_test_redis_manager.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "service_uuid = self.rpc_manager.register_service(**self.service_data0)\nself.assertTrue(service_uuid in self.rpc_manager.get_service_uuid_set(self.\n    service_name0))\nself.assertEqual(service_uuid, self.rpc_manager.\n    get_alive_service_uuid_low_loss(self.service_name0))\nself.assertEqual(service_uuid, self.rpc_manager.\n    get_alive_service_uuid_random(self.service_name0))\nself.assertSequenceEqual(self.service_data0['method_list'], self.\n    rpc_manager.get_method_list(self.service_name0))\nwith self.assertRaises(TypeError) as context:\n    self.rpc_manager.register_service(**self.service_data0_1)\nself.assertTrue(isinstance(context.exception, TypeError))\nself.assertSequenceEqual([self.service_name0], self.rpc_manager.\n    get_service_list())\nself.rpc_manager.unregister_service(self.service_name0, service_uuid)\nself.assertFalse(self.rpc_manager.get_alive_service_uuid_set(self.\n    service_name0))\nself.assertEqual(None, self.rpc_manager.get_alive_service_uuid_random(self.\n    service_name0))\nself.assertEqual(None, self.rpc_manager.get_alive_service_uuid_low_loss(\n    self.service_name0))\nself.assertSequenceEqual([], self.rpc_manager.get_service_list())\nservice_uuid = self.rpc_manager.register_service(**self.service_data0)\nservice_uuid1 = self.rpc_manager.register_service(**self.service_data0)\nself.assertEqual(len(self.rpc_manager.get_service_uuid_set(self.\n    service_name0)), 2)\nself.rpc_manager.unregister_service(self.service_name0, service_uuid1)\nself.assertEqual(len(self.rpc_manager.get_service_uuid_set(self.\n    service_name0)), 1)\ntime.sleep(self.service_ttl * 2)\nself.assertEqual(len(self.rpc_manager.get_alive_service_uuid_set(self.\n    service_name0)), 0)\nself.rpc_manager.unregister_service(self.service_name0, service_uuid)\nservice_uuid = self.rpc_manager.register_service(enable_multi_instance=\n    False, **self.service_data0)\nwith self.assertRaises(TypeError) as context:\n    self.rpc_manager.register_service(**self.service_data0)\nself.assertTrue(isinstance(context.exception, TypeError))\nself.rpc_manager.unregister_service(self.service_name0, service_uuid)\n"
}