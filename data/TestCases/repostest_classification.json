{
    "functionName": "test_classification",
    "className": "TestLogisticRuleRegression",
    "fileName": "/IBM_&_AIX360/tests_&_rbm_&_test_Logistic_Rule_Regression.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "bc_df = pd.DataFrame(self.bc.data, columns=self.bc.feature_names)\nX_train, X_test, Y_train, Y_test = train_test_split(bc_df, self.bc.target,\n    test_size=0.2, random_state=31)\nfb = FeatureBinarizer(negations=True)\nX_train_fb = fb.fit_transform(X_train)\nX_test_fb = fb.transform(X_test)\nself.assertEqual(len(X_train_fb.columns), 540)\nself.assertEqual(len(X_test_fb.columns), 540)\nlogistic_model = LogisticRuleRegression(maxSolverIter=2000)\nexplainer = GLRMExplainer(logistic_model)\nexplainer.fit(X_train_fb, Y_train)\nY_pred = explainer.predict(X_test_fb)\nself.assertGreater(accuracy_score(Y_test, Y_pred), 0.85)\nself.assertGreater(precision_score(Y_test, Y_pred), 0.85)\nself.assertGreater(recall_score(Y_test, Y_pred), 0.85)\nself.assertGreater(f1_score(Y_test, Y_pred), 0.9)\nexplanation = explainer.explain()\nexpected = pd.DataFrame(columns=['rule', 'coefficient'], data=[[\n    '(intercept)', -11.2], [\n    'worst perimeter <= 116.46 AND worst concave points <= 0.15', -11.9], [\n    'worst concave points <= 0.15', 10.1], [\n    'worst perimeter <= 116.46 AND worst concave points <= 0.18', 9.8], [\n    'worst area <= 930.88', 5.4], [\n    'worst area > 680.60 AND worst concavity > 0.22', -3.3], [\n    'worst perimeter <= 116.46 AND worst smoothness <= 0.16', 3.1], [\n    'mean concave points <= 0.05', 1.5], ['worst concavity <= 0.27', 0.9],\n    ['worst concave points <= 0.12', 0.63], ['worst perimeter <= 104.38', -\n    0.02]])\nassert_frame_equal(explanation, expected, check_dtype=False, check_exact=\n    False, check_less_precise=1)\nfigs, _ = explainer.visualize(bc_df, fb)\nwith open('tests/rbm/logistic_plot_data.json') as fp:\n    plot_data = json.load(fp)\n    for k, v in plot_data.items():\n        obtained_plot = figs[k].axes[0].lines[0].get_xydata()\n        assert_allclose(np.array(v), obtained_plot, rtol=0.01)\n"
}