{
    "functionName": "test_DataSet_ELine",
    "className": null,
    "fileName": "/jakob-lass_&_MJOLNIR/MJOLNIR_&_Data_&_DataSet.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "DataFile = ['Data/camea2018n000136.hdf', 'Data/camea2018n000137.hdf']\ndataset = DataSet(DataFile)\ndataset.convertDataFile()\nimport matplotlib\nmatplotlib.use('Agg')\nQ1 = [1.0, -0.185, 0.0]\nQ2 = [0.5, 1.5, 0.0]\nEmin = 1.65\nEmax = 3.3\nCutData, Bins = dataset.cutELine(Q1, Q2, Emin=Emin, Emax=Emax, energyWidth=\n    0.05, minPixel=0.02, width=0.02, rlu=True, dataFiles=None, constantBins\n    =False)\nax, CutDataPlot, BinsPlot = dataset.plotCutELine(Q1, Q2, Emin=Emin, Emax=\n    Emax, energyWidth=0.05, minPixel=0.02, width=0.02, rlu=True, dataFiles=\n    None, constantBins=False)\nassert np.all([np.all(np.isclose(B, B2)) for B, B2 in zip(Bins, BinsPlot)])\nassert np.all(CutDataPlot.equals(CutData))\nassert np.all(np.logical_and(CutData['Energy'] >= Emin, CutData['Energy'] <=\n    Emax * 1.01))\nassert np.logical_and(np.all(CutData['H'] <= Q1[0] * 1.01), np.all(CutData[\n    'H'] >= Q2[0] * 0.99))\nassert np.logical_and(np.all(CutData['K'] >= Q1[1] * 1.01), np.all(CutData[\n    'K'] <= Q2[1] * 1.01))\nassert np.all(np.isclose(CutData['L'], 0.0, atol=1e-06))\nassert np.all([np.all(np.logical_and(B[0] >= Emin * 0.99, B[0] <= Emax * \n    1.05)) for B in Bins])\nif sys.version[0] == '3':\n    ax.set_xticks_base(0.01)\n    ax.set_xticks_number(10)\n    ax.set_xticks_base()\nQ1raw = dataset.convertToQxQy(Q1)\nQ2raw = dataset.convertToQxQy(Q2)\nCutData, Bins = dataset.cutELine(Q1raw, Q2raw, Emin=Emin, Emax=Emax,\n    energyWidth=0.05, minPixel=0.02, width=0.02, rlu=False)\nax, CutDataPlot, BinsPlot = dataset.plotCutELine(Q1raw, Q2raw, Emin=Emin,\n    Emax=Emax, energyWidth=0.05, minPixel=0.02, width=0.02, rlu=False)\nassert np.all([np.all(np.isclose(B, B2)) for B, B2 in zip(Bins, BinsPlot)])\nassert np.all(CutDataPlot.equals(CutData))\nassert np.all(np.logical_and(CutData['Energy'] >= Emin, CutData['Energy'] <=\n    Emax * 1.01))\nassert np.logical_and(np.all(CutData['Qx'] <= Q1raw[0] * 1.01), np.all(\n    CutData['Qx'] >= Q2raw[0] * 0.99))\nassert np.logical_and(np.all(CutData['Qy'] <= Q1raw[1] * 0.99), np.all(\n    CutData['Qy'] >= Q2raw[1] * 1.01))\nassert np.all([np.all(np.logical_and(B[0] >= Emin * 0.99, B[0] <= Emax * \n    1.05)) for B in Bins])\n"
}