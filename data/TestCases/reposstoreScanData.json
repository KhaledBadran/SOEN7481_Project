{
    "functionName": "storeScanData",
    "className": null,
    "fileName": "/jakob-lass_&_MJOLNIR/MJOLNIR_&_Data_&_DataFile.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "nxdata = entry.create_group('data')\nnxdata.attrs['NX_class'] = np.string_('NXdata')\ndet = entry['CAMEA/detector']\ndset = det.create_dataset('counts', data=self.I.swapaxes(1, 2), compression\n    ='gzip', compression_opts=6)\ndset.attrs['target'] = np.string_('/entry/CAMEA/detector/counts')\nnxdata['counts'] = dset\ndset = det.create_dataset('detector_selection', (1,), 'int32', data=self.\n    detectorSelection)\ndset = det.create_dataset('summed_counts', data=np.sum(self.I, axis=(1, 2)))\ndset.attrs['target'] = np.string_('/entry/CAMEA/detector/summed_counts')\nnxdata['summed_counts'] = dset\nsam = entry['sample']\ndset = sam.create_dataset('rotation_angle', data=self.A3, dtype='float32')\ndset_zero = sam.create_dataset('rotation_angle_zero', data=self.A3Off,\n    dtype='float32')\ndset.attrs['units'] = np.string_('degree')\ndset_zero.attrs['units'] = np.string_('degree')\ndset = sam.create_dataset('polar_angle', data=self.A4, dtype='float32')\ndset_zero = sam.create_dataset('polar_angle_zero', data=self.A4Off, dtype=\n    'float32')\ndset.attrs['units'] = np.string_('degree')\ndset_zero.attrs['units'] = np.string_('degree')\ndset.attrs['units'] = np.string_('degree')\ndset_zero.attrs['units'] = np.string_('degree')\nmono = entry['CAMEA/monochromator']\ndset = mono.create_dataset('energy', data=self.Ei, dtype='float32')\ndset.attrs['units'] = np.string_('mev')\ndset = mono.create_dataset('rotation_angle', data=self.\n    monochromatorRotationAngle, dtype='float32')\ndset.attrs['units'] = np.string_('degree')\ndset = mono.create_dataset('rotation_angle_zero', data=self.\n    monochromatorRotationAngleZero, dtype='float32')\ndset.attrs['units'] = np.string_('degree')\nentry.create_dataset('scancommand', (1,), data=np.string_(self.scanCommand))\nentry.create_dataset('scanvars', data=np.string_([x.encode('utf8') for x in\n    self.scanParameters]))\nfor variable, pos in zip(self.scanParameters, self.scanDataPosition):\n    positionRelativeEntry = '/'.join([x for x in pos.split('/')[2:]])\n    original = entry.get(positionRelativeEntry)\n    nxdata[variable] = original\n    nxdata[variable].attrs['target'] = np.string_('/entry/' +\n        positionRelativeEntry)\ncontrol = entry.create_group('control')\ncontrol.attrs['NX_class'] = np.string_('NXmonitor')\nmons = self.Monitor\ncontrol.create_dataset('data', data=mons, dtype='int32')\ndset = control.create_dataset('preset', (1,), dtype='int32')\ndset[0] = self.MonitorPreset\ndset = control.create_dataset('mode', (1,), data=np.string_(self.MonitorMode))\ntime = self.Time\ndset = control.create_dataset('time', data=time, dtype='float32')\ndset.attrs['units'] = np.string_('seconds')\ntime = self.absoluteTime\ndset = control.create_dataset('absolute_time', data=time, dtype='float32')\ndset.attrs['units'] = np.string_('seconds')\npb = entry.create_group('proton_beam')\npb.attrs['NX_class'] = np.string_('NXmonitor')\nvals = self.protonBeam\ndset = pb.create_dataset('data', data=vals, dtype='int32')\n"
}