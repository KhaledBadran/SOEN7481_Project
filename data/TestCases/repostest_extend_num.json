{
    "functionName": "test_extend_num",
    "className": "TestExtend",
    "fileName": "/hdoupe_&_ParamTools/paramtools_&_tests_&_test_parameters.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "array_first_defaults = {'schema': array_first_defaults['schema'],\n    'int_dense_array_param': array_first_defaults['int_dense_array_param']}\nnew_vos = []\nfor vo in array_first_defaults['int_dense_array_param']['value']:\n    if vo['label1'] not in (2, 4, 5):\n        new_vos.append(vo)\narray_first_defaults['int_dense_array_param']['value'] = new_vos\nexp = [{'label0': 'zero', 'label1': 0, 'label2': 0, 'value': 1}, {'label0':\n    'zero', 'label1': 0, 'label2': 1, 'value': 2}, {'label0': 'zero',\n    'label1': 0, 'label2': 2, 'value': 3}, {'label0': 'zero', 'label1': 1,\n    'label2': 0, 'value': 4}, {'label0': 'zero', 'label1': 1, 'label2': 1,\n    'value': 5}, {'label0': 'zero', 'label1': 1, 'label2': 2, 'value': 6},\n    {'label0': 'zero', 'label1': 2, 'label2': 0, 'value': 4}, {'label0':\n    'zero', 'label1': 2, 'label2': 1, 'value': 5}, {'label0': 'zero',\n    'label1': 2, 'label2': 2, 'value': 6}, {'label0': 'zero', 'label1': 3,\n    'label2': 0, 'value': 10}, {'label0': 'zero', 'label1': 3, 'label2': 1,\n    'value': 11}, {'label0': 'zero', 'label1': 3, 'label2': 2, 'value': 12},\n    {'label0': 'zero', 'label1': 4, 'label2': 0, 'value': 10}, {'label0':\n    'zero', 'label1': 4, 'label2': 1, 'value': 11}, {'label0': 'zero',\n    'label1': 4, 'label2': 2, 'value': 12}, {'label0': 'zero', 'label1': 5,\n    'label2': 0, 'value': 10}, {'label0': 'zero', 'label1': 5, 'label2': 1,\n    'value': 11}, {'label0': 'zero', 'label1': 5, 'label2': 2, 'value': 12},\n    {'label0': 'one', 'label1': 0, 'label2': 0, 'value': 19}, {'label0':\n    'one', 'label1': 0, 'label2': 1, 'value': 20}, {'label0': 'one',\n    'label1': 0, 'label2': 2, 'value': 21}, {'label0': 'one', 'label1': 1,\n    'label2': 0, 'value': 22}, {'label0': 'one', 'label1': 1, 'label2': 1,\n    'value': 23}, {'label0': 'one', 'label1': 1, 'label2': 2, 'value': 24},\n    {'label0': 'one', 'label1': 2, 'label2': 0, 'value': 22}, {'label0':\n    'one', 'label1': 2, 'label2': 1, 'value': 23}, {'label0': 'one',\n    'label1': 2, 'label2': 2, 'value': 24}, {'label0': 'one', 'label1': 3,\n    'label2': 0, 'value': 28}, {'label0': 'one', 'label1': 3, 'label2': 1,\n    'value': 29}, {'label0': 'one', 'label1': 3, 'label2': 2, 'value': 30},\n    {'label0': 'one', 'label1': 4, 'label2': 0, 'value': 28}, {'label0':\n    'one', 'label1': 4, 'label2': 1, 'value': 29}, {'label0': 'one',\n    'label1': 4, 'label2': 2, 'value': 30}, {'label0': 'one', 'label1': 5,\n    'label2': 0, 'value': 28}, {'label0': 'one', 'label1': 5, 'label2': 1,\n    'value': 29}, {'label0': 'one', 'label1': 5, 'label2': 2, 'value': 30}]\nclass AFParams(Parameters):\n    defaults = array_first_defaults\n    label_to_extend = 'label1'\n    array_first = True\nparams = AFParams()\nassert isinstance(params.int_dense_array_param, np.ndarray)\nassert params.from_array('int_dense_array_param') == exp\nfor val in params._data['int_dense_array_param']['value']:\n    if val['label1'] in (2, 4, 5):\n        assert val['_auto'] is True\n    else:\n        assert '_auto' not in val\nassert params.dump()['int_dense_array_param']['value'] == exp\nclass AFParams(Parameters):\n    defaults = array_first_defaults\n    label_to_extend = 'label1'\n    array_first = False\nparams = AFParams()\nassert isinstance(params.int_dense_array_param, list)\n"
}