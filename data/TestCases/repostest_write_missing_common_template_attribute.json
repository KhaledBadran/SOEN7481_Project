{
    "functionName": "test_write_missing_common_template_attribute",
    "className": "TestCreateKeyPairRequestPayload",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_core_&_messages_&_payloads_&_test_create_key_pair.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that a CreateKeyPair request payload can be written to a data\n        stream even when missing the common template attribute.\n        \"\"\"\npayload = payloads.CreateKeyPairRequestPayload(private_key_template_attribute\n    =objects.TemplateAttribute(attributes=[objects.Attribute(attribute_name\n    =objects.Attribute.AttributeName('Name'), attribute_value=attributes.\n    Name(name_value=attributes.Name.NameValue('PrivateKey1'), name_type=\n    attributes.Name.NameType(enums.NameType.UNINTERPRETED_TEXT_STRING))),\n    objects.Attribute(attribute_name=objects.Attribute.AttributeName(\n    'Cryptographic Usage Mask'), attribute_value=primitives.Integer(value=\n    enums.CryptographicUsageMask.SIGN.value, tag=enums.Tags.\n    CRYPTOGRAPHIC_USAGE_MASK))], tag=enums.Tags.\n    PRIVATE_KEY_TEMPLATE_ATTRIBUTE), public_key_template_attribute=objects.\n    TemplateAttribute(attributes=[objects.Attribute(attribute_name=objects.\n    Attribute.AttributeName('Name'), attribute_value=attributes.Name(\n    name_value=attributes.Name.NameValue('PublicKey1'), name_type=\n    attributes.Name.NameType(enums.NameType.UNINTERPRETED_TEXT_STRING))),\n    objects.Attribute(attribute_name=objects.Attribute.AttributeName(\n    'Cryptographic Usage Mask'), attribute_value=primitives.Integer(value=\n    enums.CryptographicUsageMask.VERIFY.value, tag=enums.Tags.\n    CRYPTOGRAPHIC_USAGE_MASK))], tag=enums.Tags.PUBLIC_KEY_TEMPLATE_ATTRIBUTE))\nstream = utils.BytearrayStream()\npayload.write(stream)\nself.assertEqual(len(self.no_common_template_attribute_encoding), len(stream))\nself.assertEqual(str(self.no_common_template_attribute_encoding), str(stream))\n"
}