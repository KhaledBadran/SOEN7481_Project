{
    "functionName": "test_flatten_timepoint_specific_output_overrides",
    "className": null,
    "fileName": "/PEtab-dev_&_PEtab/tests_&_test_petab.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"Test flatten_timepoint_specific_output_overrides\"\"\"\nobservable_df = pd.DataFrame(data={OBSERVABLE_ID: ['obs1'],\n    OBSERVABLE_FORMULA: [\n    'observableParameter1_obs1 + observableParameter2_obs1'], NOISE_FORMULA:\n    ['noiseParameter1_obs1']})\nobservable_df.set_index(OBSERVABLE_ID, inplace=True)\nobservable_df_expected = pd.DataFrame(data={OBSERVABLE_ID: ['obs1_1',\n    'obs1_2', 'obs1_3'], OBSERVABLE_FORMULA: [\n    'observableParameter1_obs1_1 + observableParameter2_obs1_1',\n    'observableParameter1_obs1_2 + observableParameter2_obs1_2',\n    'observableParameter1_obs1_3 + observableParameter2_obs1_3'],\n    NOISE_FORMULA: ['noiseParameter1_obs1_1', 'noiseParameter1_obs1_2',\n    'noiseParameter1_obs1_3']})\nobservable_df_expected.set_index(OBSERVABLE_ID, inplace=True)\nmeasurement_df = pd.DataFrame(data={OBSERVABLE_ID: ['obs1', 'obs1', 'obs1',\n    'obs1'], SIMULATION_CONDITION_ID: ['condition1', 'condition1',\n    'condition1', 'condition1'], PREEQUILIBRATION_CONDITION_ID: ['', '', '',\n    ''], TIME: [1.0, 1.0, 2.0, 2.0], MEASUREMENT: [np.nan] * 4,\n    OBSERVABLE_PARAMETERS: ['obsParOverride1;1.0', 'obsParOverride2;1.0',\n    'obsParOverride2;1.0', 'obsParOverride2;1.0'], NOISE_PARAMETERS: [\n    'noiseParOverride1', 'noiseParOverride1', 'noiseParOverride2',\n    'noiseParOverride2']})\nmeasurement_df_expected = pd.DataFrame(data={OBSERVABLE_ID: ['obs1_1',\n    'obs1_2', 'obs1_3', 'obs1_3'], SIMULATION_CONDITION_ID: ['condition1',\n    'condition1', 'condition1', 'condition1'],\n    PREEQUILIBRATION_CONDITION_ID: ['', '', '', ''], TIME: [1.0, 1.0, 2.0, \n    2.0], MEASUREMENT: [np.nan] * 4, OBSERVABLE_PARAMETERS: [\n    'obsParOverride1;1.0', 'obsParOverride2;1.0', 'obsParOverride2;1.0',\n    'obsParOverride2;1.0'], NOISE_PARAMETERS: ['noiseParOverride1',\n    'noiseParOverride1', 'noiseParOverride2', 'noiseParOverride2']})\nproblem = petab.Problem(measurement_df=measurement_df, observable_df=\n    observable_df)\nassert petab.lint_problem(problem) is False\nassert petab.lint.measurement_table_has_timepoint_specific_mappings(\n    measurement_df) is True\npetab.flatten_timepoint_specific_output_overrides(problem)\nassert petab.lint.measurement_table_has_timepoint_specific_mappings(problem\n    .measurement_df) is False\nassert problem.observable_df.equals(observable_df_expected) is True\nassert problem.measurement_df.equals(measurement_df_expected) is True\nassert petab.lint_problem(problem) is False\n"
}