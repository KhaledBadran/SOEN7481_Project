{
    "functionName": "test_update_frames_nested",
    "className": null,
    "fileName": "/SimLeek_&_CV_PubSubs/tests_&_window_&_test_subscriber_windows.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "sub_win.SubscriberWindows.FRAME_DICT = {}\nwith mock.patch.object(cv2, 'namedWindow'), mock.patch.object(cv2, 'imshow'\n    ) as mock_imshow, mock.patch('displayarray.window.subscriber_windows.print'\n    ):\n    sw = sub_win.SubscriberWindows()\n    frame = np.ones((20, 100, 100, 100))\n    sw.FRAME_DICT['0'] = frame\n    sw.update_frames()\n    assert np.all(sw.frames['0'][0] == np.ones((20, 100, 100, 3)))\n    assert len(sw.frames) == 1\n    assert mock_imshow.mock_calls[0].args[0\n        ] == 'displayarray (press ESC to quit)'\n    assert np.all(mock_imshow.mock_calls[0].args[1] == np.ones((100, 100, 3)))\n    assert mock_imshow.mock_calls[1].args[0] == '0 -  1 (press ESC to quit)'\n    assert np.all(mock_imshow.mock_calls[1].args[1] == np.ones((100, 100, 3)))\n    assert mock_imshow.mock_calls[2].args[0] == '0 -  2 (press ESC to quit)'\n    assert np.all(mock_imshow.mock_calls[2].args[1] == np.ones((100, 100, 3)))\n    assert mock_imshow.mock_calls[3].args[0] == '0 -  3 (press ESC to quit)'\n    assert np.all(mock_imshow.mock_calls[3].args[1] == np.ones((100, 100, 3)))\n    assert mock_imshow.mock_calls[4].args[0] == '0 -  4 (press ESC to quit)'\n    assert np.all(mock_imshow.mock_calls[4].args[1] == np.ones((100, 100, 3)))\n    assert mock_imshow.mock_calls[5].args[0] == '0 -  5 (press ESC to quit)'\n    assert np.all(mock_imshow.mock_calls[5].args[1] == np.ones((100, 100, 3)))\n    assert mock_imshow.mock_calls[6].args[0] == '0 -  6 (press ESC to quit)'\n    assert np.all(mock_imshow.mock_calls[6].args[1] == np.ones((100, 100, 3)))\n    assert mock_imshow.mock_calls[7].args[0] == '0 -  7 (press ESC to quit)'\n    assert np.all(mock_imshow.mock_calls[7].args[1] == np.ones((100, 100, 3)))\n    assert mock_imshow.mock_calls[8].args[0] == '0 -  8 (press ESC to quit)'\n    assert np.all(mock_imshow.mock_calls[8].args[1] == np.ones((100, 100, 3)))\n    assert mock_imshow.mock_calls[9].args[0] == '0 -  9 (press ESC to quit)'\n    assert np.all(mock_imshow.mock_calls[9].args[1] == np.ones((100, 100, 3)))\n    assert mock_imshow.mock_calls[10].args[0] == '0 -  10 (press ESC to quit)'\n    assert np.all(mock_imshow.mock_calls[10].args[1] == np.ones((100, 100, 3)))\n    assert mock_imshow.mock_calls[11].args[0] == '0 -  11 (press ESC to quit)'\n    assert np.all(mock_imshow.mock_calls[11].args[1] == np.ones((100, 100, 3)))\n    assert mock_imshow.mock_calls[12].args[0] == '0 -  12 (press ESC to quit)'\n    assert np.all(mock_imshow.mock_calls[12].args[1] == np.ones((100, 100, 3)))\n    assert mock_imshow.mock_calls[13].args[0] == '0 -  13 (press ESC to quit)'\n    assert np.all(mock_imshow.mock_calls[13].args[1] == np.ones((100, 100, 3)))\n    assert mock_imshow.mock_calls[14].args[0] == '0 -  14 (press ESC to quit)'\n    assert np.all(mock_imshow.mock_calls[14].args[1] == np.ones((100, 100, 3)))\n    assert mock_imshow.mock_calls[15].args[0] == '0 -  15 (press ESC to quit)'\n    assert np.all(mock_imshow.mock_calls[15].args[1] == np.ones((100, 100, 3)))\n    assert mock_imshow.mock_calls[16].args[0] == '0 -  16 (press ESC to quit)'\n    assert np.all(mock_imshow.mock_calls[16].args[1] == np.ones((100, 100, 3)))\n    assert mock_imshow.mock_calls[17].args[0] == '0 -  17 (press ESC to quit)'\n    assert np.all(mock_imshow.mock_calls[17].args[1] == np.ones((100, 100, 3)))\n    assert mock_imshow.mock_calls[18].args[0] == '0 -  18 (press ESC to quit)'\n    assert np.all(mock_imshow.mock_calls[18].args[1] == np.ones((100, 100, 3)))\n    assert mock_imshow.mock_calls[19].args[0] == '0 -  19 (press ESC to quit)'\n    assert np.all(mock_imshow.mock_calls[19].args[1] == np.ones((100, 100, 3)))\n"
}