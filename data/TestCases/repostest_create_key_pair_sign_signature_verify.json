{
    "functionName": "test_create_key_pair_sign_signature_verify",
    "className": "TestProxyKmipClientIntegration",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_integration_&_services_&_test_proxykmipclient.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that the ProxyKmipClient can create an asymmetric key pair and\n        then use that key pair (1) to sign data and (2) verify the signature\n        on the data.\n        \"\"\"\npublic_key_id, private_key_id = self.client.create_key_pair(enums.\n    CryptographicAlgorithm.RSA, 2048, public_usage_mask=[enums.\n    CryptographicUsageMask.VERIFY], private_usage_mask=[enums.\n    CryptographicUsageMask.SIGN])\nself.assertIsInstance(public_key_id, str)\nself.assertIsInstance(private_key_id, str)\nself.client.activate(private_key_id)\nself.client.activate(public_key_id)\nsignature = self.client.sign(b'This is a signed message.', uid=\n    private_key_id, cryptographic_parameters={'padding_method': enums.\n    PaddingMethod.PSS, 'cryptographic_algorithm': enums.\n    CryptographicAlgorithm.RSA, 'hashing_algorithm': enums.HashingAlgorithm\n    .SHA_256})\nself.assertIsInstance(signature, six.binary_type)\nresult = self.client.signature_verify(b'This is a signed message.',\n    signature, uid=public_key_id, cryptographic_parameters={\n    'padding_method': enums.PaddingMethod.PSS, 'cryptographic_algorithm':\n    enums.CryptographicAlgorithm.RSA, 'hashing_algorithm': enums.\n    HashingAlgorithm.SHA_256})\nself.assertEqual(result, enums.ValidityIndicator.VALID)\nself.client.revoke(enums.RevocationReasonCode.CESSATION_OF_OPERATION,\n    public_key_id)\nself.client.revoke(enums.RevocationReasonCode.CESSATION_OF_OPERATION,\n    private_key_id)\nself.client.destroy(public_key_id)\nself.client.destroy(private_key_id)\n"
}