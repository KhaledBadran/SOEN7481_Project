{
    "functionName": "test_unload_and_copy",
    "className": null,
    "fileName": "/capitalone_&_Data-Load-and-Copy-using-Python/tests_&_test_redshift.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "def reset_mocks():\n    mock_session.reset_mock()\n    mock_generate_unload_path.reset_mock()\n    mock_unload_generated_files.reset_mock()\n    mock_get_col_names.reset_mock()\n    mock_write.reset_mock()\n    mock_download_list_from_s3.reset_mock()\n    mock_delete_list_from_s3.reset_mock()\n    mock_concat.reset_mock()\nwith mock.patch(dbapi.__name__ + '.connect') as mock_connect:\n    r = locopy.Redshift(dbapi=dbapi, **credentials)\n    mock_unload_generated_files.return_value = ['dummy_file']\n    mock_download_list_from_s3.return_value = ['s3.file']\n    mock_get_col_names.return_value = ['dummy_col_name']\n    mock_generate_unload_path.return_value = 'dummy_s3_path'\n    r.unload_and_copy(query='query', s3_bucket='s3_bucket', s3_folder=None,\n        raw_unload_path=None, export_path=False, delimiter=',',\n        delete_s3_after=False, parallel_off=False)\n    assert mock_unload_generated_files.called\n    assert not mock_write.called, 'write_file should only be called if export_path != False'\n    mock_generate_unload_path.assert_called_with('s3_bucket', None)\n    mock_get_col_names.assert_called_with('query')\n    mock_unload.assert_called_with(query='query', s3path='dummy_s3_path',\n        unload_options=[\"DELIMITER ','\"])\n    assert not mock_delete_list_from_s3.called\n    reset_mocks()\n    mock_unload_generated_files.return_value = ['dummy_file']\n    mock_download_list_from_s3.return_value = ['s3.file']\n    mock_get_col_names.return_value = ['dummy_col_name']\n    mock_generate_unload_path.return_value = 'dummy_s3_path'\n    r.unload_and_copy(query='query', s3_bucket='s3_bucket', s3_folder=None,\n        raw_unload_path=None, export_path=False, delimiter='|',\n        delete_s3_after=False, parallel_off=True)\n    mock_unload.assert_called_with(query='query', s3path='dummy_s3_path',\n        unload_options=[\"DELIMITER '|'\", 'PARALLEL OFF'])\n    assert not mock_delete_list_from_s3.called\n    reset_mocks()\n    mock_unload_generated_files.return_value = ['dummy_file']\n    mock_generate_unload_path.return_value = 'dummy_s3_path'\n    mock_get_col_names.return_value = None\n    with pytest.raises(Exception):\n        r.unload_and_copy('query', 's3_bucket', None)\n    reset_mocks()\n    mock_generate_unload_path.return_value = 'dummy_s3_path'\n    mock_get_col_names.return_value = ['dummy_col_name']\n    mock_unload_generated_files.return_value = None\n    with pytest.raises(Exception):\n        r.unload_and_copy('query', 's3_bucket', None)\n    reset_mocks()\n    mock_get_col_names.return_value = ['dummy_col_name']\n    mock_download_list_from_s3.return_value = ['s3.file']\n    mock_generate_unload_path.return_value = 'dummy_s3_path'\n    mock_unload_generated_files.return_value = ['/dummy_file']\n    r.unload_and_copy(query='query', s3_bucket='s3_bucket', s3_folder=None,\n        raw_unload_path=None, export_path='my_output.csv', delimiter=',',\n        delete_s3_after=True, parallel_off=False)\n    mock_concat.assert_called_with(mock_download_list_from_s3.return_value,\n        'my_output.csv')\n    assert mock_write.called\n    assert mock_delete_list_from_s3.called_with('s3_bucket', 'my_output.csv')\n    reset_mocks()\n    mock_get_col_names.return_value = ['dummy_col_name']\n    mock_download_list_from_s3.return_value = ['s3.file']\n    mock_generate_unload_path.return_value = 'dummy_s3_path'\n    mock_unload_generated_files.return_value = ['/dummy_file']\n    r.unload_and_copy(query='query', s3_bucket='s3_bucket', s3_folder=None,\n        raw_unload_path='/somefolder/', export_path=False, delimiter=',',\n        delete_s3_after=False, parallel_off=False)\n    mock_download_list_from_s3.assert_called_with(['/dummy_file'],\n        '/somefolder/')\npytest.mark.parametrize('dbapi', DBAPIS)mock.patch('locopy.redshift.concatenate_files')mock.patch('locopy.s3.S3.delete_list_from_s3')mock.patch('locopy.redshift.write_file')mock.patch('locopy.s3.S3.download_list_from_s3')mock.patch('locopy.redshift.Redshift._get_column_names')mock.patch('locopy.redshift.Redshift._unload_generated_files')mock.patch('locopy.redshift.Redshift.unload')mock.patch('locopy.s3.S3._generate_unload_path')mock.patch('locopy.s3.Session')"
}