{
    "functionName": "test_symmetric_key_create_getattributes_locate_destroy",
    "className": "TestIntegration",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_integration_&_services_&_test_integration.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that newly created keys can be located based on their attributes.\n        \"\"\"\nstart_time = int(time.time())\ntime.sleep(2)\nkey_name = 'Integration Test - Create-GetAttributes-Locate-Destroy Key'\nresult = self._create_symmetric_key(key_name=key_name)\nuid_a = result.uuid\nself.assertEqual(ResultStatus.SUCCESS, result.result_status.value)\nself.assertEqual(ObjectType.SYMMETRIC_KEY, result.object_type)\nself.assertIsInstance(uid_a, str)\ntime.sleep(2)\nmid_time = int(time.time())\ntime.sleep(2)\nkey_name = 'Integration Test - Create-GetAttributes-Locate-Destroy Key'\nresult = self._create_symmetric_key(key_name=key_name)\nuid_b = result.uuid\nself.assertEqual(ResultStatus.SUCCESS, result.result_status.value)\nself.assertEqual(ObjectType.SYMMETRIC_KEY, result.object_type)\nself.assertIsInstance(uid_b, str)\ntime.sleep(2)\nend_time = int(time.time())\nresult = self.client.get_attributes(uuid=uid_a, attribute_names=[\n    'Initial Date'])\nself.assertEqual(ResultStatus.SUCCESS, result.result_status.value)\nself.assertEqual(1, len(result.attributes))\nself.assertEqual('Initial Date', result.attributes[0].attribute_name.value)\ninitial_date_a = result.attributes[0].attribute_value.value\nresult = self.client.get_attributes(uuid=uid_b, attribute_names=[\n    'Initial Date'])\nself.assertEqual(ResultStatus.SUCCESS, result.result_status.value)\nself.assertEqual(1, len(result.attributes))\nself.assertEqual('Initial Date', result.attributes[0].attribute_name.value)\ninitial_date_b = result.attributes[0].attribute_value.value\nresult = self.client.locate(attributes=[self.attr_factory.create_attribute(\n    enums.AttributeType.INITIAL_DATE, initial_date_a)])\nself.assertEqual(ResultStatus.SUCCESS, result.result_status.value)\nself.assertEqual(1, len(result.uuids))\nself.assertEqual(uid_a, result.uuids[0])\nresult = self.client.locate(attributes=[self.attr_factory.create_attribute(\n    enums.AttributeType.INITIAL_DATE, initial_date_b)])\nself.assertEqual(ResultStatus.SUCCESS, result.result_status.value)\nself.assertEqual(1, len(result.uuids))\nself.assertEqual(uid_b, result.uuids[0])\nresult = self.client.locate(attributes=[self.attr_factory.create_attribute(\n    enums.AttributeType.INITIAL_DATE, start_time), self.attr_factory.\n    create_attribute(enums.AttributeType.INITIAL_DATE, mid_time)])\nself.assertEqual(ResultStatus.SUCCESS, result.result_status.value)\nself.assertEqual(1, len(result.uuids))\nself.assertEqual(uid_a, result.uuids[0])\nresult = self.client.locate(attributes=[self.attr_factory.create_attribute(\n    enums.AttributeType.INITIAL_DATE, mid_time), self.attr_factory.\n    create_attribute(enums.AttributeType.INITIAL_DATE, end_time)])\nself.assertEqual(ResultStatus.SUCCESS, result.result_status.value)\nself.assertEqual(1, len(result.uuids))\nself.assertEqual(uid_b, result.uuids[0])\nresult = self.client.locate(attributes=[self.attr_factory.create_attribute(\n    enums.AttributeType.INITIAL_DATE, start_time), self.attr_factory.\n    create_attribute(enums.AttributeType.INITIAL_DATE, end_time)])\nself.assertEqual(ResultStatus.SUCCESS, result.result_status.value)\nself.assertEqual(2, len(result.uuids))\nself.assertIn(uid_a, result.uuids)\nself.assertIn(uid_b, result.uuids)\nresult = self.client.locate(attributes=[self.attr_factory.create_attribute(\n    enums.AttributeType.NAME, key_name)])\nself.assertEqual(ResultStatus.SUCCESS, result.result_status.value)\nself.assertEqual(2, len(result.uuids))\nself.assertIn(uid_a, result.uuids)\nself.assertIn(uid_b, result.uuids)\nresult = self.client.locate(attributes=[self.attr_factory.create_attribute(\n    enums.AttributeType.STATE, enums.State.PRE_ACTIVE)])\nself.assertEqual(ResultStatus.SUCCESS, result.result_status.value)\nself.assertEqual(2, len(result.uuids))\nself.assertIn(uid_a, result.uuids)\nself.assertIn(uid_b, result.uuids)\nresult = self.client.locate(attributes=[self.attr_factory.create_attribute(\n    enums.AttributeType.OBJECT_TYPE, enums.ObjectType.SYMMETRIC_KEY)])\nself.assertEqual(ResultStatus.SUCCESS, result.result_status.value)\nself.assertEqual(2, len(result.uuids))\nself.assertIn(uid_a, result.uuids)\nself.assertIn(uid_b, result.uuids)\nresult = self.client.locate(attributes=[self.attr_factory.create_attribute(\n    enums.AttributeType.CRYPTOGRAPHIC_ALGORITHM, enums.\n    CryptographicAlgorithm.AES)])\nself.assertEqual(ResultStatus.SUCCESS, result.result_status.value)\nself.assertEqual(2, len(result.uuids))\nself.assertIn(uid_a, result.uuids)\nself.assertIn(uid_b, result.uuids)\nresult = self.client.locate(attributes=[self.attr_factory.create_attribute(\n    enums.AttributeType.CRYPTOGRAPHIC_ALGORITHM, enums.\n    CryptographicAlgorithm.IDEA)])\nself.assertEqual(ResultStatus.SUCCESS, result.result_status.value)\nself.assertEqual(0, len(result.uuids))\nresult = self.client.locate(attributes=[self.attr_factory.create_attribute(\n    enums.AttributeType.CRYPTOGRAPHIC_LENGTH, 128)])\nself.assertEqual(2, len(result.uuids))\nself.assertIn(uid_a, result.uuids)\nself.assertIn(uid_b, result.uuids)\nresult = self.client.locate(attributes=[self.attr_factory.create_attribute(\n    enums.AttributeType.CRYPTOGRAPHIC_LENGTH, 2048)])\nself.assertEqual(0, len(result.uuids))\nresult = self.client.locate(attributes=[self.attr_factory.create_attribute(\n    enums.AttributeType.UNIQUE_IDENTIFIER, uid_a)])\nself.assertEqual(1, len(result.uuids))\nself.assertIn(uid_a, result.uuids)\nresult = self.client.locate(attributes=[self.attr_factory.create_attribute(\n    enums.AttributeType.UNIQUE_IDENTIFIER, uid_b)])\nself.assertEqual(1, len(result.uuids))\nself.assertIn(uid_b, result.uuids)\nresult = self.client.locate(attributes=[self.attr_factory.create_attribute(\n    enums.AttributeType.UNIQUE_IDENTIFIER, 'unknown')])\nself.assertEqual(0, len(result.uuids))\nresult = self.client.locate(attributes=[self.attr_factory.create_attribute(\n    enums.AttributeType.OPERATION_POLICY_NAME, 'default')])\nself.assertEqual(2, len(result.uuids))\nself.assertIn(uid_a, result.uuids)\nself.assertIn(uid_b, result.uuids)\nresult = self.client.locate(attributes=[self.attr_factory.create_attribute(\n    enums.AttributeType.OPERATION_POLICY_NAME, 'unknown')])\nself.assertEqual(0, len(result.uuids))\nresult = self.client.locate(attributes=[self.attr_factory.create_attribute(\n    enums.AttributeType.APPLICATION_SPECIFIC_INFORMATION, {\n    'application_namespace': 'ssl', 'application_data': 'www.example.com'})])\nself.assertEqual(2, len(result.uuids))\nself.assertIn(uid_a, result.uuids)\nself.assertIn(uid_b, result.uuids)\nresult = self.client.locate(attributes=[self.attr_factory.create_attribute(\n    enums.AttributeType.OBJECT_GROUP, 'IntegrationTestKeys')])\nself.assertEqual(2, len(result.uuids))\nself.assertIn(uid_a, result.uuids)\nself.assertIn(uid_b, result.uuids)\nresult = self.client.locate(offset_items=1)\nself.assertEqual(1, len(result.uuids))\nself.assertIn(uid_a, result.uuids)\nresult = self.client.locate(maximum_items=1)\nself.assertEqual(1, len(result.uuids))\nself.assertIn(uid_b, result.uuids)\nresult = self.client.locate(offset_items=1, maximum_items=1)\nself.assertEqual(1, len(result.uuids))\nself.assertIn(uid_a, result.uuids)\nmask = [enums.CryptographicUsageMask.ENCRYPT]\nresult = self.client.locate(attributes=[self.attr_factory.create_attribute(\n    enums.AttributeType.CRYPTOGRAPHIC_USAGE_MASK, mask)])\nself.assertEqual(2, len(result.uuids))\nself.assertIn(uid_a, result.uuids)\nself.assertIn(uid_b, result.uuids)\nmask.append(enums.CryptographicUsageMask.DECRYPT)\nresult = self.client.locate(attributes=[self.attr_factory.create_attribute(\n    enums.AttributeType.CRYPTOGRAPHIC_USAGE_MASK, mask)])\nself.assertEqual(2, len(result.uuids))\nself.assertIn(uid_a, result.uuids)\nself.assertIn(uid_b, result.uuids)\nmask.append(enums.CryptographicUsageMask.SIGN)\nresult = self.client.locate(attributes=[self.attr_factory.create_attribute(\n    enums.AttributeType.CRYPTOGRAPHIC_USAGE_MASK, mask)])\nself.assertEqual(0, len(result.uuids))\nmask = [enums.CryptographicUsageMask.EXPORT]\nresult = self.client.locate(attributes=[self.attr_factory.create_attribute(\n    enums.AttributeType.CRYPTOGRAPHIC_USAGE_MASK, mask)])\nself.assertEqual(0, len(result.uuids))\nresult = self.client.destroy(uid_a)\nself.assertEqual(ResultStatus.SUCCESS, result.result_status.value)\nresult = self.client.get(uuid=result.uuid.value, credential=None)\nself.assertEqual(ResultStatus.OPERATION_FAILED, result.result_status.value)\nresult = self.client.destroy(uid_b)\nself.assertEqual(ResultStatus.SUCCESS, result.result_status.value)\nresult = self.client.get(uuid=result.uuid.value, credential=None)\nself.assertEqual(ResultStatus.OPERATION_FAILED, result.result_status.value)\n"
}