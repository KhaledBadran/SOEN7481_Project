{
    "functionName": "test_evaluate_3d",
    "className": "TestHilbertCurve",
    "fileName": "/oberbichler_&_ANurbs/tests_&_TestHilbertCurve.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "expected = [(0, 0, 0), (0, 0, 1), (1, 0, 1), (1, 0, 0), (1, 1, 0), (1, 1, 1\n    ), (0, 1, 1), (0, 1, 0), (0, 2, 0), (1, 2, 0), (1, 3, 0), (0, 3, 0), (0,\n    3, 1), (1, 3, 1), (1, 2, 1), (0, 2, 1), (0, 2, 2), (1, 2, 2), (1, 3, 2),\n    (0, 3, 2), (0, 3, 3), (1, 3, 3), (1, 2, 3), (0, 2, 3), (0, 1, 3), (0, 0,\n    3), (0, 0, 2), (0, 1, 2), (1, 1, 2), (1, 0, 2), (1, 0, 3), (1, 1, 3), (\n    2, 1, 3), (2, 0, 3), (2, 0, 2), (2, 1, 2), (3, 1, 2), (3, 0, 2), (3, 0,\n    3), (3, 1, 3), (3, 2, 3), (2, 2, 3), (2, 3, 3), (3, 3, 3), (3, 3, 2), (\n    2, 3, 2), (2, 2, 2), (3, 2, 2), (3, 2, 1), (2, 2, 1), (2, 3, 1), (3, 3,\n    1), (3, 3, 0), (2, 3, 0), (2, 2, 0), (3, 2, 0), (3, 1, 0), (3, 1, 1), (\n    2, 1, 1), (2, 1, 0), (2, 0, 0), (2, 0, 1), (3, 0, 1), (3, 0, 0)]\nactual = [an.HilbertCurve3D.point_at(2, i) for i in range(64)]\nassert_array_equal(actual, expected)\nstaticmethod"
}