{
    "functionName": "test_glm_sample_weight_all_half",
    "className": "NegativeBinomialTests",
    "fileName": "/Mogeng_&_IOHMM/tests_&_test_GLM.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "self.model = GLM(solver='IRLS', family=NegativeBinomialWrapper(),\n    fit_intercept=True, est_stderr=True, reg_method=None, alpha=0, l1_ratio\n    =0, tol=0.0001, max_iter=100, coef=None, stderr=None, dispersion=None)\nself.model.fit(self.X, self.Y, sample_weight=0.5)\nself.assertEqual(self.model.coef.shape, (7,))\nnp.testing.assert_array_almost_equal(self.model.coef, np.array([-6.44847076,\n    -0.0268147, 1.25103364, 2.91070663, -0.34799563, 0.00659808, -\n    0.31303026]), decimal=2)\nprint(self.model.stderr)\nprint(self.model.dispersion)\nself.assertEqual(self.model.stderr.shape, (7,))\nnp.testing.assert_array_almost_equal(self.model.stderr * np.sqrt(20.0 / \n    13.0 / 2.0), np.array([1.99557656, 0.0199956263, 0.476820254, \n    0.648362654, 0.417956107, 0.0014151269, 0.107770186]), decimal=3)\nself.assertAlmostEqual(self.model.dispersion * 20.0 / 13.0, \n    0.38528595746569905, places=4)\nnp.testing.assert_array_almost_equal(self.model.predict(self.X), np.array([\n    12.62019383, 30.18289514, 21.48377849, 496.74068604, 103.23024673, \n    219.94693494, 324.4301163, 110.82526477, 112.44244488, 219.86056381, \n    56.84399998, 61.19840382, 114.09290269, 75.29071944, 61.21994387, \n    21.05130889, 42.75939828, 55.56133536, 0.72532053, 18.14664665]), decimal=0\n    )\nself.assertAlmostEqual(self.model.loglike(self.X, self.Y, sample_weight=0.5\n    ), old_div(-101.33286676188968, 2.0), places=1)\nself.assertAlmostEqual(self.model.loglike_per_sample(self.X, self.Y).sum(),\n    -101.33286676188968, places=1)\nself.assertEqual(self.model.loglike_per_sample(self.X, self.Y).shape, (20,))\n"
}