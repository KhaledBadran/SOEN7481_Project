{
    "functionName": "test_load_time_series_directory_data",
    "className": "DataLoaderTest",
    "fileName": "/thoughtworksarts_&_EmoPy/EmoPy_&_tests_&_unittests_&_test_dataloader.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        invalid_directory_path = 'invalid_directory_path'\n        valid_dummy_directory = resource_filename('EmoPy','tests/unittests/resources/dummy_time_series_data_directory')\n        empty_dummy_directory = resource_filename('EmoPy','tests/unittests/resources/dummy_empty_data_directory')\n        valid_time_steps = 4\n        channels = 1\n\n        # should raise error when receives an invalid directory path\n        with self.assertRaises(NotADirectoryError):\n            DataLoader(from_csv=False, datapath=invalid_directory_path, time_steps=4)\n\n        # should raise error when tries to load empty directory\n        data_loader = DataLoader(from_csv=False, datapath=empty_dummy_directory, time_steps=4)\n        with self.assertRaises(AssertionError):\n            data_loader.load_data()\n\n        # should raise error when given time_step argument that is less than 1\n        with self.assertRaises(ValueError):\n            DataLoader(from_csv=False, datapath=valid_dummy_directory, time_steps=-4)\n\n        # should raise error when given time_step argument that not an integer\n        with self.assertRaises(ValueError):\n            DataLoader(from_csv=False, datapath=valid_dummy_directory, time_steps=4.7)\n\n        # should raise error when tries to load time series sample\n        # containing a quantity of images less than the time_steps argument\n        with self.assertRaises(ValueError):\n            data_loader = DataLoader(from_csv=False, datapath=valid_dummy_directory, time_steps=10)\n            data_loader.load_data()\n\n        # should assign an image's parent directory name as its label\n        data_loader = DataLoader(from_csv=False, datapath=valid_dummy_directory, time_steps=valid_time_steps)\n        samples, labels, label_index_map = data_loader.load_data()\n        label_count = len(label_index_map.keys())\n        label = [0] * label_count\n        label[label_index_map['happiness']] = 1\n        assert label == labels[0]\n\n        data_loader = DataLoader(from_csv=False, datapath=valid_dummy_directory, time_steps=valid_time_steps)\n        samples, labels, label_index_map = data_loader.load_data()\n        # should return non-empty image and label arrays when given valid arguments\n        assert len(samples) > 0 and len(labels) > 0\n        # should return same number of labels and images when given valid arguments\n        assert len(samples) == len(labels)\n        # should reshape image to contain channel_axis in channel_last format\n        assert samples.shape[1] == valid_time_steps\n        # should reshape image to contain channel_axis in channel_last format\n        assert samples.shape[-1] == channels\n        \"\"\"\n"
}