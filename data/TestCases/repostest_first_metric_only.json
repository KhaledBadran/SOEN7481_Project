{
    "functionName": "test_first_metric_only",
    "className": "TestSklearn",
    "fileName": "/microsoft_&_LightGBM/tests_&_python_package_test_&_test_sklearn.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "def fit_and_check(eval_set_names, metric_names, assumed_iteration,\n    first_metric_only):\n    params['first_metric_only'] = first_metric_only\n    gbm = lgb.LGBMRegressor(**params).fit(**params_fit)\n    self.assertEqual(len(gbm.evals_result_), len(eval_set_names))\n    for eval_set_name in eval_set_names:\n        self.assertIn(eval_set_name, gbm.evals_result_)\n        self.assertEqual(len(gbm.evals_result_[eval_set_name]), len(\n            metric_names))\n        for metric_name in metric_names:\n            self.assertIn(metric_name, gbm.evals_result_[eval_set_name])\n            actual = len(gbm.evals_result_[eval_set_name][metric_name])\n            expected = assumed_iteration + (params_fit[\n                'early_stopping_rounds'] if eval_set_name != 'training' and\n                assumed_iteration != gbm.n_estimators else 0)\n            self.assertEqual(expected, actual)\n            self.assertEqual(assumed_iteration if eval_set_name !=\n                'training' else gbm.n_estimators, gbm.best_iteration_)\nX, y = load_boston(return_X_y=True)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,\n    random_state=42)\nX_test1, X_test2, y_test1, y_test2 = train_test_split(X_test, y_test,\n    test_size=0.5, random_state=72)\nparams = {'n_estimators': 30, 'learning_rate': 0.8, 'num_leaves': 15,\n    'verbose': -1, 'seed': 123}\nparams_fit = {'X': X_train, 'y': y_train, 'early_stopping_rounds': 5,\n    'verbose': False}\niter_valid1_l1 = 3\niter_valid1_l2 = 18\niter_valid2_l1 = 11\niter_valid2_l2 = 7\nself.assertEqual(len(set([iter_valid1_l1, iter_valid1_l2, iter_valid2_l1,\n    iter_valid2_l2])), 4)\niter_min_l1 = min([iter_valid1_l1, iter_valid2_l1])\niter_min_l2 = min([iter_valid1_l2, iter_valid2_l2])\niter_min = min([iter_min_l1, iter_min_l2])\niter_min_valid1 = min([iter_valid1_l1, iter_valid1_l2])\nparams_fit['eval_set'] = X_train, y_train\nfit_and_check(['training'], ['l2'], 30, False)\nfit_and_check(['training'], ['l2'], 30, True)\nparams['metric'] = 'None'\nparams_fit['eval_metric'] = lambda preds, train_data: [decreasing_metric(\n    preds, train_data), constant_metric(preds, train_data)]\nparams_fit['eval_set'] = X_test1, y_test1\nfit_and_check(['valid_0'], ['decreasing_metric', 'error'], 1, False)\nfit_and_check(['valid_0'], ['decreasing_metric', 'error'], 30, True)\nparams_fit['eval_metric'] = lambda preds, train_data: [constant_metric(\n    preds, train_data), decreasing_metric(preds, train_data)]\nfit_and_check(['valid_0'], ['decreasing_metric', 'error'], 1, True)\nparams.pop('metric')\nparams_fit.pop('eval_metric')\nfit_and_check(['valid_0'], ['l2'], iter_valid1_l2, False)\nfit_and_check(['valid_0'], ['l2'], iter_valid1_l2, True)\nparams_fit['eval_metric'] = 'l2'\nfit_and_check(['valid_0'], ['l2'], iter_valid1_l2, False)\nfit_and_check(['valid_0'], ['l2'], iter_valid1_l2, True)\nparams_fit['eval_metric'] = 'l1'\nfit_and_check(['valid_0'], ['l1', 'l2'], iter_min_valid1, False)\nfit_and_check(['valid_0'], ['l1', 'l2'], iter_valid1_l1, True)\nparams_fit['eval_metric'] = ['l1', 'l2']\nfit_and_check(['valid_0'], ['l1', 'l2'], iter_min_valid1, False)\nfit_and_check(['valid_0'], ['l1', 'l2'], iter_valid1_l1, True)\nparams_fit['eval_metric'] = ['l2', 'l1']\nfit_and_check(['valid_0'], ['l1', 'l2'], iter_min_valid1, False)\nfit_and_check(['valid_0'], ['l1', 'l2'], iter_valid1_l2, True)\nparams_fit['eval_metric'] = ['l2', 'regression', 'mse']\nfit_and_check(['valid_0'], ['l2'], iter_valid1_l2, False)\nfit_and_check(['valid_0'], ['l2'], iter_valid1_l2, True)\nparams_fit['eval_set'] = [(X_test1, y_test1), (X_test2, y_test2)]\nparams_fit['eval_metric'] = ['l1', 'l2']\nfit_and_check(['valid_0', 'valid_1'], ['l1', 'l2'], iter_min_l1, True)\nparams_fit['eval_metric'] = ['l2', 'l1']\nfit_and_check(['valid_0', 'valid_1'], ['l1', 'l2'], iter_min_l2, True)\nparams_fit['eval_set'] = [(X_test2, y_test2), (X_test1, y_test1)]\nparams_fit['eval_metric'] = ['l1', 'l2']\nfit_and_check(['valid_0', 'valid_1'], ['l1', 'l2'], iter_min, False)\nfit_and_check(['valid_0', 'valid_1'], ['l1', 'l2'], iter_min_l1, True)\nparams_fit['eval_metric'] = ['l2', 'l1']\nfit_and_check(['valid_0', 'valid_1'], ['l1', 'l2'], iter_min, False)\nfit_and_check(['valid_0', 'valid_1'], ['l1', 'l2'], iter_min_l2, True)\n"
}