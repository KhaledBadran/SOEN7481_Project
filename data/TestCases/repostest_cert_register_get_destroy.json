{
    "functionName": "test_cert_register_get_destroy",
    "className": "TestIntegration",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_integration_&_services_&_test_integration.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Tests that certificates are properly registered, retrieved,\n        and destroyed.\n        \"\"\"\ncert_obj_type = ObjectType.CERTIFICATE\nmask_flags = [CryptographicUsageMask.SIGN, CryptographicUsageMask.VERIFY]\nattribute_type = AttributeType.CRYPTOGRAPHIC_USAGE_MASK\nusage_mask = self.attr_factory.create_attribute(attribute_type, mask_flags)\nname = Attribute.AttributeName('Name')\ncert_name = 'Integration Test - Register-Get-Destroy Certificate'\ncert_name_value = Name.NameValue(cert_name)\nname_type = Name.NameType(NameType.UNINTERPRETED_TEXT_STRING)\ncert_value = Name(name_value=cert_name_value, name_type=name_type)\ncert_name_attr = Attribute(attribute_name=name, attribute_value=cert_value)\ncert_attributes = [usage_mask, cert_name_attr]\ncert_template_attribute = TemplateAttribute(attributes=cert_attributes)\ncert_format_type = CertificateType.X_509\ncert_data = (\n    b'0\\x82\\x03\\x120\\x82\\x01\\xfa\\xa0\\x03\\x02\\x01\\x02\\x02\\x01\\x010\\r\\x06\\t*\\x86H\\x86\\xf7\\r\\x01\\x01\\x05\\x05\\x000;1\\x0b0\\t\\x06\\x03U\\x04\\x06\\x13\\x02US1\\r0\\x0b\\x06\\x03U\\x04\\n\\x13\\x04TEST1\\x0e0\\x0c\\x06\\x03U\\x04\\x0b\\x13\\x05OASIS1\\r0\\x0b\\x06\\x03U\\x04\\x03\\x13\\x04KMIP0\\x1e\\x17\\r101101235959Z\\x17\\r201101235959Z0;1\\x0b0\\t\\x06\\x03U\\x04\\x06\\x13\\x02US1\\r0\\x0b\\x06\\x03U\\x04\\n\\x13\\x04TEST1\\x0e0\\x0c\\x06\\x03U\\x04\\x0b\\x13\\x05OASIS1\\r0\\x0b\\x06\\x03U\\x04\\x03\\x13\\x04KMIP0\\x82\\x01\"0\\r\\x06\\t*\\x86H\\x86\\xf7\\r\\x01\\x01\\x01\\x05\\x00\\x03\\x82\\x01\\x0f\\x000\\x82\\x01\\n\\x02\\x82\\x01\\x01\\x00\\xab\\x7f\\x16\\x1c\\x00BIl\\xcdlmM\\xad\\xb9\\x19\\x97455wv\\x00:\\xcfT\\xb7\\xaf\\x1eD\\n\\xfb\\x80\\xb6J\\x87U\\xf8\\x00,\\xfe\\xbak\\x18E@\\xa2\\xd6`\\x86\\xd7FH4mu\\xb8\\xd7\\x18\\x12\\xb2\\x058|\\x0fe\\x83\\xbcM}\\xc7\\xec\\x11O;\\x17kyW\\xc4\"\\xe7\\xd0?\\xc6&\\x7f\\xa2\\xa6\\xf8\\x9b\\x9b\\xee\\x9e`\\xa1\\xd7\\xc2\\xd83\\xe5\\xa5\\xf4\\xbb\\x0b\\x144\\xf4\\xe7\\x95\\xa4\\x11\\x00\\xf8\\xaa!I\\x00\\xdf\\x8be\\x08\\x9f\\x98\\x13[\\x1cg\\xb7\\x01gZ\\xbd\\xbc}W!\\xaa\\xc9\\xd1J\\x7f\\x08\\x1f\\xce\\xc8\\x0bd\\xe8\\xa0\\xec\\xc8)SS\\xc7\\x952\\x8a\\xbfp\\xe1\\xb4.{\\xb8\\xb7\\xf4\\xe8\\xac\\x8c\\x81\\x0c\\xdbf\\xe3\\xd2\\x11&\\xeb\\xa8\\xda}\\x0c\\xa3AB\\xcbv\\xf9\\x1f\\x01=\\xa8\\t\\xe9\\xc1\\xb7\\xaed\\xc5A0\\xfb\\xc2\\x1d\\x80\\xe9\\xc2\\xcb\\x06\\xc5\\xc8\\xd7\\xcc\\xe8\\x94j\\x9a\\xc9\\x9b\\x1c(\\x15\\xc3a*)\\xa8-s\\xa1\\xf9\\x93t\\xfe0\\xe5IQf*n\\xda)\\xc6\\xfcA\\x135\\xd5\\xdct&\\xb0\\xf6\\x05\\x02\\x03\\x01\\x00\\x01\\xa3!0\\x1f0\\x1d\\x06\\x03U\\x1d\\x0e\\x04\\x16\\x04\\x14\\x04\\xe5{\\xd2\\xc41\\xb2\\xe8\\x16\\xe1\\x80\\xa1\\x98#\\xfa\\xc8X\\'?k0\\r\\x06\\t*\\x86H\\x86\\xf7\\r\\x01\\x01\\x05\\x05\\x00\\x03\\x82\\x01\\x01\\x00\\xa8v\\xad\\xbcl\\x8e\\x0f\\xf0\\x17!n\\x19_\\xeav\\xbf\\xf6\\x1aV|\\x9a\\x13\\xdcP\\xd1?\\xec\\x12\\xa4\\'<D\\x15G\\xcf\\xab\\xcb]a\\xd9\\x91\\xe9f1\\x9d\\xf7,\\rA\\xba\\x82jE\\x11/\\xf2`\\x89\\xa24OMq\\xcf|\\x92\\x1bK\\xdf\\xae\\xf1`\\r\\x1b\\xaa\\xa1S6\\x05~\\x01K\\x8bImO\\xae\\x9e\\x8al\\x1d\\xa9\\xae\\xb6\\xcb\\xc9`\\xcb\\xf2\\xfa\\xe7\\x7fX~\\xc4\\xbb( E3\\x88E\\xb8\\x8d\\xd9\\xae\\xeaS\\xe4\\x82\\xa3nsNO_\\x03\\xb9\\xd0\\xdf\\xc4\\xca\\xfck\\xb3N\\xa9\\x05>R\\xbd`\\x9e\\xe0\\x1e\\x86\\xd9\\xb0\\x9f\\xb5\\x11 \\xc1\\x984\\xa9\\x97\\xb0\\x9c\\xe0\\x8dy\\xe8\\x13\\x11v/\\x97K\\xb1\\xc8\\xc0\\x91\\x86\\xc4\\xd7\\x893\\xe0\\xdb8\\xe9\\x05\\x08Hw\\xe1G\\xc7\\x8a\\xf5/\\xae\\x07\\x19/\\xf1f\\xd1\\x9f\\xa9J\\x11\\xcc\\x11\\xb2~\\xd0P\\xf7\\xa2\\x7f\\xae\\x13\\xb2\\x05\\xa5t\\xc4\\xee\\x00\\xaa\\x8b\\xd6]\\rpW\\xc9\\x85\\xc89\\xef3jD\\x1e\\xd5:S\\xc6\\xb6\\xb6\\x96\\xf1\\xbd\\xeb_~\\xa8\\x11\\xeb\\xb2Z\\x7f\\x86'\n    )\ncert_obj = Certificate(cert_format_type, cert_data)\ncert_result = self.client.register(cert_obj_type, cert_template_attribute,\n    cert_obj, credential=None)\nself._check_result_status(cert_result, ResultStatus, ResultStatus.SUCCESS)\nself._check_uuid(cert_result.uuid, str)\ncert_uuid = cert_result.uuid\ncert_result = self.client.get(uuid=cert_uuid, credential=None)\nself._check_result_status(cert_result, ResultStatus, ResultStatus.SUCCESS)\nself._check_object_type(cert_result.object_type, ObjectType, ObjectType.\n    CERTIFICATE)\nself._check_uuid(cert_result.uuid, str)\ncert_secret = cert_result.secret\ncert_secret_expected = Certificate\nself.assertIsInstance(cert_secret, cert_secret_expected)\ncert_material = cert_result.secret.certificate_value.value\nexpected = cert_data\nself.assertEqual(expected, cert_material)\nself.logger.debug('Destroying cert: ' + cert_name + '\\nWith \" \"UUID: ' +\n    cert_result.uuid)\ncert_result = self.client.destroy(cert_result.uuid)\nself._check_result_status(cert_result, ResultStatus, ResultStatus.SUCCESS)\nself._check_uuid(cert_result.uuid.value, str)\ncert_result_destroyed_result = self.client.get(uuid=cert_uuid, credential=None)\nself._check_result_status(cert_result_destroyed_result, ResultStatus,\n    ResultStatus.OPERATION_FAILED)\nexpected = ResultReason\ncert_observed = type(cert_result_destroyed_result.result_reason.value)\nself.assertEqual(expected, cert_observed)\n"
}