{
    "functionName": "get_params",
    "className": "Layer",
    "fileName": "/Lasagne_&_Lasagne/lasagne_&_layers_&_base.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"\n        Returns a list of Theano shared variables or expressions that\n        parameterize the layer.\n\n        By default, all shared variables that participate in the forward pass\n        will be returned (in the order they were registered in the Layer's\n        constructor via :meth:`add_param()`). The list can optionally be\n        filtered by specifying tags as keyword arguments. For example,\n        ``trainable=True`` will only return trainable parameters, and\n        ``regularizable=True`` will only return parameters that can be\n        regularized (e.g., by L2 decay).\n\n        If any of the layer's parameters was set to a Theano expression instead\n        of a shared variable, `unwrap_shared` controls whether to return the\n        shared variables involved in that expression (``unwrap_shared=True``,\n        the default), or the expression itself (``unwrap_shared=False``). In\n        either case, tag filtering applies to the expressions, considering all\n        variables within an expression to be tagged the same.\n\n        Parameters\n        ----------\n        unwrap_shared : bool (default: True)\n            Affects only parameters that were set to a Theano expression. If\n            ``True`` the function returns the shared variables contained in\n            the expression, otherwise the Theano expression itself.\n\n        **tags (optional)\n            tags can be specified to filter the list. Specifying ``tag1=True``\n            will limit the list to parameters that are tagged with ``tag1``.\n            Specifying ``tag1=False`` will limit the list to parameters that\n            are not tagged with ``tag1``. Commonly used tags are\n            ``regularizable`` and ``trainable``.\n\n        Returns\n        -------\n        list of Theano shared variables or expressions\n            A list of variables that parameterize the layer\n\n        Notes\n        -----\n        For layers without any parameters, this will return an empty list.\n        \"\"\"\nresult = list(self.params.keys())\nonly = set(tag for tag, value in tags.items() if value)\nif only:\n    result = [param for param in result if not only - self.params[param]]\nexclude = set(tag for tag, value in tags.items() if not value)\nif exclude:\n    result = [param for param in result if not self.params[param] & exclude]\nif unwrap_shared:\n    return utils.collect_shared_vars(result)\nelse:\n    return result\n"
}