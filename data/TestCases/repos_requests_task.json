{
    "functionName": "_requests_task",
    "className": "HedgehogServer",
    "fileName": "/PRIArobotics_&_HedgehogServer/hedgehog_&_server_&_hedgehog_server.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "async def handle_msg(ident: Header, msg_raw: RawMessage) ->RawMessage:\n    try:\n        msg = ServerSide.parse(msg_raw)\n        logger.debug('Receive command: %s', msg)\n        try:\n            handler = self.handlers[msg.__class__]\n        except KeyError:\n            raise UnsupportedCommandError(msg.__class__.msg_name())\n        try:\n            result = await handler(self, ident, msg)\n        except HedgehogCommandError as err:\n            logger.info('For command:     %s', msg)\n            logger.info('-> Error:        %s', err)\n            raise\n        except Exception as err:\n            logger.exception('Uncaught exception in command handler')\n            raise FailedCommandError('Uncaught exception: {}'.format(repr(err))\n                ) from err\n    except HedgehogCommandError as err:\n        result = err.to_message()\n    logger.debug('Send reply:      %s', result)\n    return ServerSide.serialize(result)\ntask_status.started()\nwhile True:\n    ident, msgs_raw = await self.socket.recv_msgs_raw()\n    async with self.job(f'handle {len(msgs_raw)} requests'):\n        await self.socket.send_msgs_raw(ident, [(await handle_msg(ident,\n            msg)) for msg in msgs_raw])\n"
}