{
    "functionName": "testObservationsFromDataWithSomeMissingTimes",
    "className": "ObservationsTest",
    "fileName": "/facebook_&_Ax/ax_&_core_&_tests_&_test_observation.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "truth = [{'arm_name': '0_0', 'parameters': {'x': 0, 'y': 'a'}, 'mean': 2.0,\n    'sem': 2.0, 'trial_index': 1, 'metric_name': 'a', 'start_time': 0}, {\n    'arm_name': '0_1', 'parameters': {'x': 1, 'y': 'b'}, 'mean': 3.0, 'sem':\n    3.0, 'trial_index': 2, 'metric_name': 'a', 'start_time': 0}, {\n    'arm_name': '0_0', 'parameters': {'x': 0, 'y': 'a'}, 'mean': 4.0, 'sem':\n    4.0, 'trial_index': 1, 'metric_name': 'b', 'start_time': None}, {\n    'arm_name': '0_1', 'parameters': {'x': 1, 'y': 'b'}, 'mean': 5.0, 'sem':\n    5.0, 'trial_index': 2, 'metric_name': 'b', 'start_time': None}]\narms = {obs['arm_name']: Arm(name=obs['arm_name'], parameters=obs[\n    'parameters']) for obs in truth}\nexperiment = Mock()\nexperiment._trial_indices_by_status = {status: set() for status in TrialStatus}\ntrials = {obs['trial_index']: Trial(experiment, GeneratorRun(arms=[arms[obs\n    ['arm_name']]])) for obs in truth}\ntype(experiment).arms_by_name = PropertyMock(return_value=arms)\ntype(experiment).trials = PropertyMock(return_value=trials)\ndf = pd.DataFrame(truth)[['arm_name', 'trial_index', 'mean', 'sem',\n    'metric_name', 'start_time']]\ndata = Data(df=df)\nobservations = observations_from_data(experiment, data)\nself.assertEqual(len(observations), 2)\nif observations[0].features.parameters['x'] == 1:\n    observations.reverse()\nobsd_truth = {'metric_names': [['a', 'b'], ['a', 'b']], 'means': [np.array(\n    [2.0, 4.0]), np.array([3.0, 5.0])], 'covariance': [np.diag([4.0, 16.0]),\n    np.diag([9.0, 25.0])]}\ncname_truth = ['0_0', '0_1']\nfor i, obs in enumerate(observations):\n    self.assertEqual(obs.features.parameters, truth[i]['parameters'])\n    self.assertEqual(obs.features.trial_index, truth[i]['trial_index'])\n    self.assertEqual(obs.data.metric_names, obsd_truth['metric_names'][i])\n    self.assertTrue(np.array_equal(obs.data.means, obsd_truth['means'][i]))\n    self.assertTrue(np.array_equal(obs.data.covariance, obsd_truth[\n        'covariance'][i]))\n    self.assertEqual(obs.arm_name, cname_truth[i])\n"
}