{
    "functionName": "test_register_prefix_response",
    "className": "TestFaceRegisterMethods",
    "fileName": "/named-data_&_PyNDN2/tests_&_integration_tests_&_test_face_methods.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "prefixName = Name('/test')\nself.face_in.setCommandSigningInfo(self.keyChain, self.keyChain.\n    getDefaultCertificateName())\ninterestCallbackCount = [0]\ndef onInterest(prefix, interest, face, interestFilterId, filter):\n    interestCallbackCount[0] += 1\n    data = Data(interest.getName())\n    data.setContent('SUCCESS')\n    self.keyChain.sign(data, self.keyChain.getDefaultCertificateName())\n    face.putData(data)\nfailedCallback = Mock()\nself.face_in.registerPrefix(prefixName, onInterest, failedCallback)\ntimeout = 1000\nstartTime = getNowMilliseconds()\nwhile True:\n    if getNowMilliseconds() - startTime >= timeout:\n        break\n    self.face_in.processEvents()\n    time.sleep(0.01)\ndataCallback = Mock()\ntimeoutCallback = Mock()\ninterestName = prefixName.append('hello' + repr(time.time()))\nself.face_out.expressInterest(interestName, dataCallback, timeoutCallback)\ntimeout = 10000\nstartTime = getNowMilliseconds()\nwhile True:\n    if getNowMilliseconds() - startTime >= timeout:\n        break\n    self.face_in.processEvents()\n    self.face_out.processEvents()\n    done = True\n    if interestCallbackCount[0] == 0 and failedCallback.call_count == 0:\n        done = False\n    if dataCallback.call_count == 0 and timeoutCallback.call_count == 0:\n        done = False\n    if done:\n        break\n    time.sleep(0.01)\nself.assertEqual(failedCallback.call_count, 0,\n    'Failed to register prefix at all')\nself.assertEqual(interestCallbackCount[0], 1, \n    'Expected 1 onInterest callback, got ' + str(interestCallbackCount[0]))\nself.assertEqual(dataCallback.call_count, 1, \n    'Expected 1 onData callback, got ' + str(dataCallback.call_count))\nonDataArgs = dataCallback.call_args[0]\ndata = onDataArgs[1]\nexpectedBlob = Blob('SUCCESS')\nself.assertTrue(expectedBlob == data.getContent(),\n    'Data received on face does not match expected format')\n"
}