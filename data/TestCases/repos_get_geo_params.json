{
    "functionName": "_get_geo_params",
    "className": "Brain",
    "fileName": "/nipy_&_PySurfer/surfer_&_viz.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"Return keyword arguments and other parameters for surface\n        rendering.\n\n        Parameters\n        ----------\n        cortex : {str, tuple, dict, None}\n            Can be set to: (1) the name of one of the preset cortex\n            styles ('classic', 'high_contrast', 'low_contrast', or\n            'bone'), (2) the name of a colormap, (3) a tuple with\n            four entries for (colormap, vmin, vmax, reverse)\n            indicating the name of the colormap, the min and max\n            values respectively and whether or not the colormap should\n            be reversed, (4) a valid color specification (such as a\n            3-tuple with RGB values or a valid color name), or (5) a\n            dictionary of keyword arguments that is passed on to the\n            call to surface. If set to None, color is set to (0.5,\n            0.5, 0.5).\n        alpha : float in [0, 1]\n            Alpha level to control opacity of the cortical surface.\n\n        Returns\n        -------\n        kwargs : dict\n            Dictionary with keyword arguments to be used for surface\n            rendering. For colormaps, keys are ['colormap', 'vmin',\n            'vmax', 'alpha'] to specify the name, minimum, maximum,\n            and alpha transparency of the colormap respectively. For\n            colors, keys are ['color', 'alpha'] to specify the name\n            and alpha transparency of the color respectively.\n        reverse : boolean\n            Boolean indicating whether a colormap should be\n            reversed. Set to False if a color (rather than a colormap)\n            is specified.\n        curv : boolean\n            Boolean indicating whether curv file is loaded and binary\n            curvature is displayed.\n\n        \"\"\"\nfrom matplotlib.colors import colorConverter\ncolormap_map = dict(classic=(dict(colormap='Greys', vmin=-1, vmax=2,\n    opacity=alpha), False, True), high_contrast=(dict(colormap='Greys',\n    vmin=-0.1, vmax=1.3, opacity=alpha), False, True), low_contrast=(dict(\n    colormap='Greys', vmin=-5, vmax=5, opacity=alpha), False, True), bone=(\n    dict(colormap='bone', vmin=-0.2, vmax=2, opacity=alpha), True, True))\nif isinstance(cortex, dict):\n    if 'opacity' not in cortex:\n        cortex['opacity'] = alpha\n    if 'colormap' in cortex:\n        if 'vmin' not in cortex:\n            cortex['vmin'] = -1\n        if 'vmax' not in cortex:\n            cortex['vmax'] = 2\n    geo_params = cortex, False, True\nelif isinstance(cortex, string_types):\n    if cortex in colormap_map:\n        geo_params = colormap_map[cortex]\n    elif cortex in lut_manager.lut_mode_list():\n        geo_params = dict(colormap=cortex, vmin=-1, vmax=2, opacity=alpha\n            ), False, True\n    else:\n        try:\n            color = colorConverter.to_rgb(cortex)\n            geo_params = dict(color=color, opacity=alpha), False, False\n        except ValueError:\n            geo_params = cortex, False, True\nelif cortex is None:\n    geo_params = dict(color=(0.5, 0.5, 0.5), opacity=alpha), False, False\nelif len(cortex) == 4 and isinstance(cortex[0], string_types):\n    geo_params = dict(colormap=cortex[0], vmin=cortex[1], vmax=cortex[2],\n        opacity=alpha), cortex[3], True\nelse:\n    try:\n        color = colorConverter.to_rgb(cortex)\n        geo_params = dict(color=color, opacity=alpha), False, False\n    except ValueError:\n        try:\n            lut = create_color_lut(cortex)\n            geo_params = dict(colormap='Greys', opacity=alpha, lut=lut\n                ), False, True\n        except ValueError:\n            geo_params = cortex, False, True\nreturn geo_params\n"
}