{
    "functionName": "test_pandas_categorical",
    "className": "TestSklearn",
    "fileName": "/microsoft_&_LightGBM/tests_&_python_package_test_&_test_sklearn.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "import pandas as pd\nnp.random.seed(42)\nX = pd.DataFrame({'A': np.random.permutation(['a', 'b', 'c', 'd'] * 75),\n    'B': np.random.permutation([1, 2, 3] * 100), 'C': np.random.permutation\n    ([0.1, 0.2, -0.1, -0.1, 0.2] * 60), 'D': np.random.permutation([True, \n    False] * 150), 'E': pd.Categorical(np.random.permutation(['z', 'y', 'x',\n    'w', 'v'] * 60), ordered=True)})\ny = np.random.permutation([0, 1] * 150)\nX_test = pd.DataFrame({'A': np.random.permutation(['a', 'b', 'e'] * 20),\n    'B': np.random.permutation([1, 3] * 30), 'C': np.random.permutation([\n    0.1, -0.1, 0.2, 0.2] * 15), 'D': np.random.permutation([True, False] * \n    30), 'E': pd.Categorical(np.random.permutation(['z', 'y'] * 30),\n    ordered=True)})\nnp.random.seed()\ncat_cols_actual = ['A', 'B', 'C', 'D']\ncat_cols_to_store = cat_cols_actual + ['E']\nX[cat_cols_actual] = X[cat_cols_actual].astype('category')\nX_test[cat_cols_actual] = X_test[cat_cols_actual].astype('category')\ncat_values = [X[col].cat.categories.tolist() for col in cat_cols_to_store]\ngbm0 = lgb.sklearn.LGBMClassifier(n_estimators=10).fit(X, y)\npred0 = gbm0.predict(X_test, raw_score=True)\npred_prob = gbm0.predict_proba(X_test)[:, (1)]\ngbm1 = lgb.sklearn.LGBMClassifier(n_estimators=10).fit(X, pd.Series(y),\n    categorical_feature=[0])\npred1 = gbm1.predict(X_test, raw_score=True)\ngbm2 = lgb.sklearn.LGBMClassifier(n_estimators=10).fit(X, y,\n    categorical_feature=['A'])\npred2 = gbm2.predict(X_test, raw_score=True)\ngbm3 = lgb.sklearn.LGBMClassifier(n_estimators=10).fit(X, y,\n    categorical_feature=['A', 'B', 'C', 'D'])\npred3 = gbm3.predict(X_test, raw_score=True)\ngbm3.booster_.save_model('categorical.model')\ngbm4 = lgb.Booster(model_file='categorical.model')\npred4 = gbm4.predict(X_test)\ngbm5 = lgb.sklearn.LGBMClassifier(n_estimators=10).fit(X, y,\n    categorical_feature=['A', 'B', 'C', 'D', 'E'])\npred5 = gbm5.predict(X_test, raw_score=True)\ngbm6 = lgb.sklearn.LGBMClassifier(n_estimators=10).fit(X, y,\n    categorical_feature=[])\npred6 = gbm6.predict(X_test, raw_score=True)\nself.assertRaises(AssertionError, np.testing.assert_allclose, pred0, pred1)\nself.assertRaises(AssertionError, np.testing.assert_allclose, pred0, pred2)\nnp.testing.assert_allclose(pred1, pred2)\nnp.testing.assert_allclose(pred0, pred3)\nnp.testing.assert_allclose(pred_prob, pred4)\nself.assertRaises(AssertionError, np.testing.assert_allclose, pred0, pred5)\nself.assertRaises(AssertionError, np.testing.assert_allclose, pred0, pred6)\nself.assertListEqual(gbm0.booster_.pandas_categorical, cat_values)\nself.assertListEqual(gbm1.booster_.pandas_categorical, cat_values)\nself.assertListEqual(gbm2.booster_.pandas_categorical, cat_values)\nself.assertListEqual(gbm3.booster_.pandas_categorical, cat_values)\nself.assertListEqual(gbm4.pandas_categorical, cat_values)\nself.assertListEqual(gbm5.booster_.pandas_categorical, cat_values)\nself.assertListEqual(gbm6.booster_.pandas_categorical, cat_values)\nunittest.skipIf(not lgb.compat.PANDAS_INSTALLED, 'pandas is not installed')"
}