{
    "functionName": "test_amend_qty_down",
    "className": "TestBasicOrders",
    "fileName": "/gavincyi_&_LightMatchingEngine/tests_&_unit_&_test_basic_orders.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "me = lme.LightMatchingEngine()\norder, trades = me.add_order(instmt=TestBasicOrders.instmt, price=\n    TestBasicOrders.price, qty=TestBasicOrders.lot_size * 3, side=lme.Side.BUY)\norder2, trades2 = me.add_order(instmt=TestBasicOrders.instmt, price=\n    TestBasicOrders.price, qty=TestBasicOrders.lot_size, side=lme.Side.BUY)\nself.assertEqual(0, len(trades))\nself.assertEqual(0, len(trades2))\nself.check_order_book(me, TestBasicOrders.instmt, 1, 0)\nself.check_order(order=order, order_id=1, instmt=TestBasicOrders.instmt,\n    price=TestBasicOrders.price, qty=TestBasicOrders.lot_size * 3, side=lme\n    .Side.BUY, cum_qty=0, leaves_qty=TestBasicOrders.lot_size * 3)\nself.check_order(order=order2, order_id=2, instmt=TestBasicOrders.instmt,\n    price=TestBasicOrders.price, qty=TestBasicOrders.lot_size, side=lme.\n    Side.BUY, cum_qty=0, leaves_qty=TestBasicOrders.lot_size)\norder3, trades3 = me.add_order(instmt=TestBasicOrders.instmt, price=\n    TestBasicOrders.price, qty=TestBasicOrders.lot_size, side=lme.Side.SELL)\nself.assertEqual(2, len(trades3))\nself.check_trade(trade=trades3[0], order_id=3, instmt=TestBasicOrders.\n    instmt, trade_price=TestBasicOrders.price, trade_qty=TestBasicOrders.\n    lot_size, trade_side=lme.Side.SELL, trade_id=1)\nself.check_trade(trade=trades3[1], order_id=1, instmt=TestBasicOrders.\n    instmt, trade_price=TestBasicOrders.price, trade_qty=TestBasicOrders.\n    lot_size, trade_side=lme.Side.BUY, trade_id=2)\nself.check_order(order=order, order_id=1, instmt=TestBasicOrders.instmt,\n    price=TestBasicOrders.price, qty=TestBasicOrders.lot_size * 3, side=lme\n    .Side.BUY, cum_qty=TestBasicOrders.lot_size, leaves_qty=TestBasicOrders\n    .lot_size * 2)\norder, trades = me.amend_order(order_id=order.order_id, instmt=\n    TestBasicOrders.instmt, amended_price=TestBasicOrders.price,\n    amended_qty=TestBasicOrders.lot_size * 2)\nself.assertEqual(0, len(trades))\nself.check_order(order=order, order_id=1, instmt=TestBasicOrders.instmt,\n    price=TestBasicOrders.price, qty=TestBasicOrders.lot_size * 2, side=lme\n    .Side.BUY, cum_qty=TestBasicOrders.lot_size, leaves_qty=TestBasicOrders\n    .lot_size)\norder4, trades4 = me.add_order(instmt=TestBasicOrders.instmt, price=\n    TestBasicOrders.price, qty=TestBasicOrders.lot_size * 2, side=lme.Side.SELL\n    )\nself.assertEqual(3, len(trades4))\nself.check_order(order=order4, order_id=4, instmt=TestBasicOrders.instmt,\n    price=TestBasicOrders.price, qty=TestBasicOrders.lot_size * 2, side=lme\n    .Side.SELL, cum_qty=TestBasicOrders.lot_size * 2, leaves_qty=0.0)\nself.check_trade(trade=trades4[0], order_id=4, instmt=TestBasicOrders.\n    instmt, trade_price=TestBasicOrders.price, trade_qty=TestBasicOrders.\n    lot_size * 2, trade_side=lme.Side.SELL, trade_id=3)\nself.check_trade(trade=trades4[1], order_id=1, instmt=TestBasicOrders.\n    instmt, trade_price=TestBasicOrders.price, trade_qty=TestBasicOrders.\n    lot_size, trade_side=lme.Side.BUY, trade_id=4)\nself.check_trade(trade=trades4[2], order_id=2, instmt=TestBasicOrders.\n    instmt, trade_price=TestBasicOrders.price, trade_qty=TestBasicOrders.\n    lot_size, trade_side=lme.Side.BUY, trade_id=5)\n"
}