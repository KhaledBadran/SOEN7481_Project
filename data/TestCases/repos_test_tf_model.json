{
    "functionName": "_test_tf_model",
    "className": "CorrectnessTest",
    "fileName": "/Microsoft_&_MMdnn/mmdnn_&_conversion_&_examples_&_coreml_&_test_tfcoreml.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\" Common entry to testing routine (Tensors in, tensors out).\n    tf_model_path - frozen TF model path\n    coreml_model - MLModel object\n    input_tensors -  list of (name,shape) for each input (placeholder)\n    output_tensor_names - output_tensor_names, a list of strings\n    sequence_inputs - dict of input names that are sequences for CoreML input\n    \"\"\"\ntf.reset_default_graph()\ngraph_def = graph_pb2.GraphDef()\nwith open(tf_model_path, 'rb') as f:\n    graph_def.ParseFromString(f.read())\ng = tf.import_graph_def(graph_def)\nif type(data_modes) is str:\n    data_modes = [data_modes] * len(input_tensors)\nwith tf.Session(graph=g) as sess:\n    feed_dict = {}\n    for idx, in_tensor in enumerate(input_tensors):\n        ts_name, ts_shape = in_tensor\n        ts_name = 'import/' + ts_name\n        feed_dict[ts_name] = _generate_data(ts_shape, mode=data_modes[idx],\n            scale=scale, bias=bias, img_size=img_size)\n    out_tf_names = []\n    for out_name in output_tensor_names:\n        out_tf_names.append('import/' + out_name)\n    result = sess.run(out_tf_names, feed_dict=feed_dict)\ncoreml_inputs = {}\nfor idx, in_tensor in enumerate(input_tensors):\n    in_tensor_name, in_shape = in_tensor\n    coreml_in_name = in_tensor_name.replace(':', '__').replace('/', '__')\n    if in_tensor_name in sequence_inputs:\n        coreml_inputs[coreml_in_name] = _tf_transpose(feed_dict['import/' +\n            in_tensor_name], is_sequence=True).copy()\n    else:\n        coreml_inputs[coreml_in_name] = _tf_transpose(feed_dict['import/' +\n            in_tensor_name]).copy()\ncoreml_output = coreml_model.predict(coreml_inputs, useCPUOnly=use_cpu_only)\nfor idx, out_name in enumerate(output_tensor_names):\n    out_tensor_name = out_name.replace(':', '__').replace('/', '__')\n    tp = _tf_transpose(result[idx]).flatten()\n    cp = coreml_output[out_tensor_name].flatten()\n    error, index = _compute_max_relative_error(tp, cp)\n    snr, psnr = _compute_SNR(tp, cp)\n    self._compare_tf_coreml_outputs(tp, cp)\n"
}