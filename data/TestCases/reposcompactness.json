{
    "functionName": "compactness",
    "className": null,
    "fileName": "/pmeal_&_OpenPNM/openpnm_&_models_&_geometry_&_throat_shape_factor.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"\n    Mortensen et al. have shown that the Hagen-Poiseuille hydraluic resistance\n    is linearly dependent on the compactness. Defined as perimeter^2/area.\n    The dependence is not universal as shapes with sharp corners provide more\n    resistance than those that are more elliptical. Count the number of\n    vertices and apply the right correction.\n\n    Parameters\n    ----------\n    target : OpenPNM Object\n        The object which this model is associated with. This controls the\n        length of the calculated array, and also provides access to other\n        necessary properties.\n\n    throat_perimeter : string\n        The dictionary key of the array containing the throat perimeter values.\n\n    throat_area : string\n        The dictionary key of the array containing the throat area values.\n\n    Returns\n    -------\n    alpha : NumPy ndarray\n        Array containing throat compactness values.\n\n    References\n    ----------\n    Mortensen N.A, Okkels F., and Bruus H. Reexamination of Hagen-Poiseuille\n    flow: Shape dependence of the hydraulic resistance in microchannels.\n    Physical Review E, v.71, pp.057301 (2005).\n\n    \"\"\"\nts = target.throats()[target[throat_area] > 0]\nP = target[throat_perimeter]\nA = target[throat_area]\nC = _np.ones(target.num_throats())\nC[ts] = P[ts] ** 2 / A[ts]\nalpha = _np.ones_like(C) * 8 * _np.pi\nif 'throat.offset_vertices' in target.props():\n    verts = target['throat.offset_vertices']\n    for i in ts:\n        if ~_np.any(_np.isnan(verts[i])):\n            if len(verts[i]) == 3:\n                alpha[i] = C[i] * (25 / 17) + 40 * _np.sqrt(3) / 17\n            elif len(verts[i]) == 4:\n                alpha[i] = C[i] * (22 / 7) - 65 / 3\n            elif len(verts[i]) > 4:\n                alpha[i] = C[i] * (8 / 3) - 8 * _np.pi / 3\nalpha /= 8 * _np.pi\nalpha[alpha < 1.0] = 1.0\nreturn alpha\n"
}