{
    "functionName": "_make_viewer",
    "className": null,
    "fileName": "/nipy_&_PySurfer/surfer_&_viz.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"Triage viewer creation\n\n    If n_row == n_col == 1, then we can use a Mayavi figure, which\n    generally guarantees that things will be drawn before control\n    is returned to the command line. With the multi-view, TraitsUI\n    unfortunately has no such support, so we only use it if needed.\n    \"\"\"\nif figure is None:\n    h, w = scene_size\n    if offscreen == 'auto':\n        offscreen = mlab.options.offscreen\n    if offscreen:\n        orig_val = mlab.options.offscreen\n        try:\n            mlab.options.offscreen = True\n            with warnings.catch_warnings(record=True):\n                figures = [[mlab.figure(size=(w / n_col, h / n_row)) for _ in\n                    range(n_col)] for __ in range(n_row)]\n        finally:\n            mlab.options.offscreen = orig_val\n        _v = None\n    else:\n        if n_row == 1 and n_col == 1:\n            with warnings.catch_warnings(record=True):\n                figure = mlab.figure(size=(w, h))\n            figure.name = title\n            figures = [[figure]]\n            _v = None\n        else:\n            window = _MlabGenerator(n_row, n_col, w, h, title)\n            figures, _v = window._get_figs_view()\n        if interaction == 'terrain':\n            for figure in figures:\n                for f in figure:\n                    f.scene.interactor.interactor_style = (tvtk.\n                        InteractorStyleTerrain())\n        if antialias:\n            for figure in figures:\n                for f in figure:\n                    if hasattr(getattr(f.scene, 'renderer', None), 'use_fxaa'):\n                        f.scene.renderer.use_fxaa = True\nelse:\n    if isinstance(figure, int):\n        figure = [mlab.figure(figure, size=scene_size)]\n    elif isinstance(figure, tuple):\n        figure = list(figure)\n    elif not isinstance(figure, list):\n        figure = [figure]\n    if not all(isinstance(f, Scene) for f in figure):\n        raise TypeError('figure must be a mayavi scene or list of scenes')\n    if not len(figure) == n_row * n_col:\n        raise ValueError(\n            'For the requested view, figure must be a list or tuple with exactly %i elements, not %i'\n             % (n_row * n_col, len(figure)))\n    _v = None\n    figures = [figure[slice(ri * n_col, (ri + 1) * n_col)] for ri in range(\n        n_row)]\nreturn figures, _v\n"
}