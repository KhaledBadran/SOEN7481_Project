{
    "functionName": "test_update_brocess",
    "className": "TestCase",
    "fileName": "/IntegralDefense_&_ACE/lib_&_saq_&_modules_&_test_email.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "self.reset_brocess()\nroot = create_root_analysis(alert_type='mailbox')\nroot.initialize_storage()\nshutil.copy(os.path.join('test_data', 'emails',\n    'splunk_logging.email.rfc822'), os.path.join(root.storage_dir,\n    'email.rfc822'))\nfile_observable = root.add_observable(F_FILE, 'email.rfc822')\nfile_observable.add_directive(DIRECTIVE_ORIGINAL_EMAIL)\nroot.save()\nroot.schedule()\nengine = TestEngine()\nengine.enable_module('analysis_module_file_type', 'test_groups')\nengine.enable_module('analysis_module_email_analyzer', 'test_groups')\nengine.enable_module('analysis_module_email_logger', 'test_groups')\nengine.controlled_stop()\nengine.start()\nengine.wait()\nroot.load()\nfile_observable = root.get_observable(file_observable.id)\nfrom saq.modules.email import EmailAnalysis\nanalysis = file_observable.get_analysis(EmailAnalysis)\nself.assertIsNotNone(analysis)\nfrom saq.email import normalize_email_address\nmail_from = normalize_email_address(analysis.mail_from)\nenv_rcpt_to = normalize_email_address(analysis.env_rcpt_to[0])\nwith get_db_connection('brocess') as db:\n    c = db.cursor()\n    c.execute(\n        'SELECT numconnections FROM smtplog WHERE source = %s AND destination = %s'\n        , (mail_from, env_rcpt_to))\n    count = c.fetchone()\n    self.assertEquals(count[0], 1)\nroot = create_root_analysis(alert_type='mailbox')\nroot.initialize_storage()\nshutil.copy(os.path.join('test_data', 'emails',\n    'splunk_logging.email.rfc822'), os.path.join(root.storage_dir,\n    'email.rfc822'))\nfile_observable = root.add_observable(F_FILE, 'email.rfc822')\nfile_observable.add_directive(DIRECTIVE_ORIGINAL_EMAIL)\nroot.save()\nroot.schedule()\nengine = TestEngine()\nengine.enable_module('analysis_module_file_type', 'test_groups')\nengine.enable_module('analysis_module_email_analyzer', 'test_groups')\nengine.enable_module('analysis_module_email_logger', 'test_groups')\nengine.controlled_stop()\nengine.start()\nengine.wait()\nwith get_db_connection('brocess') as db:\n    c = db.cursor()\n    c.execute(\n        'SELECT numconnections FROM smtplog WHERE source = %s AND destination = %s'\n        , (mail_from, env_rcpt_to))\n    count = c.fetchone()\n    self.assertEquals(count[0], 2)\n"
}