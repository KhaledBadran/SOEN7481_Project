{
    "functionName": "convertToHDF",
    "className": null,
    "fileName": "/jakob-lass_&_MJOLNIR/MJOLNIR_&_Geometry_&_Instrument.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"Convert McStas simulation to h5 format.\n    \n    Args:\n\n        - fileName (str): File name of created file ('*.hdf')\n\n        - title (str): Title of HdF file\n\n        - sample (str): Name of sample\n\n        - fname (str): Location folder of McStas Data (must end with '/')\n\n    Kwargs:\n\n        - CalibrationFile (str or list of str): Location of calibration file(s) wanted in HdF file (default None)\n\n        - pixels (int): Number of pixels on detectors (default 1024)\n\n        - cell (list): Cell parameters passed into the hdf file (default [5,5,5,90,90,90])\n\n        - factor (float): Overall scale factor for intensity\n\n    \"\"\"\ndef addMetaData(entry, title):\n    dset = entry.create_dataset('start_time', (1,), dtype='<S70')\n    dset[0] = b'2018-03-22T16:44:02+01:00'\n    dset = entry.create_dataset('end_time', (1,), dtype='<S70')\n    dset[0] = b'2018-03-22T18:44:02+01:00'\n    dset = entry.create_dataset('experiment_identifier', (1,), dtype='<S70')\n    dset[0] = b'UNKNOWN'\n    dset = entry.create_dataset('instrument', (1,), dtype='<S70')\n    dset[0] = b'CAMEA'\n    dset = entry.create_dataset('comment', (1,), dtype='<S70')\n    dset[0] = b'I feel uncommented'\n    dset = entry.create_dataset('title', (1,), dtype='<S70')\n    dset[0] = np.string_(title)\n    dset = entry.create_dataset('proposal_id', (1,), dtype='<S70')\n    dset[0] = b'2018-00666'\n    dset = entry.create_dataset('proposal_title', (1,), dtype='<S70')\n    dset[0] = b'I need my Title!'\n    cont = entry.create_group('local_contact')\n    cont.attrs['NX_class'] = np.string_('NXuser')\n    dset = cont.create_dataset('name', (1,), dtype='S70')\n    dset[0] = b'UNKNOWN'\n    us = entry.create_group('proposal_user')\n    us.attrs['NX_class'] = np.string_('NXuser')\n    dset = us.create_dataset('name', (1,), dtype='S70')\n    dset[0] = b'Jakob Lass'\n    dset = us.create_dataset('email', (1,), dtype='S70')\n    dset[0] = b'jakob@lass.dk'\n    pus = entry.create_group('user')\n    pus.attrs['NX_class'] = np.string_('NXuser')\n    dset = pus.create_dataset('name', (1,), dtype='S70')\n    dset[0] = b'Jakob Lass'\n    dset = pus.create_dataset('email', (1,), dtype='S70')\n    dset[0] = b'jakob@lass.dk'\n    dset = pus.create_dataset('address', (1,), dtype='S70')\n    dset[0] = b'UNKNOWN'\n    dset = pus.create_dataset('affiliation', (1,), dtype='S70')\n    dset[0] = b'UNKNOWN'\ndef addMono(inst):\n    mono = inst.create_group('monochromator')\n    mono.attrs['NX_class'] = np.string_('NXmonochromator')\n    dset = mono.create_dataset('type', (1,), dtype='S70')\n    dset[0] = b'Pyrolithic Graphite'\n    dset = mono.create_dataset('d_spacing', (1,), 'float32')\n    dset[0] = 3.354\n    dset.attrs['units'] = 'anstrom'\n    dset = mono.create_dataset('horizontal_curvature', (1,), 'float32')\n    dset[0] = 0.0\n    dset.attrs['units'] = 'meter'\n    dset = mono.create_dataset('vertical_curvatur', (1,), 'float32')\n    dset[0] = 0.0\n    dset.attrs['units'] = 'meter'\n    dset = mono.create_dataset('horizontal_curvature_zero', (1,), 'float32')\n    dset[0] = 0.0\n    dset.attrs['units'] = 'meter'\n    dset = mono.create_dataset('vertical_curvature_zero', (1,), 'float32')\n    dset[0] = 0.0\n    dset.attrs['units'] = 'meter'\n    dset = mono.create_dataset('gm', (1,), 'float32')\n    dset[0] = 0.0\n    dset.attrs['units'] = 'degree'\n    dset = mono.create_dataset('gm_zero', (1,), 'float32')\n    dset[0] = 0.0\n    dset.attrs['units'] = 'degree'\n    dset = mono.create_dataset('tlm', (1,), 'float32')\n    dset[0] = 0.0\n    dset.attrs['units'] = 'degree'\n    dset = mono.create_dataset('tlm_zero', (1,), 'float32')\n    dset[0] = 0.0\n    dset.attrs['units'] = 'degree'\n    dset = mono.create_dataset('tum', (1,), 'float32')\n    dset[0] = 0.0\n    dset.attrs['units'] = 'degree'\n    dset = mono.create_dataset('tum_zero', (1,), 'float32')\n    dset[0] = 0.0\n    dset.attrs['units'] = 'degree'\n    monoSlit = inst.create_group('monochromator_slit')\n    monoSlit.attrs['NX_class'] = np.string_('NXmonochromatorslit')\n    for x in ['bottom', 'left', 'right', 'top']:\n        dset = monoSlit.create_dataset(x, (1,), 'float32')\n        dset[0] = 0.0\n        dset.attrs['units'] = 'mm'\n        dset = monoSlit.create_dataset(x + '_zero', (1,), 'float32')\n        dset[0] = 0.0\n        dset.attrs['units'] = 'mm'\n    for x in ['x_gab', 'y_gab']:\n        dset = monoSlit.create_dataset(x, (1,), 'float32')\n        dset[0] = 0.0\n        dset.attrs['units'] = 'mm'\ndef addAna(inst):\n    ana = inst.create_group('analyzer')\n    ana.attrs['NX_class'] = np.string_('NXcrystal')\n    dset = ana.create_dataset('type', (1,), dtype='S70')\n    dset[0] = b'Pyrolithic Graphite'\n    dset = ana.create_dataset('d_spacing', (1,), 'float32')\n    dset[0] = 3.354\n    dset.attrs['units'] = 'anstrom'\n    dset = ana.create_dataset('analyzer_selection', (1,), 'float32')\n    dset[0] = 0\n    dset.attrs['units'] = 'anstrom'\n    dset = ana.create_dataset('nominal_energy', (1,), 'float32')\n    dset[0] = 0.0\n    dset.attrs['units'] = 'mev'\ndef addDetector(inst):\n    det = inst.create_group('detector')\n    det.attrs['NX_class'] = np.string_('NXdetector')\n    detsel = det.create_dataset('detector_selection', (1,), 'float32')\n    detsel[0] = 0\ndef readDetSequence():\n    detlist = []\n    dir_path = os.path.dirname(os.path.realpath(__file__))\n    fin = open(dir_path + '/' + 'detsequence.dat', 'r')\n    for line in fin:\n        detlist.append(line.strip())\n    fin.close()\n    return detlist\ndef readDetFile(fname, pixels=1024, factor=10000):\n    detdata = np.zeros(pixels, dtype='int32')\n    f = open(fname, 'r')\n    psddata = f.readlines()\n    f.close()\n    idx = 0\n    a3 = 0\n    a4 = 0\n    ei = 0\n    for line in psddata:\n        if line.find('EI=') > 0 or line.find(' SourceE=') > 0:\n            l = line.split('=')\n            ei = float(l[1])\n        if line.find('A3=') > 0:\n            l = line.split('=')\n            a3 = float(l[1])\n        if line.find('A4=') > 0:\n            l = line.split('=')\n            a4 = float(l[1])\n        if line.find('variables:') > 0:\n            idx = idx + 1\n            break\n        idx = idx + 1\n    detind = 0\n    for i in range(idx + 1, pixels + idx - 1):\n        l = psddata[i].split()\n        detdata[detind] = int(round(factor * float(l[1])))\n        detind = detind + 1\n    return detdata, a3, a4, ei\ndef readScanPointData(dir, detlist, Numpoints, pixels=1024, factor=10000,\n    detectors=104):\n    frame = np.zeros((detectors, pixels), dtype='int32')\n    i = 0\n    for detfile in detlist:\n        detdata, a3, a4, ei = readDetFile(dir + '/' + str(Numpoints) + '/' +\n            detfile, factor=factor, pixels=pixels)\n        frame[i] = detdata\n        i = i + 1\n    return frame, a3, a4, ei\ndef readScanData(dir, Numpoints, pixels=1024, factor=10000, detectors=104):\n    detlist = readDetSequence()[:detectors]\n    data = np.zeros((Numpoints, detectors, pixels), dtype='int32')\n    a3 = []\n    a4 = []\n    ei = []\n    for n in range(Numpoints):\n        frame, a3n, a4n, ein = readScanPointData(dir, detlist, n, factor=\n            factor, pixels=pixels, detectors=detectors)\n        a3.append(a3n)\n        a4.append(a4n)\n        ei.append(ein)\n        data[n] = frame\n    return data, a3, a4, ei\ndef addSample(entry, name, cell, ub=None, plane_vector_1=None,\n    plane_vector_2=None, plane_normal=None):\n    sam = entry.create_group('sample')\n    sam.attrs['NX_class'] = np.string_('NXsample')\n    dset = sam.create_dataset('name', (1,), dtype='S70')\n    dset[0] = np.string_(name)\n    if ub is None:\n        ub = np.zeros((3, 3), dtype='float32')\n        ub[0, 0] = 1.0\n        ub[1, 1] = 1.0\n        ub[2, 2] = 1.0\n    dset = sam.create_dataset('orientation_matrix', data=ub)\n    if plane_vector_1 is None:\n        plane_vector_1 = [1, 0, 0, 0, 0, 0, 0]\n    dset = sam.create_dataset('plane_vector_1', data=plane_vector_1)\n    if plane_vector_2 is None:\n        plane_vector_2 = [0, 1, 0, 0, 0, 0, 0]\n    dset = sam.create_dataset('plane_vector_2', data=plane_vector_2)\n    if plane_normal is None:\n        normal = np.zeros((3,), dtype='float32')\n        normal[2] = 1.0\n    dset = sam.create_dataset('plane_normal', data=plane_normal)\n    cell = np.array(cell, dtype='float32')\n    dset = sam.create_dataset('unit_cell', data=cell)\n    dset = sam.create_dataset('azimuthal_angle', data=0.0)\n    dset = sam.create_dataset('x', data=0.0)\n    dset = sam.create_dataset('y', data=0.0)\n    for x in ['sgu', 'sgl']:\n        dset = sam.create_dataset(x, data=0.0)\n        dset = sam.create_dataset(x + '_zero', data=0.0)\ndef isVaried(data):\n    if len(data) > 1 and data[0] != data[1]:\n        return True\n    else:\n        return False\ndef makeTheta(ei):\n    theta = []\n    tth = []\n    for e in ei:\n        k = np.sqrt(float(e) / 2.072)\n        fd = np.pi / (k * 3.354)\n        th = np.degrees(np.arcsin(fd))\n        theta.append(th)\n        tth.append(2.0 * th)\n    return theta, tth\ndef storeScanData(entry, data, a3, a4, ei, rotation_angle_zero=0.0,\n    polar_angle_offset=0.0):\n    nxdata = entry.create_group('data')\n    nxdata.attrs['NX_class'] = np.string_('NXdata')\n    det = entry['CAMEA/detector']\n    dset = det.create_dataset('counts', data=data.swapaxes(1, 2),\n        compression='gzip', compression_opts=9)\n    dset.attrs['target'] = np.string_('/entry/CAMEA/detector/counts')\n    dset.attrs['units'] = np.string_('counts')\n    nxdata['counts'] = dset\n    dset = det.create_dataset('summed_counts', data=np.sum(data, axis=(1, 2)))\n    dset.attrs['target'] = np.string_('/entry/CAMEA/detector/summed_counts')\n    dset.attrs['units'] = np.string_('counts')\n    nxdata['summed_counts'] = dset\n    sam = entry['sample']\n    scanType = 'Unknown'\n    scanvars = ''\n    if isVaried(a3):\n        dset = sam.create_dataset('rotation_angle', data=np.array(a3))\n        dset_zero = sam.create_dataset('rotation_angle_zero', data=np.array\n            ([rotation_angle_zero]))\n        dset.attrs['target'] = np.string_('/entry/sample/rotation_angle')\n        nxdata['rotation_angle'] = dset\n        scanType = 'cscan a3 {} da3 {} np {} mn 10000'.format(np.mean(a3),\n            np.mean(np.diff(a3)), len(a3))\n        scanvars += 'a3'\n    else:\n        dset = sam.create_dataset('rotation_angle', (1,), dtype='float32',\n            data=a3[0])\n        dset_zero = sam.create_dataset('rotation_angle_zero', data=np.array\n            ([rotation_angle_zero]))\n    dset.attrs['units'] = np.string_('degrees')\n    dset_zero.attrs['units'] = np.string_('degrees')\n    if isVaried(a4):\n        dset = sam.create_dataset('polar_angle', data=a4)\n        dset.attrs['target'] = np.string_('/entry/CAMEA/analyzer/polar_angle')\n        nxdata['polar_angle'] = dset\n        scanType = 'cscan a4 {} da4 {} np {} mn 10000'.format(np.mean(a4),\n            np.mean(np.diff(a4)), len(a4))\n        scanvars += 'a4'\n    else:\n        dset = entry['CAMEA/analyzer'].create_dataset('polar_angle', (1,),\n            dtype='float32', data=a4[0])\n    dset_zero = entry['CAMEA/analyzer'].create_dataset('polar_angle_offset',\n        (1,), dtype='float32', data=polar_angle_offset)\n    dset.attrs['units'] = np.string_('degrees')\n    dset_zero.attrs['units'] = np.string_('degrees')\n    mono = entry['CAMEA/monochromator']\n    theta, tth = makeTheta(ei)\n    if isVaried(ei):\n        dset = mono.create_dataset('energy', data=ei)\n        dset.attrs['units'] = np.string_('meV')\n        dset.attrs['target'] = np.string_('/entry/CAMEA/monochromator/energy')\n        nxdata['incident_energy'] = dset\n        mono.create_dataset('rotation_angle', data=theta)\n        mono.create_dataset('polar_angle', data=tth)\n        scanType = 'cscan ei {} dei {} np {} mn 10000'.format(np.mean(ei),\n            np.mean(np.diff(ei)), len(ei))\n        scanvars += 'ei'\n    else:\n        dset = mono.create_dataset('energy', (1,), dtype='float32')\n        dset[0] = ei[0]\n        dset = mono.create_dataset('rotation_angle', (1,), dtype='float32')\n        dset[0] = theta[0]\n        dset = mono.create_dataset('polar_angle', (1,), dtype='float32')\n        dset[0] = tth[0]\n    dset = entry['CAMEA/monochromator/rotation_angle']\n    dset.attrs['units'] = np.string_('degrees')\n    makeMonitor(entry, Numpoints)\n    entry.create_dataset('scancommand', data=[np.string_(scanType)])\n    entry.create_dataset('scanvars', data=scanvars)\ndef makeMonitor(entry, Numpoints):\n    control = entry.create_group('control')\n    control.attrs['NX_class'] = np.string_('NXmonitor')\n    mons = [10000] * Numpoints\n    control.create_dataset('data', data=mons, dtype='int32')\n    dset = control.create_dataset('preset', (1,), dtype='int32')\n    dset[0] = 10000\n    dset = control.create_dataset('mode', (1,), dtype='S70')\n    dset[0] = b'monitor'\n    time = [36.87] * Numpoints\n    control.create_dataset('time', data=time, dtype='float32')\n    time = [36.87 * 1000000000.0] * Numpoints\n    control.create_dataset('absolut_time', data=time, dtype='float32')\n    pb = entry.create_group('proton_beam')\n    pb.attrs['NX_class'] = np.string_('NXmonitor')\n    vals = [0] * Numpoints\n    dset = pb.create_dataset('data', data=vals, dtype='int32')\nwith hdf.File(fileName, 'w') as f:\n    f.attrs['file_name'] = np.string_(fileName)\n    f.attrs['file_time'] = np.string_(b'2018-03-22T16:44:02+01:00')\n    entry = f.create_group('entry')\n    entry.attrs['NX_class'] = np.string_('NXentry')\n    addMetaData(entry, np.string_(title))\n    inst = entry.create_group(b'CAMEA')\n    inst.attrs['NX_class'] = np.string_('NXinstrument')\n    if not CalibrationFile is None:\n        if not isinstance(CalibrationFile, list):\n            CalibrationFile = [CalibrationFile]\n        for i in range(len(CalibrationFile)):\n            calibrationData = np.genfromtxt(CalibrationFile[i], skip_header\n                =3, delimiter=',')\n            binning = CalibrationFile[i].split('/')[-1].split('_')[-1].split(\n                '.')[0]\n            pixelCalib = inst.create_group('calib{}'.format(binning))\n            pixelCalib.create_dataset('final_energy'.format(binning), data=\n                calibrationData[:, (4)], dtype='float32')\n            pixelCalib.create_dataset('background'.format(binning), data=\n                calibrationData[:, (6)], dtype='float32')\n            pixelCalib.create_dataset('width'.format(binning), data=\n                calibrationData[:, (5)], dtype='float32')\n            pixelCalib.create_dataset('amplitude'.format(binning), data=\n                calibrationData[:, (3)], dtype='float32')\n            pixelCalib.create_dataset('boundaries'.format(binning), data=\n                calibrationData[:, 7:9], dtype='int')\n            pixelCalib.create_dataset('a4offset'.format(binning), data=\n                calibrationData[:, (9)], dtype='float32')\n    addMono(inst)\n    addAna(inst)\n    addDetector(inst)\n    addSample(entry, np.string_(sample), cell, ub, plane_vector_1,\n        plane_vector_2, plane_normal)\n    import os\n    Numpoints = sum([os.path.isdir(fname + '/' + i) for i in os.listdir(fname)]\n        )\n    data, a3, a4, ei = readScanData(fname, Numpoints, factor=factor, pixels\n        =pixels, detectors=detectors)\n    storeScanData(entry, data, a3, a4, ei, rotation_angle_zero=\n        rotation_angle_zero, polar_angle_offset=polar_angle_offset)\n"
}