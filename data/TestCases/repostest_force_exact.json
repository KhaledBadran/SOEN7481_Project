{
    "functionName": "test_force_exact",
    "className": null,
    "fileName": "/bsmurphy_&_PyKrige/tests_&_test_core.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "data = np.array([[1.0, 1.0, 2.0], [2.0, 2.0, 1.5], [3.0, 3.0, 1.0]])\nok = OrdinaryKriging(data[:, (0)], data[:, (1)], data[:, (2)],\n    variogram_model='linear', variogram_parameters=[1.0, 1.0])\nz, ss = ok.execute('grid', [1.0, 2.0, 3.0], [1.0, 2.0, 3.0], backend=\n    'vectorized')\nassert z[0, 0] == approx(2.0)\nassert ss[0, 0] == approx(0.0)\nassert z[1, 1] == approx(1.5)\nassert ss[1, 1] == approx(0.0)\nassert z[2, 2] == approx(1.0)\nassert ss[2, 2] == approx(0.0)\nassert ss[0, 2] != approx(0.0)\nassert ss[2, 0] != approx(0.0)\nz, ss = ok.execute('points', [1.0, 2.0, 3.0, 3.0], [2.0, 1.0, 1.0, 3.0],\n    backend='vectorized')\nassert ss[0] != approx(0.0)\nassert ss[1] != approx(0.0)\nassert ss[2] != approx(0.0)\nassert z[3] == approx(1.0)\nassert ss[3] == approx(0.0)\nz, ss = ok.execute('grid', np.arange(0.0, 4.0, 0.1), np.arange(0.0, 4.0, \n    0.1), backend='vectorized')\nassert z[10, 10] == approx(2.0)\nassert ss[10, 10] == approx(0.0)\nassert z[20, 20] == approx(1.5)\nassert ss[20, 20] == approx(0.0)\nassert z[30, 30] == approx(1.0)\nassert ss[30, 30] == approx(0.0)\nassert ss[0, 0] != approx(0.0)\nassert ss[15, 15] != approx(0.0)\nassert ss[10, 0] != approx(0.0)\nassert ss[0, 10] != approx(0.0)\nassert ss[20, 10] != approx(0.0)\nassert ss[10, 20] != approx(0.0)\nassert ss[30, 20] != approx(0.0)\nassert ss[20, 30] != approx(0.0)\nz, ss = ok.execute('grid', np.arange(0.0, 3.1, 0.1), np.arange(2.1, 3.1, \n    0.1), backend='vectorized')\nassert np.any(ss <= 1e-15)\nassert not np.any(ss[:9, :30] <= 1e-15)\nassert not np.allclose(z[:9, :30], 0.0)\nz, ss = ok.execute('grid', np.arange(0.0, 1.9, 0.1), np.arange(2.1, 3.1, \n    0.1), backend='vectorized')\nassert not np.any(ss <= 1e-15)\nz, ss = ok.execute('masked', np.arange(2.5, 3.5, 0.1), np.arange(2.5, 3.5, \n    0.25), backend='vectorized', mask=np.asarray(np.meshgrid(np.arange(2.5,\n    3.5, 0.1), np.arange(2.5, 3.5, 0.25))[0] == 0.0))\nassert ss[2, 5] <= 1e-15\nassert not np.allclose(ss, 0.0)\nz, ss = ok.execute('grid', [1.0, 2.0, 3.0], [1.0, 2.0, 3.0], backend='loop')\nassert z[0, 0] == approx(2.0)\nassert ss[0, 0] == approx(0.0)\nassert z[1, 1] == approx(1.5)\nassert ss[1, 1] == approx(0.0)\nassert z[2, 2] == approx(1.0)\nassert ss[2, 2] == approx(0.0)\nassert ss[0, 2] != approx(0.0)\nassert ss[2, 0] != approx(0.0)\nz, ss = ok.execute('points', [1.0, 2.0, 3.0, 3.0], [2.0, 1.0, 1.0, 3.0],\n    backend='loop')\nassert ss[0] != approx(0.0)\nassert ss[1] != approx(0.0)\nassert ss[2] != approx(0.0)\nassert z[3] == approx(1.0)\nassert ss[3] == approx(0.0)\nz, ss = ok.execute('grid', np.arange(0.0, 4.0, 0.1), np.arange(0.0, 4.0, \n    0.1), backend='loop')\nassert z[10, 10] == approx(2.0)\nassert ss[10, 10] == approx(0.0)\nassert z[20, 20] == approx(1.5)\nassert ss[20, 20] == approx(0.0)\nassert z[30, 30] == approx(1.0)\nassert ss[30, 30] == approx(0.0)\nassert ss[0, 0] != approx(0.0)\nassert ss[15, 15] != approx(0.0)\nassert ss[10, 0] != approx(0.0)\nassert ss[0, 10] != approx(0.0)\nassert ss[20, 10] != approx(0.0)\nassert ss[10, 20] != approx(0.0)\nassert ss[30, 20] != approx(0.0)\nassert ss[20, 30] != approx(0.0)\nz, ss = ok.execute('grid', np.arange(0.0, 3.1, 0.1), np.arange(2.1, 3.1, \n    0.1), backend='loop')\nassert np.any(ss <= 1e-15)\nassert not np.any(ss[:9, :30] <= 1e-15)\nassert not np.allclose(z[:9, :30], 0.0)\nz, ss = ok.execute('grid', np.arange(0.0, 1.9, 0.1), np.arange(2.1, 3.1, \n    0.1), backend='loop')\nassert not np.any(ss <= 1e-15)\nz, ss = ok.execute('masked', np.arange(2.5, 3.5, 0.1), np.arange(2.5, 3.5, \n    0.25), backend='loop', mask=np.asarray(np.meshgrid(np.arange(2.5, 3.5, \n    0.1), np.arange(2.5, 3.5, 0.25))[0] == 0.0))\nassert ss[2, 5] <= 1e-15\nassert not np.allclose(ss, 0.0)\nuk = UniversalKriging(data[:, (0)], data[:, (1)], data[:, (2)])\nz, ss = uk.execute('grid', [1.0, 2.0, 3.0], [1.0, 2.0, 3.0], backend=\n    'vectorized')\nassert z[0, 0] == approx(2.0)\nassert ss[0, 0] == approx(0.0)\nassert z[1, 1] == approx(1.5)\nassert ss[1, 1] == approx(0.0)\nassert z[2, 2] == approx(1.0)\nassert ss[2, 2] == approx(0.0)\nassert ss[0, 2] != approx(0.0)\nassert ss[2, 0] != approx(0.0)\nz, ss = uk.execute('points', [1.0, 2.0, 3.0, 3.0], [2.0, 1.0, 1.0, 3.0],\n    backend='vectorized')\nassert ss[0] != approx(0.0)\nassert ss[1] != approx(0.0)\nassert ss[2] != approx(0.0)\nassert z[3] == approx(1.0)\nassert ss[3] == approx(0.0)\nz, ss = uk.execute('grid', np.arange(0.0, 4.0, 0.1), np.arange(0.0, 4.0, \n    0.1), backend='vectorized')\nassert z[10, 10] == approx(2.0)\nassert ss[10, 10] == approx(0.0)\nassert z[20, 20] == approx(1.5)\nassert ss[20, 20] == approx(0.0)\nassert z[30, 30] == approx(1.0)\nassert ss[30, 30] == approx(0.0)\nassert ss[0, 0] != approx(0.0)\nassert ss[15, 15] != approx(0.0)\nassert ss[10, 0] != approx(0.0)\nassert ss[0, 10] != approx(0.0)\nassert ss[20, 10] != approx(0.0)\nassert ss[10, 20] != approx(0.0)\nassert ss[30, 20] != approx(0.0)\nassert ss[20, 30] != approx(0.0)\nz, ss = uk.execute('grid', np.arange(0.0, 3.1, 0.1), np.arange(2.1, 3.1, \n    0.1), backend='vectorized')\nassert np.any(ss <= 1e-15)\nassert not np.any(ss[:9, :30] <= 1e-15)\nassert not np.allclose(z[:9, :30], 0.0)\nz, ss = uk.execute('grid', np.arange(0.0, 1.9, 0.1), np.arange(2.1, 3.1, \n    0.1), backend='vectorized')\nassert not np.any(ss <= 1e-15)\nz, ss = uk.execute('masked', np.arange(2.5, 3.5, 0.1), np.arange(2.5, 3.5, \n    0.25), backend='vectorized', mask=np.asarray(np.meshgrid(np.arange(2.5,\n    3.5, 0.1), np.arange(2.5, 3.5, 0.25))[0] == 0.0))\nassert ss[2, 5] <= 1e-15\nassert not np.allclose(ss, 0.0)\nz, ss = uk.execute('grid', [1.0, 2.0, 3.0], [1.0, 2.0, 3.0], backend='loop')\nassert z[0, 0] == approx(2.0)\nassert ss[0, 0] == approx(0.0)\nassert z[1, 1] == approx(1.5)\nassert ss[1, 1] == approx(0.0)\nassert z[2, 2] == approx(1.0)\nassert ss[2, 2] == approx(0.0)\nassert ss[0, 2] != approx(0.0)\nassert ss[2, 0] != approx(0.0)\nz, ss = uk.execute('points', [1.0, 2.0, 3.0, 3.0], [2.0, 1.0, 1.0, 3.0],\n    backend='loop')\nassert ss[0] != approx(0.0)\nassert ss[1] != approx(0.0)\nassert ss[2] != approx(0.0)\nassert z[3] == approx(1.0)\nassert ss[3] == approx(0.0)\nz, ss = uk.execute('grid', np.arange(0.0, 4.0, 0.1), np.arange(0.0, 4.0, \n    0.1), backend='loop')\nassert z[10, 10] == approx(2.0)\nassert ss[10, 10] == approx(0.0)\nassert z[20, 20] == approx(1.5)\nassert ss[20, 20] == approx(0.0)\nassert z[30, 30] == approx(1.0)\nassert ss[30, 30] == approx(0.0)\nassert ss[0, 0] != approx(0.0)\nassert ss[15, 15] != approx(0.0)\nassert ss[10, 0] != approx(0.0)\nassert ss[0, 10] != approx(0.0)\nassert ss[20, 10] != approx(0.0)\nassert ss[10, 20] != approx(0.0)\nassert ss[30, 20] != approx(0.0)\nassert ss[20, 30] != approx(0.0)\nz, ss = uk.execute('grid', np.arange(0.0, 3.1, 0.1), np.arange(2.1, 3.1, \n    0.1), backend='loop')\nassert np.any(ss <= 1e-15)\nassert not np.any(ss[:9, :30] <= 1e-15)\nassert not np.allclose(z[:9, :30], 0.0)\nz, ss = uk.execute('grid', np.arange(0.0, 1.9, 0.1), np.arange(2.1, 3.1, \n    0.1), backend='loop')\nassert not np.any(ss <= 1e-15)\nz, ss = uk.execute('masked', np.arange(2.5, 3.5, 0.1), np.arange(2.5, 3.5, \n    0.25), backend='loop', mask=np.asarray(np.meshgrid(np.arange(2.5, 3.5, \n    0.1), np.arange(2.5, 3.5, 0.25))[0] == 0.0))\nassert ss[2, 5] <= 1e-15\nassert not np.allclose(ss, 0.0)\nz, ss = core._krige(np.vstack((data[:, (0)], data[:, (1)])).T, data[:, (2)],\n    np.array([1.0, 1.0]), variogram_models.linear_variogram_model, [1.0, \n    1.0], 'euclidean')\nassert z == approx(2.0)\nassert ss == approx(0.0)\nz, ss = core._krige(np.vstack((data[:, (0)], data[:, (1)])).T, data[:, (2)],\n    np.array([1.0, 2.0]), variogram_models.linear_variogram_model, [1.0, \n    1.0], 'euclidean')\nassert ss != approx(0.0)\ndata = np.zeros((50, 3))\nx, y = np.meshgrid(np.arange(0.0, 10.0, 1.0), np.arange(0.0, 10.0, 2.0))\ndata[:, (0)] = np.ravel(x)\ndata[:, (1)] = np.ravel(y)\ndata[:, (2)] = np.ravel(x) * np.ravel(y)\nok = OrdinaryKriging(data[:, (0)], data[:, (1)], data[:, (2)],\n    variogram_model='linear', variogram_parameters=[100.0, 1.0])\nz, ss = ok.execute('grid', np.arange(0.0, 10.0, 1.0), np.arange(0.0, 10.0, \n    2.0), backend='vectorized')\nassert_allclose(np.ravel(z), data[:, (2)], **allclose_pars)\nassert_allclose(ss, 0.0, **allclose_pars)\nz, ss = ok.execute('grid', np.arange(0.5, 10.0, 1.0), np.arange(0.5, 10.0, \n    2.0), backend='vectorized')\nassert not np.allclose(np.ravel(z), data[:, (2)])\nassert not np.allclose(ss, 0.0)\nz, ss = ok.execute('grid', np.arange(0.0, 10.0, 1.0), np.arange(0.0, 10.0, \n    2.0), backend='loop')\nassert_allclose(np.ravel(z), data[:, (2)], **allclose_pars)\nassert_allclose(ss, 0.0, **allclose_pars)\nz, ss = ok.execute('grid', np.arange(0.5, 10.0, 1.0), np.arange(0.5, 10.0, \n    2.0), backend='loop')\nassert not np.allclose(np.ravel(z), data[:, (2)])\nassert not np.allclose(ss, 0.0)\nuk = UniversalKriging(data[:, (0)], data[:, (1)], data[:, (2)],\n    variogram_model='linear', variogram_parameters=[100.0, 1.0])\nz, ss = uk.execute('grid', np.arange(0.0, 10.0, 1.0), np.arange(0.0, 10.0, \n    2.0), backend='vectorized')\nassert_allclose(np.ravel(z), data[:, (2)], **allclose_pars)\nassert_allclose(ss, 0.0, **allclose_pars)\nz, ss = uk.execute('grid', np.arange(0.5, 10.0, 1.0), np.arange(0.5, 10.0, \n    2.0), backend='vectorized')\nassert not np.allclose(np.ravel(z), data[:, (2)])\nassert not np.allclose(ss, 0.0)\nz, ss = uk.execute('grid', np.arange(0.0, 10.0, 1.0), np.arange(0.0, 10.0, \n    2.0), backend='loop')\nassert_allclose(np.ravel(z), data[:, (2)], **allclose_pars)\nassert_allclose(ss, 0.0, **allclose_pars)\nz, ss = uk.execute('grid', np.arange(0.5, 10.0, 1.0), np.arange(0.5, 10.0, \n    2.0), backend='loop')\nassert not np.allclose(np.ravel(z), data[:, (2)])\nassert not np.allclose(ss, 0.0)\n"
}