{
    "functionName": "test_parse_settings",
    "className": "TestKmipServerConfig",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_services_&_server_&_test_config.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that the right methods are called and the right errors generated\n        when parsing the configuration settings.\n        \"\"\"\nc = config.KmipServerConfig()\nc._logger = mock.MagicMock()\nc._set_auth_suite = mock.MagicMock()\nc._set_ca_path = mock.MagicMock()\nc._set_certificate_path = mock.MagicMock()\nc._set_hostname = mock.MagicMock()\nc._set_key_path = mock.MagicMock()\nc._set_port = mock.MagicMock()\nc._set_policy_path = mock.MagicMock()\nc._set_enable_tls_client_auth = mock.MagicMock()\nc._set_tls_cipher_suites = mock.MagicMock()\nc._set_logging_level = mock.MagicMock()\nc._set_database_path = mock.MagicMock()\nparser = configparser.ConfigParser()\nparser.add_section('server')\nparser.set('server', 'hostname', '127.0.0.1')\nparser.set('server', 'port', '5696')\nparser.set('server', 'certificate_path', '/test/path/server.crt')\nparser.set('server', 'key_path', '/test/path/server.key')\nparser.set('server', 'ca_path', '/test/path/ca.crt')\nparser.set('server', 'auth_suite', 'Basic')\nparser.set('server', 'policy_path', '/test/path/policies')\nparser.set('server', 'enable_tls_client_auth', 'False')\nparser.set('server', 'tls_cipher_suites',\n    \"\"\"\n    TLS_RSA_WITH_AES_256_CBC_SHA256\"\"\")\nparser.set('server', 'logging_level', 'ERROR')\nparser.set('server', 'database_path', '/var/pykmip/pykmip.db')\nc._parse_settings(parser)\nc._set_hostname.assert_called_once_with('127.0.0.1')\nc._set_port.assert_called_once_with(5696)\nc._set_certificate_path.assert_called_once_with('/test/path/server.crt')\nc._set_key_path.assert_called_once_with('/test/path/server.key')\nc._set_ca_path.assert_called_once_with('/test/path/ca.crt')\nc._set_auth_suite.assert_called_once_with('Basic')\nc._set_policy_path.assert_called_once_with('/test/path/policies')\nc._set_enable_tls_client_auth.assert_called_once_with(False)\nc._set_tls_cipher_suites.assert_called_once_with(\n    \"\"\"\n    TLS_RSA_WITH_AES_256_CBC_SHA256\"\"\")\nc._set_logging_level.assert_called_once_with('ERROR')\nc._set_database_path.assert_called_once_with('/var/pykmip/pykmip.db')\nparser = configparser.ConfigParser()\nargs = parser,\nregex = \"The server configuration file does not have a 'server' section.\"\nself.assertRaisesRegex(exceptions.ConfigurationError, regex, c.\n    _parse_settings, *args)\nparser = configparser.ConfigParser()\nparser.add_section('server')\nparser.set('server', 'invalid', 'invalid')\nargs = parser,\nregex = (\n    \"Setting 'invalid' is not a supported setting. Please remove it from the configuration file.\"\n    )\nself.assertRaisesRegex(exceptions.ConfigurationError, regex, c.\n    _parse_settings, *args)\nparser = configparser.ConfigParser()\nparser.add_section('server')\nargs = parser,\nregex = \"Setting 'hostname' is missing from the configuration file.\"\nself.assertRaisesRegex(exceptions.ConfigurationError, regex, c.\n    _parse_settings, *args)\nparser = configparser.ConfigParser()\nparser.add_section('server')\nargs = parser,\nregex = \"Setting 'hostname' is missing from the configuration file.\"\nself.assertRaisesRegex(exceptions.ConfigurationError, regex, c.\n    _parse_settings, *args)\n"
}