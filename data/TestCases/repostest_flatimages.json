{
    "functionName": "test_flatimages",
    "className": null,
    "fileName": "/pypeit_&_PypeIt/pypeit_&_tests_&_test_flatfield.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "tmp = np.ones((1000, 100)) * 10.0\nx = np.random.rand(500)\nspat_bspline1 = bspline.bspline(x, bkspace=0.01 * (np.max(x) - np.min(x)))\nspat_bspline2 = bspline.bspline(x, bkspace=0.01 * (np.max(x) - np.min(x)))\ninstant_dict = dict(pixelflat_raw=tmp, pixelflat_norm=np.ones_like(tmp),\n    pixelflat_model=None, pixelflat_spat_bsplines=np.asarray([spat_bspline1,\n    spat_bspline2]), pixelflat_spec_illum=None, illumflat_raw=tmp,\n    illumflat_spat_bsplines=np.asarray([spat_bspline1, spat_bspline2]),\n    spat_id=np.asarray([100, 200]), PYP_SPEC='specname')\nflatImages = flatfield.FlatImages(**instant_dict)\nassert flatImages.pixelflat_model is None\nassert flatImages.pixelflat_spec_illum is None\nassert flatImages.pixelflat_spat_bsplines is not None\noutfile = data_path('tst_flatimages.fits')\nflatImages.to_master_file(outfile)\n_flatImages = flatfield.FlatImages.from_file(outfile)\nfor key in instant_dict.keys():\n    if key == 'pixelflat_spat_bsplines':\n        np.array_equal(flatImages[key][0].breakpoints, _flatImages[key][0].\n            breakpoints)\n        continue\n    if key == 'illumflat_spat_bsplines':\n        np.array_equal(flatImages[key][0].breakpoints, _flatImages[key][0].\n            breakpoints)\n        continue\n    if isinstance(instant_dict[key], np.ndarray):\n        assert np.array_equal(flatImages[key], _flatImages[key])\n    else:\n        assert flatImages[key] == _flatImages[key]\nos.remove(outfile)\n"
}