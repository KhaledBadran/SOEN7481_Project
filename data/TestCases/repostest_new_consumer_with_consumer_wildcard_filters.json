{
    "functionName": "test_new_consumer_with_consumer_wildcard_filters",
    "className": null,
    "fileName": "/Drakkar-Software_&_OctoBot-Channels/tests_&_test_channel.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "consumer = await get_chan(EMPTY_TEST_CHANNEL).new_consumer(empty_test_callback,\n    {'test_key': 1, 'test_key_2': 'abc', 'test_key_3': CHANNEL_WILDCARD})\nassert get_chan(EMPTY_TEST_CHANNEL).get_consumers() == [consumer]\nassert get_chan(EMPTY_TEST_CHANNEL).get_consumer_from_filters({}) == [consumer]\nassert get_chan(EMPTY_TEST_CHANNEL).get_consumer_from_filters({'test_key': \n    1, 'test_key_2': 'abc'}) == [consumer]\nassert get_chan(EMPTY_TEST_CHANNEL).get_consumer_from_filters({'test_key': \n    1, 'test_key_2': 'abc', 'test_key_3': 45}) == [consumer]\nassert get_chan(EMPTY_TEST_CHANNEL).get_consumer_from_filters({'test_key': \n    1, 'test_key_2': 'abc', 'test_key_3': CHANNEL_WILDCARD}) == [consumer]\nassert get_chan(EMPTY_TEST_CHANNEL).get_consumer_from_filters({'test_key': \n    4, 'test_key_2': 'bc'}) == []\nassert get_chan(EMPTY_TEST_CHANNEL).get_consumer_from_filters({'test_key': \n    1, 'test_key_2': CHANNEL_WILDCARD}) == [consumer]\nassert get_chan(EMPTY_TEST_CHANNEL).get_consumer_from_filters({'test_key': 1}\n    ) == [consumer]\nassert get_chan(EMPTY_TEST_CHANNEL).get_consumer_from_filters({'test_key_2':\n    CHANNEL_WILDCARD}) == [consumer]\nassert get_chan(EMPTY_TEST_CHANNEL).get_consumer_from_filters({'test_key_3':\n    CHANNEL_WILDCARD}) == [consumer]\nassert get_chan(EMPTY_TEST_CHANNEL).get_consumer_from_filters({'test_key_3':\n    'e'}) == [consumer]\nassert get_chan(EMPTY_TEST_CHANNEL).get_consumer_from_filters({'test_key': \n    3, 'test_key_2': CHANNEL_WILDCARD}) == []\nassert get_chan(EMPTY_TEST_CHANNEL).get_consumer_from_filters({'test_key':\n    CHANNEL_WILDCARD, 'test_key_2': 'abc'}) == [consumer]\nassert get_chan(EMPTY_TEST_CHANNEL).get_consumer_from_filters({'test_key':\n    CHANNEL_WILDCARD, 'test_key_2': 'a'}) == []\nassert get_chan(EMPTY_TEST_CHANNEL).get_consumer_from_filters({'test_key':\n    CHANNEL_WILDCARD, 'test_key_2': 'a', 'test_key_3': CHANNEL_WILDCARD}) == []\nassert get_chan(EMPTY_TEST_CHANNEL).get_consumer_from_filters({'test_key':\n    CHANNEL_WILDCARD, 'test_key_2': CHANNEL_WILDCARD}) == [consumer]\npytest.mark.asyncio"
}