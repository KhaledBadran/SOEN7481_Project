{
    "functionName": "test_REMBOStrategy",
    "className": "REMBOStrategyTest",
    "fileName": "/facebook_&_Ax/ax_&_modelbridge_&_tests_&_test_rembo_strategy.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "hartmann_search_space = SearchSpace(parameters=[RangeParameter(name=f'x{i}',\n    parameter_type=ParameterType.FLOAT, lower=0.0, upper=1.0) for i in\n    range(20)])\nexp = SimpleExperiment(name='test', search_space=hartmann_search_space,\n    evaluation_function=hartmann_evaluation_function, objective_name=\n    'hartmann6', minimize=True, outcome_constraints=[OutcomeConstraint(\n    metric=L2NormMetric(name='l2norm', param_names=[f'x{i}' for i in range(\n    6)], noise_sd=0.2), op=ComparisonOp.LEQ, bound=1.25, relative=False)])\ngs = REMBOStrategy(D=20, d=6, k=4, init_per_proj=4)\nexp.new_batch_trial(generator_run=gs.gen(experiment=exp, n=2))\nself.assertEqual(len(gs.arms_by_proj[0]), 2)\nself.assertEqual(len(gs.arms_by_proj[1]), 0)\nexp.new_batch_trial(generator_run=gs.gen(experiment=exp, n=2))\nself.assertEqual(len(gs.arms_by_proj[0]), 2)\nself.assertEqual(len(gs.arms_by_proj[1]), 2)\nfor _ in range(4):\n    exp.new_batch_trial(generator_run=gs.gen(experiment=exp, n=2))\n    mock_fit_gpytorch_model.assert_not_called()\nself.assertEqual(len(gs.arms_by_proj[0]), 4)\nself.assertEqual(len(gs.arms_by_proj[1]), 4)\nself.assertEqual(len(gs.arms_by_proj[2]), 2)\nself.assertEqual(len(gs.arms_by_proj[3]), 2)\nfor i in range(4):\n    if i < 1:\n        self.assertLess(len(gs.arms_by_proj[2]), 4)\n    if i < 2:\n        self.assertLess(len(gs.arms_by_proj[3]), 4)\n    exp.new_batch_trial(generator_run=gs.gen(experiment=exp, n=2))\n    if i < 2:\n        mock_fit_gpytorch_model.assert_not_called()\n    else:\n        self.assertFalse(any(len(x) < 4 for x in gs.arms_by_proj.values()))\n        mock_fit_gpytorch_model.assert_called()\nself.assertTrue(len(gs.model_transitions) > 0)\ngs2 = gs.clone_reset()\nself.assertEqual(gs2.D, 20)\nself.assertEqual(gs2.d, 6)\npatch('ax.models.torch.botorch_defaults.optimize_acqf', autospec=True,\n    return_value=(torch.randn((2, 6), dtype=torch.double), torch.randn((2, \n    6), dtype=torch.double)))patch('ax.models.torch.botorch_defaults.fit_gpytorch_model', autospec=True)"
}