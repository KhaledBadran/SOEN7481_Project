{
    "functionName": "test_find_endpoint_by_url",
    "className": null,
    "fileName": "/PlaidWeb_&_Authl/tests_&_handlers_&_test_indieauth.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "from authl.handlers.indieauth import find_endpoint\nrequests_mock.get('http://link.absolute/', text='Nothing to see', headers={\n    'Link': '<https://endpoint/>; rel=\"authorization_endpoint\"'})\nassert find_endpoint('http://link.absolute/') == 'https://endpoint/'\nrequests_mock.get('http://link.relative/', text='Nothing to see', headers={\n    'Link': '<invalid>; rel=\"authorization_endpoint\"'})\nassert find_endpoint('http://link.relative/') == 'invalid'\nrequests_mock.get('http://content.absolute/', text=\n    '<link rel=\"authorization_endpoint\" href=\"https://endpoint/\">')\nassert find_endpoint('http://content.absolute/') == 'https://endpoint/'\nrequests_mock.get('http://content.relative/', text=\n    '<link rel=\"authorization_endpoint\" href=\"endpoint\" >')\nassert find_endpoint('http://content.relative/'\n    ) == 'http://content.relative/endpoint'\nrequests_mock.get('http://both/', text=\n    '<link rel=\"authorization_endpoint\" href=\"http://content/endpoint\">',\n    headers={'Link':\n    '<https://header/endpoint/>; rel=\"authorization_endpoint\"'})\nassert find_endpoint('http://both/') == 'https://header/endpoint/'\nrequests_mock.get('http://nothing/', text='nothing')\nassert find_endpoint('http://nothing/') is None\nassert find_endpoint('https://undefined.example') is None\nrequests_mock.reset()\nassert find_endpoint('http://link.absolute/') == 'https://endpoint/'\nassert find_endpoint('http://link.relative/') == 'invalid'\nassert find_endpoint('http://content.absolute/') == 'https://endpoint/'\nassert find_endpoint('http://content.relative/'\n    ) == 'http://content.relative/endpoint'\nassert not requests_mock.called\nassert find_endpoint('http://nothing/') is None\nassert requests_mock.called\n"
}