{
    "functionName": "test_double_extended_arg",
    "className": "TestInsertCode",
    "fileName": "/fabioz_&_PyDev.Debugger/tests_python_&_test_bytecode_modification.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "self.original_stdout = sys.stdout\nsys.stdout = StringIO()\ntry:\n\n    def foo():\n        a = 1\n        b = 2\n        if b > 0:\n            d = a + b\n            d += 1\n            b = b - 1 if a > 0 else b + 1\n            b = b - 1 if a > 0 else b + 1\n            b = b - 1 if a > 0 else b + 1\n            b = b - 1 if a > 0 else b + 1\n            b = b - 1 if a > 0 else b + 1\n            b = b - 1 if a > 0 else b + 1\n            b = b - 1 if a > 0 else b + 1\n            b = b - 1 if a > 0 else b + 1\n            b = b - 1 if a > 0 else b + 1\n            b = b - 1 if a > 0 else b + 1\n            b = b - 1 if a > 0 else b + 1\n            b = b - 1 if a > 0 else b + 1\n            b = b - 1 if a > 0 else b + 1\n            b = b - 1 if a > 0 else b + 1\n            b = b - 1 if a > 0 else b + 1\n            b = b - 1 if a > 0 else b + 1\n            b = b - 1 if a > 0 else b + 1\n            b = b - 1 if a > 0 else b + 1\n            b = b - 1 if a > 0 else b + 1\n        a = a + 1\n        return a\n\n    def foo_check():\n        a = 1\n        b = 2\n        tracing()\n        if b > 0:\n            d = a + b\n            d += 1\n            b = b - 1 if a > 0 else b + 1\n            b = b - 1 if a > 0 else b + 1\n            b = b - 1 if a > 0 else b + 1\n            b = b - 1 if a > 0 else b + 1\n            b = b - 1 if a > 0 else b + 1\n            b = b - 1 if a > 0 else b + 1\n            b = b - 1 if a > 0 else b + 1\n            b = b - 1 if a > 0 else b + 1\n            b = b - 1 if a > 0 else b + 1\n            b = b - 1 if a > 0 else b + 1\n            b = b - 1 if a > 0 else b + 1\n            b = b - 1 if a > 0 else b + 1\n            b = b - 1 if a > 0 else b + 1\n            b = b - 1 if a > 0 else b + 1\n            b = b - 1 if a > 0 else b + 1\n            b = b - 1 if a > 0 else b + 1\n            b = b - 1 if a > 0 else b + 1\n            b = b - 1 if a > 0 else b + 1\n            b = b - 1 if a > 0 else b + 1\n        a = a + 1\n        return a\n\n    def foo_check_2():\n        a = 1\n        b = 2\n        if b > 0:\n            d = a + b\n            d += 1\n            b = b - 1 if a > 0 else b + 1\n            b = b - 1 if a > 0 else b + 1\n            b = b - 1 if a > 0 else b + 1\n            b = b - 1 if a > 0 else b + 1\n            b = b - 1 if a > 0 else b + 1\n            b = b - 1 if a > 0 else b + 1\n            b = b - 1 if a > 0 else b + 1\n            b = b - 1 if a > 0 else b + 1\n            b = b - 1 if a > 0 else b + 1\n            b = b - 1 if a > 0 else b + 1\n            b = b - 1 if a > 0 else b + 1\n            b = b - 1 if a > 0 else b + 1\n            b = b - 1 if a > 0 else b + 1\n            b = b - 1 if a > 0 else b + 1\n            b = b - 1 if a > 0 else b + 1\n            not tracing()\n            b = b - 1 if a > 0 else b + 1\n            b = b - 1 if a > 0 else b + 1\n            b = b - 1 if a > 0 else b + 1\n            b = b - 1 if a > 0 else b + 1\n        a = a + 1\n        return a\n    self.check_insert_to_line_with_exec(foo, tracing, foo.__code__.\n        co_firstlineno + 2)\n    sys.stdout = self.original_stdout\n    self.check_insert_to_line_by_symbols(foo, call_tracing, foo.__code__.\n        co_firstlineno + 3, foo_check.__code__)\n    self.check_insert_to_line_by_symbols(foo, call_tracing, foo.__code__.\n        co_firstlineno + 21, foo_check_2.__code__)\nfinally:\n    sys.stdout = self.original_stdout\n"
}