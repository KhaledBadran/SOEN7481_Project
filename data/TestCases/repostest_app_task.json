{
    "functionName": "test_app_task",
    "className": "TestUpdateRecords",
    "fileName": "/adsabs_&_ADSPipelineUtils/adsputils_&_tests_&_test_app.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "class NewCelery(ADSCelery):\n\n    def attempt_recovery(self, task, args=None, kwargs=None, einfo=None,\n        retval=None):\n        if 'Failing!' in str(retval):\n            first_half, second_half = args[0][0:int(len(args[0]) / 2)], args[0\n                ][int(len(args[0]) / 2):]\n            args = list(args)\n            args[0] = first_half\n            task.apply(args=args, kwargs=kwargs)\n            args[0] = second_half\n            task.apply(args=args, kwargs=kwargs)\napp = NewCelery('test', local_config={'FOO': ['bar', {}]})\nprocessed = []\n@app.task\ndef test(batch):\n    if len(batch) == 10:\n        processed.append('Failure')\n        raise Exception('Failing!')\n    processed.append(batch)\nself.assertRaises(Exception, lambda : test.apply(args=(list(range(10)),)))\nself.assertEqual(processed, ['Failure', 'Failure', [0, 1, 2, 3, 4], [5, 6, \n    7, 8, 9]])\nprocessed = []\ntest.max_retries = 3\nself.assertRaises(Exception, lambda : test.apply(args=(list(range(10)),)))\nself.assertEqual(processed, ['Failure', 'Failure', 'Failure', 'Failure', [0,\n    1, 2, 3, 4], [5, 6, 7, 8, 9]])\n"
}