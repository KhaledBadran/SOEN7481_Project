{
    "functionName": "test_syncobjAdminStatus",
    "className": null,
    "fileName": "/bakwc_&_PySyncObj/test_syncobj.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "assert HAS_CRYPTO\nrandom.seed(42)\na = [getNextAddr(), getNextAddr()]\no1 = TestObj(a[0], [a[1]], password='123')\no2 = TestObj(a[1], [a[0]], password='123')\nassert not o1._isReady()\nassert not o2._isReady()\ndoTicks([o1, o2], 10.0, stopFunc=lambda : o1._isReady() and o2._isReady())\nassert o1._isReady()\nassert o2._isReady()\nstatus1 = o1._getStatus()\nstatus2 = o2._getStatus()\nassert 'version' in status1\nassert 'log_len' in status2\ntrueRes = {o1: '\\n'.join('%s: %s' % (k, v) for k, v in sorted(status1.items\n    ())), o2: '\\n'.join('%s: %s' % (k, v) for k, v in sorted(status2.items()))}\ncurrRes = {}\nargs = {o1: ['-conn', a[0], '-pass', '123', '-status'], o2: ['-conn', a[1],\n    '-pass', '123', '-status']}\ndoSyncObjAdminTicks([o1, o2], args, 10.0, currRes, stopFunc=lambda : \n    currRes.get(o1) is not None and currRes.get(o2) is not None)\nassert len(currRes[o1]) == len(trueRes[o1])\nassert len(currRes[o2]) == len(trueRes[o2])\no1._destroy()\no2._destroy()\n"
}