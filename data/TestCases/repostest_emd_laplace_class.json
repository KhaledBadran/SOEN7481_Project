{
    "functionName": "test_emd_laplace_class",
    "className": null,
    "fileName": "/PythonOT_&_POT/test_&_test_da.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"test_emd_laplace_transport\n    \"\"\"\nns = 150\nnt = 200\nXs, ys = make_data_classif('3gauss', ns)\nXt, yt = make_data_classif('3gauss2', nt)\notda = ot.da.EMDLaplaceTransport(reg_lap=0.01, max_iter=1000, tol=1e-09,\n    verbose=False, log=True)\notda.fit(Xs=Xs, ys=ys, Xt=Xt)\nassert hasattr(otda, 'coupling_')\nassert hasattr(otda, 'log_')\nassert_equal(otda.coupling_.shape, (Xs.shape[0], Xt.shape[0]))\nmu_s = unif(ns)\nmu_t = unif(nt)\nassert_allclose(np.sum(otda.coupling_, axis=0), mu_t, rtol=0.001, atol=0.001)\nassert_allclose(np.sum(otda.coupling_, axis=1), mu_s, rtol=0.001, atol=0.001)\ntransp_Xs = otda.transform(Xs=Xs)\n[assert_equal(x.shape, y.shape) for x, y in zip(transp_Xs, Xs)]\nXs_new, _ = make_data_classif('3gauss', ns + 1)\ntransp_Xs_new = otda.transform(Xs_new)\nassert_equal(transp_Xs_new.shape, Xs_new.shape)\ntransp_Xt = otda.inverse_transform(Xt=Xt)\nassert_equal(transp_Xt.shape, Xt.shape)\nXt_new, _ = make_data_classif('3gauss2', nt + 1)\ntransp_Xt_new = otda.inverse_transform(Xt=Xt_new)\nassert_equal(transp_Xt_new.shape, Xt_new.shape)\ntransp_Xs = otda.fit_transform(Xs=Xs, Xt=Xt)\nassert_equal(transp_Xs.shape, Xs.shape)\ntransp_yt = otda.transform_labels(ys)\nassert_equal(transp_yt.shape[0], yt.shape[0])\nassert_equal(transp_yt.shape[1], len(np.unique(ys)))\ntransp_ys = otda.inverse_transform_labels(yt)\nassert_equal(transp_ys.shape[0], ys.shape[0])\nassert_equal(transp_ys.shape[1], len(np.unique(yt)))\n"
}