{
    "functionName": "simpleui",
    "className": null,
    "fileName": "/FaradayRF_&_Faraday-Software/faraday_&_simpleui.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"\n    Provides a simple user interface with python and javascript\n\n    Uses Flask to return the user interface template file when a GET request is made while this function\n    checks form data for appropriate commands intended to be sent to a local/remote station. Once completed\n    the user is redirected to the main simpleui page.\n    \"\"\"\nif request.method == 'GET':\n    try:\n        callsign = simpleuiConfig.get('SIMPLEUI', 'CALLSIGN').upper()\n        nodeid = simpleuiConfig.getint('SIMPLEUI', 'NODEID')\n        telemetryHost = simpleuiConfig.get('TELEMETRY', 'HOST')\n        telemetryPort = simpleuiConfig.get('TELEMETRY', 'PORT')\n        if callsign == 'REPLACEME':\n            raise ConfigParser.Error(\n                'Please configure SimpleUI --callsign and --nodeid')\n    except ConfigParser.Error as e:\n        logger.error(e)\n        return ''\n    except ValueError as e:\n        logger.error(e)\n        logger.error('Please configure SimpleUI --callsign and --nodeid')\n        return ''\n    else:\n        return render_template('index.html', host=telemetryHost, port=\n            telemetryPort, callsign=callsign, nodeid=nodeid)\nif request.method == 'POST':\n    faraday_1 = faradaybasicproxyio.proxyio()\n    faraday_cmd = faradaycommands.faraday_commands()\n    try:\n        callsign = simpleuiConfig.get('SIMPLEUI', 'LOCALCALLSIGN').upper()\n        nodeid = simpleuiConfig.getint('SIMPLEUI', 'LOCALNODEID')\n    except ValueError as e:\n        logger.error(e)\n        host = simpleuiConfig.get('FLASK', 'HOST')\n        return redirect('http://{0}/'.format(host), code=302)\n    if request.form['IO'] == 'LED1 ON':\n        logger.debug('Local {0}-{1} LED1 commanded ON'.format(callsign, nodeid)\n            )\n        command = faraday_cmd.CommandLocalGPIOLED1On()\n    if request.form['IO'] == 'LED1 OFF':\n        logger.debug('Local {0}-{1} LED1 commanded OFF'.format(callsign,\n            nodeid))\n        command = faraday_cmd.CommandLocalGPIOLED1Off()\n    if request.form['IO'] == 'LED2 ON':\n        logger.debug('Local {0}-{1} LED2 commanded ON'.format(callsign, nodeid)\n            )\n        command = faraday_cmd.CommandLocalGPIOLED2On()\n    if request.form['IO'] == 'LED2 OFF':\n        logger.debug('Local {0}-{1} LED2 commanded OFF'.format(callsign,\n            nodeid))\n        command = faraday_cmd.CommandLocalGPIOLED2Off()\n    if request.form['IO'] == 'GPIO0 ON':\n        logger.debug('Local {0}-{1} GPIO0 commanded ON'.format(callsign,\n            nodeid))\n        command = faraday_cmd.CommandLocalGPIO(gpioallocations.DIGITAL_IO_0,\n            0, 0, 0, 0, 0)\n    if request.form['IO'] == 'GPIO0 OFF':\n        logger.debug('Local {0}-{1} GPIO0 commanded OFF'.format(callsign,\n            nodeid))\n        command = faraday_cmd.CommandLocalGPIO(0, 0, 0, gpioallocations.\n            DIGITAL_IO_0, 0, 0)\n    if request.form['IO'] == 'GPIO1 ON':\n        logger.debug('Local {0}-{1} GPIO1 commanded ON'.format(callsign,\n            nodeid))\n        command = faraday_cmd.CommandLocalGPIO(gpioallocations.DIGITAL_IO_1,\n            0, 0, 0, 0, 0)\n    if request.form['IO'] == 'GPIO1 OFF':\n        logger.debug('Local {0}-{1} GPIO1 commanded OFF'.format(callsign,\n            nodeid))\n        command = faraday_cmd.CommandLocalGPIO(0, 0, 0, gpioallocations.\n            DIGITAL_IO_1, 0, 0)\n    if request.form['IO'] == 'GPIO2 ON':\n        logger.debug('Local {0}-{1} GPIO2 commanded ON'.format(callsign,\n            nodeid))\n        command = faraday_cmd.CommandLocalGPIO(gpioallocations.DIGITAL_IO_2,\n            0, 0, 0, 0, 0)\n    if request.form['IO'] == 'GPIO2 OFF':\n        logger.debug('Local {0}-{1} GPI2 commanded OFF'.format(callsign,\n            nodeid))\n        command = faraday_cmd.CommandLocalGPIO(0, 0, 0, gpioallocations.\n            DIGITAL_IO_2, 0, 0)\n    if request.form['IO'] == 'GPIO3 ON':\n        logger.debug('Local {0}-{1} GPIO3 commanded ON'.format(callsign,\n            nodeid))\n        command = faraday_cmd.CommandLocalGPIO(0, gpioallocations.\n            DIGITAL_IO_3, 0, 0, 0, 0)\n    if request.form['IO'] == 'GPIO3 OFF':\n        logger.debug('Local {0}-{1} GPIO3 commanded OFF'.format(callsign,\n            nodeid))\n        command = faraday_cmd.CommandLocalGPIO(0, 0, 0, 0, gpioallocations.\n            DIGITAL_IO_3, 0)\n    if request.form['IO'] == 'GPIO4 ON':\n        logger.debug('Local {0}-{1} GPIO4 commanded ON'.format(callsign,\n            nodeid))\n        command = faraday_cmd.CommandLocalGPIO(0, gpioallocations.\n            DIGITAL_IO_4, 0, 0, 0, 0)\n    if request.form['IO'] == 'GPIO4 OFF':\n        logger.debug('Local {0}-{1} GPIO4 commanded OFF'.format(callsign,\n            nodeid))\n        command = faraday_cmd.CommandLocalGPIO(0, 0, 0, 0, gpioallocations.\n            DIGITAL_IO_4, 0)\n    if request.form['IO'] == 'GPIO5 ON':\n        logger.debug('Local {0}-{1} GPIO5 commanded ON'.format(callsign,\n            nodeid))\n        command = faraday_cmd.CommandLocalGPIO(0, gpioallocations.\n            DIGITAL_IO_5, 0, 0, 0, 0)\n    if request.form['IO'] == 'GPIO5 OFF':\n        logger.debug('Local {0}-{1} GPIO5 commanded OFF'.format(callsign,\n            nodeid))\n        command = faraday_cmd.CommandLocalGPIO(0, 0, 0, 0, gpioallocations.\n            DIGITAL_IO_5, 0)\n    if request.form['IO'] == 'GPIO6 ON':\n        logger.debug('Local {0}-{1} GPIO6 commanded ON'.format(callsign,\n            nodeid))\n        command = faraday_cmd.CommandLocalGPIO(0, gpioallocations.\n            DIGITAL_IO_6, 0, 0, 0, 0)\n    if request.form['IO'] == 'GPIO6 OFF':\n        logger.debug('Local {0}-{1} GPIO6 commanded OFF'.format(callsign,\n            nodeid))\n        command = faraday_cmd.CommandLocalGPIO(0, 0, 0, 0, gpioallocations.\n            DIGITAL_IO_6, 0)\n    if request.form['IO'] == 'GPIO7 ON':\n        logger.debug('Local {0}-{1} GPIO7 commanded ON'.format(callsign,\n            nodeid))\n        command = faraday_cmd.CommandLocalGPIO(0, gpioallocations.\n            DIGITAL_IO_7, 0, 0, 0, 0)\n    if request.form['IO'] == 'GPIO7 OFF':\n        logger.debug('Local {0}-{1} GPIO7 commanded OFF'.format(callsign,\n            nodeid))\n        command = faraday_cmd.CommandLocalGPIO(0, 0, 0, 0, gpioallocations.\n            DIGITAL_IO_7, 0)\n    if request.form['IO'] == 'GPIO8 ON':\n        logger.debug('Local {0}-{1} GPIO8 commanded ON'.format(callsign,\n            nodeid))\n        command = faraday_cmd.CommandLocalGPIO(0, 0, gpioallocations.\n            DIGITAL_IO_8, 0, 0, 0)\n    if request.form['IO'] == 'GPIO8 OFF':\n        logger.debug('Local {0}-{1} GPIO8 commanded OFF'.format(callsign,\n            nodeid))\n        command = faraday_cmd.CommandLocalGPIO(0, 0, 0, 0, 0,\n            gpioallocations.DIGITAL_IO_8)\n    if request.form['IO'] == 'MOSFET':\n        logger.debug('Local {0}-{1} MOSFET commanded to fire'.format(\n            callsign, nodeid))\n        command = faraday_cmd.CommandLocalHABActivateCutdownEvent()\n    if request.form['IO'] == 'HABTIMERRESET':\n        logger.debug('Local {0}-{1} HAB timer reset commanded'.format(\n            callsign, nodeid))\n        command = faraday_cmd.CommandLocalHABResetAutoCutdownTimer()\n    if request.form['IO'] == 'HABDISABLETIMER':\n        logger.debug('Local {0}-{1} HAB timer disable commanded'.format(\n            callsign, nodeid))\n        command = faraday_cmd.CommandLocalHABDisableAutoCutdownTimer()\n    if request.form['IO'] == 'HABTIMERIDLE':\n        logger.debug('Local {0}-{1} HAB timer idle commanded'.format(\n            callsign, nodeid))\n        command = faraday_cmd.CommandLocalHABResetCutdownIdle()\n    try:\n        remotecallsign = simpleuiConfig.get('SIMPLEUI', 'REMOTECALLSIGN'\n            ).upper()\n        remotenodeid = simpleuiConfig.getint('SIMPLEUI', 'REMOTENODEID')\n    except ValueError as e:\n        logger.error(e)\n        host = simpleuiConfig.get('FLASK', 'HOST')\n        return redirect('http://{0}/'.format(host), code=302)\n    if request.form['IO'] == 'LED1R ON':\n        logger.debug('Remote {0}-{1} LED1 commanded ON'.format(\n            remotecallsign, remotenodeid))\n        command = faraday_cmd.CommandLocal(9, faraday_cmd.\n            CommandRemoteGPIOLED1On(remotecallsign, remotenodeid))\n    if request.form['IO'] == 'LED1R OFF':\n        logger.debug('Remote {0}-{1} LED1 commanded OFF'.format(\n            remotecallsign, remotenodeid))\n        command = faraday_cmd.CommandLocal(9, faraday_cmd.\n            CommandRemoteGPIOLED1Off(remotecallsign, remotenodeid))\n    if request.form['IO'] == 'LED2R ON':\n        logger.debug('Remote {0}-{1} LED2 commanded ON'.format(\n            remotecallsign, remotenodeid))\n        command = faraday_cmd.CommandLocal(9, faraday_cmd.\n            CommandRemoteGPIOLED2On(remotecallsign, remotenodeid))\n    if request.form['IO'] == 'LED2R OFF':\n        logger.debug('Remote {0}-{1} LED2 commanded OFF'.format(\n            remotecallsign, remotenodeid))\n        command = faraday_cmd.CommandLocal(9, faraday_cmd.\n            CommandRemoteGPIOLED2Off(remotecallsign, remotenodeid))\n    if request.form['IO'] == 'GPIO0R ON':\n        logger.debug('Remote {0}-{1} GPIO0 commanded ON'.format(\n            remotecallsign, remotenodeid))\n        command = faraday_cmd.CommandLocal(9, faraday_cmd.CommandRemoteGPIO\n            (remotecallsign, remotenodeid, gpioallocations.DIGITAL_IO_0, 0,\n            0, 0, 0, 0))\n    if request.form['IO'] == 'GPIO0R OFF':\n        logger.debug('Remote {0}-{1} GPIO0 commanded OFF'.format(\n            remotecallsign, remotenodeid))\n        command = faraday_cmd.CommandLocal(9, faraday_cmd.CommandRemoteGPIO\n            (remotecallsign, remotenodeid, 0, 0, 0, gpioallocations.\n            DIGITAL_IO_0, 0, 0))\n    if request.form['IO'] == 'GPIO1R ON':\n        logger.debug('Remote {0}-{1} GPIO1 commanded ON'.format(\n            remotecallsign, remotenodeid))\n        command = faraday_cmd.CommandLocal(9, faraday_cmd.CommandRemoteGPIO\n            (remotecallsign, remotenodeid, gpioallocations.DIGITAL_IO_1, 0,\n            0, 0, 0, 0))\n    if request.form['IO'] == 'GPIO1R OFF':\n        logger.debug('Remote {0}-{1} GPIO1 commanded OFF'.format(\n            remotecallsign, remotenodeid))\n        command = faraday_cmd.CommandLocal(9, faraday_cmd.CommandRemoteGPIO\n            (remotecallsign, remotenodeid, 0, 0, 0, gpioallocations.\n            DIGITAL_IO_1, 0, 0))\n    if request.form['IO'] == 'GPIO2R ON':\n        logger.debug('Remote {0}-{1} GPIO2 commanded ON'.format(\n            remotecallsign, remotenodeid))\n        command = faraday_cmd.CommandLocal(9, faraday_cmd.CommandRemoteGPIO\n            (remotecallsign, remotenodeid, gpioallocations.DIGITAL_IO_2, 0,\n            0, 0, 0, 0))\n    if request.form['IO'] == 'GPIO2R OFF':\n        logger.debug('Remote {0}-{1} GPIO2 commanded OFF'.format(\n            remotecallsign, remotenodeid))\n        command = faraday_cmd.CommandLocal(9, faraday_cmd.CommandRemoteGPIO\n            (remotecallsign, remotenodeid, 0, 0, 0, gpioallocations.\n            DIGITAL_IO_2, 0, 0))\n    if request.form['IO'] == 'GPIO3R ON':\n        logger.debug('Remote {0}-{1} GPIO3 commanded ON'.format(\n            remotecallsign, remotenodeid))\n        command = faraday_cmd.CommandLocal(9, faraday_cmd.CommandRemoteGPIO\n            (remotecallsign, remotenodeid, 0, gpioallocations.DIGITAL_IO_3,\n            0, 0, 0, 0))\n    if request.form['IO'] == 'GPIO3R OFF':\n        logger.debug('Remote {0}-{1} GPIO3 commanded OFF'.format(\n            remotecallsign, remotenodeid))\n        command = faraday_cmd.CommandLocal(9, faraday_cmd.CommandRemoteGPIO\n            (remotecallsign, remotenodeid, 0, 0, 0, 0, gpioallocations.\n            DIGITAL_IO_3, 0))\n    if request.form['IO'] == 'GPIO4R ON':\n        logger.debug('Remote {0}-{1} GPIO4 commanded ON'.format(\n            remotecallsign, remotenodeid))\n        command = faraday_cmd.CommandLocal(9, faraday_cmd.CommandRemoteGPIO\n            (remotecallsign, remotenodeid, 0, 0, 0, 0, gpioallocations.\n            DIGITAL_IO_4, 0))\n    if request.form['IO'] == 'GPIO4R OFF':\n        logger.debug('Remote {0}-{1} GPIO4 commanded OFF'.format(\n            remotecallsign, remotenodeid))\n        command = faraday_cmd.CommandLocal(9, faraday_cmd.CommandRemoteGPIO\n            (remotecallsign, remotenodeid, 0, 0, 0, 0, gpioallocations.\n            DIGITAL_IO_4, 0))\n    if request.form['IO'] == 'GPIO5R ON':\n        logger.debug('Remote {0}-{1} GPIO5 commanded ON'.format(\n            remotecallsign, remotenodeid))\n        command = faraday_cmd.CommandLocal(9, faraday_cmd.CommandRemoteGPIO\n            (remotecallsign, remotenodeid, 0, 0, 0, 0, gpioallocations.\n            DIGITAL_IO_5, 0))\n    if request.form['IO'] == 'GPIO5R OFF':\n        logger.debug('Remote {0}-{1} GPIO5 commanded OFF'.format(\n            remotecallsign, remotenodeid))\n        command = faraday_cmd.CommandLocal(9, faraday_cmd.CommandRemoteGPIO\n            (remotecallsign, remotenodeid, 0, 0, 0, 0, gpioallocations.\n            DIGITAL_IO_5, 0))\n    if request.form['IO'] == 'GPIO6R ON':\n        logger.debug('Remote {0}-{1} GPIO6 commanded ON'.format(\n            remotecallsign, remotenodeid))\n        command = faraday_cmd.CommandLocal(9, faraday_cmd.CommandRemoteGPIO\n            (remotecallsign, remotenodeid, 0, 0, 0, 0, gpioallocations.\n            DIGITAL_IO_6, 0))\n    if request.form['IO'] == 'GPIO6R OFF':\n        logger.debug('Remote {0}-{1} GPIO6 commanded OFF'.format(\n            remotecallsign, remotenodeid))\n        command = faraday_cmd.CommandLocal(9, faraday_cmd.CommandRemoteGPIO\n            (remotecallsign, remotenodeid, 0, 0, 0, 0, gpioallocations.\n            DIGITAL_IO_6, 0))\n    if request.form['IO'] == 'GPIO7R ON':\n        logger.debug('Remote {0}-{1} GPIO7 commanded ON'.format(\n            remotecallsign, remotenodeid))\n        command = faraday_cmd.CommandLocal(9, faraday_cmd.CommandRemoteGPIO\n            (remotecallsign, remotenodeid, 0, 0, 0, 0, gpioallocations.\n            DIGITAL_IO_7, 0))\n    if request.form['IO'] == 'GPIO7R OFF':\n        logger.debug('Remote {0}-{1} GPIO7 commanded OFF'.format(\n            remotecallsign, remotenodeid))\n        command = faraday_cmd.CommandLocal(9, faraday_cmd.CommandRemoteGPIO\n            (remotecallsign, remotenodeid, 0, 0, 0, 0, gpioallocations.\n            DIGITAL_IO_7, 0))\n    if request.form['IO'] == 'GPIO8R ON':\n        logger.debug('Remote {0}-{1} GPIO8 commanded ON'.format(\n            remotecallsign, remotenodeid))\n        command = faraday_cmd.CommandLocal(9, faraday_cmd.CommandRemoteGPIO\n            (remotecallsign, remotenodeid, 0, 0, 0, 0, 0, gpioallocations.\n            DIGITAL_IO_8))\n    if request.form['IO'] == 'GPIO8R OFF':\n        logger.debug('Remote {0}-{1} GPIO8 commanded OFF'.format(\n            remotecallsign, remotenodeid))\n        command = faraday_cmd.CommandLocal(9, faraday_cmd.CommandRemoteGPIO\n            (remotecallsign, remotenodeid, 0, 0, 0, 0, 0, gpioallocations.\n            DIGITAL_IO_8))\n    if request.form['IO'] == 'MOSFETR':\n        logger.debug('Remote {0}-{1} MOSFET commanded to fire'.format(\n            remotecallsign, remotenodeid))\n        command = faraday_cmd.CommandLocal(9, faraday_cmd.\n            CommandRemoteHABActivateCutdownEvent(remotecallsign, remotenodeid))\n    if request.form['IO'] == 'HABTIMERRESETR':\n        logger.debug('Remote {0}-{1} HAB timer commanded to reset'.format(\n            remotecallsign, remotenodeid))\n        command = faraday_cmd.CommandLocal(9, faraday_cmd.\n            CommandRemoteHABResetAutoCutdownTimer(remotecallsign, remotenodeid)\n            )\n    if request.form['IO'] == 'HABDISABLETIMERR':\n        logger.debug('Remote {0}-{1} HAB timer disable commanded'.format(\n            remotecallsign, remotenodeid))\n        command = faraday_cmd.CommandLocal(9, faraday_cmd.\n            CommandRemoteHABDisableAutoCutdownTimer(remotecallsign,\n            remotenodeid))\n    if request.form['IO'] == 'HABTIMERIDLER':\n        logger.debug('Remote {0}-{1} HAB timer idle commanded'.format(\n            remotecallsign, remotenodeid))\n        command = faraday_cmd.CommandLocal(9, faraday_cmd.\n            CommandRemoteHABResetCutdownIdle(remotecallsign, remotenodeid))\n    proxyHost = simpleuiConfig.get('PROXY', 'HOST')\n    faraday_1.POST(proxyHost, callsign, nodeid, faraday_1.CMD_UART_PORT,\n        command)\n    host = simpleuiConfig.get('FLASK', 'HOST')\n    return redirect('http://{0}/'.format(host), code=302)\napp.route('/', methods=['GET', 'POST'])"
}