{
    "functionName": "test_cloudphish_api",
    "className": "CloudphishAPITestCase",
    "fileName": "/IntegralDefense_&_ACE/test_ace_api.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "import saq.cloudphish\nsubmission_result = ace_api.cloudphish_submit(TEST_URL)\nfor key in [saq.cloudphish.KEY_RESULT, saq.cloudphish.KEY_DETAILS, saq.\n    cloudphish.KEY_STATUS, saq.cloudphish.KEY_ANALYSIS_RESULT, saq.\n    cloudphish.KEY_HTTP_RESULT, saq.cloudphish.KEY_HTTP_MESSAGE, saq.\n    cloudphish.KEY_SHA256_CONTENT, saq.cloudphish.KEY_SHA256_URL, saq.\n    cloudphish.KEY_LOCATION, saq.cloudphish.KEY_FILE_NAME, saq.cloudphish.\n    KEY_UUID]:\n    self.assertTrue(key in submission_result)\nself.assertEquals(submission_result[saq.cloudphish.KEY_RESULT], saq.\n    cloudphish.RESULT_OK)\nself.assertIsNotNone(submission_result[saq.cloudphish.KEY_DETAILS])\nself.assertEquals(submission_result[saq.cloudphish.KEY_STATUS], saq.\n    cloudphish.STATUS_NEW)\nself.assertEquals(submission_result[saq.cloudphish.KEY_ANALYSIS_RESULT],\n    saq.cloudphish.SCAN_RESULT_UNKNOWN)\nself.assertIsNone(submission_result[saq.cloudphish.KEY_HTTP_RESULT])\nself.assertIsNone(submission_result[saq.cloudphish.KEY_HTTP_MESSAGE])\nself.assertIsNone(submission_result[saq.cloudphish.KEY_SHA256_CONTENT])\nself.assertIsNotNone(submission_result[saq.cloudphish.KEY_SHA256_URL])\nself.assertIsNone(submission_result[saq.cloudphish.KEY_LOCATION])\nself.assertIsNone(submission_result[saq.cloudphish.KEY_FILE_NAME])\nself.assertIsNotNone(submission_result[saq.cloudphish.KEY_UUID])\nengine = TestEngine(analysis_pools={ANALYSIS_MODE_CLOUDPHISH: 1},\n    local_analysis_modes=[ANALYSIS_MODE_CLOUDPHISH])\nengine.enable_alerting()\nengine.enable_module('analysis_module_crawlphish', ANALYSIS_MODE_CLOUDPHISH)\nengine.enable_module('analysis_module_cloudphish_request_analyzer',\n    ANALYSIS_MODE_CLOUDPHISH)\nengine.enable_module('analysis_module_forced_detection',\n    ANALYSIS_MODE_CLOUDPHISH)\nengine.controlled_stop()\nengine.start()\nengine.wait()\nsubmission_result = ace_api.cloudphish_submit(TEST_URL)\nself.assertEquals(submission_result[saq.cloudphish.KEY_RESULT], saq.\n    cloudphish.RESULT_OK)\nself.assertIsNotNone(submission_result[saq.cloudphish.KEY_DETAILS])\nself.assertEquals(submission_result[saq.cloudphish.KEY_STATUS], saq.\n    cloudphish.STATUS_ANALYZED)\nself.assertEquals(submission_result[saq.cloudphish.KEY_ANALYSIS_RESULT],\n    saq.cloudphish.SCAN_RESULT_ALERT)\nself.assertEquals(submission_result[saq.cloudphish.KEY_HTTP_RESULT], 200)\nself.assertEquals(submission_result[saq.cloudphish.KEY_HTTP_MESSAGE], 'OK')\nself.assertIsNotNone(submission_result[saq.cloudphish.KEY_SHA256_CONTENT])\nself.assertIsNotNone(submission_result[saq.cloudphish.KEY_SHA256_URL])\nself.assertIsNotNone(submission_result[saq.cloudphish.KEY_LOCATION])\nself.assertEquals(submission_result[saq.cloudphish.KEY_FILE_NAME],\n    'Payment_Advice.pdf')\nself.assertIsNotNone(submission_result[saq.cloudphish.KEY_UUID])\noutput_path = os.path.join(saq.TEMP_DIR, 'cloudphish.download')\ndownload_result = ace_api.cloudphish_download(sha256=submission_result[saq.\n    cloudphish.KEY_SHA256_URL], output_path=output_path)\nwith open(output_path, 'rb') as fp:\n    data = fp.read()\nhasher = hashlib.sha256()\nhasher.update(data)\nself.assertEquals(hasher.hexdigest().lower(), submission_result[saq.\n    cloudphish.KEY_SHA256_CONTENT].lower())\nself.assertTrue(ace_api.cloudphish_clear_alert(sha256=submission_result[saq\n    .cloudphish.KEY_SHA256_URL]))\nsubmission_result = ace_api.cloudphish_submit(TEST_URL)\nself.assertEquals(submission_result[saq.cloudphish.KEY_ANALYSIS_RESULT],\n    saq.cloudphish.SCAN_RESULT_CLEAR)\n"
}