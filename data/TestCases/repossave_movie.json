{
    "functionName": "save_movie",
    "className": "Brain",
    "fileName": "/nipy_&_PySurfer/surfer_&_viz.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"Save a movie (for data with a time axis)\n\n        The movie is created through the :mod:`imageio` module. The format is\n        determined by the extension, and additional options can be specified\n        through keyword arguments that depend on the format. For available\n        formats and corresponding parameters see the imageio documentation:\n        http://imageio.readthedocs.io/en/latest/formats.html#multiple-images\n\n        .. Warning::\n            This method assumes that time is specified in seconds when adding\n            data. If time is specified in milliseconds this will result in\n            movies 1000 times longer than expected.\n\n        Parameters\n        ----------\n        fname : str\n            Path at which to save the movie. The extension determines the\n            format (e.g., `'*.mov'`, `'*.gif'`, ...; see the :mod:`imageio`\n            documenttion for available formats).\n        time_dilation : float\n            Factor by which to stretch time (default 4). For example, an epoch\n            from -100 to 600 ms lasts 700 ms. With ``time_dilation=4`` this\n            would result in a 2.8 s long movie.\n        tmin : float\n            First time point to include (default: all data).\n        tmax : float\n            Last time point to include (default: all data).\n        framerate : float\n            Framerate of the movie (frames per second, default 24).\n        interpolation : str\n            Interpolation method (``scipy.interpolate.interp1d`` parameter,\n            one of 'linear' | 'nearest' | 'zero' | 'slinear' | 'quadratic' |\n            'cubic', default 'quadratic').\n        **kwargs :\n            Specify additional options for :mod:`imageio`.\n\n        Notes\n        -----\n        Requires imageio package, which can be installed together with\n        PySurfer with::\n\n            $ pip install -U pysurfer[save_movie]\n        \"\"\"\ntry:\n    import imageio\nexcept ImportError:\n    raise ImportError(\n        \"\"\"Saving movies from PySurfer requires the imageio library. To install imageio with pip, run\n\n    $ pip install imageio\n\nTo install/update PySurfer and imageio together, run\n\n    $ pip install -U pysurfer[save_movie]\n\"\"\"\n        )\nfrom scipy.interpolate import interp1d\nif 'fps' not in kwargs:\n    kwargs['fps'] = framerate\nif codec is not None:\n    kwargs['codec'] = codec\nif bitrate is not None:\n    kwargs['bitrate'] = bitrate\nif tmin is None:\n    tmin = self._times[0]\nelif tmin < self._times[0]:\n    raise ValueError('tmin=%r is smaller than the first time point (%r)' %\n        (tmin, self._times[0]))\nif tmax is None:\n    tmax = self._times[-1]\nelif tmax > self._times[-1]:\n    raise ValueError('tmax=%r is greater than the latest time point (%r)' %\n        (tmax, self._times[-1]))\nn_frames = floor((tmax - tmin) * time_dilation * framerate)\ntimes = np.arange(n_frames, dtype=float)\ntimes /= framerate * time_dilation\ntimes += tmin\ninterp_func = interp1d(self._times, np.arange(self.n_times))\ntime_idx = interp_func(times)\nn_times = len(time_idx)\nif n_times == 0:\n    raise ValueError('No time points selected')\nlogger.debug(\"\"\"Save movie for time points/samples\n%s\n%s\"\"\" % (times, time_idx)\n    )\nself.screenshot()\nimages = [self.screenshot() for _ in self._iter_time(time_idx, interpolation)]\nimageio.mimwrite(fname, images, **kwargs)\n"
}