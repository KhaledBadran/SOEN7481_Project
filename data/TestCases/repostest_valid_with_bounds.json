{
    "functionName": "test_valid_with_bounds",
    "className": null,
    "fileName": "/GIlunga_&_JSON-Configparser/tests_&_test_validations.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "value, typedef = value_typedef\nvalidations.validate_argument(value, typedef)\npytest.mark.parametrize('value_typedef', [(5, type_defaults.\n    TypeDefaultBounds('a', int, bound_obj=valid_bounds_obj)), (5.5,\n    type_defaults.TypeDefaultBounds('a', float, bound_obj=valid_bounds_obj)\n    ), ([5, 5], type_defaults.TypeDefaultBounds('a', List[int], bound_obj=\n    valid_bounds_obj)), ([[5, 5], [5, 5]], type_defaults.TypeDefaultBounds(\n    'a', List[List[int]], bound_obj=valid_bounds_obj)), ([5.5, 5.5],\n    type_defaults.TypeDefaultBounds('a', List[float], bound_obj=\n    valid_bounds_obj)), ([[5.5, 5.5], [5.5, 5.5]], type_defaults.\n    TypeDefaultBounds('a', List[List[float]], bound_obj=valid_bounds_obj)),\n    ({'a': 5, 'b': 5}, type_defaults.TypeDefaultBounds('a', Dict[str, int],\n    bound_obj=valid_bounds_obj)), ({'a': 5.5, 'b': 5.5}, type_defaults.\n    TypeDefaultBounds('a', Dict[str, float], bound_obj=valid_bounds_obj)),\n    ([{'a': 5, 'b': 5}, {'a': 5, 'b': 5}], type_defaults.TypeDefaultBounds(\n    'a', List[Dict[str, int]], bound_obj=valid_bounds_obj)), ({'a': {'a': 5\n    }, 'b': {'b': 5}}, type_defaults.TypeDefaultBounds('a', Dict[str, Dict[\n    str, int]], bound_obj=valid_bounds_obj)), ({'a': [5, 5], 'b': [5, 5]},\n    type_defaults.TypeDefaultBounds('a', Dict[str, List[int]], bound_obj=\n    valid_bounds_obj))])"
}