{
    "functionName": "test_get_parameter_df",
    "className": null,
    "fileName": "/PEtab-dev_&_PEtab/tests_&_test_parameters.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"Test parameters.get_parameter_df.\"\"\"\nparameter_df = pd.DataFrame(data={PARAMETER_NAME: ['parname1', 'parname2']})\nwith tempfile.NamedTemporaryFile(mode='w', delete=False) as fh:\n    file_name = fh.name\n    parameter_df.to_csv(fh, sep='\\t', index=False)\nwith pytest.raises(KeyError):\n    petab.get_parameter_df(file_name)\nparameter_df = pd.DataFrame(data={PARAMETER_ID: ['par1', 'par2'],\n    PARAMETER_NAME: ['parname1', 'parname2']})\nwith tempfile.NamedTemporaryFile(mode='w', delete=False) as fh:\n    file_name = fh.name\n    parameter_df.to_csv(fh, sep='\\t', index=False)\ndf = petab.get_parameter_df(file_name)\nassert (df == parameter_df.set_index(PARAMETER_ID)).all().all()\nwith tempfile.TemporaryDirectory() as directory:\n    parameter_dfs, parameter_files = {}, {}\n    parameter_dfs['complete'] = pd.DataFrame(data={PARAMETER_ID: ['id1',\n        'id2', 'id3'], PARAMETER_NAME: ['name1', 'name2', 'name3']})\n    parameter_dfs['subset1'] = pd.DataFrame(data={PARAMETER_ID: ['id1',\n        'id2'], PARAMETER_NAME: ['name1', 'name2']})\n    parameter_dfs['subset2_strict'] = pd.DataFrame(data={PARAMETER_ID: [\n        'id3'], PARAMETER_NAME: ['name3']})\n    parameter_dfs['subset2_overlap'] = pd.DataFrame(data={PARAMETER_ID: [\n        'id2', 'id3'], PARAMETER_NAME: ['name2', 'name3']})\n    parameter_dfs['subset2_error'] = pd.DataFrame(data={PARAMETER_ID: [\n        'id2', 'id3'], PARAMETER_NAME: ['different_name2', 'name3']})\n    for name, df in parameter_dfs.items():\n        with tempfile.NamedTemporaryFile(mode='w', delete=False, dir=directory\n            ) as fh:\n            parameter_files[name] = fh.name\n            parameter_dfs[name].to_csv(fh, sep='\\t', index=False)\n    assert petab.get_parameter_df(parameter_files['complete']).equals(petab\n        .get_parameter_df([parameter_files['subset1'], parameter_files[\n        'subset2_strict']]))\n    assert petab.get_parameter_df(parameter_files['complete']).equals(petab\n        .get_parameter_df([parameter_files['subset1'], parameter_files[\n        'subset2_overlap']]))\n    with pytest.raises(ValueError):\n        petab.get_parameter_df([parameter_files['subset1'], parameter_files\n            ['subset2_error']])\n"
}