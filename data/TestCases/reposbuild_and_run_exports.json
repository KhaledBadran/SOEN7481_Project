{
    "functionName": "build_and_run_exports",
    "className": null,
    "fileName": "/haotianteng_&_Chiron/chiron_&_export_test.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"Given the latest checkpoint file export the saved model.\n    \"\"\"\nprediction_graph = tf.Graph()\nwith prediction_graph.as_default():\n    x = tf.placeholder(tf.float32, shape=[None, FLAGS.segment_len])\n    seq_len = tf.placeholder(tf.int32, shape=[None])\n    predict, logits, prob_logits, log_prob = output_list(x, seq_len)\n    values, indices = tf.nn.top_k(logits, k=1)\n    saver = tf.train.Saver()\n    with tf.Session(graph=prediction_graph) as sess:\n        ckpt = tf.train.get_checkpoint_state(FLAGS.model)\n        if ckpt and ckpt.model_checkpoint_path:\n            saver.restore(sess, ckpt.model_checkpoint_path)\n            global_step = ckpt.model_checkpoint_path.split('/')[-1].split('-')[\n                -1]\n            print('Successfully loaded model from %s at step=%s.' % (ckpt.\n                model_checkpoint_path, global_step))\n        else:\n            print('No checkpoint file found at %s' % FLAGS.checkpoint_dir)\n            return\n        output_path = os.path.join(tf.compat.as_bytes(FLAGS.output_dir), tf\n            .compat.as_bytes(str(FLAGS.version)))\n        exporter = tf.saved_model.builder.SavedModelBuilder(output_path)\n        x_tensor_info = tf.saved_model.utils.build_tensor_info(x)\n        seq_len_tensor_info = tf.saved_model.utils.build_tensor_info(seq_len)\n        indices_output_tensor_info = tf.saved_model.utils.build_tensor_info(\n            predict.indices)\n        values_output_tensor_info = tf.saved_model.utils.build_tensor_info(\n            predict.values)\n        dense_shape_output_tensor_info = (tf.saved_model.utils.\n            build_tensor_info(predict.dense_shape))\n        logits_output_tensor_info = tf.saved_model.utils.build_tensor_info(\n            logits)\n        prob_logits_output_tensor_info = (tf.saved_model.utils.\n            build_tensor_info(prob_logits))\n        log_prob_output_tensor_info = tf.saved_model.utils.build_tensor_info(\n            log_prob)\n        prediction_signature = (tf.saved_model.signature_def_utils.\n            build_signature_def(inputs={'x': x_tensor_info, 'seq_len':\n            seq_len_tensor_info}, outputs={'indices':\n            indices_output_tensor_info, 'values': values_output_tensor_info,\n            'dense_shape': dense_shape_output_tensor_info, 'logits':\n            logits_output_tensor_info, 'prob_logits':\n            prob_logits_output_tensor_info, 'log_prob':\n            log_prob_output_tensor_info}, method_name=sig_constants.\n            PREDICT_METHOD_NAME))\n        exporter.add_meta_graph_and_variables(sess, tags=[tf.saved_model.\n            tag_constants.SERVING], signature_def_map={tf.saved_model.\n            signature_constants.DEFAULT_SERVING_SIGNATURE_DEF_KEY:\n            prediction_signature}, main_op=tf.tables_initializer(),\n            strip_default_attrs=True)\n        exporter.save()\n"
}