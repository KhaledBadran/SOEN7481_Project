{
    "functionName": "_disabled_test_threaded",
    "className": "LRUTest",
    "fileName": "/whiteclover_&_Choco/test_&_test_lru.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "size = 100\nthreshold = 0.5\nall_elems = 2000\nhot_zone = list(range(30, 40))\ncache = LRUCache(size, threshold)\nclass Element(object):\n\n    def __init__(self, id):\n        self.id = id\n        self.regets = 0\ndef get_elem():\n    if random.randint(1, 4) == 1:\n        return hot_zone[random.randint(0, len(hot_zone) - 1)]\n    else:\n        return random.randint(1, all_elems)\ntotal = [0]\ndef request_elem():\n    while True:\n        total[0] += 1\n        id = get_elem()\n        try:\n            elem = cache[id]\n            elem.regets += 1\n        except KeyError:\n            e = Element(id)\n            cache[id] = e\n        time.sleep(random.random() / 1000)\nfor x in range(0, 20):\n    _thread.start_new_thread(request_elem, ())\nfor x in range(0, 5):\n    time.sleep(1)\n    print('size:', len(cache))\n    assert len(cache) < size + size * threshold * 2\n    assert len(cache) > size - size * 0.1\ndef average_regets_in_range(start, end):\n    elem = [e for e in list(cache.values()) if e.id >= start and e.id <= end]\n    if len(elem) == 0:\n        return 0\n    avg = sum([e.regets for e in elem]) / len(elem)\n    return avg\nhotzone_avg = average_regets_in_range(30, 40)\ncontrol_avg = average_regets_in_range(450, 760)\ntotal_avg = average_regets_in_range(0, 2000)\nprint('total fetches', total[0], 'hotzone', hotzone_avg, 'control',\n    control_avg, 'total', total_avg)\nassert hotzone_avg > total_avg * 5 > control_avg * 5\n"
}