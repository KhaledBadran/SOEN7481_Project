{
    "functionName": "test_unit_pipeline_default",
    "className": null,
    "fileName": "/Merck_&_DeepBGC/test_&_unit_&_commands_&_test_unit_pipeline.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "tmpdir = str(tmpdir)\nmocker.patch('os.mkdir')\nmocker.patch('deepbgc.command.pipeline.logging.FileHandler')\nmock_seqio = mocker.patch(\n    'deepbgc.command.pipeline.deepbgc.util.SequenceParser')\nrecord1 = SeqRecord('ABC')\nrecord2 = SeqRecord('DEF')\nmock_seqio_instance = mock_seqio.return_value\nmock_seqio_instance.__enter__.return_value = mock_seqio_instance\nmock_seqio_instance.parse.return_value = [record1, record2]\nmock_annotator = mocker.patch('deepbgc.command.pipeline.DeepBGCAnnotator')\nmock_classifier = mocker.patch('deepbgc.command.pipeline.DeepBGCClassifier')\nmock_detector = mocker.patch('deepbgc.command.pipeline.DeepBGCDetector')\nwriter_paths = ['deepbgc.command.pipeline.BGCRegionPlotWriter',\n    'deepbgc.command.pipeline.ClusterTSVWriter',\n    'deepbgc.command.pipeline.PfamScorePlotWriter',\n    'deepbgc.command.pipeline.PfamTSVWriter',\n    'deepbgc.command.pipeline.GenbankWriter',\n    'deepbgc.command.pipeline.BGCGenbankWriter',\n    'deepbgc.command.pipeline.ReadmeWriter']\nwriters = [mocker.patch(path) for path in writer_paths]\nreport_dir = os.path.join(tmpdir, 'report')\nreport_tmp_dir = os.path.join(report_dir, 'tmp')\nrun(['pipeline', '--output', report_dir, '--detector', 'mydetector',\n    '--label', 'mylabel', '--score', '0.1', '--merge-max-protein-gap', '8',\n    '--merge-max-nucl-gap', '9', '--min-nucl', '10', '--min-proteins', '20',\n    '--min-domains', '30', '--min-bio-domains', '40', '--classifier',\n    'myclassifier1', '--classifier', 'myclassifier2', '--classifier-score',\n    '0.2', 'mySequence.gbk'])\nlogger = logging.getLogger('')\nfor handler in logger.handlers[:]:\n    logger.removeHandler(handler)\nos.mkdir.assert_any_call(report_dir)\nos.mkdir.assert_any_call(report_tmp_dir)\nmock_annotator.assert_called_with(tmp_dir_path=report_tmp_dir,\n    prodigal_meta_mode=False)\nmock_classifier.assert_any_call(classifier='myclassifier1', score_threshold=0.2\n    )\nmock_classifier.assert_any_call(classifier='myclassifier2', score_threshold=0.2\n    )\nmock_detector.assert_called_with(detector='mydetector', label='mylabel',\n    score_threshold=0.1, merge_max_protein_gap=8, merge_max_nucl_gap=9,\n    min_nucl=10, min_proteins=20, min_domains=30, min_bio_domains=40)\nassert mock_annotator.return_value.run.call_count == 2\nassert mock_detector.return_value.run.call_count == 2\nassert mock_classifier.return_value.run.call_count == 4\nmock_annotator.return_value.print_summary.assert_called_once_with()\nmock_detector.return_value.print_summary.assert_called_once_with()\nassert mock_classifier.return_value.print_summary.call_count == 2\nfor writer in writers:\n    assert writer.return_value.write.call_count == 2\n    writer.return_value.close.assert_called_once_with()\n"
}