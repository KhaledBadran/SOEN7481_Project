{
    "functionName": "logarithm",
    "className": null,
    "fileName": "/pmeal_&_OpenPNM/openpnm_&_models_&_physics_&_generic_source_term.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"\n    Calculates the rate, as well as slope and intercept of the following\n    function at the given value of `X`:\n\n        .. math::\n            r =  A_{1}   Log_{ A_{2} }( A_{3} x^{ A_{4} }+ A_{5})+ A_{6}\n\n    Parameters\n    ----------\n    A1 -> A6 : string\n        The dictionary keys on the target object containing the coefficients\n        values to be used in the source term model\n\n    X : string\n        The dictionary key on the target objecxt containing the the quantity\n        of interest\n\n    Returns\n    -------\n    A dictionary containing the following three items:\n\n        **'rate'** - The value of the source term function at the given X.\n\n        **'S1'** - The slope of the source term function at the given X.\n\n        **'S2'** - The intercept of the source term function at the given X.\n\n    The slope and intercept provide a linearized source term equation about the\n    current value of X as follow:\n\n        .. math::\n            rate = S_{1}   X  +  S_{2}\n\n    \"\"\"\nA = _parse_args(target=target, key=A1, default=0.0)\nB = _parse_args(target=target, key=A2, default=10.0)\nC = _parse_args(target=target, key=A3, default=1.0)\nD = _parse_args(target=target, key=A4, default=1.0)\nE = _parse_args(target=target, key=A5, default=0.0)\nF = _parse_args(target=target, key=A6, default=0.0)\nX = target[X]\nr = A * _np.log(C * X ** D + E) / _np.log(B) + F\nS1 = A * C * D * X ** (D - 1) / (_np.log(B) * (C * X ** D + E))\nS2 = A * _np.log(C * X ** D + E) / _np.log(B) + F - A * C * D * X ** D / (_np\n    .log(B) * (C * X ** D + E))\nvalues = {'S1': S1, 'S2': S2, 'rate': r}\nreturn values\n"
}