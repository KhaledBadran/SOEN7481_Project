{
    "functionName": "test_sym_grad_inplace",
    "className": "SymmetrizedGradientTest",
    "fileName": "/IMTtugraz_&_PyQMRI/test_&_test_symmetrized_gradient.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "gradx = np.zeros_like(self.symgradin)\ngrady = np.zeros_like(self.symgradin)\ngradz = np.zeros_like(self.symgradin)\ngradx[(...), 1:, :] = -np.flip(np.diff(np.flip(self.symgradin, axis=-2),\n    axis=-2), axis=-2)\ngrady[(...), 1:, :, :] = -np.flip(np.diff(np.flip(self.symgradin, axis=-3),\n    axis=-3), axis=-3)\ngradz[:, 1:, (...)] = -np.flip(np.diff(np.flip(self.symgradin, axis=-4),\n    axis=-4), axis=-4)\nsymgrad = np.stack((gradx[..., 0], grady[..., 1], gradz[..., 2] / self.dz, \n    1 / 2 * (gradx[..., 1] + grady[..., 0]), 1 / 2 * (gradx[..., 2] + gradz\n    [..., 0] / self.dz), 1 / 2 * (grady[..., 2] + gradz[..., 1] / self.dz)),\n    axis=-1)\nsymgrad *= self.weights[:, (None), (None), (None), (None)]\ninp = clarray.to_device(self.queue, self.symgradin)\noutp = clarray.to_device(self.queue, self.symdivin)\nself.symgrad.fwd(outp, inp)\noutp = outp.get()\nnp.testing.assert_allclose(outp[(...), :6], symgrad)\n"
}