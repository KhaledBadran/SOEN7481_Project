{
    "functionName": "test_KnowledgeGradient_multifidelity",
    "className": "KnowledgeGradientTest",
    "fileName": "/facebook_&_Ax/ax_&_models_&_tests_&_test_botorch_kg.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "model = KnowledgeGradient()\nmodel.fit(Xs=self.Xs, Ys=self.Ys, Yvars=self.Yvars, bounds=self.bounds,\n    task_features=[], feature_names=self.feature_names, metric_names=[\n    'L2NormMetric'], fidelity_features=[2])\nxbest = model.best_point(bounds=self.bounds, objective_weights=self.\n    objective_weights, target_fidelities={(2): 5.0})\nlb = torch.tensor([b[0] for b in self.bounds]) - 1e-05\nub = torch.tensor([b[1] for b in self.bounds]) + 1e-05\nself.assertTrue(torch.all(xbest <= ub))\nself.assertTrue(torch.all(xbest >= lb))\nwith self.assertRaises(RuntimeError):\n    model.best_point(bounds=self.bounds, objective_weights=self.\n        objective_weights)\nn = 2\nX_dummy = torch.zeros(1, n, 3, dtype=self.dtype, device=self.device)\nacq_dummy = torch.tensor(0.0, dtype=self.dtype, device=self.device)\ndummy = X_dummy, acq_dummy\nwith mock.patch(self.optimize_acqf, side_effect=[dummy]) as mock_optimize_acqf:\n    Xgen, wgen, _, __ = model.gen(n=n, bounds=self.bounds,\n        objective_weights=self.objective_weights, outcome_constraints=None,\n        linear_constraints=None, model_gen_options={\n        'acquisition_function_kwargs': self.acq_options, 'optimizer_kwargs':\n        self.optimizer_options}, target_fidelities={(2): 5.0})\n    self.assertTrue(torch.equal(Xgen, X_dummy.cpu()))\n    self.assertTrue(torch.equal(wgen, torch.ones(n, dtype=self.dtype)))\n    mock_optimize_acqf.assert_called()\nlinear_constraints = torch.tensor([[0.0, 0.0, 0.0], [0.0, 1.0, 0.0]]\n    ), torch.tensor([[0.5], [1.0]])\nwith self.assertRaises(UnsupportedError):\n    xbest = model.best_point(bounds=self.bounds, linear_constraints=\n        linear_constraints, objective_weights=self.objective_weights,\n        target_fidelities={(2): 1.0})\n"
}