{
    "functionName": "queryStationsDb",
    "className": null,
    "fileName": "/FaradayRF_&_Faraday-Software/faraday_&_telemetry.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"\n    Takes in parameters to query the SQLite database, returns the results\n\n    Performs a SQL query to retrieve data about stations in the SQLite db.\n    Can retrieve all stations ever heard, a base callsign, in a specific\n    time range, or in a timespan. Returns all results as a list of JSON\n    dictionaries\n\n    Parameters:\n    \"CALLSIGN\":Uppercase callsign\n    \"NODEID\": Node ID\n    \"DIRECTION\": Specify if callsign-nodeid to search is local (0) or remote (1)\n    \"STARTTIME\": ISO8601 time to start search\n    \"ENDTIME\": ISO8601 time to end search\n    \"TIMESPAN\": Number of seconds to search over, ending at current time\n\n    :param parameters: Search parameter dictionary\n    :return: List of SQL output where each item is a dictionary\n    \"\"\"\nsqlData = []\ntimeTuple = generateStartStopTimes(parameters)\nsqlBeg = 'SELECT SOURCECALLSIGN, SOURCEID, EPOCH FROM TELEMETRY '\nsqlWhere = 'WHERE EPOCH BETWEEN ? AND ? '\nsqlEnd = 'GROUP BY SOURCECALLSIGN, SOURCEID ORDER BY EPOCH DESC'\nif parameters['CALLSIGN'] != '%':\n    sqlWhere = sqlWhere + 'AND SOURCECALLSIGN LIKE ?'\n    paramTuple = timeTuple + (parameters['CALLSIGN'],)\n    if parameters['NODEID'] != '%':\n        sqlWhere = sqlWhere + ' AND SOURCEID LIKE ?'\n        paramTuple += parameters['NODEID'],\nelse:\n    paramTuple = timeTuple\nsql = sqlBeg + sqlWhere + sqlEnd\ntry:\n    dbFilename = telemetryConfig.get('DATABASE', 'FILENAME')\n    dbPath = os.path.join(faradayHelper.userPath, 'lib', dbFilename)\n    logger.debug('Telemetry Database: ' + dbPath)\n    dbFilename = os.path.join(dbPath)\nexcept ConfigParser.Error as e:\n    logger.error('ConfigParse.Error: ' + str(e))\n    return False\ntry:\n    queryStationsDB = openDB()\nexcept sqlite3.Error as e:\n    logger.error('Sqlite3.error: ' + str(e))\n    logger.error(paramTuple)\n    return sqlData\nqueryStationsDB.row_factory = sqlite3.Row\ntry:\n    cur = queryStationsDB.cursor()\n    cur.execute(sql, paramTuple)\nexcept sqlite3.Error as e:\n    logger.error('Sqlite3.error: ' + str(e))\n    logger.error(paramTuple)\n    queryStationsDB.close()\n    return sqlData\ntry:\n    rows = cur.fetchall()\n    for row in rows:\n        rowData = {}\n        for parameter in row.keys():\n            rowData[parameter] = row[parameter]\n        sqlData.append(rowData)\nexcept StandardError as e:\n    logger.error('StandardError: ' + str(e))\n    queryStationsDB.close()\n    return sqlData\nqueryStationsDB.close()\nreturn sqlData\n"
}