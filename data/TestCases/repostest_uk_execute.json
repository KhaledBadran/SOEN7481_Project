{
    "functionName": "test_uk_execute",
    "className": null,
    "fileName": "/bsmurphy_&_PyKrige/tests_&_test_core.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "data, (gridx, gridy, _), mask_ref = sample_data_2d\nuk = UniversalKriging(data[:, (0)], data[:, (1)], data[:, (2)],\n    variogram_model='linear', drift_terms=['regional_linear'])\nwith pytest.raises(ValueError):\n    UniversalKriging(data[:, (0)], data[:, (1)], data[:, (2)],\n        variogram_model='linear', drift_terms=['regional_linear'],\n        exact_values='blurg')\nuk_non_exact = UniversalKriging(data[:, (0)], data[:, (1)], data[:, (2)],\n    variogram_model='linear', drift_terms=['regional_linear'])\nwith pytest.raises(ValueError):\n    uk.execute('blurg', gridx, gridy)\nwith pytest.raises(ValueError):\n    uk.execute('grid', gridx, gridy, backend='mrow')\nz, ss = uk.execute('grid', gridx, gridy, backend='vectorized')\nshape = gridy.size, gridx.size\nassert z.shape == shape\nassert ss.shape == shape\nassert np.amax(z) != np.amin(z)\nassert np.amax(ss) != np.amin(ss)\nassert not np.ma.is_masked(z)\nz1, ss1 = uk_non_exact.execute('grid', gridx, gridy, backend='vectorized')\nassert_allclose(z1, z)\nassert_allclose(ss1, ss)\nz, ss = uk_non_exact.execute('grid', gridx, gridy, backend='vectorized')\nshape = gridy.size, gridx.size\nassert z.shape == shape\nassert ss.shape == shape\nassert np.amax(z) != np.amin(z)\nassert np.amax(ss) != np.amin(ss)\nassert not np.ma.is_masked(z)\nz, ss = uk.execute('grid', gridx, gridy, backend='loop')\nshape = gridy.size, gridx.size\nassert z.shape == shape\nassert ss.shape == shape\nassert np.amax(z) != np.amin(z)\nassert np.amax(ss) != np.amin(ss)\nassert not np.ma.is_masked(z)\nwith pytest.raises(IOError):\n    uk.execute('masked', gridx, gridy, backend='vectorized')\nmask = np.array([True, False])\nwith pytest.raises(ValueError):\n    uk.execute('masked', gridx, gridy, mask=mask, backend='vectorized')\nz, ss = uk.execute('masked', gridx, gridy, mask=mask_ref, backend='vectorized')\nassert np.ma.is_masked(z)\nassert np.ma.is_masked(ss)\nassert z[0, 0] is np.ma.masked\nassert ss[0, 0] is np.ma.masked\nz, ss = uk.execute('masked', gridx, gridy, mask=mask_ref.T, backend=\n    'vectorized')\nassert np.ma.is_masked(z)\nassert np.ma.is_masked(ss)\nassert z[0, 0] is np.ma.masked\nassert ss[0, 0] is np.ma.masked\nwith pytest.raises(IOError):\n    uk.execute('masked', gridx, gridy, backend='loop')\nmask = np.array([True, False])\nwith pytest.raises(ValueError):\n    uk.execute('masked', gridx, gridy, mask=mask, backend='loop')\nz, ss = uk.execute('masked', gridx, gridy, mask=mask_ref, backend='loop')\nassert np.ma.is_masked(z)\nassert np.ma.is_masked(ss)\nassert z[0, 0] is np.ma.masked\nassert ss[0, 0] is np.ma.masked\nz, ss = uk.execute('masked', gridx, gridy, mask=mask_ref.T, backend='loop')\nassert np.ma.is_masked(z)\nassert np.ma.is_masked(ss)\nassert z[0, 0] is np.ma.masked\nassert ss[0, 0] is np.ma.masked\nz, ss = uk_non_exact.execute('masked', gridx, gridy, mask=mask_ref.T,\n    backend='loop')\nassert np.ma.is_masked(z)\nassert np.ma.is_masked(ss)\nassert z[0, 0] is np.ma.masked\nassert ss[0, 0] is np.ma.masked\nwith pytest.raises(ValueError):\n    uk.execute('points', np.array([0.0, 1.0, 2.0]), np.array([0.0, 1.0]),\n        backend='vectorized')\nz, ss = uk.execute('points', gridx[0], gridy[0], backend='vectorized')\nassert z.shape == (1,)\nassert ss.shape == (1,)\nwith pytest.raises(ValueError):\n    uk.execute('points', np.array([0.0, 1.0, 2.0]), np.array([0.0, 1.0]),\n        backend='loop')\nz, ss = uk.execute('points', gridx[0], gridy[0], backend='loop')\nassert z.shape == (1,)\nassert ss.shape == (1,)\n"
}