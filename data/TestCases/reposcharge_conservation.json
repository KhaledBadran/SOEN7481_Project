{
    "functionName": "charge_conservation",
    "className": null,
    "fileName": "/pmeal_&_OpenPNM/openpnm_&_models_&_physics_&_generic_source_term.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"\n    Applies the source term on the charge conservation equation when solving\n    for ions transport.\n\n    Parameters\n    ----------\n    phase : OpenPNM Phase object\n            The phase on which the charge conservation equation is applied.\n\n    p_alg : OpenPNM Algorithm object\n            The algorithm used to enforce charge conservation.\n\n    e_alg : list of OpenPNM algorithms\n            The list of algorithms used to solve for transport of different\n            ionic species of the mixture phase.\n\n    assumption : string\n            A string correponding to the assumption adopted to enforce charge\n            conservation.\n\n    Returns\n    -------\n    A dictionary containing the following three items:\n\n        **'rate'** - The value of the source term function for the given list\n                     of algortihms under the provided assumption.\n\n        **'S1'** - A placeholder (zero array).\n\n        **'S2'** - The value of the source term function for the given list of\n                   algortihms under the provided assumption (same as 'rate').\n\n    Notes\n    -----\n    Three assumptions are supported; \"poisson\", \"electroneutrality\" and\n    \"laplace\".\n\n    \"\"\"\nimport scipy.sparse.csgraph as _spgr\nF = 96485.33212331001\nrhs = _np.zeros(shape=(p_alg.Np,), dtype=float)\nnetwork = p_alg.project.network\nif assumption == 'poisson':\n    v = network['pore.volume']\n    for e in e_alg:\n        rhs += v * F * phase['pore.valence.' + e.settings['ion']] * e[e.\n            settings['quantity']]\nelif assumption == 'poisson_2D':\n    s = network['pore.area']\n    for e in e_alg:\n        rhs += s * F * phase['pore.valence.' + e.settings['ion']] * e[e.\n            settings['quantity']]\nelif assumption in ['electroneutrality', 'electroneutrality_2D']:\n    for e in e_alg:\n        try:\n            c = e[e.settings['quantity']]\n        except KeyError:\n            c = _np.zeros(shape=(e.Np,), dtype=float)\n        network = e.project.network\n        g = phase['throat.diffusive_conductance.' + e.settings['ion']]\n        am = network.create_adjacency_matrix(weights=g, fmt='coo')\n        A = _spgr.laplacian(am)\n        rhs += -F * phase['pore.valence.' + e.settings['ion']] * A * c\nelif assumption in ['laplace', 'laplace_2D']:\n    pass\nelse:\n    raise Exception('Unknown keyword for \"charge_conservation\", can ' +\n        'only be \"poisson\", \"poisson_2D\", \"laplace\", ' +\n        '\"laplace_2D\", \"electroneutrality\" or ' + 'electroneutrality_2D')\nS1 = _np.zeros(shape=(p_alg.Np,), dtype=float)\nvalues = {'S1': S1, 'S2': rhs, 'rate': rhs}\nreturn values\n"
}