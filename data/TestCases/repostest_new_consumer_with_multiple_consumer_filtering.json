{
    "functionName": "test_new_consumer_with_multiple_consumer_filtering",
    "className": null,
    "fileName": "/Drakkar-Software_&_OctoBot-Channels/tests_&_test_channel.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "consumers_descriptions = [{'A': 1, 'B': 2, 'C': CHANNEL_WILDCARD}, {'A': \n    False, 'B': 'BBBB', 'C': CHANNEL_WILDCARD}, {'A': 3, 'B':\n    CHANNEL_WILDCARD, 'C': CHANNEL_WILDCARD}, {'A': CHANNEL_WILDCARD, 'B':\n    CHANNEL_WILDCARD, 'C': CHANNEL_WILDCARD}, {'A': CHANNEL_WILDCARD, 'B': \n    2, 'C': 1}, {'A': True, 'B': CHANNEL_WILDCARD, 'C': CHANNEL_WILDCARD},\n    {'A': None, 'B': None, 'C': CHANNEL_WILDCARD}, {'A': 'PPP', 'B': 1, 'C':\n    CHANNEL_WILDCARD, 'D': 5}, {'A': CHANNEL_WILDCARD, 'B': 2, 'C': 'ABC'},\n    {'A': CHANNEL_WILDCARD, 'B': True, 'C': CHANNEL_WILDCARD}, {'A':\n    CHANNEL_WILDCARD, 'B': 6, 'C': CHANNEL_WILDCARD, 'D': CHANNEL_WILDCARD},\n    {'A': CHANNEL_WILDCARD, 'B': CHANNEL_WILDCARD, 'C': CHANNEL_WILDCARD,\n    'D': CHANNEL_WILDCARD}, {'A': None, 'B': False, 'C': 'LLLL', 'D':\n    CHANNEL_WILDCARD}, {'A': None, 'B': None, 'C': CHANNEL_WILDCARD, 'D':\n    None}, {'A': CHANNEL_WILDCARD, 'B': 2, 'C': CHANNEL_WILDCARD, 'D': None\n    }, {'A': CHANNEL_WILDCARD, 'B': [2, 3, 4, 5, 6], 'C': CHANNEL_WILDCARD,\n    'D': None}, {'A': CHANNEL_WILDCARD, 'B': ['A', 5, 'G'], 'C':\n    CHANNEL_WILDCARD, 'D': None}, {'A': [1, 2, 3], 'B': 2, 'C':\n    CHANNEL_WILDCARD, 'D': CHANNEL_WILDCARD}, {'A': ['A', 'B', 'C'], 'B': 2,\n    'C': CHANNEL_WILDCARD, 'D': CHANNEL_WILDCARD}, {'A': CHANNEL_WILDCARD,\n    'B': [2], 'C': CHANNEL_WILDCARD, 'D': CHANNEL_WILDCARD}, {'A':\n    CHANNEL_WILDCARD, 'B': ['B'], 'C': CHANNEL_WILDCARD, 'D':\n    CHANNEL_WILDCARD}, {'A': 18, 'B': ['A', 'B', 'C'], 'C': ['---', '9',\n    '#'], 'D': CHANNEL_WILDCARD}, {'A': [9, 18], 'B': ['B', 'C', 'D'], 'C':\n    ['---', '9', '#', '@', '{'], 'D': ['P', '__str__']}]\nconsumers = [(await get_chan(EMPTY_TEST_CHANNEL).new_consumer(\n    empty_test_callback, consumers_description)) for consumers_description in\n    consumers_descriptions]\nassert get_chan(EMPTY_TEST_CHANNEL).get_consumers() == consumers\nassert get_chan(EMPTY_TEST_CHANNEL).get_consumer_from_filters({}) == consumers\nassert get_chan(EMPTY_TEST_CHANNEL).get_consumer_from_filters({'A': 1, 'B':\n    '6'}) == [consumers[3], consumers[5], consumers[11]]\nassert get_chan(EMPTY_TEST_CHANNEL).get_consumer_from_filters({'A':\n    CHANNEL_WILDCARD, 'B': 'G', 'C': '1A'}) == [consumers[2], consumers[3],\n    consumers[5], consumers[11], consumers[16]]\nassert get_chan(EMPTY_TEST_CHANNEL).get_consumer_from_filters({'A':\n    CHANNEL_WILDCARD, 'B': CHANNEL_WILDCARD, 'C': CHANNEL_WILDCARD}\n    ) == consumers\nassert get_chan(EMPTY_TEST_CHANNEL).get_consumer_from_filters({'A': 18, 'B':\n    'A', 'C': '#'}) == [consumers[3], consumers[11], consumers[16],\n    consumers[21]]\nassert get_chan(EMPTY_TEST_CHANNEL).get_consumer_from_filters({'A': 18, 'B':\n    'C', 'C': '#', 'D': None}) == [consumers[11], consumers[21]]\nassert get_chan(EMPTY_TEST_CHANNEL).get_consumer_from_filters({'A': 18, 'B':\n    'C', 'C': '^', 'D': None}) == [consumers[11]]\nassert get_chan(EMPTY_TEST_CHANNEL).get_consumer_from_filters({'A': 18, 'B':\n    'C', 'C': '#', 'D': '__str__'}) == [consumers[11], consumers[21],\n    consumers[22]]\npytest.mark.asyncio"
}