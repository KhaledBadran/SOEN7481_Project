{
    "functionName": "test_weighted_directed_clustering",
    "className": null,
    "fileName": "/Silmathoron_&_NNGT/testing_&_test_analysis.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "num_nodes = 6\nedge_list = [(0, 1), (0, 2), (1, 0), (1, 2), (2, 0), (2, 3), (4, 5)]\ng = nngt.Graph(nodes=num_nodes)\ng.new_edges(edge_list)\ng.set_weights([1 / 64, 1 / 729, 1 / 64, 1 / 729, 1 / 64, 1 / 729, 1])\ntriangles_c = np.array([97 / 839808, 97 / 839808, 97 / 839808, 0, 0, 0])\ntriplets_c = np.array([35 / 432, 1 / 54, 13 / 486, 0, 0, 0])\nassert np.all(np.isclose(triangles_c, na.triangle_count(g, weights='weight',\n    method='continuous')))\nassert np.all(np.isclose(triplets_c, na.triplet_count(g, weights='weight',\n    method='continuous')))\ntriplets_c[-3:] = 1\nexpected = triangles_c / triplets_c\ncc = na.local_clustering(g, weights='weight', method='continuous')\nassert np.all(np.isclose(cc, expected))\ng.set_weights([1 / 4, 1 / 9, 1 / 4, 1 / 9, 1 / 4, 1 / 9, 1])\ntriangles_b = np.array([31 / 36, 13 / 18, 7 / 12, 0, 0, 0])\ntriplets_b = np.array([31 / 18, 13 / 18, 25 / 18, 0, 0, 0])\nassert np.all(np.isclose(triangles_b, na.triangle_count(g, weights='weight',\n    method='barrat')))\nassert np.all(np.isclose(triplets_b, na.triplet_count(g, weights='weight',\n    method='barrat')))\ntriplets_b[-3:] = 1\nexpected = triangles_b / triplets_b\ncc = na.local_clustering(g, weights='weight', method='barrat')\nassert np.all(np.isclose(cc, expected))\ntriplets_o = np.array([8, 4, 10, 0, 0, 0])\ntriangles_o = np.array([0.672764902429877, 0.672764902429877, \n    0.672764902429877, 0, 0, 0])\nassert np.array_equal(triplets_o, na.triplet_count(g))\nassert np.all(np.isclose(triangles_o, na.triangle_count(g, weights='weight',\n    method='onnela')))\ntriplets_o[-3:] = 1\nexpected = triangles_o / triplets_o\ncc = na.local_clustering(g, weights='weight', method='onnela')\nassert np.all(np.isclose(cc, expected))\npytest.mark.mpi_skip"
}