{
    "functionName": "test_in_project_roots",
    "className": null,
    "fileName": "/fabioz_&_PyDev.Debugger/tests_python_&_test_pydevd_filtering.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "from _pydevd_bundle.pydevd_filtering import FilesFiltering\nfiles_filtering = FilesFiltering()\nimport os.path\nimport sys\nassert files_filtering._get_library_roots() == [os.path.normcase(x) for x in\n    files_filtering._get_default_library_roots()]\nsite_packages = tmpdir.mkdir('site-packages')\nproject_dir = tmpdir.mkdir('project')\nproject_dir_inside_site_packages = str(site_packages.mkdir('project'))\nsite_packages_inside_project_dir = str(project_dir.mkdir('site-packages'))\nsite_packages = str(site_packages)\nproject_dir = str(project_dir)\ntmpdir = str(tmpdir)\nfiles_filtering.set_project_roots([project_dir,\n    project_dir_inside_site_packages])\nfiles_filtering.set_library_roots([site_packages,\n    site_packages_inside_project_dir])\ncheck = [(tmpdir, False), (site_packages, False), (\n    site_packages_inside_project_dir, False), (project_dir, True), (\n    project_dir_inside_site_packages, True)]\nfor check_path, find in check[:]:\n    check.append((os.path.join(check_path, 'a.py'), find))\nfor check_path, find in check:\n    assert files_filtering.in_project_roots(check_path) == find\nfiles_filtering.set_project_roots([])\nfiles_filtering.set_library_roots([site_packages,\n    site_packages_inside_project_dir])\ncheck = [(tmpdir, True), (site_packages, False), (\n    site_packages_inside_project_dir, False), (project_dir, True), (\n    project_dir_inside_site_packages, False), ('<foo>', False), (\n    '<ipython>', True), ('<frozen importlib._bootstrap>', False)]\nfor check_path, find in check:\n    assert files_filtering.in_project_roots(check_path\n        ) == find, 'Expected: %s to be a part of the project: %s' % (check_path\n        , find)\nsys.path.append(str(site_packages))\ntry:\n    default_library_roots = files_filtering._get_default_library_roots()\n    assert len(set(default_library_roots)) == len(default_library_roots\n        ), 'Duplicated library roots found in: %s' % (default_library_roots,)\n    assert str(site_packages) in default_library_roots\n    for path in sys.path:\n        if os.path.exists(path) and path.endswith('site-packages'):\n            assert path in default_library_roots\nfinally:\n    sys.path.remove(str(site_packages))\n"
}