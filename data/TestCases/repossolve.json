{
    "functionName": "solve",
    "className": "PETScSparseLinearSolver",
    "fileName": "/pmeal_&_OpenPNM/openpnm_&_utils_&_petsc.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"\n        This method solves the sparse linear system, converts the\n        solution vector from a PETSc.Vec instance to a numpy array,\n        and finally destroys all the petsc objects to free memory.\n\n        Parameters\n        ----------\n        solver_type : string, optional\n            Default is the iterative solver 'cg' based on the\n            Conjugate Gradient method.\n\n        preconditioner_type : string, optional\n            Default is the 'jacobi' preconditioner, i.e., diagonal\n            scaling preconditioning. The preconditioner is used with\n            iterative solvers. When a direct solver is used, this\n            parameter is ignored.\n\n        factorization_type : string, optional\n            The factorization type used with the direct solver.\n            Default is 'lu'. This parameter is ignored when an\n            iterative solver is used.\n\n        Returns\n        -------\n        Returns a numpy array corresponding to the solution of\n        the linear sparse system Ax = b.\n\n        Notes\n        -----\n        Certain combinations of iterative solvers and precondioners\n        or direct solvers and factorization types are not supported.\n        The summary table of the different possibilities\n        can be found here:\n        https://www.mcs.anl.gov/petsc/documentation/linearsolvertable.html\n        \"\"\"\nself.x0 = np.zeros_like(self.b) if x0 is None else x0\nself._initialize_b_x()\nself._initialize_A()\nself._create_solver()\nself._set_tolerances(atol=atol, rtol=rtol, max_it=max_it)\nself.ksp.setOperators(self.petsc_A)\nself.ksp.setFromOptions()\nself.ksp.solve(self.petsc_b, self.petsc_x)\ngather_to_0, self.petsc_s = PETSc.Scatter().toAll(self.petsc_x)\ngather_to_0.scatter(self.petsc_x, self.petsc_s, PETSc.InsertMode.INSERT,\n    PETSc.ScatterMode.FORWARD)\nself.solution = PETSc.Vec.getArray(self.petsc_s)\nPETSc.KSP.destroy(self.ksp)\nPETSc.Mat.destroy(self.petsc_A)\nPETSc.Vec.destroy(self.petsc_b)\nPETSc.Vec.destroy(self.petsc_x)\nPETSc.Vec.destroy(self.petsc_s)\nreturn self.solution\n"
}