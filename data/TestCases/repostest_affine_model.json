{
    "functionName": "test_affine_model",
    "className": null,
    "fileName": "/AllenInstitute_&_EM_Aligner_python/integration_tests_&_test_transforms.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "rt = renderapi.transform.Polynomial2DTransform()\nwith pytest.raises(AlignerTransformException):\n    t = AlignerAffineModel(transform=rt)\nrt = renderapi.transform.AffineModel()\nt = AlignerTransform(name='AffineModel', transform=rt)\nassert t.__class__ == AlignerAffineModel\nassert not t.fullsize\nt = AlignerTransform(name='AffineModel', transform=rt, fullsize=True)\nassert t.__class__ == AlignerAffineModel\nassert t.fullsize\nt = AlignerTransform(name='AffineModel', transform=rt, fullsize=True)\nnmatch = 100\nmatch = example_match(nmatch)\nncol = 1000\nicol = 73\nblock, weights, rhs = t.block_from_pts(np.array(match['matches']['p']).\n    transpose(), np.array(match['matches']['w']), icol, ncol)\nassert np.all(np.isclose(rhs, 0.0))\nassert block.check_format() is None\nassert weights.size == nmatch * t.rows_per_ptmatch\nassert block.shape == (nmatch * t.rows_per_ptmatch, ncol)\nassert block.nnz == 2 * nmatch * 3\nt = AlignerTransform(name='AffineModel', transform=rt, fullsize=False)\nnmatch = 100\nmatch = example_match(nmatch)\nncol = 1000\nicol = 73\nblock, weights, rhs = t.block_from_pts(np.array(match['matches']['p']).\n    transpose(), np.array(match['matches']['w']), icol, ncol)\nassert np.all(np.isclose(rhs, 0.0))\nassert block.check_format() is None\nassert weights.size == nmatch * t.rows_per_ptmatch\nassert block.shape == (nmatch * t.rows_per_ptmatch, ncol)\nassert block.nnz == nmatch * 3\nt = AlignerTransform(name='AffineModel', transform=rt, fullsize=True)\nv = t.to_solve_vec()\nassert np.all(v == np.array([1.0, 0.0, 0.0, 0.0, 1.0, 0.0]).reshape(6, 1))\nt.fullsize = False\nv = t.to_solve_vec()\nassert np.all(v == np.array([[1.0, 0.0], [0.0, 1.0], [0.0, 0.0]]))\nt.fullsize = True\nntiles = 6\nvi = [1.0, 0.2, 0.0, -0.1, 1.0, 0.0]\nvec = np.tile(vi, ntiles)\nvec = vec.reshape(-1, 1)\nindex = 0\nfor i in range(ntiles):\n    index += t.from_solve_vec(vec[index:, :])\n    assert np.all(np.isclose(t.M[0:2, :].flatten(), vi))\nt.fullsize = False\nvi = np.array([[1.0, 0.2, 0.0], [-0.1, 1.0, 0.0]]).transpose()\nvec = np.tile(vi, reps=[ntiles, 1])\nindex = 0\nfor i in range(ntiles):\n    index += t.from_solve_vec(vec[index:, :])\n    assert np.all(np.isclose(t.M[0:2, :], vi.transpose()))\nrdict = {'default_lambda': 1.0, 'translation_factor': 0.1}\nt = AlignerTransform(name='AffineModel', transform=rt, fullsize=True)\nr = t.regularization(rdict)\nassert np.all(r[[0, 1, 3, 4]] == 1.0)\nassert np.all(r[[2, 5]] == 0.1)\nt = AlignerTransform(name='AffineModel', transform=rt, fullsize=False)\nr = t.regularization(rdict)\nassert np.all(r[[0, 1]] == 1.0)\nassert np.all(r[[2]] == 0.1)\n"
}