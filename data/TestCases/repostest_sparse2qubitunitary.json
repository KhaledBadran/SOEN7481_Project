{
    "functionName": "test_sparse2qubitunitary",
    "className": "Test_conjugated_kernel",
    "fileName": "/QE-Lab_&_OpenQL/tests_&_test_unitary.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "self.setUpClass()\nnum_qubits = 2\np = ql.Program('test_usingqx_sparse2qubit', platform, num_qubits)\nk = ql.Kernel('akernel', platform, num_qubits)\nmatrix = [0.2309453 - 0.79746147j, -0.53683301 + 0.15009925j, 0.0 + 0.0j, -\n    0.0 + 0.0j, 0.39434916 - 0.39396473j, 0.80810853 + 0.19037107j, 0.0 + \n    0.0j, 0.0 + 0.0j, 0.0 + 0.0j, -0.0 + 0.0j, 0.2309453 - 0.79746147j, -\n    0.53683301 + 0.15009925j, 0.0 + 0.0j, 0.0 + 0.0j, 0.39434916 - \n    0.39396473j, 0.80810853 + 0.19037107j]\nu1 = ql.Unitary('testname', matrix)\nu1.decompose()\nk.gate(u1, [0, 1])\np.add_kernel(k)\np.compile()\nqx.set(os.path.join(output_dir, p.name + '_initialqasmwriter_out.qasm'))\nqx.execute()\nc0 = qx.get_state()\nself.assertAlmostEqual(helper_prob(matrix[0]), helper_regex(c0)[0], 5)\nself.assertAlmostEqual(helper_prob(matrix[4]), helper_regex(c0)[1], 5)\nself.assertAlmostEqual(helper_prob(matrix[8]), 0, 5)\nself.assertAlmostEqual(helper_prob(matrix[12]), 0, 5)\n"
}