{
    "functionName": "test_build_cryptographic_parameters",
    "className": "TestObjectFactory",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_pie_&_test_factory.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "cryptographic_parameters = cobjects.CryptographicParameters(block_cipher_mode\n    =enums.BlockCipherMode.CBC, padding_method=enums.PaddingMethod.\n    ANSI_X923, hashing_algorithm=enums.HashingAlgorithm.SHA_256,\n    key_role_type=enums.KeyRoleType.KEK, digital_signature_algorithm=enums.\n    DigitalSignatureAlgorithm.DSA_WITH_SHA1, cryptographic_algorithm=enums.\n    CryptographicAlgorithm.AES, random_iv=True, iv_length=32, tag_length=33,\n    fixed_field_length=34, invocation_field_length=35, counter_length=36,\n    initial_counter_value=0)\nresult = self.factory._build_cryptographic_parameters(cryptographic_parameters)\nself.assertIsInstance(result, dict)\nself.assertEqual(enums.BlockCipherMode.CBC, result.get('block_cipher_mode'))\nself.assertEqual(enums.PaddingMethod.ANSI_X923, result.get('padding_method'))\nself.assertEqual(enums.HashingAlgorithm.SHA_256, result.get(\n    'hashing_algorithm'))\nself.assertEqual(enums.KeyRoleType.KEK, result.get('key_role_type'))\nself.assertEqual(enums.DigitalSignatureAlgorithm.DSA_WITH_SHA1, result.get(\n    'digital_signature_algorithm'))\nself.assertEqual(enums.CryptographicAlgorithm.AES, result.get(\n    'cryptographic_algorithm'))\nself.assertEqual(True, result.get('random_iv'))\nself.assertEqual(32, result.get('iv_length'))\nself.assertEqual(33, result.get('tag_length'))\nself.assertEqual(34, result.get('fixed_field_length'))\nself.assertEqual(35, result.get('invocation_field_length'))\nself.assertEqual(36, result.get('counter_length'))\nself.assertEqual(0, result.get('initial_counter_value'))\n"
}