{
    "functionName": "conduit_conductance",
    "className": null,
    "fileName": "/pmeal_&_OpenPNM/openpnm_&_models_&_physics_&_multiphase.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"\n    Determines the conductance of a pore-throat-pore conduit based on the\n    invaded state of each element.\n\n    Parameters\n    ----------\n    target : OpenPNM Object\n        The OpenPNM object where the model is attached.  Should either be a\n        Physics or a Phase.\n\n    throat_conductance : string\n        The transport conductance of the phase associated with the ``target``\n        object at single-phase conditions.\n\n    pore_occupancy : string\n        The property name containing the occupancy of the phase associated\n        with the ``target`` object.  An occupancy of 1 means the pore\n        is completely filled with the phase and it fully conducts.\n\n    throat_occupancy : string\n        The property name containing the occupancy of the phase associated\n        with the ``target`` object.  An occupancy of 1 means the throat\n        is completely filled with the phase and it fully conducts.\n\n    mode : 'strict' or 'medium' or 'loose'\n        How agressive the method should be when determining if a conduit is\n        closed.\n\n        **'strict'** :  If any pore or throat in the conduit is unoccupied by\n         the given phase, the conduit is closed.\n\n        **'medium'** : If either the throat or both pores are unoccupied, the\n        conduit is closed\n\n        **'loose'** : Only close the conduit if the throat is unoccupied\n\n    factor : float (default is 1e-6)\n        The factor which becomes multiplied to the original conduit's\n        conductance to severely limit transport, but not set it to zero.\n\n    Returns\n    -------\n    value : NumPy ndarray\n        Array containing conduit conductance values.\n\n    \"\"\"\nnetwork = target.project.network\nphase = target.project.find_phase(target)\nTinv = phase[throat_occupancy] < 0.5\nP12 = network['throat.conns']\nPinv = phase[pore_occupancy][P12] < 0.5\nif mode == 'loose':\n    mask = Tinv\nelif mode == 'medium':\n    mask = Tinv + np.all(Pinv, axis=1)\nelif mode == 'strict':\n    mask = Tinv + np.any(Pinv, axis=1)\nelse:\n    raise Exception('Unrecongnized mode ' + mode)\nvalue = phase[throat_conductance].copy()\nvalue[mask] = value[mask] * factor\nTs = network.map_throats(throats=target.Ts, origin=target)\nreturn value[Ts]\n"
}