{
    "functionName": "test_motor",
    "className": null,
    "fileName": "/PRIArobotics_&_HedgehogServer/tests_&_test_server.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "async with conn_dealer() as socket:\n    await assertReplyDealer(socket, motor.CommandRequest(0), ack.FAILED_COMMAND\n        )\n    await assertReplyDealer(socket, motor.Action(0, motor.POWER), ack.OK)\n    action = motor.Action(0, motor.BRAKE)\n    object.__setattr__(action, 'relative', 100)\n    await assertReplyDealer(socket, action, ack.INVALID_COMMAND)\n    await assertReplyDealer(socket, motor.CommandRequest(0), motor.\n        CommandReply(0, motor.DcConfig(), motor.POWER, 0))\n    await assertReplyDealer(socket, motor.ConfigAction(0, motor.\n        EncoderConfig(0, 1)), ack.OK)\n    await assertReplyDealer(socket, motor.CommandRequest(0), motor.\n        CommandReply(0, motor.EncoderConfig(0, 1), motor.POWER, 0))\n    await assertReplyDealer(socket, motor.ConfigAction(0, motor.DcConfig()),\n        ack.OK)\n    await assertReplyDealer(socket, motor.StateRequest(0), motor.StateReply\n        (0, 0, 0))\n    await assertReplyDealer(socket, motor.SetPositionAction(0, 0), ack.OK)\n    sub = Subscription()\n    sub.subscribe = False\n    await assertReplyDealer(socket, motor.CommandSubscribe(0, sub), ack.\n        FAILED_COMMAND)\n    with assertImmediate():\n        sub = Subscription()\n        sub.subscribe = True\n        await assertReplyDealer(socket, motor.CommandSubscribe(0, sub), ack.OK)\n        _, update = await socket.recv_msg()\n        assert update == motor.CommandUpdate(0, motor.DcConfig(), motor.\n            POWER, 0, sub)\n    with assertTimeoutTrio(1):\n        await socket.recv_multipart()\n    with assertImmediate():\n        await assertReplyDealer(socket, motor.Action(0, motor.POWER), ack.OK)\n    with assertTimeoutTrio(1):\n        await socket.recv_multipart()\n    with assertImmediate():\n        await assertReplyDealer(socket, motor.Action(0, motor.POWER, 100),\n            ack.OK)\n        _, update = await socket.recv_msg()\n        assert update == motor.CommandUpdate(0, motor.DcConfig(), motor.\n            POWER, 100, sub)\n    sub.subscribe = False\n    await assertReplyDealer(socket, motor.CommandSubscribe(0, sub), ack.OK)\n    with assertTimeoutTrio(1):\n        await socket.recv_multipart()\n    sub = Subscription()\n    sub.subscribe = True\n    await assertReplyDealer(socket, motor.CommandSubscribe(1, sub), ack.OK)\n    with assertTimeoutTrio(1):\n        await socket.recv_multipart()\n    with assertImmediate():\n        await assertReplyDealer(socket, motor.Action(1, motor.POWER, 100),\n            ack.OK)\n        _, update = await socket.recv_msg()\n        assert update == motor.CommandUpdate(1, motor.DcConfig(), motor.\n            POWER, 100, sub)\n    sub.subscribe = False\n    await assertReplyDealer(socket, motor.CommandSubscribe(1, sub), ack.OK)\n    with assertTimeoutTrio(1):\n        await socket.recv_multipart()\n    sub = Subscription()\n    sub.subscribe = False\n    sub.timeout = 1000\n    await assertReplyDealer(socket, motor.StateSubscribe(0, sub), ack.\n        FAILED_COMMAND)\n    with assertImmediate():\n        sub = Subscription()\n        sub.subscribe = True\n        sub.timeout = 1000\n        await assertReplyDealer(socket, motor.StateSubscribe(0, sub), ack.OK)\n        _, update = await socket.recv_msg()\n        assert update == motor.StateUpdate(0, 0, 0, sub)\n    sub.subscribe = False\n    await assertReplyDealer(socket, motor.StateSubscribe(0, sub), ack.OK)\npytest.mark.trio"
}