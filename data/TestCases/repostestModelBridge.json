{
    "functionName": "testModelBridge",
    "className": "BaseModelBridgeTest",
    "fileName": "/facebook_&_Ax/ax_&_modelbridge_&_tests_&_test_base_modelbridge.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "transforms = [transform_1, transform_2]\nexp = get_experiment_for_value()\nss = get_search_space_for_value()\nmodelbridge = ModelBridge(search_space=ss, model=Model(), transforms=\n    transforms, experiment=exp, data=0)\nself.assertFalse(modelbridge.\n    _experiment_has_immutable_search_space_and_opt_config)\nself.assertEqual(list(modelbridge.transforms.keys()), ['Cast',\n    'transform_1', 'transform_2'])\nfit_args = mock_fit.mock_calls[0][2]\nself.assertTrue(fit_args['search_space'] == get_search_space_for_value(8.0))\nself.assertTrue(fit_args['observation_features'] == [])\nself.assertTrue(fit_args['observation_data'] == [])\nself.assertTrue(mock_observations_from_data.called)\nmodelbridge._predict = mock.MagicMock(\n    'ax.modelbridge.base.ModelBridge._predict', autospec=True, side_effect=\n    ValueError('Out of Design'))\nwith mock.patch.object(ModelBridge, 'model_space', return_value=\n    get_search_space_for_range_values):\n    with self.assertRaises(ValueError):\n        modelbridge.predict([get_observation2().features])\nwith self.assertRaises(ValueError):\n    modelbridge.predict([get_observation_status_quo0().features])\nwith mock.patch.object(ModelBridge, 'get_training_data', return_value=[\n    get_observation_status_quo0()]):\n    self.assertEqual(modelbridge.predict([get_observation_status_quo0().\n        features]), unwrap_observation_data([get_observation_status_quo0().\n        data]))\nmodelbridge._predict = mock.MagicMock(\n    'ax.modelbridge.base.ModelBridge._predict', autospec=True, return_value\n    =[get_observation2trans().data])\nmodelbridge.predict([get_observation2().features])\nmodelbridge._predict.assert_called_with([get_observation2().features])\nmodelbridge._single_predict([get_observation2().features])\nmodelbridge._predict.assert_called_with([get_observation2().features])\nmodelbridge._gen = mock.MagicMock('ax.modelbridge.base.ModelBridge._gen',\n    autospec=True, return_value=([get_observation1trans().features], [2],\n    None, {}))\noc = OptimizationConfig(objective=Objective(metric=Metric(name='test_metric')))\nmodelbridge._set_kwargs_to_save(model_key='TestModel', model_kwargs={},\n    bridge_kwargs={})\ngr = modelbridge.gen(n=1, search_space=get_search_space_for_value(),\n    optimization_config=oc, pending_observations={'a': [get_observation2().\n    features]}, fixed_features=ObservationFeatures({'x': 5}))\nself.assertEqual(gr._model_key, 'TestModel')\nmodelbridge._gen.assert_called_with(n=1, search_space=SearchSpace([\n    FixedParameter('x', ParameterType.FLOAT, 8.0)]), optimization_config=oc,\n    pending_observations={'a': [get_observation2trans().features]},\n    fixed_features=ObservationFeatures({'x': 36}), model_gen_options=None)\nmock_gen_arms.assert_called_with(arms_by_signature={}, observation_features\n    =[get_observation1().features])\nmodelbridge.gen(n=1, search_space=get_search_space_for_value(),\n    optimization_config=None)\nmodelbridge._gen.assert_called_with(n=1, search_space=SearchSpace([\n    FixedParameter('x', ParameterType.FLOAT, 8.0)]), optimization_config=\n    None, pending_observations={}, fixed_features=ObservationFeatures({}),\n    model_gen_options=None)\noc2 = OptimizationConfig(objective=ScalarizedObjective(metrics=[Metric(name\n    ='test_metric'), Metric(name='test_metric_2')]))\nmodelbridge.gen(n=1, search_space=get_search_space_for_value(),\n    optimization_config=oc2)\nmodelbridge._gen.assert_called_with(n=1, search_space=SearchSpace([\n    FixedParameter('x', ParameterType.FLOAT, 8.0)]), optimization_config=\n    oc2, pending_observations={}, fixed_features=ObservationFeatures({}),\n    model_gen_options=None)\nmodelbridge._cross_validate = mock.MagicMock(\n    'ax.modelbridge.base.ModelBridge._cross_validate', autospec=True,\n    return_value=[get_observation1trans().data])\ncv_training_data = [get_observation2()]\ncv_test_points = [get_observation1().features]\ncv_predictions = modelbridge.cross_validate(cv_training_data=\n    cv_training_data, cv_test_points=cv_test_points)\nmodelbridge._cross_validate.assert_called_with(obs_feats=[\n    get_observation2trans().features], obs_data=[get_observation2trans().\n    data], cv_test_points=[get_observation1().features])\nself.assertTrue(cv_predictions == [get_observation1().data])\nobs = modelbridge.get_training_data()\nself.assertTrue(obs == [get_observation1(), get_observation2()])\nself.assertEqual(modelbridge.metric_names, {'a', 'b'})\nself.assertIsNone(modelbridge.status_quo)\nself.assertTrue(modelbridge.model_space == get_search_space_for_value())\nself.assertEqual(modelbridge.training_in_design, [False, False])\nwith self.assertRaises(ValueError):\n    modelbridge.training_in_design = [True, True, False]\nwith self.assertRaises(ValueError):\n    modelbridge.training_in_design = [True, True, False]\nwith self.assertRaises(NotImplementedError):\n    modelbridge.feature_importances('a')\nwith mock.patch(\n    'ax.modelbridge.base.ModelBridge._transform_observation_features',\n    autospec=True) as mock_tr:\n    modelbridge.transform_observation_features([get_observation2().features])\nmock_tr.assert_called_with(modelbridge, [get_observation2trans().features])\nmock.patch('ax.modelbridge.base.observations_from_data', autospec=True,\n    return_value=[get_observation1(), get_observation2()])mock.patch('ax.modelbridge.base.gen_arms', autospec=True, return_value=([\n    Arm(parameters={})], None))mock.patch('ax.modelbridge.base.ModelBridge._fit', autospec=True)"
}