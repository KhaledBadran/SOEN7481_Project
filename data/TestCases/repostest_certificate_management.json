{
    "functionName": "test_certificate_management",
    "className": "TestPibImpl",
    "fileName": "/named-data_&_PyNDN2/tests_&_integration_tests_&_test_pib_impl.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "for fixture in self.pibImpls:\n    pib = fixture.pib\n    try:\n        pib.getDefaultCertificateOfKey(fixture.id1Key1Name)\n        self.fail('Did not throw the expected exception')\n    except Pib.Error:\n        pass\n    else:\n        self.fail('Did not throw the expected exception')\n    self.assertEqual(False, pib.hasCertificate(fixture.id1Key1Cert1.getName()))\n    self.assertEqual(False, pib.hasIdentity(fixture.id1))\n    self.assertEqual(False, pib.hasKey(fixture.id1Key1Name))\n    pib.addCertificate(fixture.id1Key1Cert1)\n    self.assertEqual(True, pib.hasCertificate(fixture.id1Key1Cert1.getName()))\n    self.assertEqual(True, pib.hasIdentity(fixture.id1))\n    self.assertEqual(True, pib.hasKey(fixture.id1Key1Name))\n    self.assertTrue(pib.getCertificate(fixture.id1Key1Cert1.getName()).\n        wireEncode().equals(fixture.id1Key1Cert1.wireEncode()))\n    try:\n        pib.getDefaultCertificateOfKey(fixture.id1Key1Name)\n    except Exception as ex:\n        self.fail('Unexpected exception: ' + str(ex))\n    self.assertTrue(fixture.id1Key1Cert1.wireEncode().equals(pib.\n        getDefaultCertificateOfKey(fixture.id1Key1Name).wireEncode()))\n    pib.addCertificate(fixture.id1Key1Cert2)\n    self.assertEqual(True, pib.hasCertificate(fixture.id1Key1Cert2.getName()))\n    self.assertTrue(fixture.id1Key1Cert1.wireEncode().equals(pib.\n        getDefaultCertificateOfKey(fixture.id1Key1Name).wireEncode()))\n    pib.setDefaultCertificateOfKey(fixture.id1Key1Name, fixture.\n        id1Key1Cert2.getName())\n    self.assertTrue(fixture.id1Key1Cert2.wireEncode().equals(pib.\n        getDefaultCertificateOfKey(fixture.id1Key1Name).wireEncode()))\n    try:\n        pib.setDefaultCertificateOfKey(fixture.id1Key1Name, Name(\n            '/non-existing'))\n        self.fail('Did not throw the expected exception')\n    except Pib.Error:\n        pass\n    else:\n        self.fail('Did not throw the expected exception')\n    pib.removeCertificate(fixture.id1Key1Cert2.getName())\n    self.assertEqual(False, pib.hasCertificate(fixture.id1Key1Cert2.getName()))\n    try:\n        pib.getCertificate(fixture.id1Key1Cert2.getName())\n        self.fail('Did not throw the expected exception')\n    except Pib.Error:\n        pass\n    else:\n        self.fail('Did not throw the expected exception')\n    try:\n        pib.getDefaultCertificateOfKey(fixture.id1Key1Name)\n        self.fail('Did not throw the expected exception')\n    except Pib.Error:\n        pass\n    else:\n        self.fail('Did not throw the expected exception')\n    pib.addCertificate(fixture.id1Key1Cert2)\n    try:\n        pib.getCertificate(fixture.id1Key1Cert1.getName())\n    except Exception as ex:\n        self.fail('Unexpected exception: ' + str(ex))\n    self.assertTrue(fixture.id1Key1Cert2.wireEncode().equals(pib.\n        getDefaultCertificateOfKey(fixture.id1Key1Name).wireEncode()))\n    certNames = pib.getCertificatesOfKey(fixture.id1Key1Name)\n    self.assertEqual(2, len(certNames))\n    self.assertTrue(fixture.id1Key1Cert1.getName() in certNames)\n    self.assertTrue(fixture.id1Key1Cert2.getName() in certNames)\n    pib.removeKey(fixture.id1Key1Name)\n    certNames = pib.getCertificatesOfKey(fixture.id1Key1Name)\n    self.assertEqual(0, len(certNames))\n"
}