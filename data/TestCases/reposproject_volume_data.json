{
    "functionName": "project_volume_data",
    "className": null,
    "fileName": "/nipy_&_PySurfer/surfer_&_io.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"Sample MRI volume onto cortical manifold.\n\n    Note: this requires Freesurfer to be installed with correct\n    SUBJECTS_DIR definition (it uses mri_vol2surf internally).\n\n    Parameters\n    ----------\n    filepath : string\n        Volume file to resample (equivalent to --mov)\n    hemi : [lh, rh]\n        Hemisphere target\n    reg_file : string\n        Path to TKreg style affine matrix file\n    subject_id : string\n        Use if file is in register with subject's orig.mgz\n    projmeth : [frac, dist]\n        Projection arg should be understood as fraction of cortical\n        thickness or as an absolute distance (in mm)\n    projsum : [avg, max, point]\n        Average over projection samples, take max, or take point sample\n    projarg : single float or sequence of three floats\n        Single float for point sample, sequence for avg/max specifying\n        start, stop, and step\n    surf : string\n        Target surface\n    smooth_fwhm : float\n        FWHM of surface-based smoothing to apply; 0 skips smoothing\n    mask_label : string\n        Path to label file to constrain projection; otherwise uses cortex\n    target_subject : string\n        Subject to warp data to in surface space after projection\n    verbose : bool, str, int, or None\n        If not None, override default verbose level (see surfer.verbose).\n    \"\"\"\nfs_home = os.getenv('FREESURFER_HOME')\nif fs_home is None:\n    raise RuntimeError(\n        'FreeSurfer environment not defined. Define the FREESURFER_HOME environment variable.'\n        )\nbin_path = os.path.join(fs_home, 'bin')\nif bin_path not in os.getenv('PATH', ''):\n    raise RuntimeError(\n        'Freesurfer bin path \"%s\" not found, be sure to source the Freesurfer setup script'\n         % bin_path)\nif sys.platform == 'darwin':\n    env = copy.deepcopy(os.environ)\n    ld_path = os.path.join(fs_home, 'lib', 'gcc', 'lib')\n    if 'DYLD_LIBRARY_PATH' not in env:\n        env['DYLD_LIBRARY_PATH'] = ld_path\n    else:\n        env['DYLD_LIBRARY_PATH'] = ld_path + ':' + env['DYLD_LIBRARY_PATH']\nelse:\n    env = os.environ\ncmd_list = ['mri_vol2surf', '--mov', os.path.abspath(filepath), '--hemi',\n    hemi, '--surf', surf]\nif reg_file is not None:\n    cmd_list.extend(['--reg', reg_file])\nelif subject_id is not None:\n    cmd_list.extend(['--regheader', subject_id])\nelse:\n    raise ValueError('Must specify reg_file or subject_id')\nproj_flag = '--proj' + projmeth\nif projsum != 'point':\n    proj_flag += '-'\n    proj_flag += projsum\nif hasattr(projarg, '__iter__'):\n    proj_arg = list(map(str, projarg))\nelse:\n    proj_arg = [str(projarg)]\ncmd_list.extend([proj_flag] + proj_arg)\nif smooth_fwhm:\n    cmd_list.extend(['--surf-fwhm', str(smooth_fwhm)])\nif mask_label is not None:\n    cmd_list.extend(['--mask', mask_label])\nif target_subject is not None:\n    cmd_list.extend(['--trgsubject', target_subject])\nout_file = mktemp(prefix='pysurfer-v2s', suffix='.mgz')\ncmd_list.extend(['--o', out_file])\nlogger.debug(' '.join(cmd_list))\np = Popen(cmd_list, stdout=PIPE, stderr=PIPE, env=env)\nstdout, stderr = p.communicate()\nout = p.returncode\nif out:\n    raise RuntimeError('mri_vol2surf command failed with output: \\n\\n{}'.\n        format(stderr))\nsurf_data = read_scalar_data(out_file)\nos.remove(out_file)\nreturn surf_data\nverbose"
}