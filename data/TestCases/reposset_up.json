{
    "functionName": "set_up",
    "className": null,
    "fileName": "/LSSTDESC_&_CCL/benchmarks_&_test_cls.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "t0 = time.time()\nnztyp = request.param\ndirdat = os.path.dirname(__file__) + '/data/'\ncosmo = ccl.Cosmology(Omega_c=0.3, Omega_b=0.0, Omega_g=0, Omega_k=0, h=0.7,\n    sigma8=0.8, n_s=0.96, Neff=0, m_nu=0.0, w0=-1, wa=0, T_CMB=2.7,\n    transfer_function='bbks', mass_function='tinker', matter_power_spectrum\n    ='linear')\ncosmo.cosmo.gsl_params.INTEGRATION_LIMBER_EPSREL = 0.0001\ncosmo.cosmo.gsl_params.INTEGRATION_EPSREL = 0.0001\nnls = 541\nells = np.zeros(nls)\nells[:50] = np.arange(50) + 2\nells[50:] = ells[49] + 6 * (np.arange(nls - 50) + 1)\nfl_one = np.ones(nls)\nfl_dl = (ells + 0.5) ** 2 / np.sqrt((ells + 2.0) * (ells + 1.0) * ells * (\n    ells - 1.0))\nfl_ll = fl_dl ** 2\nfl_lc = ells * (ells + 1) / np.sqrt((ells + 2.0) * (ells + 1.0) * ells * (\n    ells - 1.0))\nfl_li = 2 * fl_dl\nlfacs = {'ells': ells, 'fl_one': fl_one, 'fl_dl': fl_dl, 'fl_ll': fl_ll,\n    'fl_lc': fl_lc, 'fl_li': fl_li}\nif nztyp == 'analytic':\n    zmean_1 = 1.0\n    sigz_1 = 0.15\n    zmean_2 = 1.5\n    sigz_2 = 0.15\n    z1, tmp_a1 = np.loadtxt(dirdat + 'ia_amp_analytic_1.txt', unpack=True)\n    z2, tmp_a2 = np.loadtxt(dirdat + 'ia_amp_analytic_2.txt', unpack=True)\n    pz1 = np.exp(-0.5 * ((z1 - zmean_1) / sigz_1) ** 2)\n    pz2 = np.exp(-0.5 * ((z2 - zmean_2) / sigz_2) ** 2)\nelif nztyp == 'histo':\n    z1, pz1 = np.loadtxt(dirdat + 'bin1_histo.txt', unpack=True)[:, 1:]\n    _, tmp_a1 = np.loadtxt(dirdat + 'ia_amp_histo_1.txt', unpack=True)\n    z2, pz2 = np.loadtxt(dirdat + 'bin2_histo.txt', unpack=True)[:, 1:]\n    _, tmp_a2 = np.loadtxt(dirdat + 'ia_amp_histo_2.txt', unpack=True)\nelse:\n    raise ValueError('Wrong Nz type ' + nztyp)\nbz = np.ones_like(pz1)\nD1 = ccl.growth_factor(cosmo, 1.0 / (1 + z1))\nD2 = ccl.growth_factor(cosmo, 1.0 / (1 + z2))\nrho_m = ccl.physical_constants.RHO_CRITICAL * cosmo['Omega_m']\na1 = -tmp_a1 * D1 / (5e-14 * rho_m)\na2 = -tmp_a2 * D2 / (5e-14 * rho_m)\ntrc = {}\ntrc['g1'] = ccl.NumberCountsTracer(cosmo, False, (z1, pz1), (z2, bz))\ntrc['g2'] = ccl.NumberCountsTracer(cosmo, False, (z2, pz2), (z2, bz))\ntrc['l1'] = ccl.WeakLensingTracer(cosmo, (z1, pz1))\ntrc['l2'] = ccl.WeakLensingTracer(cosmo, (z2, pz2))\ntrc['i1'] = ccl.WeakLensingTracer(cosmo, (z1, pz1), has_shear=False,\n    ia_bias=(z1, a1))\ntrc['i2'] = ccl.WeakLensingTracer(cosmo, (z2, pz2), has_shear=False,\n    ia_bias=(z2, a2))\ntrc['ct'] = ccl.CMBLensingTracer(cosmo, 1100.0)\ndef read_bm(fname):\n    _, cl = np.loadtxt(fname, unpack=True)\n    return cl[ells.astype('int')]\npre = dirdat + 'run_'\npost = nztyp + '_log_cl_'\nbms = {}\nbms['dd_11'] = read_bm(pre + 'b1b1' + post + 'dd.txt')\nbms['dd_12'] = read_bm(pre + 'b1b2' + post + 'dd.txt')\nbms['dd_22'] = read_bm(pre + 'b2b2' + post + 'dd.txt')\nbms['dl_11'] = read_bm(pre + 'b1b1' + post + 'dl.txt')\nbms['dl_12'] = read_bm(pre + 'b1b2' + post + 'dl.txt')\nbms['dl_21'] = read_bm(pre + 'b2b1' + post + 'dl.txt')\nbms['dl_22'] = read_bm(pre + 'b2b2' + post + 'dl.txt')\nbms['di_11'] = read_bm(pre + 'b1b1' + post + 'di.txt')\nbms['di_12'] = read_bm(pre + 'b1b2' + post + 'di.txt')\nbms['di_21'] = read_bm(pre + 'b2b1' + post + 'di.txt')\nbms['di_22'] = read_bm(pre + 'b2b2' + post + 'di.txt')\nbms['dc_1'] = read_bm(pre + 'b1b1' + post + 'dc.txt')\nbms['dc_2'] = read_bm(pre + 'b2b2' + post + 'dc.txt')\nbms['ll_11'] = read_bm(pre + 'b1b1' + post + 'll.txt')\nbms['ll_12'] = read_bm(pre + 'b1b2' + post + 'll.txt')\nbms['ll_22'] = read_bm(pre + 'b2b2' + post + 'll.txt')\nbms['li_11'] = read_bm(pre + 'b1b1' + post + 'li.txt')\nbms['li_22'] = read_bm(pre + 'b2b2' + post + 'li.txt')\nbms['lc_1'] = read_bm(pre + 'b1b1' + post + 'lc.txt')\nbms['lc_2'] = read_bm(pre + 'b2b2' + post + 'lc.txt')\nbms['ii_11'] = read_bm(pre + 'b1b1' + post + 'ii.txt')\nbms['ii_12'] = read_bm(pre + 'b1b2' + post + 'ii.txt')\nbms['ii_22'] = read_bm(pre + 'b2b2' + post + 'ii.txt')\nbms['cc'] = read_bm(pre + 'log_cl_cc.txt')\nprint('init and i/o time:', time.time() - t0)\nreturn cosmo, trc, lfacs, bms\npytest.fixture(scope='module', params=['analytic', 'histo'])"
}