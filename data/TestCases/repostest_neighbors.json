{
    "functionName": "test_neighbors",
    "className": "TestCluster",
    "fileName": "/nishaq503_&_CHESS/tests_&_test_cluster.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "for dataset in [datasets.spiral_2d, datasets.tori, datasets.skewer,\n    datasets.random, datasets.line, datasets.xor]:\n    data, labels = dataset()\n    manifold = Manifold(data, 'euclidean')\n    manifold.build(criterion.MaxDepth(8))\n    for depth, graph in enumerate(manifold.graphs):\n        for cluster in graph:\n            potential_neighbors = [c for c in graph if c.name != cluster.name]\n            if len(potential_neighbors) == 0:\n                continue\n            elif len(potential_neighbors) == 1:\n                centers = np.expand_dims(potential_neighbors[0].medoid, axis=0)\n            else:\n                centers = np.stack([c.medoid for c in potential_neighbors])\n            distances = list(cluster.distance(centers))\n            radii = [(cluster.radius + c.radius) for c in potential_neighbors]\n            potential_neighbors = {c for c, d, r in zip(potential_neighbors,\n                distances, radii) if d <= r}\n            if potential_neighbors - set(cluster.neighbors.keys()) or set(\n                cluster.neighbors.keys()) - potential_neighbors:\n                print(depth, cluster.name, 'truth:', [n.name for n in\n                    potential_neighbors])\n                print(depth, cluster.name, 'missed:', [n.name for n in \n                    potential_neighbors - set(cluster.neighbors.keys())])\n                print(depth, cluster.name, 'extra:', [n.name for n in set(\n                    cluster.neighbors.keys()) - potential_neighbors])\n            self.assertFalse(cluster.neighbors.keys() - potential_neighbors)\n            self.assertFalse(potential_neighbors - cluster.neighbors.keys())\nreturn\n"
}