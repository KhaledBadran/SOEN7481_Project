{
    "functionName": "test_get_response_read",
    "className": "TestResponseMessage",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_core_&_messages_&_test_messages.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "self.stream = BytearrayStream(self.get)\nresponse_message = messages.ResponseMessage()\nresponse_message.read(self.stream)\nresponse_header = response_message.response_header\nself.assertIsInstance(response_header, messages.ResponseHeader, self.msg.\n    format('response header', 'type', messages.ResponseHeader, type(\n    response_header)))\nprotocol_version = response_header.protocol_version\nself.assertIsInstance(protocol_version, contents.ProtocolVersion, self.msg.\n    format('response header', 'value', contents.ProtocolVersion, type(\n    protocol_version)))\nprotocol_version_major = protocol_version.major\nexp_type = int\nrcv_type = type(protocol_version_major)\nself.assertIsInstance(protocol_version_major, exp_type, self.msg.format(\n    'protocol version major', 'type', exp_type, rcv_type))\nself.assertEqual(1, protocol_version_major, self.msg.format(\n    'protocol version major', 'value', 1, protocol_version_major))\nprotocol_version_minor = protocol_version.minor\nexp_type = int\nrcv_type = type(protocol_version_minor)\nself.assertIsInstance(protocol_version_minor, exp_type, self.msg.format(\n    'protocol version minor', 'type', exp_type, rcv_type))\nself.assertEqual(1, protocol_version_minor, self.msg.format(\n    'protocol version minor', 'value', 1, protocol_version_minor))\ntime_stamp = response_header.time_stamp\nvalue = 1335514343\nself.assertIsInstance(time_stamp, contents.TimeStamp, self.msg.format(\n    'time stamp', 'value', contents.TimeStamp, type(time_stamp)))\nself.assertEqual(time_stamp.value, value, self.msg.format('time stamp',\n    'value', time_stamp.value, value))\nbatch_count = response_header.batch_count\nself.assertIsInstance(batch_count, contents.BatchCount, self.msg.format(\n    'batch count', 'type', contents.BatchCount, type(batch_count)))\nself.assertEqual(1, batch_count.value, self.msg.format('batch count',\n    'value', 1, batch_count.value))\nbatch_items = response_message.batch_items\nself.assertIsInstance(batch_items, list, self.msg.format('batch items',\n    'type', list, type(batch_items)))\nfor batch_item in batch_items:\n    self.assertIsInstance(batch_item, messages.ResponseBatchItem, self.msg.\n        format('batch item', 'type', messages.ResponseBatchItem, type(\n        batch_item)))\n    operation = batch_item.operation\n    self.assertIsInstance(operation, contents.Operation, self.msg.format(\n        'operation', 'type', contents.Operation, type(operation)))\n    self.assertEqual(enums.Operation.GET, operation.value, self.msg.format(\n        'operation', 'value', enums.Operation.GET, operation.value))\n    result_status = batch_item.result_status\n    self.assertIsInstance(result_status, contents.ResultStatus, self.msg.\n        format('result status', 'type', contents.ResultStatus, type(\n        result_status)))\n    self.assertEqual(enums.ResultStatus.SUCCESS, result_status.value, self.\n        msg.format('result status', 'value', enums.ResultStatus.SUCCESS,\n        result_status.value))\n    response_payload = batch_item.response_payload\n    exp_type = payloads.GetResponsePayload\n    rcv_type = type(response_payload)\n    self.assertIsInstance(response_payload, exp_type, self.msg.format(\n        'response payload', 'type', exp_type, rcv_type))\n    self.assertEqual(enums.ObjectType.SYMMETRIC_KEY, response_payload.\n        object_type)\n    self.assertEqual('49a1ca88-6bea-4fb2-b450-7e58802c3038',\n        response_payload.unique_identifier)\n    secret = response_payload.secret\n    self.assertIsInstance(secret, SymmetricKey, self.msg.format('secret',\n        'type', SymmetricKey, type(secret)))\n    key_block = secret.key_block\n    self.assertIsInstance(key_block, objects.KeyBlock, self.msg.format(\n        'key_block', 'type', objects.KeyBlock, type(key_block)))\n    key_format_type = key_block.key_format_type\n    exp_type = KeyFormatType\n    rcv_type = type(key_format_type)\n    self.assertIsInstance(key_format_type, exp_type, self.msg.format(\n        'key_format_type', 'type', exp_type, rcv_type))\n    key_value = key_block.key_value\n    self.assertIsInstance(key_value, objects.KeyValue, self.msg.format(\n        'key_value', 'type', objects.KeyValue, type(key_value)))\n    key_material = key_value.key_material\n    value = b'sgW\\x80Q\\x01*m\\x13J\\x85^%\\xc8\\xcd^L\\xa11EW)\\xd3\\xc8'\n    self.assertIsInstance(key_material, objects.KeyMaterial, self.msg.\n        format('key_material', 'type', objects.KeyMaterial, type(key_material))\n        )\n    exp = utils.hexlify_bytearray(value)\n    obs = utils.hexlify_bytearray(key_material.value)\n    self.assertEqual(exp, obs, self.msg.format('key_material', 'value', exp,\n        obs))\n    cryptographic_algorithm = key_block.cryptographic_algorithm\n    exp_type = attr.CryptographicAlgorithm\n    rcv_type = type(cryptographic_algorithm)\n    self.assertIsInstance(cryptographic_algorithm, exp_type, self.msg.\n        format('cryptographic_algorithm', 'type', exp_type, rcv_type))\n    exp = enums.CryptographicAlgorithm.TRIPLE_DES\n    obs = cryptographic_algorithm.value\n    self.assertEqual(exp, obs, self.msg.format('cryptographic_algorithm',\n        'value', exp, obs))\n    cryptographic_length = key_block.cryptographic_length\n    self.assertIsInstance(cryptographic_length, attr.CryptographicLength,\n        self.msg.format('cryptographic_length', 'type', attr.\n        CryptographicLength, type(cryptographic_length)))\n    exp = 168\n    obs = cryptographic_length.value\n    self.assertEqual(exp, obs, self.msg.format('cryptographic_length',\n        'value', exp, obs))\n"
}