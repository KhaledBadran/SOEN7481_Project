{
    "functionName": "test_validate_interests_but_bypass_for_data",
    "className": "TestValidatorInterestOnly",
    "fileName": "/named-data_&_PyNDN2/tests_&_integration_tests_&_test_validator.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "interest = Interest(Name('/Security/V2/ValidatorFixture/Sub1/Sub2/Interest'))\ndata = Data(Name('/Security/V2/ValidatorFixture/Sub1/Sub2/Interest'))\nself.validateExpectFailure(interest, 'Unsigned')\nself.validateExpectSuccess(data,\n    'The policy requests to bypass validation for all data')\nself.assertEqual(0, len(self._fixture._face._sentInterests))\nself._fixture._face._sentInterests = []\ninterest = Interest(Name('/Security/V2/ValidatorFixture/Sub1/Sub2/Interest'))\nself._fixture._keyChain.sign(interest, SigningInfo(SigningInfo.SignerType.\n    SHA256))\nself._fixture._keyChain.sign(data, SigningInfo(SigningInfo.SignerType.SHA256))\nself.validateExpectFailure(interest,\n    'Required KeyLocator/Name is missing (not passed to the policy)')\nself.validateExpectSuccess(data,\n    'The policy requests to bypass validation for all data')\nself.assertEqual(0, len(self._fixture._face._sentInterests))\nself._fixture._face._sentInterests = []\ninterest = Interest(Name('/Security/V2/ValidatorFixture/Sub1/Sub2/Interest'))\nself._fixture._keyChain.sign(interest, SigningInfo(self._fixture._identity))\nself._fixture._keyChain.sign(data, SigningInfo(self._fixture._identity))\nself.validateExpectSuccess(interest,\n    'Should be successful since it is signed by the anchor')\nself.validateExpectSuccess(data,\n    'The policy requests to bypass validation for all data')\nself.assertEqual(0, len(self._fixture._face._sentInterests))\nself._fixture._face._sentInterests = []\ninterest = Interest(Name('/Security/V2/ValidatorFixture/Sub1/Sub2/Interest'))\nself._fixture._keyChain.sign(interest, SigningInfo(self._fixture._subIdentity))\nself._fixture._keyChain.sign(data, SigningInfo(self._fixture._subIdentity))\nself.validateExpectFailure(interest,\n    'Should fail since the policy is not allowed to create new trust anchors')\nself.validateExpectSuccess(data,\n    'The policy requests to bypass validation for all data')\nself.assertEqual(1, len(self._fixture._face._sentInterests))\nself._fixture._face._sentInterests = []\ninterest = Interest(Name('/Security/V2/ValidatorFixture/Sub1/Sub2/Interest'))\nself._fixture._keyChain.sign(interest, SigningInfo(self._fixture.\n    _otherIdentity))\nself._fixture._keyChain.sign(data, SigningInfo(self._fixture._otherIdentity))\nself.validateExpectFailure(interest,\n    'Should fail since it is signed by a policy-violating certificate')\nself.validateExpectSuccess(data,\n    'The policy requests to bypass validation for all data')\nself.assertEqual(0, len(self._fixture._face._sentInterests))\nself._fixture._face._sentInterests = []\nself._fixture._validator._setCacheNowOffsetMilliseconds(2 * 3600 * 1000.0)\ninterest = Interest(Name('/Security/V2/ValidatorFixture/Sub1/Sub2/Interest'))\nself._fixture._keyChain.sign(interest, SigningInfo(self._fixture.\n    _subSelfSignedIdentity))\nself._fixture._keyChain.sign(data, SigningInfo(self._fixture.\n    _subSelfSignedIdentity))\nself.validateExpectFailure(interest,\n    'Should fail since the policy is not allowed to create new trust anchors')\nself.validateExpectSuccess(data,\n    'The policy requests to bypass validation for all data')\nself.assertEqual(1, len(self._fixture._face._sentInterests))\nself._fixture._face._sentInterests = []\n"
}