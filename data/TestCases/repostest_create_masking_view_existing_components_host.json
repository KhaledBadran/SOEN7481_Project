{
    "functionName": "test_create_masking_view_existing_components_host",
    "className": "CITestProvisioning",
    "fileName": "/MichaelMcAleer_&_PyU4V/PyU4V_&_tests_&_ci_tests_&_test_pyu4v_ci_provisioning.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"Test create_masking_view_existing_components with host.\"\"\"\nmasking_view_name = self.generate_name('masking_view')\nport_group_name, _ = self.create_port_group()\nhost_name = self.create_empty_host()\nstorage_group_name = self.create_empty_storage_group()\nvolume_name = self.generate_name()\ndevice = self.conn.provisioning.create_volume_from_storage_group_return_id(\n    volume_name, storage_group_name, 1)\ntime.sleep(10)\nself.addCleanup(self.delete_volume, storage_group_name, device)\nmasking_view_details = (self.conn.provisioning.\n    create_masking_view_existing_components(port_group_name,\n    masking_view_name, storage_group_name, host_name))\nself.addCleanup(self.delete_masking_view, masking_view_name)\nmasking_view_list = self.provisioning.get_masking_view_list()\nself.assertIn(masking_view_name, masking_view_list)\nself.assertIn(constants.MASKING_VIEW_ID, masking_view_details)\nself.assertIn(constants.HOST_ID, masking_view_details)\nself.assertIn(constants.PORT_GROUP_ID, masking_view_details)\nself.assertIn(constants.STORAGE_GROUP_ID_CAMEL, masking_view_details)\nmasking_view_id = masking_view_details[constants.MASKING_VIEW_ID]\nhost_id = masking_view_details[constants.HOST_ID]\nport_group_id = masking_view_details[constants.PORT_GROUP_ID]\nstorage_group_id = masking_view_details[constants.STORAGE_GROUP_ID_CAMEL]\nself.assertIsInstance(masking_view_id, str)\nself.assertIsInstance(host_id, str)\nself.assertIsInstance(port_group_id, str)\nself.assertIsInstance(storage_group_id, str)\nself.assertEqual(masking_view_name, masking_view_id)\nself.assertEqual(host_name, host_id)\nself.assertEqual(port_group_name, port_group_id)\nself.assertEqual(storage_group_name, storage_group_id)\n"
}