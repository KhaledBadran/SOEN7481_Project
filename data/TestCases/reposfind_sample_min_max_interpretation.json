{
    "functionName": "find_sample_min_max_interpretation",
    "className": null,
    "fileName": "/PmagPy_&_PmagPy/dialogs_&_thellier_consistency_test.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "tmp_Intensities = {}\nAcceptable_sample_min, Acceptable_sample_max = '', ''\nfor this_specimen in list(Intensities.keys()):\n    B_list = copy.deepcopy(Intensities[this_specimen])\n    if len(B_list) > 0:\n        B_list.sort()\n        tmp_Intensities[this_specimen] = B_list\nwhile len(list(tmp_Intensities.keys())) >= float(acceptance_criteria[\n    'sample_int_n']):\n    B_tmp = []\n    B_tmp_min = 10000000000.0\n    for sample in list(tmp_Intensities.keys()):\n        B_tmp.append(min(tmp_Intensities[sample]))\n        if min(tmp_Intensities[sample]) < B_tmp_min:\n            sample_to_remove = sample\n            B_tmp_min = min(tmp_Intensities[sample])\n    if std(B_tmp, ddof=1) <= acceptance_criteria['sample_int_sigma_uT'\n        ] or 100 * (std(B_tmp, ddof=1) / mean(B_tmp)) <= acceptance_criteria[\n        'sample_int_sigma_perc']:\n        Acceptable_sample_min = mean(B_tmp)\n        break\n    else:\n        tmp_Intensities[sample_to_remove].remove(B_tmp_min)\n        if len(tmp_Intensities[sample_to_remove]) == 0:\n            break\ntmp_Intensities = {}\nfor this_specimen in list(Intensities.keys()):\n    B_list = copy.deepcopy(Intensities[this_specimen])\n    if len(B_list) > 0:\n        B_list.sort()\n        tmp_Intensities[this_specimen] = B_list\ncounter = 0\nwhile len(list(tmp_Intensities.keys())) >= float(acceptance_criteria[\n    'sample_int_n']):\n    counter += 1\n    B_tmp = []\n    B_tmp_max = 0\n    for sample in list(tmp_Intensities.keys()):\n        B_tmp.append(max(tmp_Intensities[sample]))\n        if max(tmp_Intensities[sample]) > B_tmp_max:\n            sample_to_remove = sample\n            B_tmp_max = max(tmp_Intensities[sample])\n    if std(B_tmp, ddof=1) < acceptance_criteria['sample_int_sigma_uT'\n        ] or 100 * (std(B_tmp, ddof=1) / mean(B_tmp)) < acceptance_criteria[\n        'sample_int_sigma_perc']:\n        Acceptable_sample_max = mean(B_tmp)\n        break\n    else:\n        tmp_Intensities[sample_to_remove].remove(B_tmp_max)\n        if len(tmp_Intensities[sample_to_remove]) < 1:\n            break\nif Acceptable_sample_min == '' or Acceptable_sample_max == '':\n    return 0.0, 0.0\nreturn Acceptable_sample_min, Acceptable_sample_max\n"
}