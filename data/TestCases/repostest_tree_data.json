{
    "functionName": "test_tree_data",
    "className": null,
    "fileName": "/tharen_&_PyFVS/python_&_pyfvs_&_test_&_test_treedata.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "try:\n    f = fvs.FVS(variant)\nexcept ImportError:\n    pytest.skip('No variant library: {}'.format(variant))\n    return None\nexcept:\n    raise\nprint('**', kwd_path)\nf.init_projection(os.path.join(root, kwd_path))\nf.tree_data.live_tpa[:, :] = 0.0\nfor c in range(f.contrl_mod.ncyc):\n    r = f.grow_projection()\nr = f.end_projection()\nassert r == 0\nwidths = [4, 4, 6, 4, 5, 4, 4, 5, 6, 6, 6, 6, 6, 6, 6, 4, 5, 4, 4, 5, 8, 5,\n    6, 8, 4, 2, 1]\nfldnames = (\n    'year,age,tpa,baa,sdi,ccf,top_ht,qmd,total_cuft,merch_cuft,merch_bdft,rem_tpa,rem_total_cuft,rem_merch_cuft,rem_merch_bdft,res_baa,res_sdi,res_ccf,res_top_ht,resid_qmd,grow_years,annual_acc,annual_mort,mai_merch_cuft,for_type,size_class,stocking_class'\n    .split(','))\nsum_check = pd.read_fwf(os.path.join(root, sum_path), skiprows=0, widths=widths\n    )\nsum_check.columns = fldnames\nncyc = f.contrl_mod.ncyc\ntpa = np.round(np.sum(f.tree_data.live_tpa[:, :ncyc + 1], axis=0), 0).astype(\n    int)\ncheck_tpa = sum_check.loc[:, ('tpa')].values\nassert np.all(np.isclose(check_tpa, tpa, atol=1))\ntpa = f.tree_data.live_tpa[:, :ncyc + 1]\ndbh = f.tree_data.live_dbh[:, :ncyc + 1]\nbaa = tpa * dbh * dbh * 0.005454154\nbaa = np.round(np.sum(baa, axis=0), 0).astype(int)\ncheck_baa = sum_check.loc[:, ('baa')].values\nassert np.all(np.isclose(check_baa, baa, atol=1))\ntpa = f.tree_data.live_tpa[:, :ncyc + 1]\ncuft = f.tree_data.cuft_total[:, :ncyc + 1]\ntot_cuft = np.round(np.sum(tpa * cuft, axis=0), 0).astype(int)\ncheck_cuft = sum_check.loc[:, ('total_cuft')].values\nassert np.all(np.isclose(check_cuft, tot_cuft, atol=1))\ntpa = f.tree_data.live_tpa[:, :ncyc + 1]\nbdft = f.tree_data.bdft_net[:, :ncyc + 1]\ntot_bdft = np.round(np.sum(tpa * bdft, axis=0), 0).astype(int)\ncheck_bdft = sum_check.loc[:, ('merch_bdft')].values\nassert np.all(np.isclose(check_bdft, tot_bdft, atol=1))\npytest.mark.parametrize(('variant', 'kwd_path', 'sum_path'), bare_ground_params\n    )"
}