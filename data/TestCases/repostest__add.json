{
    "functionName": "test__add",
    "className": "TestElasticBuffer",
    "fileName": "/dkaslovsky_&_ElasticBatch/tests_&_test_buffer.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "class TestCase:\n\n    def __init__(self, documents, documents_timestamp, expected_buffer,\n        expected_oldest_doc_timestamp, expected_flush_called, buffer_size=\n        10, more_documents=None, more_documents_timestamp=None):\n        self.documents = documents\n        self.documents_timestamp = documents_timestamp\n        self.expected_buffer = expected_buffer\n        self.expected_oldest_doc_timestamp = expected_oldest_doc_timestamp\n        self.expected_flush_called = expected_flush_called\n        self.more_documents = [] if more_documents is None else more_documents\n        self.more_documents_timestamp = (None if more_documents_timestamp is\n            None else more_documents_timestamp)\n        self.eb = ElasticBuffer(size=buffer_size)\ntests = {'add empty list of records': TestCase(documents=[],\n    documents_timestamp=1234, expected_buffer=[],\n    expected_oldest_doc_timestamp=None, expected_flush_called=False),\n    'add single record in a list': TestCase(documents=[self.docs[0]],\n    documents_timestamp=1234, expected_buffer=[self.docs[0]],\n    expected_oldest_doc_timestamp=1234, expected_flush_called=False),\n    'add list of records below buffer size': TestCase(documents=self.docs,\n    documents_timestamp=1234, expected_buffer=self.docs,\n    expected_oldest_doc_timestamp=1234, expected_flush_called=False,\n    buffer_size=len(self.docs) + 1),\n    'add list of records equal to buffer size': TestCase(documents=self.\n    docs, documents_timestamp=1234, expected_buffer=self.docs,\n    expected_oldest_doc_timestamp=1234, expected_flush_called=False,\n    buffer_size=len(self.docs)),\n    'add list of records exceeding buffer size': TestCase(documents=self.\n    docs, documents_timestamp=1234, expected_buffer=[],\n    expected_oldest_doc_timestamp=None, expected_flush_called=True,\n    buffer_size=len(self.docs) - 1),\n    'add twice without exceeding buffer size': TestCase(documents=self.docs\n    [:-1], documents_timestamp=1234, more_documents=[self.docs[-1]],\n    more_documents_timestamp=1235, expected_buffer=self.docs,\n    expected_oldest_doc_timestamp=1234, expected_flush_called=False,\n    buffer_size=len(self.docs)),\n    'add twice with first add exceeding buffer size': TestCase(documents=\n    self.docs[:-1], documents_timestamp=1234, more_documents=[self.docs[-1]\n    ], more_documents_timestamp=1235, expected_buffer=[self.docs[-1]],\n    expected_oldest_doc_timestamp=1235, expected_flush_called=True,\n    buffer_size=len(self.docs) - 2),\n    'add twice with second add exceeding buffer size': TestCase(documents=\n    self.docs[:-1], documents_timestamp=1234, more_documents=[self.docs[-1]\n    ], more_documents_timestamp=1235, expected_buffer=[],\n    expected_oldest_doc_timestamp=None, expected_flush_called=True,\n    buffer_size=len(self.docs) - 1),\n    'add twice with both adds exceeding buffer size': TestCase(documents=\n    self.docs, documents_timestamp=1234, more_documents=self.docs,\n    more_documents_timestamp=1235, expected_buffer=[],\n    expected_oldest_doc_timestamp=None, expected_flush_called=True,\n    buffer_size=1)}\nfor test_name, test in tests.items():\n    mock_flush.reset_mock()\n    mock_flush.side_effect = test.eb._clear_buffer\n    test.eb._add(test.documents, timestamp=test.documents_timestamp)\n    if test.more_documents:\n        test.eb._add(test.more_documents, timestamp=test.\n            more_documents_timestamp)\n    self.assertListEqual(test.eb._buffer, test.expected_buffer, test_name)\n    self.assertEqual(test.eb._oldest_doc_timestamp, test.\n        expected_oldest_doc_timestamp, test_name)\n    if test.expected_flush_called:\n        mock_flush.assert_called()\n    else:\n        mock_flush.assert_not_called()\npatch.object(ElasticBuffer, 'flush')"
}