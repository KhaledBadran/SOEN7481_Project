{
    "functionName": "test_revoke_on_invalid_inputs",
    "className": "TestProxyKmipClient",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_pie_&_test_client.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that a TypeError exception is raised when trying to revoke a\n        secret with invalid inputs.\n        \"\"\"\nrevocation_reason = enums.RevocationReasonCode.KEY_COMPROMISE\nrevocation_reason_invalid = 'key compromise'\nuuid = 'aaaaaaaa-1111-2222-3333-ffffffffffff'\nuuid_invalid = 123\nrevocation_message = 'Key compromised!'\nrevocation_message_invalid = 123\ncompromise_occurrence_date = 1\ncompromise_occurrence_date_invalid = '1'\nargs = [revocation_reason_invalid, uuid, revocation_message,\n    compromise_occurrence_date]\nwith ProxyKmipClient() as client:\n    self.assertRaisesRegex(TypeError,\n        'revocation_reason must be a RevocationReasonCode enumeration',\n        client.revoke, *args)\nargs = [revocation_reason, uuid_invalid, revocation_message,\n    compromise_occurrence_date]\nwith ProxyKmipClient() as client:\n    self.assertRaisesRegex(TypeError, 'uid must be a string', client.revoke,\n        *args)\nargs = [revocation_reason, uuid, revocation_message_invalid,\n    compromise_occurrence_date]\nwith ProxyKmipClient() as client:\n    self.assertRaisesRegex(TypeError, 'revocation_message must be a string',\n        client.revoke, *args)\nargs = [revocation_reason, uuid, revocation_message,\n    compromise_occurrence_date_invalid]\nwith ProxyKmipClient() as client:\n    self.assertRaisesRegex(TypeError,\n        'compromise_occurrence_date must be an integer', client.revoke, *args)\nmock.patch('kmip.pie.client.KMIPProxy', mock.MagicMock(spec_set=KMIPProxy))"
}