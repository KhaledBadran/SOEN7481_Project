{
    "functionName": "test_encrypt_on_invalid_inputs",
    "className": "TestProxyKmipClient",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_pie_&_test_client.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that TypeError exception are raised when trying to encrypt with\n        invalid parameters.\n        \"\"\"\nclient = ProxyKmipClient()\nclient.open()\nclient.proxy.encrypt.return_value = {}\nargs = [None]\nkwargs = {'uid': '1', 'cryptographic_parameters': {}, 'iv_counter_nonce':\n    b'\\x00\\x00\\x00\\x00'}\nself.assertRaisesRegex(TypeError, 'data must be bytes', client.encrypt, *\n    args, **kwargs)\nargs = [b'\\x01\\x02\\x03\\x04']\nkwargs = {'uid': 1, 'cryptographic_parameters': {}, 'iv_counter_nonce':\n    b'\\x00\\x00\\x00\\x00'}\nself.assertRaisesRegex(TypeError, 'uid must be a string', client.encrypt, *\n    args, **kwargs)\nargs = [b'\\x01\\x02\\x03\\x04']\nkwargs = {'uid': '1', 'cryptographic_parameters': 'invalid',\n    'iv_counter_nonce': b'\\x00\\x00\\x00\\x00'}\nself.assertRaisesRegex(TypeError, 'cryptographic_parameters must be a dict',\n    client.encrypt, *args, **kwargs)\nargs = [b'\\x01\\x02\\x03\\x04']\nkwargs = {'uid': '1', 'cryptographic_parameters': {}, 'iv_counter_nonce': {}}\nself.assertRaisesRegex(TypeError, 'iv_counter_nonce must be bytes', client.\n    encrypt, *args, **kwargs)\nmock.patch('kmip.pie.client.KMIPProxy', mock.MagicMock(spec_set=KMIPProxy))"
}