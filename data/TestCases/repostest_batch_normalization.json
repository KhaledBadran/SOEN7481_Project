{
    "functionName": "test_batch_normalization",
    "className": "TestBatchNormalization",
    "fileName": "/intel-analytics_&_Bigdl/pyspark_&_test_&_bigdl_&_onnx_&_test_onnx_ops.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "input_shape = [1, 3, 224, 224]\noutput_shape = [1, 3, 224, 224]\nX = onnx.helper.make_tensor_value_info('X', onnx.TensorProto.FLOAT, input_shape\n    )\nscale = onnx.helper.make_tensor_value_info('scale', onnx.TensorProto.FLOAT,\n    input_shape[:2])\nbias = onnx.helper.make_tensor_value_info('bias', onnx.TensorProto.FLOAT,\n    input_shape[:2])\nmean = onnx.helper.make_tensor_value_info('mean', onnx.TensorProto.FLOAT,\n    input_shape[:2])\nvar = onnx.helper.make_tensor_value_info('var', onnx.TensorProto.FLOAT,\n    input_shape[:2])\nY = onnx.helper.make_tensor_value_info('Y', onnx.TensorProto.FLOAT,\n    output_shape)\nscale_vals = np.random.random(input_shape[1]) * 10\nbias_vals = np.random.random(input_shape[1]) * 10\nmean_vals = np.random.random(input_shape[1]) * 10\nvar_vals = np.random.random(input_shape[1]) * 10\ninput_x = np.random.random(input_shape) * 10\nepsilon = float(1e-05)\nmomentum = float(0.9)\ninit_scale = onnx.helper.make_tensor(name='scale', data_type=onnx.\n    TensorProto.FLOAT, dims=input_shape[:2], vals=scale_vals.tolist())\ninit_bias = onnx.helper.make_tensor(name='bias', data_type=onnx.TensorProto\n    .FLOAT, dims=input_shape[:2], vals=bias_vals.tolist())\ninit_mean = onnx.helper.make_tensor(name='mean', data_type=onnx.TensorProto\n    .FLOAT, dims=input_shape[:2], vals=mean_vals.tolist())\ninit_var = onnx.helper.make_tensor(name='var', data_type=onnx.TensorProto.\n    FLOAT, dims=input_shape[:2], vals=var_vals.tolist())\nbatch_norm_node = onnx.helper.make_node(op_type='BatchNormalization',\n    inputs=['X', 'scale', 'bias', 'mean', 'var'], outputs=['Y'], epsilon=\n    epsilon, momentum=momentum)\nonnx_graph = onnx.helper.make_graph(nodes=[batch_norm_node], name=\n    'test-batch_norm', inputs=[X], outputs=[Y], initializer=[init_scale,\n    init_bias, init_mean, init_var])\nonnx_model = onnx.helper.make_model(onnx_graph, producer_name='ONNX')\nonnx.checker.check_model(onnx_model)\nloaded_model = load_model_proto(onnx_model)\nbigdl_model = SpatialBatchNormalization(n_output=input_shape[1], eps=\n    epsilon, momentum=momentum, init_weight=scale_vals, init_bias=bias_vals,\n    init_grad_weight=None, init_grad_bias=None)\nbigdl_model.set_running_mean(mean_vals)\nbigdl_model.set_running_std(var_vals)\nloaded_out = loaded_model.forward(input_x)\nexpected_out = bigdl_model.forward(input_x)\nassert np.array_equal(loaded_out, expected_out)\n"
}