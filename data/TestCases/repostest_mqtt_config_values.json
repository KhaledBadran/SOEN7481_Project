{
    "functionName": "test_mqtt_config_values",
    "className": "FlaskMQTTTestCase",
    "fileName": "/MrLeeh_&_Flask-MQTT/tests_&_test_flaskmqtt.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "self.app.config['MQTT_USERNAME'] = 'username'\nself.app.config['MQTT_PASSWORD'] = 'password'\nself.app.config['MQTT_BROKER_URL'] = 'broker_url'\nself.app.config['MQTT_BROKER_PORT'] = 'broker_port'\nself.app.config['MQTT_TLS_ENABLED'] = 'tls_enabled'\nself.app.config['MQTT_CLEAN_SESSION'] = True\nself.app.config['MQTT_KEEPALIVE'] = 'keepalive'\nself.app.config['MQTT_LAST_WILL_TOPIC'] = 'home/lastwill'\nself.app.config['MQTT_LAST_WILL_MESSAGE'] = 'last will'\nself.app.config['MQTT_LAST_WILL_QOS'] = 2\nself.app.config['MQTT_LAST_WILL_RETAIN'] = True\nself.app.config['MQTT_TLS_CA_CERTS'] = 'tls_ca_certs'\nself.app.config['MQTT_TLS_CERTFILE'] = 'tls_certfile'\nself.app.config['MQTT_TLS_KEYFILE'] = 'tls_keyfile'\nself.app.config['MQTT_TLS_CERT_REQS'] = 'tls_cert_reqs'\nself.app.config['MQTT_TLS_VERSION'] = 'tls_version'\nself.app.config['MQTT_TLS_CIPHERS'] = 'tls_ciphers'\nself.app.config['MQTT_TLS_INSECURE'] = 'tls_insecure'\nmqtt = Mqtt(self.app)\nself.assertEqual('username', mqtt.username)\nself.assertEqual('password', mqtt.password)\nself.assertEqual('broker_url', mqtt.broker_url)\nself.assertEqual('broker_port', mqtt.broker_port)\nself.assertEqual('tls_enabled', mqtt.tls_enabled)\nself.assertEqual(True, mqtt.clean_session)\nself.assertEqual('keepalive', mqtt.keepalive)\nself.assertEqual('home/lastwill', mqtt.last_will_topic)\nself.assertEqual('last will', mqtt.last_will_message)\nself.assertEqual(2, mqtt.last_will_qos)\nself.assertEqual(True, mqtt.last_will_retain)\nself.assertEqual('tls_ca_certs', mqtt.tls_ca_certs)\nself.assertEqual('tls_certfile', mqtt.tls_certfile)\nself.assertEqual('tls_keyfile', mqtt.tls_keyfile)\nself.assertEqual('tls_cert_reqs', mqtt.tls_cert_reqs)\nself.assertEqual('tls_version', mqtt.tls_version)\nself.assertEqual('tls_ciphers', mqtt.tls_ciphers)\nself.assertEqual('tls_insecure', mqtt.tls_insecure)\nmqtt.client.username_pw_set.assert_called_once_with('username', 'password')\nmqtt.client.tls_set.called_once_with(ca_certs='tls_ca_certs', certfile=\n    'tls_certfile', keyfile='tls_keyfile', cert_reqs='tls_cert_reqs',\n    tls_version='tls_version', ciphers='tls_ciphers')\n"
}