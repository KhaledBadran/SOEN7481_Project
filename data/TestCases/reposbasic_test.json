{
    "functionName": "basic_test",
    "className": "TestLazySet",
    "fileName": "/AvivYaish_&_LazySet/lazy_set_&_tests_&_test_lazy_set.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"\n\n        The basic set of tests.\n\n        Given a \"valid\" set, valid_set, and an instance of a set-like type that is supposed to be identical, test_set,\n\n        checks that indeed test_set is identical to valid_set and that test_set supports the basic set operations.\n\n        \"\"\"\nlarger_set = valid_set.union({'a'})\nsmaller_set = valid_set.copy()\nif len(valid_set) > 0:\n    smaller_set.pop()\ndisjoint_set = larger_set - valid_set\nfor item in valid_set:\n    assert item in test_set\nfor item in disjoint_set:\n    assert item not in test_set\ncomparison_set = set()\nfor item in test_set:\n    comparison_set.add(item)\nassert comparison_set == valid_set\nassert test_set <= valid_set\nassert valid_set >= test_set\nassert test_set >= valid_set\nassert valid_set <= test_set\nassert test_set == valid_set\nassert valid_set == test_set\nassert test_set <= larger_set\nassert larger_set >= test_set\nassert test_set != larger_set\nassert larger_set != test_set\nassert test_set < larger_set\nassert larger_set > test_set\nassert test_set >= smaller_set\nassert smaller_set <= test_set\nassert (test_set != smaller_set) is (len(valid_set) > 0)\nassert (smaller_set != test_set) is (len(valid_set) > 0)\nassert (test_set > smaller_set) is (len(valid_set) > 0)\nassert (smaller_set < test_set) is (len(valid_set) > 0)\nassert len(test_set) == len(valid_set)\nassert test_set.isdisjoint(disjoint_set)\nassert test_set.isdisjoint(valid_set) is (len(valid_set) == 0)\nassert test_set.isdisjoint(larger_set) is (len(test_set) == 0)\nassert test_set.isdisjoint(smaller_set) is (len(smaller_set) == 0)\nstaticmethod"
}