{
    "functionName": "test_write_multipolygon",
    "className": "TestNcWriter",
    "fileName": "/twhiteaker_&_CFGeom/cfgeom_&_test_&_test_ncgeom_&_test_convert_&_test_netcdf_&_test_nc_writer.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "root = join(self.path_data, 'simplified_examples')\njson_file = join(root, 'multipolygon.json')\nwith open(json_file) as f:\n    data = f.read()\ncontainer = json_to_container(data)\nfor vlen in [False, True]:\n    tmp_file = self.get_temporary_file_path('foo.nc')\n    container.to_netcdf(tmp_file, use_vlen=vlen)\n    with Dataset(tmp_file) as nc:\n        assert _has_dim(nc, 'instance', 2)\n        assert _has_var(nc, 'geometry_container')\n        var = nc.variables['geometry_container']\n        assert _has_attr(var, 'geometry_type', 'polygon')\n        assert _has_attr(var, 'node_coordinates', 'x y')\n        assert _has_attr(var, 'part_node_count', 'part_node_count')\n        assert _has_attr(var, 'interior_ring', 'interior_ring')\n        if vlen:\n            assert _has_vltype(nc, 'node_VLType', float)\n            assert _has_vltype(nc, 'part_node_VLType', int)\n            assert not _has_var(nc, 'node_count')\n            assert _has_var(nc, 'part_node_count', int, [[3], [3, 3, 4]])\n            assert _has_var(nc, 'interior_ring', int, [[0], [0, 1, 0]])\n            assert _has_var(nc, 'x', float, [[100, 75, 50], [10, 5, 0, 1, 5,\n                9, 20, 15, 11, 15]])\n            assert _has_var(nc, 'y', float, [[100, 500, 100], [0, 5, 0, 1, \n                4, 1, 20, 25, 20, 15]])\n        else:\n            assert _has_dim(nc, 'node', 13)\n            assert _has_dim(nc, 'part', 4)\n            assert _has_attr(var, 'node_count', 'node_count')\n            assert _has_var(nc, 'node_count', int, [3, 10])\n            assert _has_var(nc, 'part_node_count', int, [3, 3, 3, 4])\n            assert _has_var(nc, 'interior_ring', int, [0, 0, 1, 0])\n            assert _has_var(nc, 'x', float, [100, 75, 50, 10, 5, 0, 1, 5, 9,\n                20, 15, 11, 15])\n            assert _has_var(nc, 'y', float, [100, 500, 100, 0, 5, 0, 1, 4, \n                1, 20, 25, 20, 15])\n        assert not _has_var(nc, 'z')\n"
}