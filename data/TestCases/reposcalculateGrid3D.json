{
    "functionName": "calculateGrid3D",
    "className": null,
    "fileName": "/jakob-lass_&_MJOLNIR/MJOLNIR_&_Data_&_DataSet.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"Generate 3D grid with centers given by X,Y, and Z.\n     Args:\n        \n        X (3D array): 3D array of x values generated by np.meshgrid.\n                \n        Y (3D array): 3D array of y values generated by np.meshgrid.\n                \n        Z (3D array): 3D array of z values generated by np.meshgrid.\n        \n    Example:\n\n    >>> x = np.linspace(-1.5,1.5,20)\n    >>> y = np.linspace(0,1.5,10)\n    >>> z = np.linspace(-1.0,5.5,66)\n    >>> X,Y,Z = np.meshgrid(x,y,z,indexing='ij')\n    >>> XX,YY,ZZ = calculateGrid3D(X,Y,Z)\n\n    Now XX is a 21x11x67 array containing all x coordinates of the edges exactly midway between the points. Same goes for YY and ZZ with y and z coordinates respectively.\n    \"\"\"\nxshape = np.array(X.shape)\nif np.any(xshape <= 1):\n    raise AttributeError('Provided array has dimension(s) {} of size <= 1'.\n        format(xshape))\nXT = np.zeros((xshape[0] + 1, xshape[1] + 1, xshape[2] + 1))\nYT = np.zeros_like(XT)\nZT = np.zeros_like(XT)\ndx0 = np.diff(X, axis=0)\ndx1 = np.diff(X, axis=1)\ndx2 = np.diff(X, axis=2)\ndy0 = np.diff(Y, axis=0)\ndy1 = np.diff(Y, axis=1)\ndy2 = np.diff(Y, axis=2)\ndz0 = np.diff(Z, axis=0)\ndz1 = np.diff(Z, axis=1)\ndz2 = np.diff(Z, axis=2)\nXX = X.copy()\nXX[:-1] -= 0.5 * dx0\nXX[-1] -= 0.5 * dx0[-1]\nXX[:, :-1] -= 0.5 * dx1\nXX[:, (-1)] -= 0.5 * dx1[:, (-1)]\nXX[:, :, :-1] -= 0.5 * dx2\nXX[:, :, (-1)] -= 0.5 * dx2[:, :, (-1)]\nYY = Y.copy()\nYY[:-1] -= 0.5 * dy0\nYY[-1] -= 0.5 * dy0[-1]\nYY[:, :-1] -= 0.5 * dy1\nYY[:, (-1)] -= 0.5 * dy1[:, (-1)]\nYY[:, :, :-1] -= 0.5 * dy2\nYY[:, :, (-1)] -= 0.5 * dy2[:, :, (-1)]\nZZ = Z.copy()\nZZ[:-1] -= 0.5 * dz0\nZZ[-1] -= 0.5 * dz0[-1]\nZZ[:, :-1] -= 0.5 * dz1\nZZ[:, (-1)] -= 0.5 * dz1[:, (-1)]\nZZ[:, :, :-1] -= 0.5 * dz2\nZZ[:, :, (-1)] -= 0.5 * dz2[:, :, (-1)]\nXT[:-1, :-1, :-1] = XX.copy()\nYT[:-1, :-1, :-1] = YY.copy()\nZT[:-1, :-1, :-1] = ZZ.copy()\nXT[(-1), :-1, :-1] = XT[(-2), :-1, :-1] + dx0[-1]\nXT[:-1, (-1), :-1] = XT[:-1, (-2), :-1] + dx1[:, (-1), :]\nXT[:-1, :-1, (-1)] = XT[:-1, :-1, (-2)] + dx2[:, :, (-1)]\nXT[:-1, (-1), (-1)] = 0.5 * (XT[:-1, (-1), (-2)] + dx2[:, (-1), (-1)] + XT[\n    :-1, (-2), (-1)] + dx1[:, (-1), (-1)])\nXT[(-1), :-1, (-1)] = 0.5 * (XT[(-1), :-1, (-2)] + dx2[(-1), :, (-1)] + XT[\n    (-2), :-1, (-1)] + dx0[(-1), :, (-1)])\nXT[(-1), (-1), :-1] = 0.5 * (XT[(-1), (-2), :-1] + dx1[(-1), (-1), :] + XT[\n    (-2), (-1), :-1] + dx0[(-1), (-1), :])\nXT[-1, -1, -1] = (XT[-1, -2, -1] + dx1[-1, -1, -1] + XT[-2, -1, -1] + dx0[-\n    1, -1, -1] + XT[-1, -1, -2] + dx2[-1, -1, -1]) / 3\nYT[(-1), :-1, :-1] = YT[(-2), :-1, :-1] + dy0[-1]\nYT[:-1, (-1), :-1] = YT[:-1, (-2), :-1] + dy1[:, (-1), :]\nYT[:-1, :-1, (-1)] = YT[:-1, :-1, (-2)] + dy2[:, :, (-1)]\nYT[:-1, (-1), (-1)] = 0.5 * (YT[:-1, (-1), (-2)] + dy2[:, (-1), (-1)] + YT[\n    :-1, (-2), (-1)] + dy1[:, (-1), (-1)])\nYT[(-1), :-1, (-1)] = 0.5 * (YT[(-1), :-1, (-2)] + dy2[(-1), :, (-1)] + YT[\n    (-2), :-1, (-1)] + dy0[(-1), :, (-1)])\nYT[(-1), (-1), :-1] = 0.5 * (YT[(-1), (-2), :-1] + dy1[(-1), (-1), :] + YT[\n    (-2), (-1), :-1] + dy0[(-1), (-1), :])\nYT[-1, -1, -1] = (YT[-1, -2, -1] + dy1[-1, -1, -1] + YT[-2, -1, -1] + dy0[-\n    1, -1, -1] + YT[-1, -1, -2] + dy2[-1, -1, -1]) / 3\nZT[(-1), :-1, :-1] = ZT[(-2), :-1, :-1] + dz0[-1]\nZT[:-1, (-1), :-1] = ZT[:-1, (-2), :-1] + dz1[:, (-1), :]\nZT[:-1, :-1, (-1)] = ZT[:-1, :-1, (-2)] + dz2[:, :, (-1)]\nZT[:-1, (-1), (-1)] = 0.5 * (ZT[:-1, (-1), (-2)] + dz2[:, (-1), (-1)] + ZT[\n    :-1, (-2), (-1)] + dz1[:, (-1), (-1)])\nZT[(-1), :-1, (-1)] = 0.5 * (ZT[(-1), :-1, (-2)] + dz2[(-1), :, (-1)] + ZT[\n    (-2), :-1, (-1)] + dz0[(-1), :, (-1)])\nZT[(-1), (-1), :-1] = 0.5 * (ZT[(-1), (-2), :-1] + dz1[(-1), (-1), :] + ZT[\n    (-2), (-1), :-1] + dz0[(-1), (-1), :])\nZT[-1, -1, -1] = (ZT[-1, -2, -1] + dz1[-1, -1, -1] + ZT[-2, -1, -1] + dz0[-\n    1, -1, -1] + ZT[-1, -1, -2] + dz2[-1, -1, -1]) / 3\nreturn XT, YT, ZT\n"
}