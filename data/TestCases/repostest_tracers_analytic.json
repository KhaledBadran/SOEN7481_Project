{
    "functionName": "test_tracers_analytic",
    "className": null,
    "fileName": "/LSSTDESC_&_CCL/benchmarks_&_test_tracers.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "cosmo = set_up\nzmax = 0.8\nzi = 0.4\nzf = 0.6\nnchi = 1024\nnk = 512\nchii = ccl.comoving_radial_distance(cosmo, 1.0 / (1 + zi))\nchif = ccl.comoving_radial_distance(cosmo, 1.0 / (1 + zf))\nchimax = ccl.comoving_radial_distance(cosmo, 1.0 / (1 + zmax))\nchiarr = np.linspace(0.1, chimax, nchi)\nif mismatch:\n    mask = (chiarr < 0.9 * chif) & (chiarr > 1.1 * chii)\n    chiarr_transfer = chiarr[mask]\nelse:\n    chiarr_transfer = chiarr\naarr_transfer = ccl.scale_factor_of_chi(cosmo, chiarr_transfer)[::-1]\naarr = ccl.scale_factor_of_chi(cosmo, chiarr)[::-1]\nlkarr = np.log(10.0 ** np.linspace(-6, 3, nk))\nwchi = np.ones_like(chiarr)\nwchi[chiarr < chii] = 0\nwchi[chiarr > chif] = 0\nt = ccl.Tracer()\nif w_transfer:\n    ta = (chiarr_transfer ** gamma)[::-1]\n    tk = np.exp(beta * lkarr)\n    if is_factorizable:\n        t.add_tracer(cosmo, kernel=(chiarr, wchi), transfer_k=(lkarr, tk),\n            transfer_a=(aarr_transfer, ta), der_bessel=der_bessel,\n            der_angles=der_angles)\n    else:\n        tka = ta[:, (None)] * tk[(None), :]\n        t.add_tracer(cosmo, kernel=(chiarr, wchi), transfer_ka=(\n            aarr_transfer, lkarr, tka), der_bessel=der_bessel, der_angles=\n            der_angles)\nelse:\n    t.add_tracer(cosmo, kernel=(chiarr, wchi), der_bessel=der_bessel,\n        der_angles=der_angles)\npkarr = np.ones_like(aarr)[:, (None)] * np.exp(alpha * lkarr)[(None), :]\npk2d = ccl.Pk2D(a_arr=aarr, lk_arr=lkarr, pk_arr=pkarr, is_logp=False)\nlarr = np.linspace(2, 3000, 100)\ncl = ccl.angular_cl(cosmo, t, t, larr, p_of_k_a=pk2d)\nclpred = get_prediction(larr, chii, chif, alpha, beta, gamma, der_bessel,\n    der_angles)\nassert np.all(np.fabs(cl / clpred - 1) < 0.005)\npytest.mark.parametrize(\n    'alpha,beta,gamma,is_factorizable,w_transfer,mismatch,der_bessel,der_angles'\n    , [(-2.0, -1.0, -1.0, False, True, False, 0, 0), (-2.0, 0.0, -1.0, \n    False, True, False, 0, 0), (-2.0, -1.0, 0.0, False, True, False, 0, 0),\n    (-2.0, 0.0, 0.0, False, True, False, 0, 0), (0.0, 0.0, 0.0, False, True,\n    False, 0, 0), (-2.0, -1.0, -1.0, True, True, False, 0, 0), (-2.0, 0.0, \n    -1.0, True, True, False, 0, 0), (-2.0, -1.0, 0.0, True, True, False, 0,\n    0), (-2.0, 0.0, 0.0, True, True, False, 0, 0), (0.0, 0.0, 0.0, True, \n    True, False, 0, 0), (-2.0, 0.0, 0.0, False, False, False, 0, 0), (0.0, \n    0.0, 0.0, False, False, False, 0, 0), (-2.0, -1.0, 0.0, True, True, \n    True, 0, 0), (-2.0, -1.0, 0.0, False, True, True, 0, 0), (-2.0, -1.0, -\n    1.0, False, True, False, -1, 0), (-2.0, -1.0, -1.0, False, True, False,\n    0, 1), (-2.0, -1.0, -1.0, False, True, False, 0, 2), (-2.0, -1.0, -1.0,\n    False, True, False, -1, 2)])"
}