{
    "functionName": "test_derive_key_invalid_base_key",
    "className": "TestKmipEngine",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_services_&_server_&_test_engine.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that the right error is thrown when an object not suitable for\n        key derivation is provided as the base key with a DeriveKey request.\n        \"\"\"\ne = engine.KmipEngine()\ne._data_store = self.engine\ne._data_store_session_factory = self.session_factory\ne._data_session = e._data_store_session_factory()\ne._is_allowed_by_operation_policy = mock.Mock(return_value=True)\ne._logger = mock.MagicMock()\ne._cryptography_engine.logger = mock.MagicMock()\ninvalid_key = pie_objects.OpaqueObject(b'\\x01\\x02\\x04\\x08\\x10 @\\x80', enums\n    .OpaqueDataType.NONE)\ne._data_session.add(invalid_key)\ne._data_session.commit()\ne._data_session = e._data_store_session_factory()\npayload = payloads.DeriveKeyRequestPayload(object_type=enums.ObjectType.\n    SECRET_DATA, unique_identifiers=[str(invalid_key.unique_identifier)])\nargs = payload,\nself.assertRaisesRegex(exceptions.InvalidField,\n    'Object 1 is not a suitable type for key derivation. Please specify a key or secret data.'\n    , e._process_derive_key, *args)\n"
}