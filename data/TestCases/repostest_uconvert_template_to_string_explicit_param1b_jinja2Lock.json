{
    "functionName": "test_uconvert_template_to_string_explicit_param1b_jinja2Lock",
    "className": null,
    "fileName": "/alex-ber_&_AlexBerUtils/tests_&_utils_&_ymlparsers_extra_test.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "logger.info(f'{request._pyfuncitem.name}{ymlparsersExtraFixture}')\nymlparsers.initConfig(jinja2ctx={'variable_start_string': '22_',\n    'variable_end_string': '_22'})\ninit_jinja2ctx = HiYaPyCo.jinja2ctx\nmock_lock = create_mock_lock(mocker)\nmocker.patch.object(HiYaPyCo, 'jinja2Lock', new=mock_lock, spec_set=True)\njinja2ctx_mock = mocker.patch.object(HiYaPyCo, 'jinja2ctx', spec_set=True)\nmock_variable_start_string = mocker.PropertyMock(return_value=\n    init_jinja2ctx.variable_start_string)\ntype(jinja2ctx_mock).variable_start_string = mock_variable_start_string\nmock_variable_end_string = mocker.PropertyMock(return_value=init_jinja2ctx.\n    variable_end_string)\ntype(jinja2ctx_mock).variable_end_string = mock_variable_end_string\ntemplate = '22_name_22'\njinja2Lock_param_lock = create_mock_lock(mocker)\nwith pytest.raises(ValueError):\n    _convert_template_to_string_format(template, jinja2Lock=\n        jinja2Lock_param_lock)\npytest.assume(mock_lock.acquire.call_count == 0)\npytest.mark.yml"
}