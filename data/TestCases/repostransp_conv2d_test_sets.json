{
    "functionName": "transp_conv2d_test_sets",
    "className": null,
    "fileName": "/Lasagne_&_Lasagne/lasagne_&_tests_&_layers_&_test_conv.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "def _convert(input, kernel, output, kwargs):\n    return [floatX(input), floatX(kernel), output, kwargs]\ninput_shape = 3, 1, 11, 16\nfor crop in (0, 1, 2, 'full', 'same'):\n    for stride in (1, 2, 3):\n        for filter_size in (1, 3):\n            if stride > filter_size:\n                continue\n            if crop not in ('full', 'same') and crop > filter_size - 1:\n                continue\n            input = np.random.random(input_shape)\n            kernel = np.random.random((16, 1, filter_size, filter_size))\n            output = transposed_convNd(input, kernel, crop, stride, 2)\n            yield _convert(input, kernel, output, {'crop': crop, 'stride':\n                stride, 'flip_filters': True})\ninput = np.random.random(input_shape)\nkernel = np.random.random((16, 1, 3, 3))\noutput = transposed_convNd(input, kernel, 'valid')\nyield _convert(input, kernel, output, {'b': None, 'flip_filters': True})\nyield _convert(input, kernel, output, {'untie_biases': True, 'flip_filters':\n    True})\nyield _convert(input, kernel, output, {'crop': 'valid', 'flip_filters': True})\noutput = transposed_convNd(input, kernel[:, :, ::-1, ::-1], 'valid')\nyield _convert(input, kernel, output, {'flip_filters': False})\nfor symbolic in [False, True]:\n    input_shape = 4, 3, 7, 9\n    input = np.random.random(input_shape)\n    kernel = np.random.random((16, 3, 2, 3))\n    stride = 2, 3\n    for extend in [(0, 1), (1, 2)]:\n        output = transposed_convNd(input, kernel, 0, stride, extend=extend)\n        kwargs = {'stride': stride, 'flip_filters': True}\n        if symbolic:\n            kwargs['output_size'] = theano.shared(np.array(output.shape[2:]))\n        else:\n            kwargs['output_size'] = output.shape[2:]\n        yield _convert(input, kernel, output, kwargs)\n"
}