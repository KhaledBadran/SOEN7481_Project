{
    "functionName": "test_modify_initiator_change_initiator_flags",
    "className": "CITestProvisioning",
    "fileName": "/MichaelMcAleer_&_PyU4V/PyU4V_&_tests_&_ci_tests_&_test_pyu4v_ci_provisioning.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"Test modify_initiator change initiator flags.\"\"\"\ninitiator_name = '1%015x' % random.randrange(16 ** 15)\nhost = self.create_host(initiator_list=[initiator_name])\nport_group_name, _ = self.create_port_group()\nmasking_view_name = self.generate_name('masking_view')\nstorage_group_name = self.create_empty_storage_group()\nself.provisioning.add_new_volume_to_storage_group(storage_group_name, 1, 1,\n    'GB')\ndevice_id = self.provisioning.get_volumes_from_storage_group(storage_group_name\n    )[0]\nself.addCleanup(self.delete_volume, storage_group_name, device_id)\nself.provisioning.create_masking_view_existing_components(port_group_name,\n    masking_view_name, storage_group_name, host)\nself.addCleanup(self.delete_masking_view, masking_view_name)\ninitiator_list = self.provisioning.get_initiator_list()\ninitiator = [x for x in initiator_list if initiator_name in x][0]\nflags = constants.HOST_FLAGS\nflags.pop(constants.CONSISTENT_LUN, None)\nflags.pop(constants.VOLUME_SET_ADDRESSING, None)\nflags[constants.OPENVMS] = {constants.OVERRIDE: constants.TRUE, constants.\n    ENABLED: constants.TRUE}\nflags[constants.AVOID_RESET_BROADCAST] = {constants.OVERRIDE: constants.\n    TRUE, constants.ENABLED: constants.TRUE}\nself.provisioning.modify_initiator(initiator, initiator_flags=flags)\ninitiator_details = self.provisioning.get_initiator(initiator)\ninitiator_flags = initiator_details[constants.ENABLED_FLAGS]\nself.assertIn(constants.OPENVMS_FLAG, initiator_flags)\nself.assertIn(constants.AVOID_RESET_BROADCAST_FLAG, initiator_flags)\nflags[constants.OPENVMS] = {constants.OVERRIDE: constants.FALSE, constants.\n    ENABLED: constants.FALSE}\nflags[constants.AVOID_RESET_BROADCAST] = {constants.OVERRIDE: constants.\n    FALSE, constants.ENABLED: constants.FALSE}\nself.provisioning.modify_initiator(initiator, initiator_flags=flags)\ninitiator_details = self.provisioning.get_initiator(initiator)\nif constants.ENABLED_FLAGS in initiator_flags:\n    initiator_flags = initiator_details[constants.ENABLED_FLAGS]\n    self.assertNotIn(constants.OPENVMS_FLAG, initiator_flags)\n    self.assertNotIn(constants.AVOID_RESET_BROADCAST_FLAG, initiator_flags)\n"
}