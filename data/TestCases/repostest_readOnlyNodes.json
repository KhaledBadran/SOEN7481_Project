{
    "functionName": "test_readOnlyNodes",
    "className": null,
    "fileName": "/bakwc_&_PySyncObj/test_syncobj.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "random.seed(12)\na = [getNextAddr(), getNextAddr(), getNextAddr()]\no1 = TestObj(a[0], [a[1], a[2]])\no2 = TestObj(a[1], [a[2], a[0]])\no3 = TestObj(a[2], [a[0], a[1]])\nobjs = [o1, o2, o3]\nb1 = TestObj(None, [a[0], a[1], a[2]])\nb2 = TestObj(None, [a[0], a[1], a[2]])\nroObjs = [b1, b2]\ndoTicks(objs, 10.0, stopFunc=lambda : o1._isReady() and o2._isReady() and\n    o3._isReady())\nassert o1._isReady()\nassert o2._isReady()\nassert o3._isReady()\no1.addValue(150)\no2.addValue(200)\ndoTicks(objs, 10.0, stopFunc=lambda : o3.getCounter() == 350)\ndoTicks(objs + roObjs, 4.0, stopFunc=lambda : b1.getCounter() == 350 and b2\n    .getCounter() == 350)\nassert b1.getCounter() == b2.getCounter() == 350\nassert o1._getLeader() == b1._getLeader() == o2._getLeader() == b2._getLeader()\nassert b1._getLeader().address in a\nprevLeader = o1._getLeader()\nnewObjs = [o for o in objs if o._SyncObj__selfNode != prevLeader]\nassert len(newObjs) == 2\ndoTicks(newObjs + roObjs, 10.0, stopFunc=lambda : newObjs[0]._getLeader() !=\n    prevLeader and newObjs[0]._getLeader() is not None and newObjs[0].\n    _getLeader().address in a and newObjs[0]._getLeader() == newObjs[1].\n    _getLeader())\nassert newObjs[0]._getLeader() != prevLeader\nassert newObjs[0]._getLeader().address in a\nassert newObjs[0]._getLeader() == newObjs[1]._getLeader()\nnewObjs[1].addValue(50)\ndoTicks(newObjs + roObjs, 10.0, stopFunc=lambda : newObjs[0].getCounter() ==\n    400 and b1.getCounter() == 400)\no1._printStatus()\no2._printStatus()\no3._printStatus()\nb1._printStatus()\nassert newObjs[0].getCounter() == 400\nassert b1.getCounter() == 400\ndoTicks(objs + roObjs, 10.0, stopFunc=lambda : sum([int(o.getCounter() == \n    400) for o in objs + roObjs]) == len(objs + roObjs))\nfor o in (objs + roObjs):\n    assert o.getCounter() == 400\ncurrRes = {}\ndef onAdd(res, err):\n    currRes[0] = err\nb1.addValue(50, callback=onAdd)\ndoTicks(objs + roObjs, 5.0, stopFunc=lambda : o1.getCounter() == 450 and b1\n    .getCounter() == 450 and b2.getCounter() == 450 and currRes.get(0) ==\n    FAIL_REASON.SUCCESS)\nassert o1.getCounter() == 450\nassert b1.getCounter() == 450\nassert b2.getCounter() == 450\nassert currRes.get(0) == FAIL_REASON.SUCCESS\nassert all(map(lambda o: o.getStatus()['readonly_nodes_count'] == 2, objs))\nb1._destroy()\ndoTicks(objs, 2.0)\nassert all(map(lambda o: o.getStatus()['readonly_nodes_count'] == 1, objs))\no1._destroy()\no2._destroy()\no3._destroy()\nb1._destroy()\nb2._destroy()\n"
}