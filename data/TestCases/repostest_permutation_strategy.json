{
    "functionName": "test_permutation_strategy",
    "className": null,
    "fileName": "/gelijergensen_&_PermutationImportance/test_&_test_selection_strategies.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "training_data = np.random.rand(5, 3), np.random.rand(5)\nscoring_data = np.random.rand(5, 3), np.random.rand(5)\nnum_vars = training_data[0].shape[1]\nimportant_vars = [1]\nstrategy = PermutationImportanceSelectionStrategy(training_data,\n    scoring_data, num_vars, important_vars)\nassert getattr(strategy, 'name') == 'Permutation Importance'\nshuffled_scoring_inputs = strategy.shuffled_scoring_inputs\nfor i in range(shuffled_scoring_inputs.shape[1]):\n    assert (np.unique(scoring_data[0][:, (i)]) == np.unique(\n        shuffled_scoring_inputs[:, (i)])).all()\nexpected = [(0, training_data, (np.column_stack([shuffled_scoring_inputs[:,\n    (0)], shuffled_scoring_inputs[:, (1)], scoring_data[0][:, (2)]]),\n    scoring_data[1])), (2, training_data, (np.column_stack([scoring_data[0]\n    [:, (0)], shuffled_scoring_inputs[:, (1)], shuffled_scoring_inputs[:, (\n    2)]]), scoring_data[1]))]\nfor (exp_var, exp_train_data, exp_score_data), (res_var, res_train_data,\n    res_score_data) in zip(expected, strategy):\n    assert exp_var == res_var\n    assert (exp_train_data[0] == res_train_data[0]).all()\n    assert (exp_train_data[1] == res_train_data[1]).all()\n    assert (exp_score_data[0] == res_score_data[0]).all()\n    assert (exp_score_data[1] == res_score_data[1]).all()\n"
}