{
    "functionName": "test_get_n_relations",
    "className": "TestDependencyTokens",
    "fileName": "/apmoore1_&_Bella/tests_&_test_dependency_tokens.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Tests DependencyToken().get_n_relations function\n        \"\"\"\nconnected_words = [('nothing', 'CURRENT')]\nrelations = {(1): ['test', 'anything'], (2): ['something', 'another'], (3):\n    ['you', 'the'], (4): ['last', 'pass']}\ntoken = 'nothing'\ndep_token = DependencyToken(token, defaultdict(list), connected_words)\ndep_token = DependencyToken(token, relations, connected_words)\nwith self.assertRaises(ValueError, msg=\n    'Should not accept negative values where the first value > second value'):\n    dep_token.get_n_relations((-2, -3))\nwith self.assertRaises(ValueError, msg='Should not accept zero values'):\n    dep_token.get_n_relations((0, 2))\nwith self.assertRaises(ValueError, msg='Should not accept zero values'):\n    dep_token.get_n_relations((0, 0))\nwith self.assertRaises(TypeError, msg='Should only accept tuples'):\n    dep_token.get_n_relations(1)\nwith self.assertRaises(TypeError, msg='Should only accept tuples'):\n    dep_token.get_n_relations(range(1, 2))\nwith self.assertRaises(ValueError, msg='The tuple has to of length 2'):\n    dep_token.get_n_relations((1, 3, 1))\nwith self.assertRaises(ValueError, msg=\n    'The first value has to be less than the second value'):\n    dep_token.get_n_relations((3, 1))\nwith self.assertRaises(ValueError, msg=\n    'The values in the tuple have to be of type int'):\n    dep_token.get_n_relations((0.5, 3))\nwith self.assertRaises(ValueError, msg=\n    'The values in the tuple have to be of type int'):\n    dep_token.get_n_relations((1, 3.5))\nvalid_1 = ['test', 'anything']\ntest_1 = dep_token.get_n_relations((1, 1))\nself.assertEqual(valid_1, test_1, msg=\n    'Should return the first depth of realtions {} and not {}'.format(\n    valid_1, test_1))\nvalid_2 = ['something', 'another']\ntest_2 = dep_token.get_n_relations((2, 2))\nself.assertEqual(valid_2, test_2, msg=\n    'Should return the second depth of realtions {} and not {}'.format(\n    valid_2, test_2))\nvalid_1_2 = ['test', 'anything', 'something', 'another']\ntest_1_2 = dep_token.get_n_relations((1, 2))\nself.assertEqual(valid_1_2, test_1_2, msg=\n    'Should return the first and second depth of relations {} and not {}'.\n    format(valid_1_2, test_1_2))\nvalid_2_4 = ['something', 'another', 'you', 'the', 'last', 'pass']\ntest_2_4 = dep_token.get_n_relations((2, 4))\nself.assertEqual(valid_2_4, test_2_4, msg=\n    'Should return the second, third and fourth relations {} and not {}'.\n    format(valid_2_4, test_2_4))\nvalid_2_7 = ['something', 'another', 'you', 'the', 'last', 'pass']\ntest_2_7 = dep_token.get_n_relations((2, 7))\nself.assertEqual(valid_2_7, test_2_7, msg=\n    'Should return the second, third and fourth relations and no more as the relations dict has been exhausted valid: {} and not {}'\n    .format(valid_2_7, test_2_7))\nvalid_neg_1 = ['last', 'pass']\ntest_neg_1 = dep_token.get_n_relations((-1, -1))\nself.assertEqual(valid_neg_1, test_neg_1, msg=\n    'Should return the lastrealtions {} and not {}'.format(valid_neg_1,\n    test_neg_1))\nvalid_neg_2 = ['you', 'the', 'last', 'pass']\ntest_neg_2 = dep_token.get_n_relations((-2, -1))\nself.assertEqual(valid_neg_2, test_neg_2, msg=\n    'Should return the last 2realtions {} and not {}'.format(valid_neg_2,\n    test_neg_2))\nvalid_neg_3 = ['something', 'another', 'you', 'the', 'last', 'pass']\ntest_neg_3 = dep_token.get_n_relations((-3, -1))\nself.assertEqual(valid_neg_3, test_neg_3, msg=\n    'Should return the last 3realtions {} and not {}'.format(valid_neg_3,\n    test_neg_3))\nvalid_neg_4 = ['test', 'anything', 'something', 'another', 'you', 'the']\ntest_neg_4 = dep_token.get_n_relations((-4, -2))\nself.assertEqual(valid_neg_4, test_neg_4, msg=\n    'Should return the first 3realtions {} and not {}'.format(valid_neg_4,\n    test_neg_4))\nvalid_comp_1 = ['something', 'another', 'you', 'the', 'last', 'pass']\ntest_comp_1 = dep_token.get_n_relations((2, -1))\nself.assertEqual(valid_comp_1, test_comp_1, msg=\n    'Should return from the second to the last realtions {} and not {}'.\n    format(valid_comp_1, test_comp_1))\nvalid_comp_2 = ['test', 'anything', 'something', 'another', 'you', 'the',\n    'last', 'pass']\ntest_comp_2 = dep_token.get_n_relations((1, -1))\nself.assertEqual(valid_comp_2, test_comp_2, msg=\n    'Should return from the first to the last realtions {} and not {}'.\n    format(valid_comp_2, test_comp_2))\nvalid_comp_3 = ['something', 'another', 'you', 'the']\ntest_comp_3 = dep_token.get_n_relations((2, -2))\nself.assertEqual(valid_comp_3, test_comp_3, msg=\n    'Should return from the second to the second to last realtions {} and not {}'\n    .format(valid_comp_3, test_comp_3))\n"
}