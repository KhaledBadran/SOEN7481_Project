{
    "functionName": "_validate_srp_general",
    "className": "CITestProvisioning",
    "fileName": "/MichaelMcAleer_&_PyU4V/PyU4V_&_tests_&_ci_tests_&_test_pyu4v_ci_provisioning.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"Helper method for validating srp return details.\n\n        :param srp_details: srp details -- dict\n        \"\"\"\nself.assertIn(constants.SRP_ID, srp_details)\nself.assertIn(constants.NUM_OF_DISK_GROUPS, srp_details)\nself.assertIn(constants.EMULATION, srp_details)\nself.assertIn(constants.RESERVED_CAP_PERCENT, srp_details)\nself.assertIn(constants.TOTAL_SRDF_DSE_ALLOCATED_CAP_GB, srp_details)\nself.assertIn(constants.RDFA_DSE, srp_details)\nself.assertIn(constants.DISK_GROUP_ID, srp_details)\nself.assertIn(constants.SRP_CAPACITY, srp_details)\nself.assertIn(constants.SRP_CAPACITY, srp_details)\nself.assertIsInstance(srp_details[constants.SRP_ID], str)\nself.assertIsInstance(srp_details[constants.NUM_OF_DISK_GROUPS], int)\nself.assertIsInstance(srp_details[constants.EMULATION], str)\nself.assertIsInstance(srp_details[constants.RESERVED_CAP_PERCENT], int)\nself.assertIs(float, type(srp_details[constants.\n    TOTAL_SRDF_DSE_ALLOCATED_CAP_GB]))\nself.assertIsInstance(srp_details[constants.RDFA_DSE], bool)\nself.assertIsInstance(srp_details[constants.DISK_GROUP_ID], list)\n"
}