{
    "functionName": "test_sample_a_matrix",
    "className": "TestSample_a_matrix",
    "fileName": "/KnowEnG_&_KnowEnG_Pipelines_Library/test_&_unit_&_test_sample_a_matrix.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\" assert that the random sample is of the propper size, the\n            permutation points to the correct columns and that the number of\n            rows set to zero is correct.\n        \"\"\"\nn_test_rows = 11\nn_test_cols = 5\npct_smpl = 0.6\nn_zero_rows = int(np.round(n_test_rows * (1 - pct_smpl)))\nn_smpl_cols = int(np.round(n_test_cols * pct_smpl))\nepsilon_sum = max(n_test_rows, n_test_cols) * 1e-15\nA = np.random.rand(n_test_rows, n_test_cols) + epsilon_sum\nB, P = kn.sample_a_matrix(A, pct_smpl, pct_smpl)\nself.assertEqual(B.shape[1], P.size, msg='permutation size not equal columns')\nself.assertEqual(P.size, n_smpl_cols, msg='number of sample columns exception')\nperm_err_sum = 0\nn_zero_err_sum = 0\nB_col = 0\nfor A_col in P:\n    n_zeros = np.int_(B[:, (B_col)] == 0).sum()\n    if n_zeros != n_zero_rows:\n        n_zero_err_sum += 1\n    C = A[:, (A_col)] - B[:, (B_col)]\n    C[B[:, (B_col)] == 0] = 0\n    B_col += 1\n    if C.sum() > epsilon_sum:\n        perm_err_sum += 1\nself.assertEqual(n_zero_err_sum, 0, msg='number of zero columns exception')\nself.assertEqual(perm_err_sum, 0, msg='permutation index exception')\n"
}