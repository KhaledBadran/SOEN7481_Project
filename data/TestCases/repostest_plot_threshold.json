{
    "functionName": "test_plot_threshold",
    "className": null,
    "fileName": "/tvdboom_&_ATOM/tests_&_test_plots.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"Assert that the plot_threshold method work as intended.\"\"\"\ntrainer = TrainerRegressor(['ols', 'ridge'], metric='r2')\ntrainer.run(reg_train, reg_test)\npytest.raises(PermissionError, trainer.plot_threshold)\ntrainer = TrainerClassifier('PA', metric='f1')\ntrainer.run(bin_train, bin_test)\npytest.raises(AttributeError, trainer.plot_threshold)\ntrainer = TrainerClassifier(['LDA', 'LGB'], metric='f1')\npytest.raises(NotFittedError, trainer.plot_threshold, models='LDA')\ntrainer.run(bin_train, bin_test)\npytest.raises(ValueError, trainer.plot_threshold, metric='unknown')\ntrainer.plot_threshold(filename=FILE_DIR + 'threshold1', display=False)\nmets = [f1_score, get_scorer('average_precision'), 'precision', 'auc']\ntrainer.lda.plot_threshold(mets, filename=FILE_DIR + 'threshold2', display=\n    False)\nassert glob.glob(FILE_DIR + 'threshold1.png')\nassert glob.glob(FILE_DIR + 'threshold2.png')\natom = ATOMClassifier(X_bin, y_bin, random_state=1)\natom.run('lda', metric='f1')\natom.plot_threshold(filename=FILE_DIR + 'threshold3', display=False)\natom.lda.plot_threshold(filename=FILE_DIR + 'threshold4', display=False)\nassert glob.glob(FILE_DIR + 'threshold3.png')\nassert glob.glob(FILE_DIR + 'threshold4.png')\n"
}