{
    "functionName": "test_derive_key_non_derivable_base_key",
    "className": "TestKmipEngine",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_services_&_server_&_test_engine.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that the right error is thrown when an object suitable for\n        key derivation but not marked as such is provided as the base key\n        with a DeriveKey request.\n        \"\"\"\ne = engine.KmipEngine()\ne._data_store = self.engine\ne._data_store_session_factory = self.session_factory\ne._data_session = e._data_store_session_factory()\ne._is_allowed_by_operation_policy = mock.Mock(return_value=True)\ne._logger = mock.MagicMock()\ne._cryptography_engine.logger = mock.MagicMock()\nbase_key = pie_objects.SymmetricKey(enums.CryptographicAlgorithm.AES, 128,\n    b'\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\t\\n\\x0b\\x0c\\r\\x0e\\x0f', [enums.\n    CryptographicUsageMask.ENCRYPT])\ne._data_session.add(base_key)\ne._data_session.commit()\ne._data_session = e._data_store_session_factory()\npayload = payloads.DeriveKeyRequestPayload(object_type=enums.ObjectType.\n    SECRET_DATA, unique_identifiers=[str(base_key.unique_identifier)])\nargs = payload,\nself.assertRaisesRegex(exceptions.InvalidField,\n    'The DeriveKey bit must be set in the cryptographic usage mask for object 1 for it to be used in key derivation.'\n    , e._process_derive_key, *args)\n"
}