{
    "functionName": "test_basic_email_parsing",
    "className": "TestCase",
    "fileName": "/IntegralDefense_&_ACE/lib_&_saq_&_modules_&_test_email.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "root = create_root_analysis(uuid=str(uuid.uuid4()), alert_type='mailbox')\nroot.initialize_storage()\nshutil.copy(os.path.join('test_data', 'emails',\n    'splunk_logging.email.rfc822'), os.path.join(root.storage_dir,\n    'email.rfc822'))\nfile_observable = root.add_observable(F_FILE, 'email.rfc822')\nfile_observable.add_directive(DIRECTIVE_ORIGINAL_EMAIL)\nroot.save()\nroot.schedule()\nengine = TestEngine()\nengine.enable_module('analysis_module_file_type', 'test_groups')\nengine.enable_module('analysis_module_email_analyzer', 'test_groups')\nengine.controlled_stop()\nengine.start()\nengine.wait()\nroot.load()\nfrom saq.modules.email import EmailAnalysis\nfile_observable = root.get_observable(file_observable.id)\nself.assertIsNotNone(file_observable)\nemail_analysis = file_observable.get_analysis(EmailAnalysis)\nself.assertIsNotNone(email_analysis)\nself.assertIsNone(email_analysis.parsing_error)\nself.assertIsNotNone(email_analysis.email)\nself.assertIsNone(email_analysis.env_mail_from)\nself.assertTrue(isinstance(email_analysis.env_rcpt_to, list))\nself.assertEquals(len(email_analysis.env_rcpt_to), 1)\nself.assertEquals(email_analysis.env_rcpt_to[0], 'jwdavison@company.com')\nself.assertEquals(email_analysis.mail_from,\n    'John Davison <unixfreak0037@gmail.com>')\nself.assertTrue(isinstance(email_analysis.mail_to, list))\nself.assertEquals(len(email_analysis.mail_to), 1)\nself.assertEquals(email_analysis.mail_to[0], 'jwdavison@company.com')\nself.assertIsNone(email_analysis.reply_to)\nself.assertEquals(email_analysis.subject, 'canary #3')\nself.assertEquals(email_analysis.decoded_subject, email_analysis.subject)\nself.assertEquals(email_analysis.message_id,\n    '<CANTOGZsMiMb+7aB868zXSen_fO=NS-qFTUMo9h2eHtOexY8Qhw@mail.gmail.com>')\nself.assertIsNone(email_analysis.originating_ip, None)\nself.assertTrue(isinstance(email_analysis.received, list))\nself.assertEquals(len(email_analysis.received), 6)\nself.assertTrue(isinstance(email_analysis.headers, list))\nself.assertTrue(isinstance(email_analysis.log_entry, dict))\nself.assertIsNone(email_analysis.x_mailer)\nself.assertIsNotNone(email_analysis.body)\nself.assertIsInstance(email_analysis.attachments, list)\nself.assertEquals(len(email_analysis.attachments), 0)\n"
}