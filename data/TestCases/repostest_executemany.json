{
    "functionName": "test_executemany",
    "className": "CursorTest",
    "fileName": "/anthill-utils_&_PyMySQL/pymysql_&_tests_&_test_cursor.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "conn = self.test_connection\ncursor = conn.cursor(pymysql.cursors.Cursor)\nm = pymysql.cursors.RE_INSERT_VALUES.match(\n    'INSERT INTO TEST (ID, NAME) VALUES (%s, %s)')\nself.assertIsNotNone(m, 'error parse %s')\nself.assertEqual(m.group(3), '', 'group 3 not blank, bug in RE_INSERT_VALUES?')\nm = pymysql.cursors.RE_INSERT_VALUES.match(\n    'INSERT INTO TEST (ID, NAME) VALUES (%(id)s, %(name)s)')\nself.assertIsNotNone(m, 'error parse %(name)s')\nself.assertEqual(m.group(3), '', 'group 3 not blank, bug in RE_INSERT_VALUES?')\nm = pymysql.cursors.RE_INSERT_VALUES.match(\n    'INSERT INTO TEST (ID, NAME) VALUES (%(id_name)s, %(name)s)')\nself.assertIsNotNone(m, 'error parse %(id_name)s')\nself.assertEqual(m.group(3), '', 'group 3 not blank, bug in RE_INSERT_VALUES?')\nm = pymysql.cursors.RE_INSERT_VALUES.match(\n    'INSERT INTO TEST (ID, NAME) VALUES (%(id_name)s, %(name)s) ON duplicate update'\n    )\nself.assertIsNotNone(m, 'error parse %(id_name)s')\nself.assertEqual(m.group(3), ' ON duplicate update',\n    'group 3 not ON duplicate update, bug in RE_INSERT_VALUES?')\nm = pymysql.cursors.RE_INSERT_VALUES.match(\n    'INSERT INTO bloup(foo, bar)VALUES(%s, %s)')\nassert m is not None\ndata = range(10)\ncursor.executemany('insert into test (data) values (%s)', data)\nself.assertTrue(cursor._executed.endswith(b',(7),(8),(9)'),\n    'execute many with %s not in one query')\ndata_dict = [{'data': i} for i in range(10)]\ncursor.executemany('insert into test (data) values (%(data)s)', data_dict)\nself.assertTrue(cursor._executed.endswith(b',(7),(8),(9)'),\n    'execute many with %(data)s not in one query')\ncursor.execute(\n    \"\"\"            CREATE TABLE percent_test (\n                `A%` INTEGER,\n                `B%` INTEGER)\"\"\"\n    )\ntry:\n    q = 'INSERT INTO percent_test (`A%%`, `B%%`) VALUES (%s, %s)'\n    self.assertIsNotNone(pymysql.cursors.RE_INSERT_VALUES.match(q))\n    cursor.executemany(q, [(3, 4), (5, 6)])\n    self.assertTrue(cursor._executed.endswith(b'(3, 4),(5, 6)'),\n        'executemany with %% not in one query')\nfinally:\n    cursor.execute('DROP TABLE IF EXISTS percent_test')\n"
}