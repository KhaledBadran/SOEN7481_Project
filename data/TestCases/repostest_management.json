{
    "functionName": "test_management",
    "className": "TestKeyChain",
    "fileName": "/named-data_&_PyNDN2/tests_&_integration_tests_&_test_key_chain.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "identityName = Name('/test/id')\nidentity2Name = Name('/test/id2')\nself.assertEqual(0, self._fixture._keyChain.getPib()._identities.size())\ntry:\n    self._fixture._keyChain.getPib().getDefaultIdentity()\n    self.fail('Did not throw the expected exception')\nexcept Pib.Error:\n    pass\nelse:\n    self.fail('Did not throw the expected exception')\nid = self._fixture._keyChain.createIdentityV2(identityName)\nself.assertTrue(id != None)\nself.assertTrue(identityName in self._fixture._keyChain.getPib().\n    _identities._identities)\ntry:\n    self._fixture._keyChain.getPib().getDefaultIdentity()\nexcept Exception as ex:\n    self.fail('Unexpected exception: ' + str(ex))\ntry:\n    key = id.getDefaultKey()\nexcept Exception as ex:\n    self.fail('Unexpected exception: ' + str(ex))\ntry:\n    key.getDefaultCertificate()\nexcept Exception as ex:\n    self.fail('Unexpected exception: ' + str(ex))\nkey1Name = key.getName()\ntry:\n    id.getKey(key1Name)\nexcept Exception as ex:\n    self.fail('Unexpected exception: ' + str(ex))\nself.assertEqual(1, id._getKeys().size())\nself._fixture._keyChain.deleteKey(id, key)\ntry:\n    id.getKey(key1Name)\n    self.fail('Did not throw the expected exception')\nexcept Pib.Error:\n    pass\nelse:\n    self.fail('Did not throw the expected exception')\nself.assertEqual(0, id._getKeys().size())\nself._fixture._keyChain.createKey(id)\ntry:\n    id.getDefaultKey()\nexcept Exception as ex:\n    self.fail('Unexpected exception: ' + str(ex))\nkey2 = id.getDefaultKey()\nself.assertTrue(key2 != None)\nself.assertTrue(not key2.getName().equals(key1Name))\nself.assertEqual(1, id._getKeys().size())\ntry:\n    key2.getDefaultCertificate()\nexcept Exception as ex:\n    self.fail('Unexpected exception: ' + str(ex))\nkey3 = self._fixture._keyChain.createKey(id)\nself.assertTrue(not key3.getName().equals(key2.getName()))\nself.assertTrue(id.getDefaultKey().getName().equals(key2.getName()))\nself.assertEqual(2, id._getKeys().size())\ntry:\n    key3.getDefaultCertificate()\nexcept Exception as ex:\n    self.fail('Unexpected exception: ' + str(ex))\nself.assertEqual(1, key3._getCertificates().size())\nkey3Cert1 = list(key3._getCertificates()._certificates.values())[0]\nkey3CertName = key3Cert1.getName()\nself._fixture._keyChain.deleteCertificate(key3, key3CertName)\nself.assertEqual(0, key3._getCertificates().size())\ntry:\n    key3.getDefaultCertificate()\n    self.fail('Did not throw the expected exception')\nexcept Pib.Error:\n    pass\nelse:\n    self.fail('Did not throw the expected exception')\nself._fixture._keyChain.addCertificate(key3, key3Cert1)\nself.assertEqual(1, key3._getCertificates().size())\ntry:\n    key3.getDefaultCertificate()\nexcept Exception as ex:\n    self.fail('Unexpected exception: ' + str(ex))\nself._fixture._keyChain.addCertificate(key3, key3Cert1)\nself.assertEqual(1, key3._getCertificates().size())\nkey3Cert2 = CertificateV2(key3Cert1)\nkey3Cert2Name = Name(key3.getName())\nkey3Cert2Name.append('Self')\nkey3Cert2Name.appendVersion(1)\nkey3Cert2.setName(key3Cert2Name)\nself._fixture._keyChain.addCertificate(key3, key3Cert2)\nself.assertEqual(2, key3._getCertificates().size())\nself.assertTrue(key3.getDefaultCertificate().getName().equals(key3CertName))\nself._fixture._keyChain.setDefaultCertificate(key3, key3Cert2)\nself.assertTrue(key3.getDefaultCertificate().getName().equals(key3Cert2Name))\nself.assertTrue(id.getDefaultKey().getName().equals(key2.getName()))\nself._fixture._keyChain.setDefaultKey(id, key3)\nself.assertTrue(id.getDefaultKey().getName().equals(key3.getName()))\nid2 = self._fixture._keyChain.createIdentityV2(identity2Name)\nself.assertTrue(self._fixture._keyChain.getPib().getDefaultIdentity().\n    getName().equals(id.getName()))\nself._fixture._keyChain.setDefaultIdentity(id2)\nself.assertTrue(self._fixture._keyChain.getPib().getDefaultIdentity().\n    getName().equals(id2.getName()))\nself._fixture._keyChain.deleteIdentity(id)\ntry:\n    self._fixture._keyChain.getPib().getIdentity(identityName)\n    self.fail('Did not throw the expected exception')\nexcept Pib.Error:\n    pass\nelse:\n    self.fail('Did not throw the expected exception')\nself.assertTrue(not identityName in self._fixture._keyChain.getPib().\n    _identities._identities)\n"
}