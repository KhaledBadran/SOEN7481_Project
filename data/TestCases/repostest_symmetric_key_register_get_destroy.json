{
    "functionName": "test_symmetric_key_register_get_destroy",
    "className": "TestIntegration",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_integration_&_services_&_test_integration.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Tests that symmetric keys are properly registered, retrieved,\n        and destroyed.\n        \"\"\"\nobject_type = ObjectType.SYMMETRIC_KEY\nalgorithm_value = CryptoAlgorithmEnum.AES\nmask_flags = [CryptographicUsageMask.ENCRYPT, CryptographicUsageMask.DECRYPT]\nattribute_type = AttributeType.CRYPTOGRAPHIC_USAGE_MASK\nusage_mask = self.attr_factory.create_attribute(attribute_type, mask_flags)\nname = Attribute.AttributeName('Name')\nkey_name = 'Integration Test - Register-Get-Destroy Key'\nname_value = Name.NameValue(key_name)\nname_type = Name.NameType(NameType.UNINTERPRETED_TEXT_STRING)\nvalue = Name(name_value=name_value, name_type=name_type)\nname = Attribute(attribute_name=name, attribute_value=value)\nattributes = [usage_mask, name]\ntemplate_attribute = TemplateAttribute(attributes=attributes)\nkey_format_type = KeyFormatType(KeyFormatTypeEnum.RAW)\nkey_data = b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\nkey_material = KeyMaterial(key_data)\nkey_value = KeyValue(key_material)\ncryptographic_algorithm = CryptographicAlgorithm(algorithm_value)\ncryptographic_length = CryptographicLength(128)\nkey_block = KeyBlock(key_format_type=key_format_type, key_compression_type=\n    None, key_value=key_value, cryptographic_algorithm=\n    cryptographic_algorithm, cryptographic_length=cryptographic_length,\n    key_wrapping_data=None)\nsecret = SymmetricKey(key_block)\nresult = self.client.register(object_type, template_attribute, secret,\n    credential=None)\nself._check_result_status(result, ResultStatus, ResultStatus.SUCCESS)\nself._check_uuid(result.uuid, str)\nuuid = result.uuid\nresult = self.client.get(uuid=uuid, credential=None)\nself._check_result_status(result, ResultStatus, ResultStatus.SUCCESS)\nself._check_object_type(result.object_type, ObjectType, ObjectType.\n    SYMMETRIC_KEY)\nself._check_uuid(result.uuid, str)\nsecret = result.secret\nexpected = SymmetricKey\nself.assertIsInstance(secret, expected)\nkey_block = result.secret.key_block\nkey_value = key_block.key_value\nkey_material = key_value.key_material\nexpected = key_data\nobserved = key_material.value\nself.assertEqual(expected, observed)\nself.logger.debug('Destroying key: ' + key_name + '\\nWith UUID: ' + result.uuid\n    )\nresult = self.client.destroy(result.uuid)\nself._check_result_status(result, ResultStatus, ResultStatus.SUCCESS)\nself._check_uuid(result.uuid.value, str)\nresult = self.client.get(uuid=uuid, credential=None)\nself._check_result_status(result, ResultStatus, ResultStatus.OPERATION_FAILED)\nexpected = ResultReason\nobserved = type(result.result_reason.value)\nself.assertEqual(expected, observed)\nexpected = ResultReason.ITEM_NOT_FOUND\nobserved = result.result_reason.value\nself.assertEqual(expected, observed)\n"
}