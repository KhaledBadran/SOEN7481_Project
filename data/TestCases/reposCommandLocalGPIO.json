{
    "functionName": "CommandLocalGPIO",
    "className": "faraday_commands",
    "fileName": "/FaradayRF_&_Faraday-Software/faraday_&_proxyio_&_faradaycommands.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"\n        A predefined command to return a complete command datagram and command packet to create a generic GPIO ON/OFF bitmask command.\n\n        :param p3_bitmask_on: A 1 byte bitmask for PORT 3 GPIO that if bit HIGH it will toggle the corresponding GPIO HIGH. If bit is LOW it will have no affect on the corresponding GPIO.\n        :param p4_bitmask_on: A 1 byte bitmask for PORT 4 GPIO that if bit HIGH it will toggle the corresponding GPIO HIGH. If bit is LOW it will have no affect on the corresponding GPIO.\n        :param p5_bitmask_on: A 1 byte bitmask for PORT 5 GPIO that if bit HIGH it will toggle the corresponding GPIO HIGH. If bit is LOW it will have no affect on the corresponding GPIO.\n        :param p3_bitmask_off: A 1 byte bitmask for PORT 3 GPIO that if bit HIGH it will toggle the corresponding GPIO LOW. If bit is LOW it will have no affect on the corresponding GPIO.\n        :param p4_bitmask_off: A 1 byte bitmask for PORT 4 GPIO that if bit HIGH it will toggle the corresponding GPIO LOW. If bit is LOW it will have no affect on the corresponding GPIO.\n        :param p5_bitmask_off: A 1 byte bitmask for PORT 5 GPIO that if bit HIGH it will toggle the corresponding GPIO LOW. If bit is LOW it will have no affect on the corresponding GPIO.\n\n        :Return: Returns the complete generated packet as a string of bytes.\n\n\n        :Example:\n\n        >>> faraday_cmd = faradaycommands.faraday_commands()\n        #Turn ON LED 1\n        >>> command_packet = faraday_cmd.CommandLocalGPIO(faradaycommands.gpioallocations.LED_1, 0,0,0,0,0)\n        #Turn OFF LED 1\n        >>> command_packet = faraday_cmd.CommandLocalGPIO(0, 0,0,faradaycommands.gpioallocations.LED_1,0,0)\n        #Turn ON LED 1 & LED 2\n        >>> command_packet = faraday_cmd.CommandLocalGPIO(faradaycommands.gpioallocations.LED_1 | faradaycommands.gpioallocations.LED_2, 0,0,0,0,0)\n\n        \"\"\"\npacket = commandmodule.create_command_datagram(self.CMD_GPIO, commandmodule\n    .create_gpio_command_packet(p3_bitmask_on, p4_bitmask_on, p5_bitmask_on,\n    p3_bitmask_off, p4_bitmask_off, p5_bitmask_off))\nreturn packet\n"
}