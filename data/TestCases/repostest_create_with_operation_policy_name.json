{
    "functionName": "test_create_with_operation_policy_name",
    "className": "TestProxyKmipClient",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_pie_&_test_client.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test that a symmetric key can be created with proper inputs,\n        specifically testing that the operation policy name is correctly\n        sent with the request.\n        \"\"\"\nalgorithm = enums.CryptographicAlgorithm.AES\nlength = 256\nalgorithm_attribute = self.attribute_factory.create_attribute(enums.\n    AttributeType.CRYPTOGRAPHIC_ALGORITHM, algorithm)\nlength_attribute = self.attribute_factory.create_attribute(enums.\n    AttributeType.CRYPTOGRAPHIC_LENGTH, length)\nmask_attribute = self.attribute_factory.create_attribute(enums.\n    AttributeType.CRYPTOGRAPHIC_USAGE_MASK, [enums.CryptographicUsageMask.\n    ENCRYPT, enums.CryptographicUsageMask.DECRYPT])\nopn_attribute = self.attribute_factory.create_attribute(enums.AttributeType\n    .OPERATION_POLICY_NAME, 'test')\nkey_attributes = [algorithm_attribute, length_attribute, mask_attribute,\n    opn_attribute]\ntemplate = obj.TemplateAttribute(attributes=key_attributes)\nkey_id = 'aaaaaaaa-1111-2222-3333-ffffffffffff'\nstatus = enums.ResultStatus.SUCCESS\nresult = results.CreateResult(contents.ResultStatus(status), uuid=attr.\n    UniqueIdentifier(key_id))\nwith ProxyKmipClient() as client:\n    client.proxy.create.return_value = result\n    client.create(algorithm, length, operation_policy_name='test')\n    client.proxy.create.assert_called_with(enums.ObjectType.SYMMETRIC_KEY,\n        template)\nmock.patch('kmip.pie.client.KMIPProxy', mock.MagicMock(spec_set=KMIPProxy))"
}