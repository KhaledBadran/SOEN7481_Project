{
    "functionName": "test_handshake",
    "className": "AWS",
    "fileName": "/al-niessner_&_DAWGIE/Test_&_test_02.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "global _https_in, _https_out, _sqs_in, _sqs_out\nkdir = tempfile.mkdtemp()\n_pgp = gnupg.GPG(gnupghome=kdir)\nab = _pgp.gen_key(_pgp.gen_key_input(key_type='DSA', subkey_type='DSA',\n    passphrase='1234567890', name_email='aws-bot@cloud.com', name_real=\n    'aws-bot'))\ndb = _pgp.gen_key(_pgp.gen_key_input(key_type='DSA', subkey_type='DSA',\n    passphrase='1234567890', name_email='dawgie-bot@cloud.com', name_real=\n    'dawgie-bot'))\nwith open(os.path.join(kdir, 'dawgie.aws.pub'), 'tw') as f:\n    f.write(_pgp.export_keys([ab.fingerprint], passphrase='1234567890'))\nwith open(os.path.join(kdir, 'dawgie.aws.sec'), 'tw') as f:\n    f.write(_pgp.export_keys([ab.fingerprint], secret=True, passphrase=\n        '1234567890'))\nwith open(os.path.join(kdir, 'dawgie.bot.pub'), 'tw') as f:\n    f.write(_pgp.export_keys([db.fingerprint], passphrase='1234567890'))\nwith open(os.path.join(kdir, 'dawgie.bot.sec'), 'tw') as f:\n    f.write(_pgp.export_keys([db.fingerprint], secret=True, passphrase=\n        '1234567890'))\ndawgie.security.initialize(kdir)\n_https_in, _https_out = multiprocessing.Queue(), multiprocessing.Queue()\noriginals = (dawgie.pl.worker.aws._advertise, dawgie.pl.worker.aws.\n    _interview, dawgie.pl.worker.aws._hire, dawgie.pl.worker.aws.\n    _https_push, dawgie.pl.worker.aws._sqs_pop, dawgie.pl.worker.aws._sqs_push)\n_sqs_in, _sqs_out = multiprocessing.Queue(), multiprocessing.Queue()\ntask = multiprocessing.Process(target=_aws, args=(_https_out, _https_in,\n    _sqs_out, _sqs_in, kdir))\ntask.start()\n_subs()\ndo = dawgie.pl.worker.aws.Connect(dawgie.pl.message.make(val=kdir),\n    _respond, _callLater)\ndo.advertise()\nself.assertFalse(AWS.failed)\ntask.join()\nmsg = _sqs_in.get()\n_subs(originals)\ntry:\n    shutil.rmtree(kdir)\nexcept FileNotFoundError:\n    print('failed to clean up')\nself.assertTrue('id' in msg)\nself.assertTrue('payload' in msg)\nself.assertTrue('pubkey' in msg)\nself.assertTrue('seckey' in msg)\nm = dawgie.pl.message.loads(base64.b64decode(msg['payload']))\nself.assertEqual(kdir, m.values)\nreturn\n"
}