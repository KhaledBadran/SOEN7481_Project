{
    "functionName": "test_find_islands",
    "className": null,
    "fileName": "/PaulHancock_&_Aegean/tests_&_test_source_finder.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "im = np.ones((10, 12), dtype=np.float32)\nbkg = np.zeros_like(im)\nrms = np.ones_like(im)\nislands = sf.find_islands(im, bkg, rms)\nif len(islands) != 0:\n    return AssertionError('Found islands where none existed')\nim[3:6, 4:7] *= 10\nim[6, 5] = np.nan\nim[4, 4] = 0\nim[0:3, :] = im[-1:, :] = np.nan\nim[:, (0)] = im[:, (-1)] = np.nan\nislands = sf.find_islands(im, bkg, rms, log=log)\nif len(islands) != 1:\n    raise AssertionError('Incorrect number of islands found {0}, expecting 1'\n        .format(len(islands)))\nif not isinstance(islands[0], models.PixelIsland):\n    raise AssertionError('Islands[0] is not a PixelIsland but instead a {0}'\n        .format(type(islands[0])))\ncorrect_box = [[3, 6], [4, 7]]\nif not np.all(islands[0].bounding_box == correct_box):\n    raise AssertionError('Bounding box incorrect, should be {0}, but is {1}'\n        .format(correct_box, islands[0].bounding_box))\nim[7:9, 2:5] = 4.5\nislands = sf.find_islands(im, bkg, rms, log=log)\nif len(islands) != 1:\n    raise AssertionError('Incorrect number of islands found {0}, expecting 1'\n        .format(len(islands)))\nreturn\n"
}