{
    "functionName": "pendular_ring",
    "className": null,
    "fileName": "/pmeal_&_OpenPNM/openpnm_&_models_&_geometry_&_throat_volume.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"\n    Calculates the volume of the pendular rings residing between the end of\n    a cylindrical throat and spherical pores that are in contact but not\n    overlapping.\n\n    This volume should be added to the throat volume if the throat length was\n    found as the center-to-center distance less the pore radii.\n\n    Parameters\n    ----------\n    throat_diameter : string\n        The dictionary keys containing the array with the throat diameter\n        values.\n    pore_diameter : string\n        The dictionary keys containing the array with the pore diameter\n        values.\n\n    Returns\n    -------\n    volume : ND-array\n        The volume that should be added to each throat volume to account for\n        under-represented void volume at the pore-throat junctions.\n\n    Notes\n    -----\n    This model does NOT consider the possibility that multiple throats might\n    overlap in the same location which could happen if throats are large and\n    connectivity is random.\n\n    See Also\n    --------\n    lens\n    \"\"\"\nnetwork = target.network\nconns = network['throat.conns']\nRp = target[pore_diameter]\nRt = target[throat_diameter]\na = _np.atleast_2d(Rt).T\nq = _np.arcsin(a / Rp[conns])\nb = Rp[conns] * _np.cos(q)\nh = Rp[conns] - b\nVlens = 1 / 6 * _np.pi * h * (3 * a ** 2 + h ** 2)\nVcyl = _np.pi * a ** 2 * h\nV = Vcyl - Vlens\nreturn _np.sum(V, axis=1)\n"
}