{
    "functionName": "test_get_model_from_generator_run",
    "className": "ModelRegistryTest",
    "fileName": "/facebook_&_Ax/ax_&_modelbridge_&_tests_&_test_registry.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"Tests that it is possible to restore a model from a generator run it\n        produced, if `Models` registry was used.\n        \"\"\"\nexp = get_branin_experiment()\ninitial_sobol = Models.SOBOL(experiment=exp, seed=239)\ngr = initial_sobol.gen(n=1)\nsobol = get_model_from_generator_run(generator_run=gr, experiment=exp, data\n    =exp.fetch_data(), after_gen=False)\nself.assertEqual(sobol.model.init_position, 0)\nself.assertEqual(sobol.model.seed, 239)\nsobol_after_gen = get_model_from_generator_run(generator_run=gr, experiment\n    =exp, data=exp.fetch_data())\nself.assertEqual(sobol_after_gen.model.init_position, 1)\nself.assertEqual(sobol_after_gen.model.seed, 239)\nself.assertEqual(initial_sobol.gen(n=1).arms, sobol_after_gen.gen(n=1).arms)\nexp.new_trial(generator_run=gr)\ngpei = Models.GPEI(experiment=exp, data=get_branin_data())\ngr._model_key = 'GPEI'\ngr._model_kwargs = gpei._model_kwargs\ngr._bridge_kwargs = gpei._bridge_kwargs\ngpei_restored = get_model_from_generator_run(gr, experiment=exp, data=\n    get_branin_data())\nfor key in gpei.__dict__:\n    self.assertIn(key, gpei_restored.__dict__)\n    original, restored = gpei.__dict__[key], gpei_restored.__dict__[key]\n    if key in ['fit_time', 'fit_time_since_gen', 'model', 'training_data']:\n        continue\n    if isinstance(original, OrderedDict) and isinstance(restored, OrderedDict):\n        original, restored = list(original.keys()), list(restored.keys())\n    if isinstance(original, Model) and isinstance(restored, Model):\n        continue\n        self.assertEqual(original, restored)\nfor key in gpei.model.__dict__:\n    self.assertIn(key, gpei_restored.model.__dict__)\n    original, restored = gpei.model.__dict__[key\n        ], gpei_restored.model.__dict__[key]\n    if key in ['model', 'warm_start_refitting', 'Xs', 'Ys']:\n        continue\n    self.assertEqual(original, restored)\npatch(f'{Observation.__module__}.current_timestamp_in_millis', return_value\n    =123456789)"
}