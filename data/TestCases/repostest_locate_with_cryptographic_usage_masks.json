{
    "functionName": "test_locate_with_cryptographic_usage_masks",
    "className": "TestKmipEngine",
    "fileName": "/OpenKMIP_&_PyKMIP/kmip_&_tests_&_unit_&_services_&_server_&_test_engine.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n        Test the Locate operation when 'Cryptographic Usage Mask' values are\n        given.\n        \"\"\"\ne = engine.KmipEngine()\ne._data_store = self.engine\ne._data_store_session_factory = self.session_factory\ne._data_session = e._data_store_session_factory()\ne._is_allowed_by_operation_policy = mock.Mock(return_value=True)\ne._logger = mock.MagicMock()\nkey = b'\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\nobj_a = pie_objects.SymmetricKey(enums.CryptographicAlgorithm.AES, 128, key,\n    name='name1')\nobj_a.cryptographic_usage_masks = [enums.CryptographicUsageMask.EXPORT,\n    enums.CryptographicUsageMask.ENCRYPT, enums.CryptographicUsageMask.DECRYPT]\nobj_b = pie_objects.SecretData(key, enums.SecretDataType.PASSWORD)\nobj_b.cryptographic_usage_masks = [enums.CryptographicUsageMask.EXPORT]\ne._data_session.add(obj_a)\ne._data_session.add(obj_b)\ne._data_session.commit()\ne._data_session = e._data_store_session_factory()\nid_a = str(obj_a.unique_identifier)\nid_b = str(obj_b.unique_identifier)\nattribute_factory = factory.AttributeFactory()\nattrs = [attribute_factory.create_attribute(enums.AttributeType.\n    CRYPTOGRAPHIC_USAGE_MASK, [enums.CryptographicUsageMask.EXPORT])]\npayload = payloads.LocateRequestPayload(attributes=attrs)\ne._logger.reset_mock()\nresponse_payload = e._process_locate(payload)\ne._data_session.commit()\ne._data_session = e._data_store_session_factory()\ne._logger.info.assert_any_call('Processing operation: Locate')\ne._logger.debug.assert_any_call('Locate filter matched object: {}'.format(id_a)\n    )\ne._logger.debug.assert_any_call('Locate filter matched object: {}'.format(id_b)\n    )\nself.assertEqual(2, len(response_payload.unique_identifiers))\nself.assertIn(id_a, response_payload.unique_identifiers)\nself.assertIn(id_b, response_payload.unique_identifiers)\nattrs = [attribute_factory.create_attribute(enums.AttributeType.\n    CRYPTOGRAPHIC_USAGE_MASK, [enums.CryptographicUsageMask.ENCRYPT])]\npayload = payloads.LocateRequestPayload(attributes=attrs)\ne._logger.reset_mock()\nresponse_payload = e._process_locate(payload)\ne._data_session.commit()\ne._data_session = e._data_store_session_factory()\ne._logger.info.assert_any_call('Processing operation: Locate')\ne._logger.debug.assert_any_call('Locate filter matched object: {}'.format(id_a)\n    )\ne._logger.debug.assert_any_call(\n    'Failed match: the specified cryptographic usage mask (ENCRYPT) is not set on the object.'\n    )\nself.assertEqual(1, len(response_payload.unique_identifiers))\nself.assertIn(id_a, response_payload.unique_identifiers)\nattrs = [attribute_factory.create_attribute(enums.AttributeType.\n    CRYPTOGRAPHIC_USAGE_MASK, [enums.CryptographicUsageMask.SIGN])]\npayload = payloads.LocateRequestPayload(attributes=attrs)\ne._logger.reset_mock()\nresponse_payload = e._process_locate(payload)\ne._data_session.commit()\ne._data_session = e._data_store_session_factory()\ne._logger.info.assert_any_call('Processing operation: Locate')\ne._logger.debug.assert_any_call(\n    'Failed match: the specified cryptographic usage mask (SIGN) is not set on the object.'\n    )\ne._logger.debug.assert_any_call(\n    'Failed match: the specified cryptographic usage mask (SIGN) is not set on the object.'\n    )\nself.assertEqual(0, len(response_payload.unique_identifiers))\n"
}