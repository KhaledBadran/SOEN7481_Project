{
    "functionName": "test_simple_circuits",
    "className": "CompareWithDefaultQubitTest",
    "fileName": "/XanaduAI_&_PennyLane-PQ/tests_&_test_compare_with_default_qubit.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"Automatically compare the behavior on simple circuits\"\"\"\nself.logTestName()\nclass IgnoreOperationException(Exception):\n    pass\noutputs = {}\nrnd_int_pool = np.random.randint(0, 5, 100)\nrnd_float_pool = np.random.randn(100)\nrandom_ket = np.random.uniform(-1, 1, 2 ** self.num_subsystems)\nrandom_ket = random_ket / np.linalg.norm(random_ket)\nrandom_zero_one_pool = np.random.randint(2, size=100)\nfor dev in self.devices:\n    for operation in dev.operations:\n        if operation in 'DiagonalQubitUnitary':\n            continue\n        for observable in dev.observables:\n            log.info('Running device ' + dev.short_name +\n                ' with a circuit consisting of a ' + operation +\n                ' Operation followed by a ' + observable + ' Expectation')\n\n            @qml.qnode(dev)\n            def circuit():\n                if hasattr(qml, operation):\n                    operation_class = getattr(qml, operation)\n                else:\n                    operation_class = getattr(pennylane_pq, operation)\n                if hasattr(qml.ops, observable):\n                    observable_class = getattr(qml.ops, observable)\n                else:\n                    observable_class = getattr(pennylane_pq.expval, observable)\n                if operation_class.num_wires > self.num_subsystems:\n                    raise IgnoreOperationException(\n                        'Skipping in automatic test because the operation ' +\n                        operation +\n                        ' acts on more than the default number of wires ' +\n                        str(self.num_subsystems) +\n                        '. Maybe you want to increase that?')\n                if observable_class.num_wires > self.num_subsystems:\n                    raise IgnoreOperationException(\n                        'Skipping in automatic test because the observable ' +\n                        observable +\n                        ' acts on more than the default number of wires ' +\n                        str(self.num_subsystems) +\n                        '. Maybe you want to increase that?')\n                if operation_class.par_domain == 'N':\n                    operation_pars = rnd_int_pool[:operation_class.num_params]\n                elif operation_class.par_domain == 'R':\n                    operation_pars = np.abs(rnd_float_pool[:operation_class\n                        .num_params])\n                elif operation_class.par_domain == 'A':\n                    if str(operation) == 'QubitUnitary':\n                        operation_pars = [np.array([[1, 0], [0, -1]])]\n                    elif str(operation) == 'QubitStateVector':\n                        operation_pars = [np.array(random_ket)]\n                    elif str(operation) == 'BasisState':\n                        operation_pars = [random_zero_one_pool[:self.\n                            num_subsystems]]\n                        operation_class.num_wires = self.num_subsystems\n                    else:\n                        raise IgnoreOperationException(\n                            \"Skipping in automatic test because I don't know how to generate parameters for the operation \"\n                             + operation)\n                else:\n                    operation_pars = {}\n                if observable_class.par_domain == 'N':\n                    observable_pars = rnd_int_pool[:observable_class.num_params\n                        ]\n                elif observable_class.par_domain == 'R':\n                    observable_pars = np.abs(rnd_float_pool[:\n                        observable_class.num_params])\n                elif observable_class.par_domain == 'A':\n                    if str(observable) == 'Hermitian':\n                        observable_pars = [np.array([[1, 1.0j], [-1.0j, 0]])]\n                    else:\n                        raise IgnoreOperationException(\n                            \"Skipping in automatic test because I don't know how to generate parameters for the observable \"\n                             + observable + ' with par_domain=' + str(\n                            observable_class.par_domain))\n                else:\n                    observable_pars = {}\n                operation_wires = list(range(operation_class.num_wires)\n                    ) if operation_class.num_wires > 1 else 0\n                observable_wires = list(range(observable_class.num_wires)\n                    ) if observable_class.num_wires > 1 else 0\n                if str(operation) == 'QubitStateVector':\n                    operation_wires = range(self.num_subsystems)\n                operation_class(*operation_pars, wires=operation_wires)\n                return qml.expval(observable_class(*observable_pars, wires=\n                    observable_wires))\n            output = circuit()\n            if (operation, observable) not in outputs:\n                outputs[operation, observable] = {}\n            outputs[operation, observable][str(type(dev).__name__) +\n                '(shots=' + str(dev.shots) + ')'] = output\nfor key, val in outputs.items():\n    if len(val) >= 2:\n        self.assertAllElementsAlmostEqual(val.values(), delta=self.tol, msg\n            ='Outputs ' + str(list(val.values())) + ' of devices [' + ', '.\n            join(list(val.keys())) +\n            '] do not agree for a circuit consisting of a ' + str(key[0]) +\n            ' Operation followed by a ' + str(key[1]) + ' Expectation.')\n"
}