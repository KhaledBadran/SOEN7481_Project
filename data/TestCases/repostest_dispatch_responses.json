{
    "functionName": "test_dispatch_responses",
    "className": null,
    "fileName": "/tutorgen_&_HPIT-python-client/tests_&_hpitclient_&_test_message_sender_mixin.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "\"\"\"\n    MessageSenderMixin._dispatch_responses() Test plan:\n        -Ensure False returned if pre_dispatch_responses hook returns false\n        -Ensure False returned if post_dispatch_responses hook returns false\n        -Catch invalid response from hpit on [message][id]\n        -Catch invaled response from hpit on [response]\n        -Catch no callback exception\n        -Catch not callable error\n        -Ensure true returned on completions\n     \"\"\"\nbad_response = [{'bad_response': 'boo'}]\nbad_response2 = [{'message': {'message_id': '4'}}]\ngood_response = [{'message': {'message_id': '4'}, 'response': {'data': '2'}}]\ndef returnFalse():\n    return False\ndef returnTrue():\n    return True\ndef callback1(payload):\n    return True\ntest_message_sender_mixin = MessageSenderMixin()\ntest_message_sender_mixin.send_log_entry = MagicMock()\ntest_message_sender_mixin.outstanding_responses['4'] = 1\ntest_message_sender_mixin.response_callbacks['4'] = callback1\nsetattr(test_message_sender_mixin, 'pre_dispatch_responses', returnFalse)\nsetattr(test_message_sender_mixin, 'post_dispatch_responses', returnTrue)\ntest_message_sender_mixin._dispatch_responses(good_response).should.equal(False\n    )\nsetattr(test_message_sender_mixin, 'pre_dispatch_responses', returnTrue)\nsetattr(test_message_sender_mixin, 'post_dispatch_responses', returnFalse)\ntest_message_sender_mixin._dispatch_responses(good_response).should.equal(False\n    )\nsetattr(test_message_sender_mixin, 'pre_dispatch_responses', returnTrue)\nsetattr(test_message_sender_mixin, 'post_dispatch_responses', returnTrue)\ntest_message_sender_mixin._dispatch_responses(bad_response)\ntest_message_sender_mixin.send_log_entry.assert_called_once_with(\n    'Invalid response from HPIT. No message id supplied in response.')\ntest_message_sender_mixin.send_log_entry.reset_mock()\ntest_message_sender_mixin._dispatch_responses(bad_response2)\ntest_message_sender_mixin.send_log_entry.assert_called_once_with(\n    'Invalid response from HPIT. No response payload supplied.')\ndel test_message_sender_mixin.response_callbacks['4']\ntest_message_sender_mixin.send_log_entry.reset_mock()\ntest_message_sender_mixin._dispatch_responses(good_response)\ntest_message_sender_mixin.send_log_entry.assert_called_once_with(\n    'No callback registered for message id: 4')\ntest_message_sender_mixin.response_callbacks['4'] = 5\ntest_message_sender_mixin.send_log_entry.reset_mock()\ntest_message_sender_mixin._dispatch_responses(good_response)\ntest_message_sender_mixin.send_log_entry.assert_called_once_with(\n    'Callback registered for transcation id: 4 is not a callable.')\ntest_message_sender_mixin.outstanding_responses['4'] = 1\ntest_message_sender_mixin.response_callbacks['4'] = callback1\ntest_message_sender_mixin._dispatch_responses(good_response).should.equal(True)\ntest_message_sender_mixin.outstanding_responses.should.be.empty\n"
}