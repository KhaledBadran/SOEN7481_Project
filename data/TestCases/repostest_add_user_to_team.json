{
    "functionName": "test_add_user_to_team",
    "className": "TestCrossEnterpriseCommands",
    "fileName": "/Keeper-Security_&_Commander/tests_&_test_cross_commands.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "param1 = TestCrossEnterpriseCommands.params1\nparam2 = TestCrossEnterpriseCommands.params2\nusers = [x for x in param2.enterprise['users'] if x['username'] != param2.user]\nself.assertGreater(len(users), 0, 'cannot resolve user')\nuser = users[0]\nent2_user_id = user['enterprise_user_id']\ncmd = EnterpriseUserCommand()\npk = cmd.get_public_key(param2, user['username'])\nuids = []\nif 'teams' in param1.enterprise:\n    uids = [x['team_uid'] for x in param1.enterprise['teams']]\nteam_cmd = EnterpriseTeamCommand()\nif len(uids) == 0:\n    team_cmd.execute(param1, add=True, team=['Team1'])\n    uids = [x['team_uid'] for x in param1.enterprise['teams']]\nself.assertGreater(len(uids), 0, 'cannot resolve team')\nent1_team_uid = uids[0]\nteam_key = team_cmd.get_team_key(param1, ent1_team_uid)\nself.assertIsNotNone(team_key)\nrq = {'command': 'team_enterprise_user_add', 'team_uid': ent1_team_uid,\n    'enterprise_user_id': ent2_user_id, 'user_type': 0, 'team_key': api.\n    encrypt_rsa(team_key, pk)}\nfailed = False\ntry:\n    api.communicate(param1, rq)\nexcept KeeperApiError as err:\n    failed = True\n    self.assertEqual(err.result_code, 'bad_inputs_enterprise_user_id')\nself.assertTrue(failed)\nfailed = False\ntry:\n    api.communicate(param2, rq)\nexcept KeeperApiError as err:\n    failed = True\n    self.assertEqual(err.result_code, 'access_denied')\nself.assertTrue(failed)\nrq = {'command': 'team_delete', 'team_uid': ent1_team_uid}\nfailed = False\ntry:\n    api.communicate(param2, rq)\nexcept KeeperApiError as err:\n    failed = True\n    self.assertEqual(err.result_code, 'access_denied')\nself.assertTrue(failed)\n"
}