{
    "functionName": "test_sampling_filenames",
    "className": null,
    "fileName": "/FreeDiscovery_&_FreeDiscovery/freediscovery_&_engine_&_tests_&_test_vectorizer.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "cache_dir = check_cache()\nfe_pars = {'weighting': 'bnn'}\nfe = FeatureVectorizer(cache_dir=cache_dir, mode='w')\nwith pytest.warns(UserWarning):\n    uuid = fe.setup(use_hashing=True, **fe_pars)\n    fe.ingest(data_dir, file_pattern='.*\\\\d.txt')\nX = fe._load_features(uuid)\nfes = _FeatureVectorizerSampled(cache_dir=cache_dir, dsid=uuid,\n    sampling_filenames=None)\nX_s = fes._load_features(uuid)\npars = fe.pars_\nfnames = fe.filenames_\nfnames_s = fes.filenames_\nassert_array_equal(fnames, fnames_s)\nassert_array_equal(X.data, X_s.data)\nassert fes.n_samples_ == len(fnames)\nfes = _FeatureVectorizerSampled(cache_dir=cache_dir, dsid=uuid,\n    sampling_filenames=fnames[::-1])\nassert fes.sampling_index is not None\nX_s = fes._load_features(uuid)\npars_s = fes.pars_\nfnames_s = fes.filenames_\nassert_array_equal(fnames[::-1], fnames_s)\nassert_array_equal(X[::-1, :].data, X_s.data)\nfor key in pars:\n    if key == 'filenames':\n        assert pars[key][::-1] == pars_s[key]\n    else:\n        assert pars[key] == pars_s[key]\nfes = _FeatureVectorizerSampled(cache_dir=cache_dir, dsid=uuid,\n    sampling_filenames=fnames + fnames)\nassert fes.sampling_index is not None\nX_s = fes._load_features(uuid)\npars_s = fes.pars_\nfnames_s = fes.filenames_\nassert_array_equal(fnames + fnames, fnames_s)\nassert_array_equal(X.data, X_s[:len(fnames)].data)\nassert_array_equal(X.data, X_s[len(fnames):].data)\nassert fes.n_samples_ == len(fnames) * 2\nN = len(fnames) // 2\nnp.random.seed(1)\nidx = np.random.choice(fe.n_samples_, size=(N,))\nfnames_s_in = np.array(fnames)[idx].tolist()\nfes = _FeatureVectorizerSampled(cache_dir=cache_dir, dsid=uuid,\n    sampling_filenames=fnames_s_in)\nassert fes.sampling_index is not None\nX_s = fes._load_features(uuid)\npars_s = fes.pars_\nfnames_s = fes.filenames_\nassert_array_equal(fnames_s_in, fnames_s)\nassert_array_equal(X[idx].data, X_s.data)\nassert fes.n_samples_ == N\nfe.delete()\n"
}