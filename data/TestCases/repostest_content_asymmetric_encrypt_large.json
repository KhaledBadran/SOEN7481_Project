{
    "functionName": "test_content_asymmetric_encrypt_large",
    "className": "TestEncryptor",
    "fileName": "/named-data_&_PyNDN2/tests_&_unit_tests_&_test_encryptor.py",
    "projectName": "repos",
    "Label": false,
    "isTest": true,
    "Body": "for input in encryptorRsaTestInputs:\n    largeContent = Blob(bytearray([115, 90, 189, 71, 12, 254, 248, 125, 46,\n        23, 170, 17, 111, 35, 197, 16, 35, 54, 136, 196, 42, 15, 154, 114, \n        84, 49, 168, 179, 81, 24, 159, 14, 27, 147, 98, 217, 196, 245, 244,\n        61, 97, 154, 202, 5, 101, 107, 198, 65, 249, 213, 28, 103, 193, 208,\n        213, 111, 123, 112, 184, 143, 219, 25, 104, 124, 224, 45, 4, 73, \n        169, 162, 119, 78, 252, 96, 13, 124, 27, 147, 108, 210, 97, 196, \n        107, 1, 233, 18, 40, 109, 245, 120, 233, 153, 11, 156, 79, 144, 52,\n        62, 6, 146, 87, 227, 122, 143, 19, 199, 243, 254, 240, 226, 89, 72,\n        21, 185, 219, 119, 7, 29, 109, 181, 101, 23, 223, 118, 111, 181, 67,\n        222, 113, 172, 241, 34, 191, 178, 229, 217, 34, 241, 103, 118, 113,\n        12, 255, 153, 123, 148, 155, 36, 32, 128, 227, 204, 6, 74, 237, 223,\n        236, 80, 213, 135, 61, 160, 125, 156, 229, 19, 16, 152, 20, 195, \n        144, 16, 217, 37, 154, 89, 233, 55, 38, 253, 135, 215, 244, 249, 17,\n        145, 173, 92, 0, 149, 245, 43, 55, 247, 78, 180, 75, 66, 124, 179, \n        173, 214, 51, 95, 11, 132, 87, 127, 167, 7, 115, 55, 75, 171, 46, \n        251, 254, 30, 203, 182, 74, 193, 33, 95, 236, 146, 183, 172, 151, \n        117, 32, 201, 216, 158, 147, 213, 18, 122, 100, 185, 76, 237, 73, \n        135, 68, 91, 79, 144, 52, 62, 6, 146, 87, 227, 122, 143, 19, 199, \n        243, 254, 240, 226, 89, 72, 21, 185, 219, 119, 7, 29, 109, 181, 101,\n        23, 223, 118, 111, 181, 67, 222, 113, 172, 241, 34, 191, 178, 229, \n        217]), False)\n    data = Data()\n    rsaParams = RsaKeyParams(1024)\n    keyName = Name('test')\n    decryptKey = RsaAlgorithm.generateKey(rsaParams)\n    encryptKey = RsaAlgorithm.deriveEncryptKey(decryptKey.getKeyBits())\n    eKey = encryptKey.getKeyBits()\n    dKey = decryptKey.getKeyBits()\n    encryptParams = EncryptParams(input.type)\n    Encryptor.encryptData(data, largeContent, keyName, eKey, encryptParams)\n    self.assertTrue(data.getName().equals(Name('/FOR').append(keyName)),\n        input.testName)\n    largeDataContent = data.getContent()\n    encryptedNonce = EncryptedContent()\n    encryptedNonce.wireDecode(largeDataContent)\n    self.assertTrue(keyName.equals(encryptedNonce.getKeyLocator().\n        getKeyName()), input.testName)\n    self.assertEqual(encryptedNonce.getInitialVector().size(), 0, input.\n        testName)\n    self.assertEqual(encryptedNonce.getAlgorithmType(), input.type, input.\n        testName)\n    payloadContent = largeDataContent.buf()[encryptedNonce.wireEncode().size():\n        ]\n    encryptedPayload = EncryptedContent()\n    encryptedPayload.wireDecode(payloadContent)\n    nonceKeyName = Name(keyName)\n    nonceKeyName.append('nonce')\n    self.assertTrue(nonceKeyName.equals(encryptedPayload.getKeyLocator().\n        getKeyName()), input.testName)\n    self.assertEqual(encryptedPayload.getInitialVector().size(), 16, input.\n        testName)\n    self.assertEqual(encryptedPayload.getAlgorithmType(),\n        EncryptAlgorithmType.AesCbc, input.testName)\n    self.assertEqual(largeDataContent.size(), encryptedNonce.wireEncode().\n        size() + encryptedPayload.wireEncode().size(), input.testName)\n    blobNonce = encryptedNonce.getPayload()\n    nonce = RsaAlgorithm.decrypt(dKey, blobNonce, encryptParams)\n    encryptParams.setAlgorithmType(EncryptAlgorithmType.AesCbc)\n    encryptParams.setInitialVector(encryptedPayload.getInitialVector())\n    bufferPayload = encryptedPayload.getPayload()\n    largePayload = AesAlgorithm.decrypt(nonce, bufferPayload, encryptParams)\n    self.assertTrue(largeContent.equals(largePayload), input.testName)\n"
}