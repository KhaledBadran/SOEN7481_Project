{
    "functionName": "_skipping_stream",
    "className": null,
    "fileName": "/PRIArobotics_&_HedgehogServer/hedgehog_&_server_&_subscription.py",
    "projectName": "repos",
    "Label": false,
    "isTest": false,
    "Body": "\"\"\"    A helper that shields an async iterable from its consumer's timing,\n    and skips any values that the consumer is too slow to retrieve.\n\n    Async iterables are only executed, like any Python generator, when it is queried (using `await __anext__()`).\n    So, consumers that block between queries influence streams' timings.\n    This context manager constantly queries the input stream in a task, i.e. without pauses between `__anext__` calls),\n    in the process discarding any values the consumer was too slow to retrieve.\n    Only one element is buffered for the consumer. Consider this order of operations:\n\n        in: 0         # value 0 arrives on the input stream\n        retrieve 0    # buffered value is retrieved by the consumer, returning immediately\n        retrieve ...  # retrieving blocks\n        in: 1\n             ... 1    # retrieving returns\n        in: 2\n        in: 3         # previous value 2 is discarded\n        retrieve 3\n        in: 4\n        in: EOF\n        retrieve 4    # when EOF is reached, the last value remains in the buffer\n        retrieve EOF\n\n    Cancelling `await __anext__()` raises `Cancelled` into the iterator, thus terminating it.\n    Therefore, another interface is used: the context manager resolves to a function that returns a tuple\n    `(value, eof)`; either `(<value>, False)` or `(None, True)`.\n    On exiting the context manager, the input stream is closed, thus cleaning up properly. Usage:\n\n        async with __skipping_stream(stream) as anext:\n            value, eof = await anext()\n            while not eof:\n                foo(value)\n                value, eof = await anext()\n    \"\"\"\nasync with trio.open_nursery() as nursery:\n    news = trio.Event()\n    has_value = False\n    eof = False\n    value = None\n\n    @nursery.start_soon\n    async def reader():\n        nonlocal has_value, eof, value\n        try:\n            async for value in stream:\n                has_value = True\n                news.set()\n            eof = True\n            news.set()\n        finally:\n            if hasattr(stream, 'aclose'):\n                await stream.aclose()\n            else:\n                pass\n\n    async def anext():\n        nonlocal has_value, eof, value\n        if not eof:\n            await news.wait()\n            news.clear()\n        if has_value:\n            has_value = False\n            return value, False\n        elif eof:\n            return None, True\n        else:\n            assert False\n    yield anext\n    nursery.cancel_scope.cancel()\nasynccontextmanager"
}